cscope 15 $HOME/Desktop/studies/15410/P2/p2 -q 0000005690 0000814608
	@410kern/boot/multiboot.h

21 #i‚de‡
_FLUX_X86_MULTIBOOT_H_


22 
	#_FLUX_X86_MULTIBOOT_H_


	)

24 
	~<ty≥s.h
>

28 
	smu…iboŸ_hódî


31 
	mmagic
;

34 
	mÊags
;

37 
	mchecksum
;

40 
vm_off£t_t
 
	mhódî_addr
;

41 
vm_off£t_t
 
	mlﬂd_addr
;

42 
vm_off£t_t
 
	mlﬂd_íd_addr
;

43 
vm_off£t_t
 
	mbss_íd_addr
;

44 
vm_off£t_t
 
	míåy
;

49 
	#MULTIBOOT_SEARCH
 8192

	)

52 
	#MULTIBOOT_MAGIC
 0x1badb002

	)

57 
	#MULTIBOOT_MUSTKNOW
 0x0000ffff

	)

60 
	#MULTIBOOT_PAGE_ALIGN
 0x00000001

	)

63 
	#MULTIBOOT_MEMORY_INFO
 0x00000002

	)

69 
	#MULTIBOOT_AOUT_KLUDGE
 0x00010000

	)

73 
	#MULTIBOOT_VALID
 0x2badb002

	)

77 
	smu…iboŸ_öfo


81 
	mÊags
;

85 
vm_size_t
 
	mmem_lowî
;

86 
vm_size_t
 
	mmem_uµî
;

90 
	mboŸ_devi˚
[4];

94 
vm_off£t_t
 
	mcmdlöe
;

98 
	mmods_cou¡
;

99 
vm_off£t_t
 
	mmods_addr
;

108 
vm_size_t
 
	mèbsize
;

109 
vm_size_t
 
	m°rsize
;

110 
vm_off£t_t
 
	maddr
;

111 
	mª£rved
;

112 } 
	ma
;

118 
	mnum
;

119 
vm_size_t
 
	msize
;

120 
vm_off£t_t
 
	maddr
;

121 
	mshndx
;

122 } 
	me
;

123 } 
	msyms
;

127 
vm_size_t
 
	mmm≠_cou¡
;

128 
vm_off£t_t
 
	mmm≠_addr
;

131 
mu…iboŸ_öfo
 
	tmböfo_t
;

133 
	#MULTIBOOT_MEMORY
 (1L<<0)

	)

134 
	#MULTIBOOT_BOOT_DEVICE
 (1L<<1)

	)

135 
	#MULTIBOOT_CMDLINE
 (1L<<2)

	)

136 
	#MULTIBOOT_MODS
 (1L<<3)

	)

137 
	#MULTIBOOT_AOUT_SYMS
 (1L<<4)

	)

138 
	#MULTIBOOT_ELF_SHDR
 (1L<<5)

	)

139 
	#MULTIBOOT_MEM_MAP
 (1L<<6)

	)

142 
	#MULTIBOOT_FLAGS_FORMAT
 \

143 "\20\1MEMORY\2BOOT_DEVICE\3CMDLINE\4MODS\5AOUT_SYMS\6ELF_SHDR\7MEM_MAP"

	)

147 
	smu…iboŸ_moduÀ


150 
vm_off£t_t
 
	mmod_°¨t
;

151 
vm_off£t_t
 
	mmod_íd
;

154 
vm_off£t_t
 
	m°rög
;

157 
	mª£rved
;

165 
	sAddrR™geDesc


167 
	msize
;

168 
	mBa£AddrLow
;

169 
	mBa£AddrHigh
;

170 
	mLígthLow
;

171 
	mLígthHigh
;

172 
	mTy≥
;

178 
	#MB_ARD_MEMORY
 1

	)

	@410kern/boot/util.h

1 #i‚de‡
_410KERN_MULTIBOOT_UTILS_H_


2 
	#_410KERN_MULTIBOOT_UTILS_H_


	)

4 
	~<boŸ/mu…iboŸ.h
>

5 
	~<lmm/lmm.h
>

7 
mb_utû_cmdlöe
(
mböfo_t
 *, *, ***, ***);

8 
mb_utû_lmm
(
mböfo_t
 *, 
lmm_t
 *);

	@410kern/boot/util_cmdline.c

22 
	~<boŸ/mu…iboŸ.h
>

23 
	~<boŸ/utû.h
>

24 
	~<kvmphys.h
>

25 
	~<°dlib/˘y≥.h
>

26 
	~<°dlib/°dlib.h
>

27 
	~<°rög/°rög.h
>

28 
	~<mÆloc/mÆloc_öã∫Æ.h
>

36 
	g¥og_«me
[] = "kernel";

37 *
	gnuŒ_¨gs
[2] = {
¥og_«me
, 0};

39 c⁄° 
	gdñim
[] = " \f\n\r\t\v";

41 
	$mb_utû_cmdlöe
(
mböfo_t
 *
mbi
, *
¨gc
, ***
¨gv
, ***
ívp
)

44 i‡(
mbi
->
Êags
 & 
MULTIBOOT_CMDLINE
)

46 *
˛
 = (*)
	`phy°okv
(
mbi
->
cmdlöe
);

47 
˛Àn
 = 
	`°æí
(
˛
);

48 *
èrg
[1 + 
˛Àn
], *
tv¨
[cllen];

49 
«rg
 = 0, 
nv¨
 = 0;

50 *
tok
;

54 
tok
 = 
	`°πok
(
˛
, 
dñim
);Åok;Åok = strtok(0, delim))

56 i‡(
	`°rchr
(
tok
, '='))

57 
tv¨
[
nv¨
++] = 
tok
;

59 
èrg
[
«rg
++] = 
tok
;

63 *
¨gv
 = 
	`_mÆloc
((*Ë* (
«rg
 + 
nv¨
 + 2));

64 i‡(!*
¨gv
Ë
	`∑nic
("No memoryÅoÖarse commandÜine");

66 
	`mem˝y
(*
¨gv
, 
èrg
, (*Ë* 
«rg
);

67 *
¨gv
[
«rg
] = 0;

68 *
¨gc
 = 
«rg
;

70 *
ívp
 = &*
¨gv
[
«rg
+1];

71 
	`mem˝y
(*
ívp
, 
tv¨
, (*Ë* 
nv¨
);

72 *
ívp
[
nv¨
] = 0;

77 *
¨gc
 = 1;

78 *
¨gv
 = 
nuŒ_¨gs
;

79 *
ívp
 = 
nuŒ_¨gs
 + 1;

81 
	}
}

	@410kern/boot/util_lmm.c

22 
	~<boŸ/mu…iboŸ.h
>

23 
	~<°rög/°rög.h
>

24 
	~<mÆloc/mÆloc_öã∫Æ.h
>

25 
	~<kvmphys.h
>

26 
	~<lmm/lmm_ty≥s.h
>

42 
	#LMM_PRI_1MB
 -2

	)

43 
	#LMM_PRI_16MB
 -1

	)

44 
	#LMM_PRI_HIGH
 0

	)

51 
	#LMMF_1MB
 0x01

	)

52 
	#LMMF_16MB
 0x02

	)

54 
lmm_ªgi⁄
 
	gªg1mb
, 
	gªg16mb
, 
	gªghigh
;

56 
	#skù
(
hﬁe_mö
, 
hﬁe_max
) \

57 i‡((
max
 > (
hﬁe_mö
)Ë&& (
mö
 < (
hﬁe_max
))) \

59 i‡(
mö
 < (
hﬁe_mö
)Ë
max
 = (hole_min); \

60 { 
mö
 = (
hﬁe_max
); 
ªåy
; } \

61 }

	)

63 
	$mb_utû_lmm
 (
mböfo_t
 *
mbi
, 
lmm_t
 *
lmm
)

65 
vm_off£t_t
 
mö
;

66 
_°¨t
[], 
íd
[];

69 
vm_off£t_t
 
cmdlöe_°¨t_∑
 = 
mbi
->
Êags
 & 
MULTIBOOT_CMDLINE


70 ? 
mbi
->
cmdlöe
 : 0;

71 
vm_off£t_t
 
cmdlöe_íd_∑
 = 
cmdlöe_°¨t_∑


72 ? 
cmdlöe_°¨t_∑
+
	`°æí
((*)
	`phy°okv
(cmdline_start_pa))+1

77 
	`lmm_öô
(
lmm
);

80 
	`lmm_add_ªgi⁄
(&
mÆloc_lmm
, &
ªg1mb
,

81 (*)
	`phy°okv
(0x00000000), 0x00100000,

82 
LMMF_1MB
 | 
LMMF_16MB
, 
LMM_PRI_1MB
);

83 
	`lmm_add_ªgi⁄
(&
mÆloc_lmm
, &
ªg16mb
,

84 (*)
	`phy°okv
(0x00100000), 0x00f00000,

85 
LMMF_16MB
, 
LMM_PRI_16MB
);

86 
	`lmm_add_ªgi⁄
(&
mÆloc_lmm
, &
ªghigh
,

87 (*)
	`phy°okv
(0x01000000), 0xfeffffff,

88 0, 
LMM_PRI_HIGH
);

94 
mö
 = 0x500;

97 
vm_off£t_t
 
max
 = 0xffffffff;

100 
	`skù
(
mbi
->
mem_lowî
 * 1024, 0x100000);

103 
	`skù
(0x100000 + 
mbi
->
mem_uµî
 * 1024, 0xffffffff);

106 
	`skù
(
	`kvt›hys
(
_°¨t
), kvt›hys(
íd
));

109 
__kimg_°¨t
[];

110 
	`skù
(
	`kvt›hys
(
__kimg_°¨t
), kvt›hys(
íd
));

113 
	`skù
(
cmdlöe_°¨t_∑
, 
cmdlöe_íd_∑
);

114 i‡((
mbi
->
Êags
 & 
MULTIBOOT_MODS
)

115 && (
mbi
->
mods_cou¡
 > 0))

117 
mu…iboŸ_moduÀ
 *
m
 = (multiboot_module*)

118 
	`phy°okv
(
mbi
->
mods_addr
);

119 
i
;

121 
	`skù
(
mbi
->
mods_addr
,

122 
mbi
->
mods_addr
 +

123 
mbi
->
mods_cou¡
 * (*
m
));

124 
i
 = 0; i < 
mbi
->
mods_cou¡
; i++)

126 i‡(
m
[
i
].
°rög
 != 0)

128 *
s
 = (*)
	`phy°okv
(
m
[
i
].
°rög
);

129 
Àn
 = 
	`°æí
(
s
);

130 
	`skù
(
m
[
i
].
°rög
, m[i].°rög+
Àn
+1);

132 
	`skù
(
m
[
i
].
mod_°¨t
, m[i].
mod_íd
);

139 
	`lmm_add_‰ì
(&
mÆloc_lmm
, (*Ë
mö
, 
max
 - min);

142 
mö
 = 
max
;

146 
ªåy
:;

148 
mö
 < 0xffffffff);

149 
	}
}

	@410kern/inc/asm_style.h

26 #i‚de‡
_ASM_STYLE_H_


27 
	#_ASM_STYLE_H_


	)

30 #i‚de‡
HAVE_P2ALIGN


31 
	#HAVE_P2ALIGN


	)

33 #i‚de‡
__ELF__


34 
	#__ELF__


	)

39 
	#IODELAY
 
pushl
 %
óx
; 
öb
 
$0x80
,%
Æ
; inb $0x80,%Æ; 
p›l
 %
	)
óx

41 
	#S_ARG0
 4(%
e•
)

	)

42 
	#S_ARG1
 8(%
e•
)

	)

43 
	#S_ARG2
 12(%
e•
)

	)

44 
	#S_ARG3
 16(%
e•
)

	)

46 
	#FRAME
 
pushl
 %
ebp
; 
movl
 %
e•
, %
	)
ebp

47 
	#EMARF
 
Àave


	)

49 
	#B_ARG0
 8(%
ebp
)

	)

50 
	#B_ARG1
 12(%
ebp
)

	)

51 
	#B_ARG2
 16(%
ebp
)

	)

52 
	#B_ARG3
 20(%
ebp
)

	)

54 #ifde‡
i486


55 
	#TEXT_ALIGN
 4

	)

57 
	#TEXT_ALIGN
 2

	)

59 
	#DATA_ALIGN
 2

	)

60 
	#ALIGN
 
TEXT_ALIGN


	)

67 #i‡
deföed
(
HAVE_P2ALIGN
)

68 
	#P2ALIGN
(
p2
Ë.
p2Æign
 
	)
p2

69 #ñi‡
deföed
(
__ELF__
)

70 
	#P2ALIGN
(
p2
Ë.
	`Æign
 (1<<’2))

	)

72 
	#P2ALIGN
(
p2
Ë.
Æign
 
	)
p2

75 
	#LCL
(
x
Ë
	)
x

77 
	#LB
(
x
,
n
Ë
	)
n

78 #i‚de‡
__ELF__


79 
	#EXT
(
x
Ë
_
 ## 
	)
x

80 
	#LEXT
(
x
Ë
_
 ## x ## :

	)

81 
	#SEXT
(
x
Ë"_"#x

	)

83 
	#EXT
(
x
Ë
	)
x

84 
	#LEXT
(
x
Ëx ## :

	)

85 
	#SEXT
(
x
Ë#x

	)

87 
	#GLEXT
(
x
Ë.
globl
 
	`EXT
(x); 
	`LEXT
(x)

	)

88 
	#LCLL
(
x
Ëx ## :

	)

89 
	#gLB
(
n
Ë¿## :

	)

90 
	#LBb
(
x
,
n
Ë¿## 
b


	)

91 
	#LBf
(
x
,
n
Ë¿## 
f


	)

95 #ifde‡
__ELF__


96 
	#FUNCSYM
(
x
Ë.
ty≥
 x,@
fun˘i⁄


	)

98 
	#FUNCSYM
(
x
Ë

	)

102 #ifde‡
GPROF


104 
	#MCOUNT
 .
d©a
; 
	`gLB
(9Ë.0; .
ãxt
; 
Àa
 
	`LBb
(
x
, 9),%
edx
; 
ˇŒ
 
mcou¡


	)

105 
	#ENTRY
(
x
Ë.
globl
 
	`EXT
(x); 
	`P2ALIGN
(
TEXT_ALIGN
); 
	`LEXT
(x) ; \

106 
pushl
 %
ebp
; 
movl
 %
e•
, %ebp; 
MCOUNT
; 
p›l
 %ebp;

	)

107 
	#ENTRY2
(
x
,
y
Ë.
globl
 
	`EXT
(x); .globl EXT(y); \

108 
	`P2ALIGN
(
TEXT_ALIGN
); 
	`LEXT
(
x
ËLEXT(
y
)

	)

109 
	#ASENTRY
(
x
Ë.
globl
 x; 
	`P2ALIGN
(
TEXT_ALIGN
); 
	`gLB
(x) ; \

110 
pushl
 %
ebp
; 
movl
 %
e•
, %ebp; 
MCOUNT
; 
p›l
 %ebp;

	)

114 
	#MCOUNT


	)

115 
	#ENTRY
(
x
Ë
	`FUNCSYM
(x); .
globl
 
	`EXT
(x); 
	`P2ALIGN
(
TEXT_ALIGN
); 
	`LEXT
(x)

	)

116 
	#ENTRY2
(
x
,
y
Ë.
globl
 
	`EXT
(x); .globl EXT(y); \

117 
	`P2ALIGN
(
TEXT_ALIGN
); 
	`LEXT
(
x
ËLEXT(
y
)

	)

118 
	#ASENTRY
(
x
Ë.
globl
 x; 
	`P2ALIGN
(
TEXT_ALIGN
); 
	`gLB
(x)

	)

123 
	#E¡ry
(
x
Ë
	`P2ALIGN
(
TEXT_ALIGN
); 
	`GLEXT
(x)

	)

124 
	#DATA
(
x
Ë
	`P2ALIGN
(
DATA_ALIGN
); 
	`GLEXT
(x)

	)

	@410kern/inc/assert.h

23 #i‚de‡
_ASSERT_H_


24 
	#_ASSERT_H_


	)

26 
∑nic
(c⁄° *
f‹m©
, ...);

28 
	#as£π
(
ex¥essi⁄
) \

29 (()((
ex¥essi⁄
Ë? 0 : (
	`∑nic
("%s:%u: failedássertion `%s'", \

30 
__FILE__
, 
__LINE__
, #ex¥essi⁄), 0)))

	)

	@410kern/inc/exec2obj.h

10 #i‚de‡
_EXEC2OBJ_H


11 
	#_EXEC2OBJ_H


	)

13 
	#MAX_EXECNAME_LEN
 256

	)

14 
	#MAX_NUM_APP_ENTRIES
 128

	)

18 c⁄° 
	mexe˙ame
[
MAX_EXECNAME_LEN
];

19 c⁄° * 
	mexecbyãs
;

20 
	mexe˛í
;

21 } 
	texec2obj_u£øµ_TOC_íåy
;

24 c⁄° 
	gexec2obj_u£øµ_cou¡
;

27 c⁄° 
exec2obj_u£øµ_TOC_íåy
 
	gexec2obj_u£øµ_TOC
[
MAX_NUM_APP_ENTRIES
];

	@410kern/inc/kvmphys.h

25 #i‚def 
_FLUX_X86_BASE_VM_H_


26 
	#_FLUX_X86_BASE_VM_H_


	)

28 
	~<ty≥s.h
>

37 
vm_off£t_t
 
phys_mem_va
;

40 
	#phy°okv
(
∑
Ë((
vm_off£t_t
)’aË+ 
phys_mem_va
)

	)

45 
	#kvt›hys
(
va
Ë((
vm_off£t_t
)(vaË- 
phys_mem_va
)

	)

	@410kern/inc/malloc.h

1 
	~<°dlib.h
>

2 
	~<ty≥s.h
>

4 #i‚de‡
_MALLOC_WRAPPERS_H_


5 
	#_MALLOC_WRAPPERS_H_


	)

7 *
mÆloc
(
size_t
 
size
);

8 *
memÆign
(
size_t
 
Æignmít
, size_à
size
);

9 *
ˇŒoc
(
size_t
 
√…
, size_à
ñtsize
);

10 *
ªÆloc
(*
buf
, 
size_t
 
√w_size
);

11 
‰ì
(*
buf
);

12 *
smÆloc
(
size_t
 
size
);

13 *
smemÆign
(
size_t
 
Æignmít
, size_à
size
);

14 
s‰ì
(*
buf
, 
size_t
 
size
);

	@410kern/inc/stdarg.h

1 #i‚de‡
_STDARG_H_


2 
	#_STDARG_H_


	)

8 #ifde‡
__GNUC__


9 
__buûtö_va_li°
 
	tva_li°
;

10 
	#va_°¨t
(
v
,
l
Ë
	`__buûtö_va_°¨t
(v,l)

	)

11 
	#va_íd
(
v
Ë
	`__buûtö_va_íd
(v)

	)

12 
	#va_¨g
(
v
,
l
Ë
	`__buûtö_va_¨g
(v,l)

	)

13 
	#va_c›y
(
d
,
s
Ë
	`__buûtö_va_c›y
(d,s)

	)

	@410kern/inc/stddef.h

1 #i‚de‡
_STDDEF_H_


2 
	#_STDDEF_H_


	)

4 
	~<ty≥s.h
>

6 #i‚de‡
NULL


7 
	#NULL
 ((*)0)

	)

10 
	#off£tof
(
°y≥
,
fõld
Ë((
size_t
)(&((°y≥*)
NULL
)->fõld))

	)

	@410kern/inc/stdint.h

6 #i‚de‡
LIB_STDINT_H


7 
	#LIB_STDINT_H


	)

9 #i‚de‡
ASSEMBLER


11 
	tuöt8_t
;

12 
	tuöt16_t
;

13 
	tuöt32_t
;

14 
	tuöt64_t
;

16 sig√d 
	töt8_t
;

17 sig√d 
	töt16_t
;

18 sig√d 
	töt32_t
;

19 sig√d 
	töt64_t
;

21 
	töçå_t
;

22 
	tuöçå_t
;

	@410kern/inc/types.h

7 #i‚de‡
LIB_TYPES_H


8 
	#LIB_TYPES_H


	)

10 
	tsize_t
;

11 
	t±rdiff_t
;

15 
	tvm_off£t_t
;

16 
	tvm_size_t
;

19 
	mFALSE
 = 0,

20 
	mTRUE


21 } 
	tboﬁón_t
;

	@410user/crt0.c

8 
	~<°dlib.h
>

9 
	~<sysˇŒ.h
>

10 
	~<as£π.h
>

12 
maö
(
¨gc
, *
¨gv
[]);

13 
ö°Æl_auto°ack
(* 
°ack_high
, * 
°ack_low
);

15 
	$_maö
(
¨gc
, *
¨gv
[], *
°ack_high
, *
°ack_low
)

17 
	`ö°Æl_auto°ack
(
°ack_high
, 
°ack_low
);

18 
	`exô
(
	`maö
(
¨gc
, 
¨gv
));

19 
	}
}

	@410user/exec2obj.c

1 
	~"410kîn/öc/exec2obj.h
"

2 
	~<°dio.h
>

3 
	~<°rög.h
>

5 
	#STABS
 0

	)

7 
	$¥öt_ußge
() {

8 
	`Ârötf
(
°dîr
, "Usage:Éxec2obj <file>...\n");

9 
	`Ârötf
(
°dîr
, "Createsá .s file containingá const charárray forÉach file\n");

10 
	`Ârötf
(
°dîr
, "givenásánárgument. Eachárray is initializedÅoÅhe contents\n");

11 
	`Ârötf
(
°dîr
, "ofÅhat file. AÅable of contents isálso created. Lookát\n");

12 
	`Ârötf
(
°dîr
, "exec2obj.h for more information.\n\n");

13 
	}
}

15 
	ghódî
[] =

16 #i‡
STABS


23 #i‡
STABS


54 
	$emô_fûe_hódî
(
FILE
 *
s
, c⁄° *
fûe
, 
execsize
)

56 
	`Ârötf
(
s
,".glob»%s_exec2obj_u£øµ_code_±r\n", 
fûe
);

57 
	`Ârötf
(
s
,"\t.align 32\n");

58 
	`Ârötf
(
s
,"\t.ty≥\t%s_exec2obj_u£øµ_code_±r, @obje˘\n", 
fûe
);

59 
	`Ârötf
(
s
,"\t.size\t%s_exec2obj_u£øµ_code_±r, %d\n", 
fûe
, 
execsize
);

60 
	`Ârötf
(
s
,"%s_exec2obj_u£øµ_code_±r:\n", 
fûe
);

61 
	}
}

63 
	$emô_fûe_byãs
(
FILE
 *
out
, FILE *
ö
, 
byãs
)

65 
löe
[1];

66 c⁄° 
size_t
 
sz
 = (
löe
) / (line[0]);

68 
size_t
 
rvÆ
 = 
	`‰ód
(
löe
, ÷öe[0]), 
sz
, 
ö
);

69 i‡(
rvÆ
 <= 0)

71 
byãs
 -
rvÆ
;

72 
	`Ârötf
(
out
, "\t.byã\t%d", 
löe
[0]);

73 *
ô
 = 
löe
 + 1;

74 *
íd
 = 
löe
 + 
rvÆ
;

75 
ô
 !
íd
) {

76 
	`Ârötf
(
out
, ",%d", *
ô
++);

78 
	`Ârötf
(
out
, "\n");

80  
byãs
;

81 
	}
}

83 
	$emô_dú_hódî
(
FILE
 *
out
, 
ƒfûes
)

85 
	`Ârötf
(
out
, ".globlÉxec2obj_userapp_count\n"

90 
	`Ârötf
(
out
, "\t.l⁄g\t%d\n", 
ƒfûes
);

91 
	`Ârötf
(
out
, ".globlÉxec2obj_userapp_TOC\n"

94 
	`Ârötf
(
out
, "\t.size\ãxec2obj_u£øµ_TOC, %d\n", (
exec2obj_u£øµ_TOC
));

95 
	`Ârötf
(
out
, "exec2obj_userapp_TOC:\n");

96 
	}
}

98 
	$emô_dú_íåy
(
FILE
 *
out
, c⁄° *
«me
, 
size
)

103 c⁄° *
li°ed_«me
 =

104 (
	`°rcmp
(
«me
, "__DIR_LISTING__") == 0) ? "." :Çame;

106 
	`Ârötf
(
out
, "\t.°rög\t\"%s\"\n", 
li°ed_«me
);

107 
	`Ârötf
(
out
, "\t.zîo\t%d\n", (
exec2obj_u£øµ_TOC
[0].
exe˙ame
Ë- 
	`°æí
(
li°ed_«me
) - 1);

108 
	`Ârötf
(
out
, "\t.l⁄g\t%s_exec2obj_u£øµ_code_±r\n", 
«me
);

109 
	`Ârötf
(
out
, "\t.l⁄g\t%d\n", 
size
);

110 
	}
}

113 
	$emô_dú_foŸî
(
FILE
 *
out
, 
ƒfûes
)

115 
	`Ârötf
(
out
, "\t.zero\t%d\n",

116 (
exec2obj_u£øµ_TOC
Ë- 
ƒfûes
 * (exec2obj_userapp_TOC[0]));

117 
	`Ârötf
(
out
,

118 #i‡
STABS


126 #i‡
STABS


130 #i‡
STABS


135 
	}
}

137 
	#MAX_FNAME
 128

	)

139 
	$maö
(
¨gc
, ** 
¨gv
) {

140 
FILE
 *
ö
;

141 
execsize
 = 0;

142 
fûe_ôî
 = 1;

143 
execsizes
[
MAX_NUM_APP_ENTRIES
];

145 
‚ame_buf
[
MAX_FNAME
];

148 i‡(
¨gc
 < 2) {

149 
	`¥öt_ußge
();

153 i‡(
¨gc
 > 
MAX_NUM_APP_ENTRIES
 + 1) {

154 
	`Ârötf
(
°dîr
, "Toÿm™yÉxecuèbÀs: Thêmaximum i†%d\n", 
MAX_NUM_APP_ENTRIES
);

157 
	`fwrôe
(
hódî
, (hódî[0]), (hódîË/ (hódî[0]Ë- 1, 
°dout
);

159 
fûe_ôî
 < 
¨gc
) {

161 
	`°∫˝y
(
‚ame_buf
, 
¨gv
[
fûe_ôî
], 
MAX_FNAME
);

162 
	`°∫ˇt
(
‚ame_buf
, ".°rù", 
MAX_FNAME
 - 
	`°æí
(fname_buf));

164 
ö
 = 
	`f›í
(
‚ame_buf
,"r");

165 i‡(!
ö
) {

166 
	`Ârötf
(
°dîr
, "CouldÇŸ o≥¿%†f‹Ñódög; fÆlög back.\n",
‚ame_buf
);

169 
ö
 = 
	`f›í
(
¨gv
[
fûe_ôî
],"r");

170 i‡(!
ö
) {

171 
	`Ârötf
(
°dîr
, "CouldÇŸ o≥¿%†f‹Ñódög.\n",
¨gv
[
fûe_ôî
]);

172 
	`¥ötf
("\n\n.abort\n\n");

178 
	`f£ek
(
ö
,0,
SEEK_END
);

179 
execsize
 = 
	`·ñl
(
ö
);

180 
	`f£ek
(
ö
,0,
SEEK_SET
);

182 
execsizes
[
fûe_ôî
] = 
execsize
;

187 
	`emô_fûe_hódî
(
°dout
, 
¨gv
[
fûe_ôî
], 
execsize
);

188 
	`emô_fûe_byãs
(
°dout
, 
ö
, 
execsize
);

190 
	`f˛o£
(
ö
);

193 
fûe_ôî
++;

196 
	`emô_dú_hódî
(
°dout
, 
¨gc
-1);

199 
fûe_ôî
 = 1;

202 
fûe_ôî
 < 
¨gc
) {

203 
	`emô_dú_íåy
(
°dout
, 
¨gv
[
fûe_ôî
], 
execsizes
[file_iter]);

204 
fûe_ôî
++;

206 
	`emô_dú_foŸî
(
°dout
, 
¨gc
-1);

208 
	}
}

	@410user/inc/410_tests.h

5 #i‚de‡
_410_TESTS_H_


6 
	#_410_TESTS_H_


	)

8 
	#TEST_START_CMPLT
 " START__TYPE_COMPLETE"

	)

9 
	#TEST_START_ABORT
 " START__TYPE_ABORT"

	)

10 
	#TEST_START_4EVER
 " START__TYPE_FOREVER"

	)

12 
	#TEST_START_4EVER_PROGRESS
 " START__TYPE_FOREVER_PROGRESS"

	)

14 
	#TEST_END_SUCCESS
 " END__SUCCESS"

	)

15 
	#TEST_END_FAIL
 " END__FAIL"

	)

18 
	#TEST_PFX
 "(^_^)_"

	)

20 
	~<simics.h
>

22 #i‚de‡
ASSEMBLER


24 
	~<ªp‹t.h
>

32 
	#DEF_TEST_NAME
(
x
Ëc⁄° *
ã°_«me
 = 
	)
x

34 
	#REPORT_START_CMPLT
 
	`ªp‹t_°¨t
(
START_CMPLT
)

	)

35 
	#REPORT_START_ABORT
 
	`ªp‹t_°¨t
(
START_ABORT
)

	)

36 
	#REPORT_START_4EVER
 
	`ªp‹t_°¨t
(
START_4EVER
)

	)

38 
	#REPORT_END_SUCCESS
 
	`ªp‹t_íd
(
END_SUCCESS
)

	)

39 
	#REPORT_END_FAIL
 
	`ªp‹t_íd
(
END_FAIL
)

	)

41 
	#REPORT_LOCAL_INIT


	)

42 
	#REPORT_MISC
(
x
Ë
	`ªp‹t_misc
(x)

	)

43 
	#REPORT_ERR
(
x
,
code
Ë
	`ªp‹t_îr
(x, code)

	)

44 
	#REPORT_FAIL_ERR
(
x
,
code
Ë
	`ªp‹t_Áèl
(x, code)

	)

45 
	#REPORT_ON_ERR
(
exp
Ë
	`ªp‹t_⁄_îr
(#exp, 
__LINE__
,Éxp)

	)

46 
	#REPORT_FAILOUT_ON_ERR
(
exp
Ë
	`Áèl_⁄_îr
(#exp, 
__LINE__
,Éxp)

	)

72 
	#TEST_PROG_ENGAGE
(
i
Ë
	`sim_‰_¥og
(i)

	)

73 
	#TEST_PROG_PROGRESS
 
	`sim_‰_hîe
()

	)

	@410user/inc/asm_style.h

26 #i‚de‡
_ASM_STYLE_H_


27 
	#_ASM_STYLE_H_


	)

30 #i‚de‡
HAVE_P2ALIGN


31 
	#HAVE_P2ALIGN


	)

33 #i‚de‡
__ELF__


34 
	#__ELF__


	)

39 
	#IODELAY
 
pushl
 %
óx
; 
öb
 
$0x80
,%
Æ
; inb $0x80,%Æ; 
p›l
 %
	)
óx

41 
	#S_ARG0
 4(%
e•
)

	)

42 
	#S_ARG1
 8(%
e•
)

	)

43 
	#S_ARG2
 12(%
e•
)

	)

44 
	#S_ARG3
 16(%
e•
)

	)

46 
	#FRAME
 
pushl
 %
ebp
; 
movl
 %
e•
, %
	)
ebp

47 
	#EMARF
 
Àave


	)

49 
	#B_ARG0
 8(%
ebp
)

	)

50 
	#B_ARG1
 12(%
ebp
)

	)

51 
	#B_ARG2
 16(%
ebp
)

	)

52 
	#B_ARG3
 20(%
ebp
)

	)

54 #ifde‡
i486


55 
	#TEXT_ALIGN
 4

	)

57 
	#TEXT_ALIGN
 2

	)

59 
	#DATA_ALIGN
 2

	)

60 
	#ALIGN
 
TEXT_ALIGN


	)

67 #i‡
deföed
(
HAVE_P2ALIGN
)

68 
	#P2ALIGN
(
p2
Ë.
p2Æign
 
	)
p2

69 #ñi‡
deföed
(
__ELF__
)

70 
	#P2ALIGN
(
p2
Ë.
	`Æign
 (1<<’2))

	)

72 
	#P2ALIGN
(
p2
Ë.
Æign
 
	)
p2

75 
	#LCL
(
x
Ë
	)
x

77 
	#LB
(
x
,
n
Ë
	)
n

78 #i‚de‡
__ELF__


79 
	#EXT
(
x
Ë
_
 ## 
	)
x

80 
	#LEXT
(
x
Ë
_
 ## x ## :

	)

81 
	#SEXT
(
x
Ë"_"#x

	)

83 
	#EXT
(
x
Ë
	)
x

84 
	#LEXT
(
x
Ëx ## :

	)

85 
	#SEXT
(
x
Ë#x

	)

87 
	#GLEXT
(
x
Ë.
globl
 
	`EXT
(x); 
	`LEXT
(x)

	)

88 
	#LCLL
(
x
Ëx ## :

	)

89 
	#gLB
(
n
Ë¿## :

	)

90 
	#LBb
(
x
,
n
Ë¿## 
b


	)

91 
	#LBf
(
x
,
n
Ë¿## 
f


	)

95 #ifde‡
__ELF__


96 
	#FUNCSYM
(
x
Ë.
ty≥
 x,@
fun˘i⁄


	)

98 
	#FUNCSYM
(
x
Ë

	)

102 #ifde‡
GPROF


104 
	#MCOUNT
 .
d©a
; 
	`gLB
(9Ë.0; .
ãxt
; 
Àa
 
	`LBb
(
x
, 9),%
edx
; 
ˇŒ
 
mcou¡


	)

105 
	#ENTRY
(
x
Ë.
globl
 
	`EXT
(x); 
	`P2ALIGN
(
TEXT_ALIGN
); 
	`LEXT
(x) ; \

106 
pushl
 %
ebp
; 
movl
 %
e•
, %ebp; 
MCOUNT
; 
p›l
 %ebp;

	)

107 
	#ENTRY2
(
x
,
y
Ë.
globl
 
	`EXT
(x); .globl EXT(y); \

108 
	`P2ALIGN
(
TEXT_ALIGN
); 
	`LEXT
(
x
ËLEXT(
y
)

	)

109 
	#ASENTRY
(
x
Ë.
globl
 x; 
	`P2ALIGN
(
TEXT_ALIGN
); 
	`gLB
(x) ; \

110 
pushl
 %
ebp
; 
movl
 %
e•
, %ebp; 
MCOUNT
; 
p›l
 %ebp;

	)

114 
	#MCOUNT


	)

115 
	#ENTRY
(
x
Ë
	`FUNCSYM
(x); .
globl
 
	`EXT
(x); 
	`P2ALIGN
(
TEXT_ALIGN
); 
	`LEXT
(x)

	)

116 
	#ENTRY2
(
x
,
y
Ë.
globl
 
	`EXT
(x); .globl EXT(y); \

117 
	`P2ALIGN
(
TEXT_ALIGN
); 
	`LEXT
(
x
ËLEXT(
y
)

	)

118 
	#ASENTRY
(
x
Ë.
globl
 x; 
	`P2ALIGN
(
TEXT_ALIGN
); 
	`gLB
(x)

	)

123 
	#E¡ry
(
x
Ë
	`P2ALIGN
(
TEXT_ALIGN
); 
	`GLEXT
(x)

	)

124 
	#DATA
(
x
Ë
	`P2ALIGN
(
DATA_ALIGN
); 
	`GLEXT
(x)

	)

	@410user/inc/assert.h

23 #i‚de‡
_ASSERT_H_


24 
	#_ASSERT_H_


	)

26 
∑nic
(c⁄° *
f‹m©
, ...);

28 
	#as£π
(
ex¥essi⁄
) \

29 (()((
ex¥essi⁄
Ë? 0 : (
	`∑nic
("%s:%u: failedássertion `%s'", \

30 
__FILE__
, 
__LINE__
, #ex¥essi⁄), 0)))

	)

	@410user/inc/cond.h

5 #i‚de‡
COND_H


6 
	#COND_H


	)

8 
	~<muãx.h
>

9 
	~<c⁄d_ty≥.h
>

12 
c⁄d_öô
–
c⁄d_t
 *
cv
 );

13 
c⁄d_de°roy
–
c⁄d_t
 *
cv
 );

14 
c⁄d_waô
–
c⁄d_t
 *
cv
, 
muãx_t
 *
mp
 );

15 
c⁄d_sig«l
–
c⁄d_t
 *
cv
 );

16 
c⁄d_brﬂdˇ°
–
c⁄d_t
 *
cv
 );

	@410user/inc/malloc.h

1 
	~<°dlib.h
>

2 
	~<ty≥s.h
>

4 #i‚de‡
_MALLOC_WRAPPERS_H_


5 
	#_MALLOC_WRAPPERS_H_


	)

7 *
mÆloc
(
size_t
 
size
);

8 *
ˇŒoc
(
size_t
 
√…
, size_à
ñtsize
);

9 *
ªÆloc
(*
buf
, 
size_t
 
√w_size
);

10 
‰ì
(*
buf
);

12 *
_mÆloc
(
size_t
 
size
);

13 *
_ˇŒoc
(
size_t
 
√…
, size_à
ñtsize
);

14 *
_ªÆloc
(*
buf
, 
size_t
 
√w_size
);

15 
_‰ì
(*
buf
);

	@410user/inc/mutex.h

5 #i‚de‡
MUTEX_H


6 
	#MUTEX_H


	)

8 
	~<muãx_ty≥.h
>

10 
muãx_öô
–
muãx_t
 *
mp
 );

11 
muãx_de°roy
–
muãx_t
 *
mp
 );

12 
muãx_lock
–
muãx_t
 *
mp
 );

13 
muãx_u∆ock
–
muãx_t
 *
mp
 );

	@410user/inc/rand.h

29 #i‚de‡
_RAND_H


30 
	#_RAND_H


	)

32 
sgíønd
( );

33 
gíønd
();

	@410user/inc/rwlock.h

5 #i‚de‡
RWLOCK_H


6 
	#RWLOCK_H


	)

8 
	#RWLOCK_READ
 0

	)

9 
	#RWLOCK_WRITE
 1

	)

11 
	~<rwlock_ty≥.h
>

14 
rwlock_öô
–
rwlock_t
 *
rwlock
 );

15 
rwlock_lock
–
rwlock_t
 *
rwlock
, 
ty≥
 );

16 
rwlock_u∆ock
–
rwlock_t
 *
rwlock
 );

17 
rwlock_de°roy
–
rwlock_t
 *
rwlock
 );

18 
rwlock_downgøde
–
rwlock_t
 *
rwlock
);

	@410user/inc/sem.h

5 #i‚de‡
SEM_H


6 
	#SEM_H


	)

8 
	~<£m_ty≥.h
>

11 
£m_öô
–
£m_t
 *
£m
, 
cou¡
 );

12 
£m_waô
–
£m_t
 *
£m
 );

13 
£m_sig«l
–
£m_t
 *
£m
 );

14 
£m_de°roy
–
£m_t
 *
£m
 );

	@410user/inc/stdarg.h

1 #i‚de‡
_STDARG_H_


2 
	#_STDARG_H_


	)

8 #ifde‡
__GNUC__


9 
__buûtö_va_li°
 
	tva_li°
;

10 
	#va_°¨t
(
v
,
l
Ë
	`__buûtö_va_°¨t
(v,l)

	)

11 
	#va_íd
(
v
Ë
	`__buûtö_va_íd
(v)

	)

12 
	#va_¨g
(
v
,
l
Ë
	`__buûtö_va_¨g
(v,l)

	)

13 
	#va_c›y
(
d
,
s
Ë
	`__buûtö_va_c›y
(d,s)

	)

	@410user/inc/stddef.h

1 #i‚de‡
_STDDEF_H_


2 
	#_STDDEF_H_


	)

4 
	~<ty≥s.h
>

6 #i‚de‡
NULL


7 
	#NULL
 ((*)0)

	)

10 
	#off£tof
(
°y≥
,
fõld
Ë((
size_t
)(&((°y≥*)
NULL
)->fõld))

	)

	@410user/inc/stdint.h

6 #i‚de‡
LIB_STDINT_H


7 
	#LIB_STDINT_H


	)

9 #i‚de‡
ASSEMBLER


11 
	tuöt8_t
;

12 
	tuöt16_t
;

13 
	tuöt32_t
;

14 
	tuöt64_t
;

16 sig√d 
	töt8_t
;

17 sig√d 
	töt16_t
;

18 sig√d 
	töt32_t
;

19 sig√d 
	töt64_t
;

21 
	töçå_t
;

22 
	tuöçå_t
;

	@410user/inc/thread.h

13 #i‚de‡
THREAD_H


14 
	#THREAD_H


	)

16 
	~<thr_öã∫Æs.h
>

19 
thr_öô
–
size
 );

20 
thr_¸óã
–*(*
func
)(*), *
¨gs
 );

21 
thr_joö
–
tid
, **
°©u•
 );

22 
thr_exô
–*
°©us
 );

23 
thr_gëid
( );

24 
thr_yõld
–
tid
 );

	@410user/inc/types.h

7 #i‚de‡
LIB_TYPES_H


8 
	#LIB_TYPES_H


	)

10 
	tsize_t
;

11 
	t±rdiff_t
;

15 
	tvm_off£t_t
;

16 
	tvm_size_t
;

19 
	mFALSE
 = 0,

20 
	mTRUE


21 } 
	tboﬁón_t
;

	@410user/libRNG/mt19937int.c

32 
	#N
 624

	)

33 
	#M
 397

	)

34 
	#MATRIX_A
 0x9908b0d‡

	)

35 
	#UPPER_MASK
 0x80000000

	)

36 
	#LOWER_MASK
 0x7ffffff‡

	)

39 
	#TEMPERING_MASK_B
 0x9d2c5680

	)

40 
	#TEMPERING_MASK_C
 0xefc60000

	)

41 
	#TEMPERING_SHIFT_U
(
y
Ë(y >> 11)

	)

42 
	#TEMPERING_SHIFT_S
(
y
Ë(y << 7)

	)

43 
	#TEMPERING_SHIFT_T
(
y
Ë(y << 15)

	)

44 
	#TEMPERING_SHIFT_L
(
y
Ë(y >> 18)

	)

46 
	gmt
[
N
];

47 
	gmti
=
N
+1;

51 
	$sgíønd
(
£ed
)

52 
£ed
;

58 
mt
[0]
£ed
 & 0xffffffff;

59 
mti
=1; mti<
N
; mti++)

60 
mt
[
mti
] = (69069 * mt[mti-1]) & 0xffffffff;

61 
	}
}

64 
	$gíønd
()

66 
y
;

67 
mag01
[2]={0x0, 
MATRIX_A
};

70 i‡(
mti
 >
N
) {

71 
kk
;

73 i‡(
mti
 =
N
+1)

74 
	`sgíønd
(4357);

76 
kk
=0;kk<
N
-
M
;kk++) {

77 
y
 = (
mt
[
kk
]&
UPPER_MASK
)|(mt[kk+1]&
LOWER_MASK
);

78 
mt
[
kk
] = mt[kk+
M
] ^ (
y
 >> 1Ë^ 
mag01
[y & 0x1];

80 ;
kk
<
N
-1;kk++) {

81 
y
 = (
mt
[
kk
]&
UPPER_MASK
)|(mt[kk+1]&
LOWER_MASK
);

82 
mt
[
kk
] = mt[kk+(
M
-
N
)] ^ (
y
 >> 1Ë^ 
mag01
[y & 0x1];

84 
y
 = (
mt
[
N
-1]&
UPPER_MASK
)|(mt[0]&
LOWER_MASK
);

85 
mt
[
N
-1] = mt[
M
-1] ^ (
y
 >> 1Ë^ 
mag01
[y & 0x1];

87 
mti
 = 0;

90 
y
 = 
mt
[
mti
++];

91 
y
 ^
	`TEMPERING_SHIFT_U
(y);

92 
y
 ^
	`TEMPERING_SHIFT_S
(yË& 
TEMPERING_MASK_B
;

93 
y
 ^
	`TEMPERING_SHIFT_T
(yË& 
TEMPERING_MASK_C
;

94 
y
 ^
	`TEMPERING_SHIFT_L
(y);

96  
y
;

97 
	}
}

	@410user/libmalloc/malloc.c

7 
	~"mm_mÆloc.h
"

8 
	~<°ddef.h
>

9 
	~<°dlib.h
>

10 
	~<°rög.h
>

15 
	göôed
 = 0;

22 
	$_mÆloc
–
size_t
 
__size
 )

24 if–!
öôed
 ) {

25 i‡–
	`mm_öô
() < 0 ) {

26  
NULL
;

28 
öôed
 = 1;

30  
	`mm_mÆloc
–
__size
 );

31 
	}
}

37 
	$_ˇŒoc
–
size_t
 
__√…
, size_à
__ñtsize
 )

39 *
√w
;

41 if–!
öôed
 ) {

42 i‡–
	`mm_öô
() < 0 ) {

43  
NULL
;

45 
öôed
 = 1;

48 
√w
 = 
	`mm_mÆloc
–
__√…
 * 
__ñtsize
 );

49 if–!
√w
 ) {

50  
NULL
;

52 
	`bzîo
–
√w
, 
__√…
 * 
__ñtsize
 );

53  
√w
;

54 
	}
}

60 
	$_ªÆloc
–*
__buf
, 
size_t
 
__√w_size
 )

62 if–!
öôed
 ) {

64  
NULL
;

66  
	`mm_ªÆloc
–
__buf
, 
__√w_size
 );

67 
	}
}

73 
	$_‰ì
–*
__buf
 )

75 if–!
öôed
 ) {

79 
	`mm_‰ì
–
__buf
 );

80 
	}
}

	@410user/libmalloc/memlib.c

8 
	~<°ddef.h
>

9 
	~<°dio.h
>

10 
	~<sysˇŒ.h
>

14 
	#PAGE_ALIGN_MASK
 ((Ë~((Ë(
PAGE_SIZE
-1)))

	)

16 #i‚de‡
NULL


17 
	#NULL
 0

	)

21 *
	gmem_max_addr
;

22 *
	gmem_brkp
;

23 *
	gmem_Ælo˘›
;

25 *
_íd
;

30 
	$mem_öô
(
max_hóp_addr
)

33 
mem_max_addr
 = (*)
max_hóp_addr
;

34 
mem_brkp
 = (*)&
_íd
 + 
PAGE_SIZE
;

35 
mem_brkp
 = (*)(()mem_brk∞& 
PAGE_ALIGN_MASK
);

36 
	`√w_∑ges
(
mem_brkp
, 
PAGE_SIZE
))

37 
mem_brkp
 +
PAGE_SIZE
;

38 
mem_Ælo˘›
 = 
mem_brkp
 + 
PAGE_SIZE
;

39 
	}
}

46 *
	$mem_sbrk
(
ö¸
)

48 *
ﬁd_brk
 = 
mem_brkp
;

51 i‡–(
ö¸
 < 0Ë|| ((
ﬁd_brk
 + in¸Ë> 
mem_max_addr
)) {

52  (*)
NULL
;

55 i‡(
ﬁd_brk
 + 
ö¸
 > 
mem_Ælo˘›
) {

56 
Ælocö¸
 = 
ﬁd_brk
 + 
ö¸
 - 
mem_Ælo˘›
;

57 
Ælocö¸
 +
PAGE_SIZE
 - 1;

58 
Ælocö¸
 &
PAGE_ALIGN_MASK
;

61 i‡(
	`√w_∑ges
((*)
mem_Ælo˘›
, 
Ælocö¸
)) {

62  (*)
NULL
;

65 
mem_Ælo˘›
 +
Ælocö¸
;

68 
mem_brkp
 +
ö¸
;

70  (*)
ﬁd_brk
;

71 
	}
}

	@410user/libmalloc/memlib.h

7 #i‚de‡
_MEMLIB_H


8 
	#_MEMLIB_H


	)

10 *
mem_öô
(
size
);

11 *
mem_sbrk
(
ö¸
);

	@410user/libmalloc/mm_malloc.c

28 
	~"mm_mÆloc.h
"

29 
	~<memlib.h
>

30 
	~<°ddef.h
>

31 
	~<°rög.h
>

32 
	~<°dio.h
>

33 
	~<simics.h
>

36 *
	ghóp_li°p
;

39 *
exãnd_hóp
(
w‹ds
);

40 
∂a˚
(*
bp
, 
asize
);

41 *
föd_fô
(
asize
);

42 *
cﬂÀs˚
(*
bp
);

43 
¥ötblock
(*
bp
);

44 
checkblock
(*
bp
);

47 
ölöe
 

48 
	$mö
–
x
, 
y
 )

50  ( 
x
 < 
y
 ? x : y );

51 
	}
}

57 
	$mm_öô
()

61 
	`mem_öô
(0xffffffff);

63 i‡((
hóp_li°p
 = 
	`mem_sbrk
(4*
WSIZE
)Ë=
NULL
)

65 
	`PUT
(
hóp_li°p
, 0);

66 
	`PUT
(
hóp_li°p
+
WSIZE
, 
	`PACK
(
OVERHEAD
, 1));

67 
	`PUT
(
hóp_li°p
+
DSIZE
, 
	`PACK
(
OVERHEAD
, 1));

68 
	`PUT
(
hóp_li°p
+
WSIZE
+
DSIZE
, 
	`PACK
(0, 1));

69 
hóp_li°p
 +
DSIZE
;

72 i‡(
	`exãnd_hóp
(
CHUNKSIZE
/
WSIZE
Ë=
NULL
)

75 
	}
}

83 *
	$mm_mÆloc
(
size
)

85 
asize
;

86 
exãndsize
;

87 *
bp
;

90 i‡(
size
 <= 0) {

91  
NULL
;

94 i‡(
size
 <
DSIZE
)

95 
asize
 = 
DSIZE
 + 
OVERHEAD
;

97 
asize
 = 
DSIZE
 * ((
size
 + (
OVERHEAD
) + (DSIZE-1)) / DSIZE);

100 i‡((
bp
 = 
	`föd_fô
(
asize
)Ë!
NULL
) {

101 
	`∂a˚
(
bp
, 
asize
);

102  
bp
;

106 
exãndsize
 = 
	`MAX
(
asize
,
CHUNKSIZE
);

107 i‡((
bp
 = 
	`exãnd_hóp
(
exãndsize
/
WSIZE
)Ë=
NULL
) {

108  
NULL
;

110 
	`∂a˚
(
bp
, 
asize
);

112  
bp
;

113 
	}
}

120 
	$mm_‰ì
(*
bp
)

128 i‡(
bp
 !
NULL
) {

129 
size
;

131 
size
 = 
	`GET_SIZE
(
	`HDRP
(
bp
));

133 
	`PUT
(
	`HDRP
(
bp
), 
	`PACK
(
size
, 0));

134 
	`PUT
(
	`FTRP
(
bp
), 
	`PACK
(
size
, 0));

135 
	`cﬂÀs˚
(
bp
);

137 
	}
}

142 *
	$mm_ªÆloc
(*
±r
, 
size
)

144 
ﬁd_size
;

145 *
√w_chunk
;

147 
√w_chunk
 = 
	`mm_mÆloc
–
size
 );

148 if–!
√w_chunk
 ) {

149  
NULL
;

152 if–
±r
 ) {

153 
ﬁd_size
 = 
	`GET_SIZE
–
	`HDRP
(
±r
) );

154 
	`mem˝y
–
√w_chunk
, 
±r
, 
	`mö
–
ﬁd_size
, 
size
 ) );

155 
	`mm_‰ì
–
±r
 );

157  
√w_chunk
;

158 
	}
}

163 
	$mm_checkhóp
(
vîbo£
)

165 *
bp
 = 
hóp_li°p
;

167 i‡(
vîbo£
)

168 
	`Õrötf
("Hó∞(%p):\n", 
hóp_li°p
);

170 i‡((
	`GET_SIZE
(
	`HDRP
(
hóp_li°p
)Ë!
DSIZE
Ë|| !
	`GET_ALLOC
(HDRP(heap_listp)))

171 
	`Õrötf
("BadÖrologue header\n");

172 
	`checkblock
(
hóp_li°p
);

174 
bp
 = 
hóp_li°p
; 
	`GET_SIZE
(
	`HDRP
(bp)Ë> 0; b∞
	`NEXT_BLKP
(bp)) {

175 i‡(
vîbo£
)

176 
	`¥ötblock
(
bp
);

177 
	`checkblock
(
bp
);

180 i‡(
vîbo£
)

181 
	`¥ötblock
(
bp
);

182 i‡((
	`GET_SIZE
(
	`HDRP
(
bp
)Ë!0Ë|| !(
	`GET_ALLOC
(HDRP(bp))))

183 
	`Õrötf
("BadÉpilogue header\n");

184 
	}
}

192 *
	$exãnd_hóp
(
w‹ds
)

194 *
bp
;

195 
size
;

198 
size
 = (
w‹ds
 % 2Ë? (w‹ds+1Ë* 
WSIZE
 : words * WSIZE;

199 i‡((
bp
 = 
	`mem_sbrk
(
size
)Ë=
NULL
)

200  
NULL
;

203 
	`PUT
(
	`HDRP
(
bp
), 
	`PACK
(
size
, 0));

204 
	`PUT
(
	`FTRP
(
bp
), 
	`PACK
(
size
, 0));

205 
	`PUT
(
	`HDRP
(
	`NEXT_BLKP
(
bp
)), 
	`PACK
(0, 1));

208  
	`cﬂÀs˚
(
bp
);

209 
	}
}

218 
	$∂a˚
(*
bp
, 
asize
)

221 
csize
 = 
	`GET_SIZE
(
	`HDRP
(
bp
));

223 i‡((
csize
 - 
asize
Ë>(
DSIZE
 + 
OVERHEAD
)) {

224 
	`PUT
(
	`HDRP
(
bp
), 
	`PACK
(
asize
, 1));

225 
	`PUT
(
	`FTRP
(
bp
), 
	`PACK
(
asize
, 1));

226 
bp
 = 
	`NEXT_BLKP
(bp);

227 
	`PUT
(
	`HDRP
(
bp
), 
	`PACK
(
csize
-
asize
, 0));

228 
	`PUT
(
	`FTRP
(
bp
), 
	`PACK
(
csize
-
asize
, 0));

231 
	`PUT
(
	`HDRP
(
bp
), 
	`PACK
(
csize
, 1));

232 
	`PUT
(
	`FTRP
(
bp
), 
	`PACK
(
csize
, 1));

234 
	}
}

242 *
	$föd_fô
(
asize
)

245 *
bp
;

248 
bp
 = 
hóp_li°p
; 
	`GET_SIZE
(
	`HDRP
(bp)Ë> 0; b∞
	`NEXT_BLKP
(bp)) {

249 i‡(!
	`GET_ALLOC
(
	`HDRP
(
bp
)Ë&& (
asize
 <
	`GET_SIZE
(HDRP(bp)))) {

250  
bp
;

253  
NULL
;

254 
	}
}

261 *
	$cﬂÀs˚
(*
bp
)

263 
¥ev_Æloc
 = 
	`GET_ALLOC
(
	`FTRP
(
	`PREV_BLKP
(
bp
)));

264 
√xt_Æloc
 = 
	`GET_ALLOC
(
	`HDRP
(
	`NEXT_BLKP
(
bp
)));

265 
size
 = 
	`GET_SIZE
(
	`HDRP
(
bp
));

267 i‡(
¥ev_Æloc
 && 
√xt_Æloc
) {

268  
bp
;

271 i‡(
¥ev_Æloc
 && !
√xt_Æloc
) {

272 
size
 +
	`GET_SIZE
(
	`HDRP
(
	`NEXT_BLKP
(
bp
)));

273 
	`PUT
(
	`HDRP
(
bp
), 
	`PACK
(
size
, 0));

274 
	`PUT
(
	`FTRP
(
bp
), 
	`PACK
(
size
,0));

275 (
bp
);

278 i‡(!
¥ev_Æloc
 && 
√xt_Æloc
) {

279 
size
 +
	`GET_SIZE
(
	`HDRP
(
	`PREV_BLKP
(
bp
)));

280 
	`PUT
(
	`FTRP
(
bp
), 
	`PACK
(
size
, 0));

281 
	`PUT
(
	`HDRP
(
	`PREV_BLKP
(
bp
)), 
	`PACK
(
size
, 0));

282 (
	`PREV_BLKP
(
bp
));

286 
size
 +
	`GET_SIZE
(
	`HDRP
(
	`PREV_BLKP
(
bp
))) +

287 
	`GET_SIZE
(
	`FTRP
(
	`NEXT_BLKP
(
bp
)));

288 
	`PUT
(
	`HDRP
(
	`PREV_BLKP
(
bp
)), 
	`PACK
(
size
, 0));

289 
	`PUT
(
	`FTRP
(
	`NEXT_BLKP
(
bp
)), 
	`PACK
(
size
, 0));

290 (
	`PREV_BLKP
(
bp
));

292 
	}
}

295 
	$¥ötblock
(*
bp
)

297 
hsize
, 
hÆloc
, 
fsize
, 
ÁŒoc
;

299 
hsize
 = 
	`GET_SIZE
(
	`HDRP
(
bp
));

300 
hÆloc
 = 
	`GET_ALLOC
(
	`HDRP
(
bp
));

301 
fsize
 = 
	`GET_SIZE
(
	`FTRP
(
bp
));

302 
ÁŒoc
 = 
	`GET_ALLOC
(
	`FTRP
(
bp
));

304 i‡(
hsize
 == 0) {

305 
	`Õrötf
("%p: EOL\n", 
bp
);

309 
	`Õrötf
("%p: hódî: [%d:%c] foŸî: [%d:%c]\n", 
bp
,

310 
hsize
, (
hÆloc
 ? 'a' : 'f'),

311 
fsize
, (
ÁŒoc
 ? 'a' : 'f'));

312 
	}
}

314 
	$checkblock
(*
bp
)

316 i‡(()
bp
 % 8)

317 
	`Õrötf
("Eº‹: %∞i†nŸ doubÀw‹dálig√d\n", 
bp
);

318 i‡(
	`GET
(
	`HDRP
(
bp
)Ë!GET(
	`FTRP
(bp)))

319 
	`Õrötf
("Error: header doesÇot match footer\n");

320 
	}
}

	@410user/libmalloc/mm_malloc.h

8 #i‚de‡
_MM_MALLOC_H


9 
	#_MM_MALLOC_H


	)

13 
	#WSIZE
 4

	)

14 
	#DSIZE
 8

	)

15 
	#CHUNKSIZE
 (1<<12Ë

	)

16 
	#OVERHEAD
 8

	)

18 
	#MAX
(
x
, 
y
Ë((xË> (y)? (xË: (y))

	)

21 
	#PACK
(
size
, 
Æloc
Ë((sizeË| (Æloc))

	)

24 
	#GET
(
p
Ë(*(*)’))

	)

25 
	#PUT
(
p
, 
vÆ
Ë(*(*)’Ë(vÆ))

	)

28 
	#GET_SIZE
(
p
Ë(
	`GET
’Ë& ~0x7)

	)

29 
	#GET_ALLOC
(
p
Ë(
	`GET
’Ë& 0x1)

	)

32 
	#HDRP
(
bp
Ë((*)(bpË- 
WSIZE
)

	)

33 
	#FTRP
(
bp
Ë((*)(bpË+ 
	`GET_SIZE
(
	`HDRP
(bp)Ë- 
DSIZE
)

	)

36 
	#NEXT_BLKP
(
bp
Ë((*)(bpË+ 
	`GET_SIZE
(((*)(bpË- 
WSIZE
)))

	)

37 
	#PREV_BLKP
(
bp
Ë((*)(bpË- 
	`GET_SIZE
(((*)(bpË- 
DSIZE
)))

	)

40 
mm_öô
();

41 *
mm_mÆloc
(
size
);

42 
mm_‰ì
(*
bp
);

43 *
mm_ªÆloc
(*
±r
, 
size
);

	@410user/libsimics/simics.h

6 #i‚de‡
LIB_SIMICS_H


7 
	#LIB_SIMICS_H


	)

9 #ifde‡
ASSEMBLER


10 
	#Õrötf
 
sim_¥ötf


	)

13 
	#SIM_IN_SIMICS
 0x04100000

	)

14 
	#SIM_MEMSIZE
 0x04100001

	)

15 
	#SIM_PUTS
 0x04100002

	)

16 
	#SIM_BREAKPOINT
 0x04100003

	)

17 
	#SIM_HALT
 0x04100004

	)

19 
	#SIM_CK1
 0x04108000

	)

20 
	#SIM_FR_INKEYS
 0x04108004

	)

21 
	#SIM_FR_PROG
 0x04108006

	)

22 
	#SIM_FR_HERE
 0x04108007

	)

24 #ifde‡
ASSEMBLER


30 
	#INLINE_SIMCALL
(
num
, 
¨g0
, 
¨g1
) \

31 
mov
 
$num
, %
ebx
; \

32 
mov
 
¨g0
, %
ecx
; \

33 
mov
 
¨g1
, %
edx
; \

34 
xchg
 %
ebx
, %ebx;

	)

38 #i‚de‡
ASSEMBLER


41 
sim_ˇŒ
(
ebx
, ...);

44 
sim_ö_simics
();

47 
sim_memsize
();

50 
sim_puts
(c⁄° *
¨g
);

53 
sim_bªakpoöt
();

56 
sim_hÆt
();

59 
sim_ck1
();

62 
sim_‰_¥og
(
a
);

63 
sim_‰_hîe
();

66 
	$sim_¥ötf
(c⁄° *
fmt
, ...Ë
	`__©åibuã__
((
	`__f‹m©__
 (
__¥ötf__
, 1, 2)));

69 
	`magic_ªadlöe
(
size
, *
buf
);

72 
	#MAGIC_BREAK
 
	`sim_bªakpoöt
()

	)

73 
	#Õrötf
(...Ë
	`sim_¥ötf
(
__VA_ARGS__
)

	)

	@410user/libsimics/simics_c.c

1 
	~<simics.h
>

2 
	~<°d¨g.h
>

3 
	~<°dio.h
>

4 
	~<sysˇŒ.h
>

6 
	$sim_ö_simics
() {

7  
	`sim_ˇŒ
(
SIM_IN_SIMICS
);

8 
	}
}

10 
	$sim_memsize
() {

11  
	`sim_ˇŒ
(
SIM_MEMSIZE
);

12 
	}
}

14 
	$sim_puts
(c⁄° *
¨g
) {

15 
	`sim_ˇŒ
(
SIM_PUTS
, 
¨g
);

16 
	}
}

18 
	$sim_bªakpoöt
() {

19 
	`sim_ˇŒ
(
SIM_BREAKPOINT
);

20 
	}
}

22 
	$sim_hÆt
() {

23 
	`sim_ˇŒ
(
SIM_HALT
);

24 
	}
}

26 
	$sim_ck1
() {

27 
	`sim_ˇŒ
(
SIM_CK1
);

28 
	}
}

30 
	$sim_‰_¥og
(
a
) {

31 
	`sim_ˇŒ
(
SIM_FR_PROG
, 
a
);

32 
	}
}

34 
	$sim_‰_hîe
() {

35 
	`sim_ˇŒ
(
SIM_FR_HERE
);

36 
	}
}

38 
	$sim_¥ötf
(c⁄° *
fmt
, ...) {

39 
°r
[256];

40 
va_li°
 
≠
;

42 
	`va_°¨t
(
≠
, 
fmt
);

43 
	`v¢¥ötf
(
°r
, (°rË- 1, 
fmt
, 
≠
);

44 
	`va_íd
(
≠
);

46 
	`sim_puts
(
°r
);

47 
	}
}

49 
	$magic_ªadlöe
(
size
, *
buf
) {

50 
	`sim_ˇŒ
(
SIM_FR_INKEYS
);

51  
	`ªadlöe
(
size
, 
buf
);

52 
	}
}

	@410user/libstdio/doprnt.c

27 
	~<°d¨g.h
>

28 
	~<°rög.h
>

29 
	~<ty≥s.h
>

30 
	~"d›∫t.h
"

141 
	#isdigô
(
d
Ë((dË>'0' && (dË<'9')

	)

142 
	#Ctod
(
c
Ë((cË- '0')

	)

144 
	#MAXBUF
 ((Ë* 8Ë

	)

146 
	gdigs
[] = "0123456789abcdef";

149 
	$¥öäum
(
u
, 
ba£
, 
putc
, 
putc_¨g
)

150 
u
;

151 
ba£
;

152 (*
putc
)();

153 *
putc_¨g
;

155 
buf
[
MAXBUF
];

156 * 
p
 = &
buf
[
MAXBUF
-1];

159 *
p
-- = 
digs
[
u
 % 
ba£
];

160 
u
 /
ba£
;

161 } 
u
 != 0);

163 ++
p
 !&
buf
[
MAXBUF
])

164 (*
putc
)(
putc_¨g
, *
p
);

165 
	}
}

168 
	$¥öäum_16
(
u
, 
putc
, 
putc_¨g
)

169 
u
;

170 (*
putc
)();

171 *
putc_¨g
;

173 
buf
[8];

174 * 
p
 = &
buf
[7];

175 
i
;

177 
i
=0; i<8;i++){

178 *
p
-- = 
digs
[
u
 & 0x0f];

179 
u
 >>= 4;

182 
i
=0;i<8;i++){

183 (*
putc
)(
putc_¨g
, 
buf
[
i
]);

185 
	}
}

187 
boﬁón_t
 
	g_d›∫t_åunˇãs
 = 
FALSE
;

189 
	$_d›∫t
(
fmt
, 
¨gs
, 
ødix
, 
putc
, 
putc_¨g
)

190 c⁄° *
fmt
;

191 
va_li°
 
¨gs
;

192 
ødix
;

193 (*
putc
)();

194 *
putc_¨g
;

196 
Àngth
;

197 
¥ec
;

198 
boﬁón_t
 
œdju°
;

199 
∑dc
;

200 
n
, 
m
;

201 
u
;

202 
∂us_sign
;

203 
sign_ch¨
;

204 
boﬁón_t
 
Ætfmt
, 
åunˇã
;

205 
ba£
;

206 
c
;

207 
l⁄g›t
;

209 *
fmt
 != '\0') {

210 i‡(*
fmt
 != '%') {

211 (*
putc
)(
putc_¨g
, *
fmt
++);

215 
fmt
++;

217 
Àngth
 = 0;

218 
¥ec
 = -1;

219 
œdju°
 = 
FALSE
;

220 
∑dc
 = ' ';

221 
∂us_sign
 = 0;

222 
sign_ch¨
 = 0;

223 
Ætfmt
 = 
FALSE
;

224 
l⁄g›t
 = 0;

226 
TRUE
) {

227 i‡(*
fmt
 == '#') {

228 
Ætfmt
 = 
TRUE
;

229 
fmt
++;

231 i‡(*
fmt
 == '-') {

232 
œdju°
 = 
TRUE
;

233 
fmt
++;

235 i‡(*
fmt
 == '+') {

236 
∂us_sign
 = '+';

237 
fmt
++;

239 i‡(*
fmt
 == ' ') {

240 i‡(
∂us_sign
 == 0)

241 
∂us_sign
 = ' ';

242 
fmt
++;

248 i‡(*
fmt
 == '0') {

249 
∑dc
 = '0';

250 
fmt
++;

253 i‡(
	`isdigô
(*
fmt
)) {

254 
	`isdigô
(*
fmt
))

255 
Àngth
 = 10 *Üígth + 
	`Ctod
(*
fmt
++);

257 i‡(*
fmt
 == '*') {

258 
Àngth
 = 
	`va_¨g
(
¨gs
, );

259 
fmt
++;

260 i‡(
Àngth
 < 0) {

261 
œdju°
 = !ladjust;

262 
Àngth
 = -length;

266 i‡(*
fmt
 == '.') {

267 
fmt
++;

268 i‡(
	`isdigô
(*
fmt
)) {

269 
¥ec
 = 0;

270 
	`isdigô
(*
fmt
))

271 
¥ec
 = 10 *Öª¯+ 
	`Ctod
(*
fmt
++);

273 i‡(*
fmt
 == '*') {

274 
¥ec
 = 
	`va_¨g
(
¨gs
, );

275 
fmt
++;

279 *
fmt
 == 'l'){

280 
l⁄g›t
++;

281 
fmt
++;

284 
åunˇã
 = 
FALSE
;

286 *
fmt
) {

290 *
p
;

291 
boﬁón_t
 
™y
;

292 
i
;

294 
u
 = 
	`va_¨g
(
¨gs
, );

295 
p
 = 
	`va_¨g
(
¨gs
, *);

296 
ba£
 = *
p
++;

297 
	`¥öäum
(
u
, 
ba£
, 
putc
, 
putc_¨g
);

299 i‡(
u
 == 0)

302 
™y
 = 
FALSE
;

303 (
i
 = *
p
++) != 0) {

305 i‡(*
p
 <= 32) {

309 
j
;

310 i‡(
™y
)

311 (*
putc
)(
putc_¨g
, ',');

313 (*
putc
)(
putc_¨g
, '<');

314 
™y
 = 
TRUE
;

316 
j
 = *
p
++;

317 ; (
c
 = *
p
) > 32;Ö++)

318 (*
putc
)(
putc_¨g
, 
c
);

319 
	`¥öäum
(()–(
u
>>(
j
-1)Ë& ((2<<(
i
-j))-1)),

320 
ba£
, 
putc
, 
putc_¨g
);

322 i‡(
u
 & (1<<(
i
-1))) {

323 i‡(
™y
)

324 (*
putc
)(
putc_¨g
, ',');

326 (*
putc
)(
putc_¨g
, '<');

327 
™y
 = 
TRUE
;

329 ; (
c
 = *
p
) > 32;Ö++)

330 (*
putc
)(
putc_¨g
, 
c
);

333 ; *
p
 > 32;Ö++)

337 i‡(
™y
)

338 (*
putc
)(
putc_¨g
, '>');

343 
c
 = 
	`va_¨g
(
¨gs
, );

344 (*
putc
)(
putc_¨g
, 
c
);

350 
vîsi⁄_low
:10;

351 
…hªad
:7;

352 
èsk
:11;

353 
vîsi⁄_high
:4;

354 
sôe
:17;

355 
chõf
:11;

356 
√°
:4;

357 } 
	ttid_t
;

359 
high
;

360 
low
;

361 } 
	tlh_t
;

362 
	utid_t
 {

363 
tid_t
 
id
;

364 
lh_t
 
lh
;

365 } 
tid
;

367 
tid
 = 
	`va_¨g
(
¨gs
, 
tid_t
);

369 if(
l⁄g›t
){

371 if(
Ætfmt
){

372 
n
 = 19;

374 
n
 = 17;

377 i‡(
Àngth
 > 0 && !
œdju°
) {

378 
n
 < 
Àngth
){

379 
	`putc
(
putc_¨g
, ' ');

380 
n
++;

383 if(
Ætfmt
Ë
	`putc
(
putc_¨g
, '[');

384 
	`¥öäum_16
–
tid
.
lh
.
high
, 
putc
, 
putc_¨g
);

386 
	`putc
(
putc_¨g
, ':');

388 
	`¥öäum_16
–
tid
.
lh
.
low
, 
putc
, 
putc_¨g
);

390 if(
Ætfmt
Ë
	`putc
(
putc_¨g
, ']');

392 if(
Àngth
 > 0 && 
œdju°
) {

393 
n
 < 
Àngth
){

394 
	`putc
(
putc_¨g
, ' ');

395 
n
++;

401 if(
Ætfmt
){

402 
n
 = 4;

404 
n
 = 2;

407 
m
 = 1;

409 
m
 +
tid
.
id
.
…hªad
 >= 0x10;

410 
n
 +
tid
.
id
.
èsk
 >= 0x10;

411 
n
 +
tid
.
id
.
èsk
 >= 0x100;

413 i‡(
Àngth
 > 0 && !
œdju°
 && 
∑dc
 == ' ') {

414 
n
 + 2 < 
Àngth
) {

415 (*
putc
)(
putc_¨g
, ' ');

416 
n
++;

420 if(
Ætfmt
Ë(*
putc
)(
putc_¨g
, '[');

422 if–
Àngth
 > 0 && !
œdju°
 && 
∑dc
 == '0') {

423 
n
 + 2 < 
Àngth
) {

424 
	`putc
(
putc_¨g
, '0');

425 
n
++;

429 
	`¥öäum
(
tid
.
id
.
èsk
, 16, 
putc
, 
putc_¨g
);

430 
	`putc
(
putc_¨g
, '.');

432 if(
Àngth
 > 0 && !
œdju°
) {

433 
n
+
m
 < 
Àngth
){

434 
	`putc
(
putc_¨g
, 
∑dc
);

435 
n
++;

438 
	`¥öäum
(
tid
.
id
.
…hªad
, 16, 
putc
, 
putc_¨g
);

440 if(
Ætfmt
Ë
	`putc
(
putc_¨g
, ']');

442 i‡(
n
 + 
m
 < 
Àngth
 && 
œdju°
) {

443 
n
 + 
m
 < 
Àngth
) {

444 (*
putc
)(
putc_¨g
, ' ');

445 
n
++;

455 *
p
;

456 *
p2
;

458 i‡(
¥ec
 == -1)

459 
¥ec
 = 0x7fffffff;

461 
p
 = 
	`va_¨g
(
¨gs
, *);

463 i‡(
p
 == (*)0)

464 
p
 = "";

466 i‡(
Àngth
 > 0 && !
œdju°
) {

467 
n
 = 0;

468 
p2
 = 
p
;

470 ; *
p
 !'\0' && 
n
 < 
¥ec
;Ö++)

471 
n
++;

473 
p
 = 
p2
;

475 
n
 < 
Àngth
) {

476 (*
putc
)(
putc_¨g
, ' ');

477 
n
++;

481 
n
 = 0;

483 *
p
 != '\0') {

484 i‡(++
n
 > 
¥ec
)

487 (*
putc
)(
putc_¨g
, *
p
++);

490 i‡(
n
 < 
Àngth
 && 
œdju°
) {

491 
n
 < 
Àngth
) {

492 (*
putc
)(
putc_¨g
, ' ');

493 
n
++;

502 
åunˇã
 = 
_d›∫t_åunˇãs
;

504 
ba£
 = 8;

505 
¥öt_unsig√d
;

508 
åunˇã
 = 
_d›∫t_åunˇãs
;

510 
ba£
 = 10;

511 
¥öt_sig√d
;

514 
åunˇã
 = 
_d›∫t_åunˇãs
;

516 
ba£
 = 10;

517 
¥öt_unsig√d
;

520 
∑dc
 = '0';

521 
Àngth
 = 8;

527 (*
putc
)(
putc_¨g
, '0');

528 (*
putc
)(
putc_¨g
, 'x');

530 
åunˇã
 = 
_d›∫t_åunˇãs
;

532 
ba£
 = 16;

533 
¥öt_unsig√d
;

536 
åunˇã
 = 
_d›∫t_åunˇãs
;

538 
ba£
 = 16;

539 
¥öt_sig√d
;

542 
åunˇã
 = 
_d›∫t_åunˇãs
;

544 
ba£
 = 
ødix
;

545 
¥öt_sig√d
;

548 
åunˇã
 = 
_d›∫t_åunˇãs
;

550 
ba£
 = 
ødix
;

551 
¥öt_unsig√d
;

553 
¥öt_sig√d
:

554 i‡(
l⁄g›t
>1)

555 
n
 = 
	`va_¨g
(
¨gs
, );

557 
n
 = 
	`va_¨g
(
¨gs
, );

558 i‡(
n
 >= 0) {

559 
u
 = 
n
;

560 
sign_ch¨
 = 
∂us_sign
;

563 
u
 = -
n
;

564 
sign_ch¨
 = '-';

566 
¥öt_num
;

568 
¥öt_unsig√d
:

569 i‡(
l⁄g›t
>1)

570 
u
 = 
	`va_¨g
(
¨gs
, );

572 
u
 = 
	`va_¨g
(
¨gs
, );

573 
¥öt_num
;

575 
¥öt_num
:

577 
buf
[
MAXBUF
];

578 * 
p
 = &
buf
[
MAXBUF
-1];

579 
digôs
[] = "0123456789abcdef";

580 *
¥efix
 = 0;

582 i‡(
åunˇã
Ë
u
 = ()(()(u));

584 i‡(
u
 !0 && 
Ætfmt
) {

585 i‡(
ba£
 == 8)

586 
¥efix
 = "0";

587 i‡(
ba£
 == 16)

588 
¥efix
 = "0x";

592 *
p
-- = 
digôs
[
u
 % 
ba£
];

593 
u
 /
ba£
;

594 } 
u
 != 0);

596 
Àngth
 -(&
buf
[
MAXBUF
-1] - 
p
);

597 i‡(
sign_ch¨
)

598 
Àngth
--;

599 i‡(
¥efix
)

600 
Àngth
 -
	`°æí
(
¥efix
);

602 i‡(
∑dc
 =' ' && !
œdju°
) {

604 --
Àngth
 >= 0)

605 (*
putc
)(
putc_¨g
, ' ');

607 i‡(
sign_ch¨
)

608 (*
putc
)(
putc_¨g
, 
sign_ch¨
);

609 i‡(
¥efix
)

610 *
¥efix
)

611 (*
putc
)(
putc_¨g
, *
¥efix
++);

612 i‡(
∑dc
 == '0') {

614 --
Àngth
 >= 0)

615 (*
putc
)(
putc_¨g
, '0');

617 ++
p
 !&
buf
[
MAXBUF
])

618 (*
putc
)(
putc_¨g
, *
p
);

620 i‡(
œdju°
) {

621 --
Àngth
 >= 0)

622 (*
putc
)(
putc_¨g
, ' ');

628 
fmt
--;

632 (*
putc
)(
putc_¨g
, *
fmt
);

634 
fmt
++;

636 
	}
}

	@410user/libstdio/doprnt.h

22 #i‚de‡
__DOPRNT_H_INCLUDED__


23 
	#__DOPRNT_H_INCLUDED__


	)

25 
	~<°d¨g.h
>

27 
_d›∫t
(

28 c⁄° *
fmt
,

29 
va_li°
 
¨gs
,

30 
ødix
,

31 (*
putc
)(),

32 *
putc_¨g
);

	@410user/libstdio/doscan.c

34 
	~<°ddef.h
>

35 
	~<°d¨g.h
>

36 
	~<ty≥s.h
>

37 
	~<˘y≥.h
>

38 
	~"dosˇn.h
"

45 
_dosˇn
(c⁄° *
fmt
, 
va_li°
 
vp
,

46 (*
gëc
)(*
gëc_¨g
),

47 (*
ungëc
)(
c
, *
gëc_¨g
),

48 *
gëc_¨g
)

50 
c
;

51 
boﬁón_t
 
√g
;

52 
boﬁón_t
 
disˇrd
;

53 
boﬁón_t
 
övÆid
;

54 
vÆs
 = 0;

56 (
c
 = *
fmt
++) != 0) {

58 i‡(
c
 != '%') {

59 i‡(
	`is•a˚
(
c
))

61 
	`is•a˚
(
c
 = 
	`gëc
(
gëc_¨g
)));

62 i‡(
c
 == 0) ;

63 
	`ungëc
(
c
, 
gëc_¨g
);

66 i‡(
c
 =
	`gëc
(
gëc_¨g
))

72 
disˇrd
 = 0;

73 
övÆid
 = 1;

75 
m‹e_fmt
:

77 
c
 = 
	`gëc
(
gëc_¨g
);

78 i‡(
c
 == 0)

81 *
fmt
++) {

85 
n
 = 0;

87 
√g
 = 
c
 == '-';

88 i‡(
√g
Ë
c
 = 
	`gëc
(
gëc_¨g
);

90 
c
 >= '0' && c <= '9') {

91 
n
 =Ç * 10 + (
c
 - '0');

92 
c
 = 
	`gëc
(
gëc_¨g
);

93 
övÆid
 = 0;

95 
	`ungëc
(
c
, 
gëc_¨g
);

97 i‡(
√g
Ë
n
 = -n;

100 i‡(!
disˇrd
)

102 *
p
 = 
	`va_¨g
(
vp
, *);

103 *
p
 = 
n
;

111 
n
 = 0;

113 
√g
 = 
c
 == '-';

114 i‡(
√g
Ë
c
 = 
	`gëc
(
gëc_¨g
);

118 i‡((
c
 >= '0') && (c <= '9'))

119 
n
 =Ç * 16 + (
c
 - '0');

120 i‡((
c
 >= 'a') && (c <= 'f'))

121 
n
 =Ç * 16 + (
c
 - 'a' + 10);

122 i‡((
c
 >= 'A') && (c <= 'F'))

123 
n
 =Ç * 16 + (
c
 - 'A' + 10);

126 
c
 = 
	`gëc
(
gëc_¨g
);

127 
övÆid
 = 0;

129 
	`ungëc
(
c
, 
gëc_¨g
);

131 i‡(
√g
Ë
n
 = -n;

134 i‡(!
disˇrd
)

136 *
p
 = 
	`va_¨g
(
vp
, *);

137 *
p
 = 
n
;

145 *
buf
 = 
NULL
;

147 i‡(!
disˇrd
)

148 
buf
 = 
	`va_¨g
(
vp
, *);

150 
c
 && !
	`is•a˚
(c))

152 i‡(!
disˇrd
)

153 *
buf
++ = 
c
;

154 
c
 = 
	`gëc
(
gëc_¨g
);

155 
övÆid
 = 0;

157 
	`ungëc
(
c
, 
gëc_¨g
);

159 i‡(!
disˇrd
)

160 *
buf
 = 0;

166 
disˇrd
 = 1;

167 
m‹e_fmt
;

173 i‡(
övÆid
)

175 i‡(!
disˇrd
)

176 
vÆs
++;

179  
vÆs
;

180 
	}
}

	@410user/libstdio/doscan.h

22 #i‚de‡
__DOSCAN_H_INCLUDED__


23 
	#__DOSCAN_H_INCLUDED__


	)

25 
_dosˇn
(c⁄° *
fmt
, 
va_li°
 
vp
,

26 (*
gëc
)(*
gëc_¨g
),

27 (*
ungëc
)(
c
, *
gëc_¨g
),

28 *
gëc_¨g
);

	@410user/libstdio/hexdump.c

22 
	~<˘y≥.h
>

23 
	~<°dio.h
>

45 
	$hexdump
(*
buf
, 
Àn
)

47 
i
, 
j
;

48 *
b
 = (*)
buf
;

50 
	`¥ötf
(".---------------------------------------------------------------------------.\n");

51 
i
 = 0; i < 
Àn
; i += 16) {

52 
	`¥ötf
("| %08x ", 
i
);

53 
j
 = 
i
; j < i+16; j++) {

54 i‡(
j
 % 4 == 0)

55 
	`¥ötf
(" ");

56 i‡(
j
 >
Àn
)

57 
	`¥ötf
(" ");

59 
	`¥ötf
("%02x", ()
b
[
j
]);

62 
	`¥ötf
(" ");

63 
j
 = 
i
; j < i+16; j++)

64 i‡(
j
 >
Àn
)

65 
	`¥ötf
(" ");

67 
	`¥ötf
("%c", 
	`isgøph
(
b
[
j
]) ? b[j] : '.');

68 
	`¥ötf
(" |\n");

70 
	`¥ötf
("`---------------------------------------------------------------------------'\n");

71 
	}
}

	@410user/libstdio/printf.c

30 
	~<°dio.h
>

31 
	~<°d¨g.h
>

32 
	~<sysˇŒ.h
>

33 
	~"d›∫t.h
"

37 
	#PRINTF_BUFMAX
 128

	)

39 
	s¥ötf_°©e
 {

40 
	mbuf
[
PRINTF_BUFMAX
];

41 
	mödex
;

45 
	$Êush
(
¥ötf_°©e
 *
°©e
)

47 
	`¥öt
(
°©e
->
ödex
, sèã->
buf
);

48 
°©e
->
ödex
 = 0;

49 
	}
}

52 
	$¥ötf_ch¨
(*
¨g
, 
c
)

54 
¥ötf_°©e
 *
°©e
 = (¥ötf_°©ê*Ë
¨g
;

56 i‡(
°©e
->
ödex
 >
PRINTF_BUFMAX
) {

57 
	`Êush
(
°©e
);

60 
°©e
->
buf
[°©e->
ödex
] = 
c
;

61 
°©e
->
ödex
++;

62 i‡(
c
 == '\n') {

63 
	`Êush
(
°©e
);

65 
	}
}

70 
	$v¥ötf
(c⁄° *
fmt
, 
va_li°
 
¨gs
)

72 
¥ötf_°©e
 
°©e
;

74 
°©e
.
ödex
 = 0;

75 
	`_d›∫t
(
fmt
, 
¨gs
, 0, ((*)())
¥ötf_ch¨
, (*Ë&
°©e
);

77 i‡(
°©e
.
ödex
 != 0)

78 
	`Êush
(&
°©e
);

83 
	}
}

86 
	$¥ötf
(c⁄° *
fmt
, ...)

88 
va_li°
 
¨gs
;

89 
îr
;

91 
	`va_°¨t
(
¨gs
, 
fmt
);

92 
îr
 = 
	`v¥ötf
(
fmt
, 
¨gs
);

93 
	`va_íd
(
¨gs
);

95  
îr
;

96 
	}
}

	@410user/libstdio/putchar.c

23 
	~<°dio.h
>

24 
	~<sysˇŒ.h
>

26 
	$putch¨
(
c
)

28 
	`¥öt
–1, (*)&
c
 );

29  
c
;

30 
	}
}

	@410user/libstdio/puts.c

6 
	~<°dio.h
>

7 
	~<°rög.h
>

8 
	~<sysˇŒ.h
>

10 
	$puts
(c⁄° *
s
) {

11 
	`¥öt
(
	`°æí
(
s
), (*)s);

12 
	`putch¨
('\n');

14 
	}
}

	@410user/libstdio/sprintf.c

27 
	~<°d¨g.h
>

28 
	~"d›∫t.h
"

30 
	#SPRINTF_UNLIMITED
 -1

	)

31 
	s•rötf_°©e
 {

32 *
	mbuf
;

33 
	mÀn
;

34 
	mmax
;

38 
	$ßvech¨
(*
¨g
, 
c
)

40 
•rötf_°©e
 *
°©e
 = (•rötf_°©ê*)
¨g
;

42 i‡(
°©e
->
max
 !
SPRINTF_UNLIMITED
)

44 i‡(
°©e
->
Àn
 =°©e->
max
)

48 
°©e
->
Àn
++;

49 *
°©e
->
buf
 = 
c
;

50 
°©e
->
buf
++;

51 
	}
}

53 
	$v•rötf
(*
s
, c⁄° *
fmt
, 
va_li°
 
¨gs
)

55 
•rötf_°©e
 
°©e
;

56 
°©e
.
max
 = 
SPRINTF_UNLIMITED
;

57 
°©e
.
Àn
 = 0;

58 
°©e
.
buf
 = 
s
;

60 
	`_d›∫t
(
fmt
, 
¨gs
, 0, ((*)()Ë
ßvech¨
, (*Ë&
°©e
);

61 *(
°©e
.
buf
) = '\0';

63  
°©e
.
Àn
;

64 
	}
}

66 
	$v¢¥ötf
(*
s
, 
size
, c⁄° *
fmt
, 
va_li°
 
¨gs
)

68 
•rötf_°©e
 
°©e
;

69 
°©e
.
max
 = 
size
 - 1;

70 
°©e
.
Àn
 = 0;

71 
°©e
.
buf
 = 
s
;

73 
	`_d›∫t
(
fmt
, 
¨gs
, 0, ((*)()Ë
ßvech¨
, (*Ë&
°©e
);

74 *(
°©e
.
buf
) = '\0';

76  
°©e
.
Àn
;

77 
	}
}

79 
	$•rötf
(*
s
, c⁄° *
fmt
, ...)

81 
va_li°
 
¨gs
;

82 
îr
;

84 
	`va_°¨t
(
¨gs
, 
fmt
);

85 
îr
 = 
	`v•rötf
(
s
, 
fmt
, 
¨gs
);

86 
	`va_íd
(
¨gs
);

88  
îr
;

89 
	}
}

91 
	$¢¥ötf
(*
s
, 
size
, c⁄° *
fmt
, ...)

93 
va_li°
 
¨gs
;

94 
îr
;

96 
	`va_°¨t
(
¨gs
, 
fmt
);

97 
îr
 = 
	`v¢¥ötf
(
s
, 
size
, 
fmt
, 
¨gs
);

98 
	`va_íd
(
¨gs
);

100  
îr
;

101 
	}
}

	@410user/libstdio/sscanf.c

27 
	~<°d¨g.h
>

28 
	~"dosˇn.h
"

31 
	$ªadch¨
(
¨g
)

32 *
¨g
;

34  *(*(**)
¨g
)++;

35 
	}
}

38 
	$unch¨
(
c
, 
¨g
)

39 
c
;

40 *
¨g
;

42 (*(**)
¨g
)--;

43 
	}
}

45 
	$vssˇnf
(
s
, 
fmt
, 
¨gs
)

46 *
s
;

47 *
fmt
;

48 
va_li°
 
¨gs
;

50  
	`_dosˇn
(
fmt
, 
¨gs
, 
ªadch¨
, 
unch¨
, &
s
);

51 
	}
}

53 
	$ssˇnf
(*
s
, *
fmt
, ...)

55 
va_li°
 
¨gs
;

56 
vÆs
;

58 
	`va_°¨t
(
¨gs
, 
fmt
);

59 
vÆs
 = 
	`vssˇnf
(
s
, 
fmt
, 
¨gs
);

60 
	`va_íd
(
¨gs
);

62  
vÆs
;

63 
	}
}

	@410user/libstdio/stdio.h

21 #i‚de‡
_FLUX_MC_STDIO_H


22 
	#_FLUX_MC_STDIO_H


	)

24 #i‚de‡
ASSEMBLER


25 
	~<°ddef.h
>

26 
	~<°d¨g.h
>

27 
	~<ty≥s.h
>

29 
putch¨
(
__c
);

30 
puts
(c⁄° *
__°r
);

31 
	$¥ötf
(c⁄° *
__f‹m©
, ...)

32 
	`__©åibuã__
((
	`__f‹m©__
 (
__¥ötf__
, 1, 2)));

33 
	`v¥ötf
(c⁄° *
__f‹m©
, 
va_li°
 
__vl
);

34 
	$•rötf
(*
__de°
, c⁄° *
__f‹m©
, ...)

35 
	`__©åibuã__
((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

36 
	$¢¥ötf
(*
__de°
, 
size_t
 
__size
, c⁄° *
__f‹m©
, ...)

37 
	`__©åibuã__
((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

38 
	`v•rötf
(*
__de°
, c⁄° *
__f‹m©
, 
va_li°
 
__vl
);

39 
	`v¢¥ötf
(*
__de°
, 
size_t
 
__size
, c⁄° *
__f‹m©
, 
va_li°
 
__vl
);

40 
	$ssˇnf
(c⁄° *
__°r
, c⁄° *
__f‹m©
, ...)

41 
	`__©åibuã__
((
	`__f‹m©__
 (
__sˇnf__
, 2, 3)));

42 
	`hexdump
(*
buf
, 
Àn
);

	@410user/libstdlib/abs.c

19 
	~<°dlib.h
>

21 #unde‡
abs


23 
	$abs
(
vÆ
)

25  
vÆ
 >= 0 ? val : -val;

26 
	}
}

	@410user/libstdlib/atol.c

1 
	~<°ddef.h
>

2 
	~<°dlib.h
>

5 
	$©ﬁ
(c⁄° *
°r
)

7  
	`°πﬁ
(
°r
, 
NULL
, 10);

8 
	}
}

	@410user/libstdlib/ctype.c

19 
	$ißscii
(
c
)

21  ((
c
) >= 0) && ((c) <= 126);

22 
	}
}

24 
	$is˙ål
(
c
)

26  ((
c
) < ' ') || ((c) > 126);

27 
	}
}

29 
	$isdigô
(
c
)

31  ((
c
) >= '0') && ((c) <= '9');

32 
	}
}

34 
	$isgøph
(
c
)

36  ((
c
) > ' ') && ((c) <= 126);

37 
	}
}

39 
	$i¶owî
(
c
)

41  (
c
 >= 'a') && (c <= 'z');

42 
	}
}

44 
	$i•röt
(
c
)

46  ((
c
) >= ' ') && ((c) <= 126);

47 
	}
}

49 
	$is•a˚
(
c
)

51  ((
c
) == ' ') || ((c) == '\f')

52 || ((
c
) == '\n') || ((c) == '\r')

53 || ((
c
) == '\t') || ((c) == '\v');

54 
	}
}

56 
	$isuµî
(
c
)

58  (
c
 >= 'A') && (c <= 'Z');

59 
	}
}

61 
	$isxdigô
(
c
)

63  
	`isdigô
(
c
) ||

64 ((
c
 >= 'A') && (c <= 'F')) ||

65 ((
c
 >= 'a') && (c <= 'f'));

66 
	}
}

68 
	$ißÕha
(
c
)

70  
	`i¶owî
(
c
Ë|| 
	`isuµî
(c);

71 
	}
}

73 
	$iß um
(
c
)

75  
	`ißÕha
(
c
Ë|| 
	`isdigô
(c);

76 
	}
}

78 
	$i•un˘
(
c
)

80  
	`isgøph
(
c
Ë&& !
	`iß um
(c);

81 
	}
}

83 
	$touµî
(
c
)

85  ((
c
 >= 'a') && (c <= 'z')) ? (c - 'a' + 'A') : c;

86 
	}
}

88 
	$tﬁowî
(
c
)

90  ((
c
 >= 'A') && (c <= 'Z')) ? (c - 'A' + 'a') : c;

91 
	}
}

	@410user/libstdlib/ctype.h

18 #i‚de‡
_FLUX_MC_CTYPE_H_


19 
	#_FLUX_MC_CTYPE_H_


	)

21 
ißscii
(
c
);

22 
is˙ål
(
c
);

23 
isdigô
(
c
);

24 
isgøph
(
c
);

25 
i¶owî
(
c
);

26 
i•röt
(
c
);

27 
is•a˚
(
c
);

28 
isuµî
(
c
);

29 
isxdigô
(
c
);

30 
ißÕha
(
c
);

31 
iß um
(
c
);

32 
i•un˘
(
c
);

33 
touµî
(
c
);

34 
tﬁowî
(
c
);

	@410user/libstdlib/exit.c

7 
	~<sysˇŒ.h
>

9 
£t_°©us
(
°©us
);

10 
	$v™ish
(Ë
NORETURN
;

12 
	$exô
(
°©us
)

14 
	`£t_°©us
(
°©us
);

15 
	`v™ish
();

16 
	}
}

	@410user/libstdlib/qsort.c

34 
	~<ty≥s.h
>

35 
	~<°dlib.h
>

37 
ölöe
 *
med3
(*, *, *, (*)());

38 
ölöe
 
sw≠func
(*, *, , );

40 
	#mö
(
a
, 
b
Ë◊Ë< (bË?á : 
	)
b

45 
	#sw≠code
(
TYPE
, 
∑rmi
, 
∑rmj
, 
n
) { \

46 
i
 = (
n
Ë/  (
TYPE
); \

47 
TYPE
 *
pi
 = (TYPE *Ë(
∑rmi
); \

48 
TYPE
 *
pj
 = (TYPE *Ë(
∑rmj
); \

50 
TYPE
 
t
 = *
pi
; \

51 *
pi
++ = *
pj
; \

52 *
pj
++ = 
t
; \

53 } --
i
 > 0); \

54 }

	)

56 
	#SWAPINIT
(
a
, 
es
Ë
sw≠ty≥
 = ((*)a - (*)0) % () || \

57 
es
 % (Ë? 2 :É†=()? 0 : 1;

	)

59 
ölöe
 

60 
	$sw≠func
(
a
, 
b
, 
n
, 
sw≠ty≥
)

61 *
a
, *
b
;

62 
n
, 
sw≠ty≥
;

64 if(
sw≠ty≥
 <= 1)

65 
	`sw≠code
(, 
a
, 
b
, 
n
)

67 
	`sw≠code
(, 
a
, 
b
, 
n
)

68 
	}
}

70 
	#sw≠
(
a
, 
b
) \

71 i‡(
sw≠ty≥
 == 0) { \

72 
t
 = *(*)(
a
); \

73 *(*)(
a
Ë*(*)(
b
); \

74 *(*)(
b
Ë
t
; \

76 
	`sw≠func
(
a
, 
b
, 
es
, 
sw≠ty≥
)

	)

78 
	#vecsw≠
(
a
, 
b
, 
n
Ëi‡(“Ë> 0Ë
	`sw≠func
◊, b,Ç, 
sw≠ty≥
)

	)

80 
ölöe
 *

81 
	$med3
(
a
, 
b
, 
c
, 
cmp
)

82 *
a
, *
b
, *
c
;

83 (*
cmp
)();

85  
	`cmp
(
a
, 
b
) < 0 ?

86 (
	`cmp
(
b
, 
c
Ë< 0 ? b : (cmp(
a
, c) < 0 ? c :á ))

87 :(
	`cmp
(
b
, 
c
Ë> 0 ? b : (cmp(
a
, c) < 0 ?á : c ));

88 
	}
}

91 
	$qs‹t
(
a
, 
n
, 
es
, 
cmp
)

92 *
a
;

93 
size_t
 
n
, 
es
;

94 (*
cmp
)();

96 *
∑
, *
pb
, *
pc
, *
pd
, *
∂
, *
pm
, *
≤
;

97 
d
, 
r
, 
sw≠ty≥
, 
sw≠_˙t
;

99 
lo›
: 
	`SWAPINIT
(
a
, 
es
);

100 
sw≠_˙t
 = 0;

101 i‡(
n
 < 7) {

102 
pm
 = 
a
 + 
es
;Öm < (*Ë®+ 
n
 *És;Öm +=És)

103 
∂
 = 
pm
;Ö»> (*Ë
a
 && 
	`cmp
’»- 
es
,Öl) > 0;

104 
∂
 -
es
)

105 
	`sw≠
(
∂
,Ö»- 
es
);

108 
pm
 = 
a
 + (
n
 / 2Ë* 
es
;

109 i‡(
n
 > 7) {

110 
∂
 = 
a
;

111 
≤
 = 
a
 + (
n
 - 1Ë* 
es
;

112 i‡(
n
 > 40) {

113 
d
 = (
n
 / 8Ë* 
es
;

114 
∂
 = 
	`med3
’l,Ö»+ 
d
,Ö»+ 2 * d, 
cmp
);

115 
pm
 = 
	`med3
’m - 
d
,Öm,Öm + d, 
cmp
);

116 
≤
 = 
	`med3
’¿- 2 * 
d
,Ö¿- d,Ön, 
cmp
);

118 
pm
 = 
	`med3
(
∂
,Öm, 
≤
, 
cmp
);

120 
	`sw≠
(
a
, 
pm
);

121 
∑
 = 
pb
 = 
a
 + 
es
;

123 
pc
 = 
pd
 = 
a
 + (
n
 - 1Ë* 
es
;

125 
pb
 <
pc
 && (
r
 = 
	`cmp
’b, 
a
)) <= 0) {

126 i‡(
r
 == 0) {

127 
sw≠_˙t
 = 1;

128 
	`sw≠
(
∑
, 
pb
);

129 
∑
 +
es
;

131 
pb
 +
es
;

133 
pb
 <
pc
 && (
r
 = 
	`cmp
’c, 
a
)) >= 0) {

134 i‡(
r
 == 0) {

135 
sw≠_˙t
 = 1;

136 
	`sw≠
(
pc
, 
pd
);

137 
pd
 -
es
;

139 
pc
 -
es
;

141 i‡(
pb
 > 
pc
)

143 
	`sw≠
(
pb
, 
pc
);

144 
sw≠_˙t
 = 1;

145 
pb
 +
es
;

146 
pc
 -
es
;

148 i‡(
sw≠_˙t
 == 0) {

149 
pm
 = 
a
 + 
es
;Öm < (*Ë®+ 
n
 *És;Öm +=És)

150 
∂
 = 
pm
;Ö»> (*Ë
a
 && 
	`cmp
’»- 
es
,Öl) > 0;

151 
∂
 -
es
)

152 
	`sw≠
(
∂
,Ö»- 
es
);

156 
≤
 = 
a
 + 
n
 * 
es
;

157 
r
 = 
	`mö
(
∑
 - (*)
a
, 
pb
 -Öa);

158 
	`vecsw≠
(
a
, 
pb
 - 
r
,Ñ);

159 
r
 = 
	`mö
(
pd
 - 
pc
, 
≤
 -Öd - 
es
);

160 
	`vecsw≠
(
pb
, 
≤
 - 
r
,Ñ);

161 i‡((
r
 = 
pb
 - 
∑
Ë> 
es
)

162 
	`qs‹t
(
a
, 
r
 / 
es
,És, 
cmp
);

163 i‡((
r
 = 
pd
 - 
pc
Ë> 
es
) {

165 
a
 = 
≤
 - 
r
;

166 
n
 = 
r
 / 
es
;

167 
lo›
;

170 
	}
}

	@410user/libstdlib/rand.c

19 
	~<°dlib.h
>

21 
	g£ed
[2];

24 
	$ønd
()

26 
£ed
[0] += 0xa859c317;

27 
£ed
[0] += (seed[1] << 13) | (seed[1] >> 19);

28 
£ed
[1] += seed[0];

29  
£ed
[0] & 0x7FFFFFFF;

30 
	}
}

33 
	$§™d
(
√w_£ed
)

35 
£ed
[0] = sìd[1] = 
√w_£ed
;

36 
	}
}

40 
	#CYCLES
 100000000

	)

42 
	$maö
(
¨gc
, **
¨gv
)

44 
‹ig_£ed
 = 
	`©ﬁ
(
¨gv
[1]);

45 
i
;

47 
	`§™d
(
‹ig_£ed
);

48 
i
 = 0; i < 
CYCLES
; i++)

50 
r
 = 
	`ønd
();

52 i‡((
£ed
[0] =
‹ig_£ed
) && (seed[1] == orig_seed))

54 
	`¥ötf
("ª≥©e†a·î %d cy˛es\n", 
i
);

55 
	`exô
(0);

58 
	`¥ötf
("°û»nŸÑïótögá·î %d cy˛es\n", 
CYCLES
);

59 
	}
}

	@410user/libstdlib/stdlib.h

1 #i‚de‡
_STDLIB_H_


2 
	#_STDLIB_H_


	)

4 
	~<°ddef.h
>

5 
	~<mÆloc.h
>

10 
	$exô
(
°©us
Ë
	`__©åibuã__
((
__n‹ëu∫__
));

14 
	`©ﬁ
(c⁄° *
__°r
);

15 
	#©oi
(
°r
Ë(()
	`©ﬁ
(°r))

	)

17 
	`°πﬁ
(c⁄° *
__p
, **
__out_p
, 
__ba£
);

18 
	`°πoul
(c⁄° *
__p
, **
__out_p
, 
__ba£
);

20 
	#RAND_MAX
 0x80000000

	)

21 
	`ønd
();

22 
	`§™d
(
√w_£ed
);

24 
	`abs
(
vÆ
);

26 
	`∑nic
(const *, ...);

	@410user/libstdlib/strtol.c

22 
	~<°dlib.h
>

23 
	~<˘y≥.h
>

24 
	~<°rög.h
>

26 
	$°πﬁ
(c⁄° *
p
, **
out_p
, 
ba£
)

28 
v
 = 0;

29 
is_√g
 = 0;

31 
	`is•a˚
(*
p
))

32 
p
++;

33 i‡(*
p
 == '-')

34 
is_√g
 = 1, 
p
++;

35 i‡(*
p
 == '+')

36 
is_√g
 = 0;

37 i‡(((
ba£
 == 16) || (base == 0)) &&

38 ((*
p
 == '0') && ((p[1] == 'x') || (p[1] == 'X'))))

40 
p
 += 2;

41 
ba£
 = 16;

43 i‡(
ba£
 == 0)

45 i‡(*
p
 == '0')

46 
ba£
 = 8;

48 
ba£
 = 10;

52 
c
 = *
p
;

53 i‡((
c
 >'0'Ë&& (¯<'9'Ë&& (¯- '0' < 
ba£
))

54 
v
 = (v * 
ba£
Ë+ (
c
 - '0');

55 i‡((
c
 >'a'Ë&& (¯<'z'Ë&& (¯- 'a' + 10 < 
ba£
))

56 
v
 = (v * 
ba£
Ë+ (
c
 - 'a' + 10);

57 i‡((
c
 >'A'Ë&& (¯<'Z'Ë&& (¯- 'A' + 10 < 
ba£
))

58 
v
 = (v * 
ba£
Ë+ (
c
 - 'A' + 10);

61 
p
++;

63 i‡(
is_√g
)

64 
v
 = -v;

65 i‡(
out_p
Ë*out_∞(*)
p
;

66  
v
;

67 
	}
}

	@410user/libstdlib/strtoul.c

22 
	~<°dlib.h
>

23 
	~<˘y≥.h
>

24 
	~<°rög.h
>

26 
	$°πoul
(c⁄° *
p
, **
out_p
, 
ba£
)

28 
v
 = 0;

30 
	`is•a˚
(*
p
))

31 
p
++;

32 i‡(((
ba£
 == 16) || (base == 0)) &&

33 ((*
p
 == '0') && ((p[1] == 'x') || (p[1] == 'X'))))

35 
p
 += 2;

36 
ba£
 = 16;

38 i‡(
ba£
 == 0)

40 i‡(*
p
 == '0')

41 
ba£
 = 8;

43 
ba£
 = 10;

47 
c
 = *
p
;

48 i‡((
c
 >'0'Ë&& (¯<'9'Ë&& (¯- '0' < 
ba£
))

49 
v
 = (v * 
ba£
Ë+ (
c
 - '0');

50 i‡((
c
 >'a'Ë&& (¯<'z'Ë&& (¯- 'a' + 10 < 
ba£
))

51 
v
 = (v * 
ba£
Ë+ (
c
 - 'a' + 10);

52 i‡((
c
 >'A'Ë&& (¯<'Z'Ë&& (¯- 'A' + 10 < 
ba£
))

53 
v
 = (v * 
ba£
Ë+ (
c
 - 'A' + 10);

56 
p
++;

59 i‡(
out_p
Ë*out_∞(*)
p
;

60  
v
;

61 
	}
}

	@410user/libstring/memcmp.c

42 
	$memcmp
(c⁄° *
s1v
, c⁄° *
s2v
, 
size
)

44 c⁄° *
s1
 = 
s1v
, *
s2
 = 
s2v
;

45 
a
, 
b
;

47 
size
-- > 0) {

48 i‡((
a
 = *
s1
++Ë!(
b
 = *
s2
++))

49  (
a
-
b
);

53 
	}
}

	@410user/libstring/memset.c

22 
	~<ty≥s.h
>

25 
	$mem£t
(*
tov
, 
c
, 
size_t
 
Àn
)

27 *
to
 = 
tov
;

29 
Àn
-- > 0)

30 *
to
++ = 
c
;

32  
tov
;

33 
	}
}

	@410user/libstring/rindex.c

19 
	~<°rög.h
>

20 
	~<°dlib.h
>

22 *
	$rödex
(c⁄° *
s
, 
c
)

24 *
ô
 = 0;

28 i‡(*
s
 =
c
)

29 
ô
 = (*)
s
;

30 i‡(*
s
 == 0)

31  
ô
;

32 
s
++;

34 
	}
}

	@410user/libstring/strcat.c

28 
	$°rˇt
(
s
, 
add
)

29 *
s
, *
add
;

31 *
ªt
 = 
s
;

33 *
s
) s++;

35 (*
s
++ = *
add
++) != 0);

37  
ªt
;

38 
	}
}

	@410user/libstring/strchr.c

22 
	~<°rög.h
>

24 *
	$°rchr
(c⁄° *
s
, 
c
)

28 i‡(*
s
 =
c
)

29  (*)
s
;

30 i‡(*
s
 == 0)

32 
s
++;

34 
	}
}

	@410user/libstring/strcmp.c

42 
	$°rcmp
(
s1
,
s2
)

43 *
s1
, *
s2
;

45 
a
, 
b
;

49  (
a
 = *
s1
++), (
b
 = *
s2
++),á && b) {

50 i‡(
a
 !
b
)

51  (
a
-
b
);

54  
a
-
b
;

55 
	}
}

	@410user/libstring/strcpy.c

37 
	$°r˝y
(
to
,
‰om
)

38 *
to
, *
‰om
;

40 *
ªt
 = 
to
;

42 (*
to
++ = *
‰om
++) != 0);

44  
ªt
;

45 
	}
}

	@410user/libstring/strcspn.c

37 
	~<ty≥s.h
>

38 
	~<°rög.h
>

43 
size_t


44 
	$°rc•n
(
s1
, 
s2
)

45 c⁄° *
s1
;

46 c⁄° *
s2
;

48 c⁄° *
p
, *
•™p
;

49 
c
, 
sc
;

55 
p
 = 
s1
;;) {

56 
c
 = *
p
++;

57 
•™p
 = 
s2
;

59 i‡((
sc
 = *
•™p
++Ë=
c
)

60  (
p
 - 1 - 
s1
);

61 } 
sc
 != 0);

64 
	}
}

	@410user/libstring/strdup.c

19 
	~<°rög.h
>

20 
	~<°dlib.h
>

24 *
	$°rdup
(c⁄° *
§c
)

26 *
buf
 = 
	`mÆloc
(
	`°æí
(
§c
)+1);

27 i‡(
buf
)

28 
	`°r˝y
(
buf
, 
§c
);

29  
buf
;

30 
	}
}

	@410user/libstring/string.h

21 #i‚de‡
_FLUX_MC_STRING_H_


22 
	#_FLUX_MC_STRING_H_


	)

24 
	~<ty≥s.h
>

26 
size_t
 
°æí
(c⁄° *
__s
);

27 *
°r˝y
(*
__de°
, c⁄° *
__§c
);

28 *
°∫˝y
(*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
);

29 *
°rdup
(c⁄° *
__s
);

30 *
°rˇt
(*
__de°
, c⁄° *
__§c
);

31 *
°∫ˇt
(*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
);

32 
°rcmp
(c⁄° *
__a
, c⁄° *
__b
);

33 
°∫cmp
(c⁄° *
__a
, c⁄° *
__b
, 
size_t
 
__n
);

34 *
°rchr
(c⁄° *
__s
, 
__c
);

35 *
°ºchr
(c⁄° *
__s
, 
__c
);

36 *
°r°r
(c⁄° *
__hay°ack
, c⁄° *
__√edÀ
);

37 *
°πok
(*
__s
, c⁄° *
__dñim
);

38 *
°Ωbrk
(c⁄° *
__s1
, c⁄° *
__s2
);

39 
size_t
 
°r•n
(c⁄° *
__s1
, c⁄° *
__s2
);

40 
size_t
 
°rc•n
(c⁄° *
__s1
, c⁄° *
__s2
);

42 *
mem£t
(*
__to
, 
__ch
, 
__n
);

43 
memcmp
(c⁄° *
s1v
, c⁄° *
s2v
, 
size
);

46 *
mem˝y
(*
__to
, c⁄° *
__‰om
, 
__n
);

47 *
memmove
(*
__to
, c⁄° *
__‰om
, 
__n
);

51 *
ödex
(c⁄° *
__s
, 
__c
);

52 *
rödex
(c⁄° *
__s
, 
__c
);

54 
bc›y
(c⁄° *
__‰om
, *
__to
, 
__n
);

55 
bzîo
(*
__to
, 
__n
);

	@410user/libstring/strlen.c

36 
	$°æí
(
°rög
)

37 *
°rög
;

39 *
ªt
 = 
°rög
;

41 *
°rög
++);

43  
°rög
 - 1 - 
ªt
;

45 
	}
}

	@410user/libstring/strncat.c

37 
	~<ty≥s.h
>

38 
	~<°rög.h
>

45 
	$°∫ˇt
(
d°
, 
§c
, 
n
)

46 *
d°
;

47 c⁄° *
§c
;

48 
size_t
 
n
;

50 i‡(
n
 != 0) {

51 *
d
 = 
d°
;

52 c⁄° *
s
 = 
§c
;

54 *
d
 != 0)

55 
d
++;

57 i‡((*
d
 = *
s
++) == 0)

59 
d
++;

60 } --
n
 != 0);

61 *
d
 = 0;

63  (
d°
);

64 
	}
}

	@410user/libstring/strncmp.c

19 
	~<°rög.h
>

22 
	$°∫cmp
(c⁄° *
s1
, c⁄° *
s2
, 
size_t
 
n
)

26 i‡(
n
 <= 0)

28 i‡(*
s1
 !*
s2
)

29  *
s1
 - *
s2
;

30 i‡(*
s1
 == 0)

33 
s1
++;

34 
s2
++;

35 
n
--;

37 
	}
}

	@410user/libstring/strncpy.c

39 
	$°∫˝y
(
to
, 
‰om
, 
cou¡
)

40 *
to
, *
‰om
;

41 
cou¡
;

43 *
ªt
 = 
to
;

45 
cou¡
-- > 0 && (*
to
++ = *
‰om
++));

47 
cou¡
-- > 0)

48 *
to
++ = '\0';

50  
ªt
;

51 
	}
}

	@410user/libstring/strpbrk.c

34 
	~<ty≥s.h
>

35 
	~<°ddef.h
>

36 
	~<°rög.h
>

42 
	$°Ωbrk
(
s1
, 
s2
)

43 c⁄° *
s1
, *
s2
;

45 c⁄° *
sˇ≈
;

46 
c
, 
sc
;

48 (
c
 = *
s1
++) != 0) {

49 
sˇ≈
 = 
s2
; (
sc
 = *scanp++) != 0;)

50 i‡(
sc
 =
c
)

51  ((*)(
s1
 - 1));

53  (
NULL
);

54 
	}
}

	@410user/libstring/strrchr.c

22 
	~<°rög.h
>

23 
	~<°ddef.h
>

26 
	$°ºchr
(c⁄° *
s
, 
c
)

28 *
ßve
;

30 
ßve
 = 
NULL
; *
s
 != '\0'; s++)

31 i‡(*
s
 =
c
)

32 
ßve
 = (*)
s
;

34  
ßve
;

35 
	}
}

	@410user/libstring/strspn.c

34 
	~<ty≥s.h
>

35 
	~<°rög.h
>

40 
size_t


41 
	$°r•n
(
s1
, 
s2
)

42 c⁄° *
s1
;

43 c⁄° *
s2
;

45 c⁄° *
p
 = 
s1
, *
•™p
;

46 
c
, 
sc
;

51 
c⁄t
:

52 
c
 = *
p
++;

53 
•™p
 = 
s2
; (
sc
 = *spanp++) != 0;)

54 i‡(
sc
 =
c
)

55 
c⁄t
;

56  (
p
 - 1 - 
s1
);

57 
	}
}

	@410user/libstring/strstr.c

19 
	~<°rög.h
>

20 
	~<°dlib.h
>

22 *
	$°r°r
(c⁄° *
hay°ack
, c⁄° *
√edÀ
)

24 
hÀn
 = 
	`°æí
(
hay°ack
);

25 
∆í
 = 
	`°æí
(
√edÀ
);

27 
hÀn
 >
∆í
)

29 i‡(!
	`memcmp
(
hay°ack
, 
√edÀ
, 
∆í
))

30  (*)
hay°ack
;

32 
hay°ack
++;

33 
hÀn
--;

36 
	}
}

	@410user/libstring/strtok.c

34 
	~<°rög.h
>

35 
	~<°ddef.h
>

38 
	$°πok
(
s
, 
dñim
)

39 *
s
;

40 c⁄° *
dñim
;

42 *
•™p
;

43 
c
, 
sc
;

44 *
tok
;

45 *
œ°
;

48 i‡(
s
 =
NULL
 && (†
œ°
) == NULL)

49  (
NULL
);

54 
c⁄t
:

55 
c
 = *
s
++;

56 
•™p
 = (*)
dñim
; (
sc
 = *spanp++) != 0;) {

57 i‡(
c
 =
sc
)

58 
c⁄t
;

61 i‡(
c
 == 0) {

62 
œ°
 = 
NULL
;

63  (
NULL
);

65 
tok
 = 
s
 - 1;

72 
c
 = *
s
++;

73 
•™p
 = (*)
dñim
;

75 i‡((
sc
 = *
•™p
++Ë=
c
) {

76 i‡(
c
 == 0)

77 
s
 = 
NULL
;

79 
s
[-1] = 0;

80 
œ°
 = 
s
;

81  (
tok
);

83 } 
sc
 != 0);

86 
	}
}

	@410user/libtest/report.c

6 
	~<°dio.h
>

7 
	~<°dlib.h
>

8 
	~<ªp‹t.h
>

10 
	~"410_ã°s.h
"

15 c⁄° *
	g°¨t_msgs
[] = {

16 [
START_CMPLT
] = 
TEST_START_CMPLT
,

17 [
START_ABORT
] = 
TEST_START_ABORT
,

18 [
START_4EVER
] = 
TEST_START_4EVER
,

21 c⁄° *
	gíd_msgs
[] = {

22 [
END_SUCCESS
] = 
TEST_END_SUCCESS
,

23 [
END_FAIL
] = 
TEST_END_FAIL
,

26 
	$f‹m©_°¨t
(*
buf
, 
Àn
, 
ty≥
) {

27 
	`¢¥ötf
(
buf
, 
Àn
, "%s%s%s", 
TEST_PFX
, 
ã°_«me
, 
°¨t_msgs
[
ty≥
]);

28 
	}
}

30 
	$f‹m©_íd
(*
buf
, 
Àn
, 
ty≥
) {

31 
	`¢¥ötf
(
buf
, 
Àn
, "%s%s%s", 
TEST_PFX
, 
ã°_«me
, 
íd_msgs
[
ty≥
]);

32 
	}
}

34 
	$f‹m©_misc
(*
buf
, 
Àn
, c⁄° *
msg
) {

35 
	`¢¥ötf
(
buf
, 
Àn
, "%s%s%s", 
TEST_PFX
, 
ã°_«me
, 
msg
);

36 
	}
}

38 
	$f‹m©_îr
(*
buf
, 
Àn
, c⁄° *
msg
, 
code
) {

39 
	`¢¥ötf
(
buf
, 
Àn
, "%s%s%s%d", 
TEST_PFX
, 
ã°_«me
, 
msg
, 
code
);

40 
	}
}

42 
	$ªp‹t_°¨t
(
ty≥
) {

43 
buf
[256];

44 
	`f‹m©_°¨t
(
buf
, (buf), 
ty≥
);

45 
	`sim_puts
(
buf
);

46 
	}
}

48 
	$ªp‹t_íd
(
ty≥
) {

49 
buf
[256];

50 
	`f‹m©_íd
(
buf
, (buf), 
ty≥
);

51 
	`sim_puts
(
buf
);

52 
	}
}

54 
	$ªp‹t_misc
(c⁄° *
msg
) {

55 
buf
[256];

56 
	`f‹m©_misc
(
buf
, (buf), 
msg
);

57 
	`sim_puts
(
buf
);

58 
	}
}

60 
	$ªp‹t_fmt
(c⁄° *
fmt
, ...) {

61 
va_li°
 
≠
;

62 
b
[256];

63 
buf
[256];

64 
	`va_°¨t
(
≠
, 
fmt
);

65 
	`v¢¥ötf
(
b
, (b), 
fmt
, 
≠
);

66 
	`va_íd
(
≠
);

67 
	`¢¥ötf
(
buf
, (buf), "%s%s%s", 
TEST_PFX
, 
ã°_«me
, 
b
);

68 
	`sim_puts
(
buf
);

69 
	}
}

71 
	$ªp‹t_îr
(c⁄° *
msg
, 
code
) {

72 
buf
[256];

73 
	`f‹m©_îr
(
buf
, (buf), 
msg
, 
code
);

74 
	`sim_puts
(
buf
);

75 
	}
}

77 
	$ªp‹t_Áèl
(c⁄° *
msg
, 
code
) {

78 
	`ªp‹t_îr
(
msg
, 
code
);

79 
	`ªp‹t_íd
(
END_FAIL
);

80 
	}
}

82 
	$ªp‹t_⁄_îr
(c⁄° *
exp
, 
löe
, 
v
) {

83 
buf
[256];

84 i‡(
v
 >= 0) { ; }

85 
	`¢¥ötf
(
buf
, (buf), "%s%sErr %d onÜine %d: `%s'",

86 
TEST_PFX
, 
ã°_«me
, 
v
, 
löe
, 
exp
);

87 
	`sim_puts
(
buf
);

88 
	}
}

90 
	$Áèl_⁄_îr
(c⁄° *
exp
, 
löe
, 
v
) {

91 
	`ªp‹t_⁄_îr
(
exp
, 
löe
, 
v
);

92 i‡(
v
 >= 0) { ; }

93 
	`ªp‹t_íd
(
END_FAIL
);

94 
	`exô
(
v
);

95 
	}
}

	@410user/libtest/report.h

6 #i‚de‡
LIBTEST_REPORT_H


7 
	#LIBTEST_REPORT_H


	)

9 c⁄° * 
ã°_«me
;

13 
	mSTART_CMPLT
 = 0,

14 
	mSTART_ABORT
 = 1,

15 
	mSTART_4EVER
 = 2,

24 
f‹m©_°¨t
(*
buf
, 
Àn
, 
ty≥
);

29 
ªp‹t_°¨t
(
ty≥
);

32 
	mEND_SUCCESS
 = 0,

33 
	mEND_FAIL
 = 1,

42 
f‹m©_íd
(*
buf
, 
Àn
, 
ty≥
);

47 
ªp‹t_íd
(
ty≥
);

55 
f‹m©_misc
(*
buf
, 
Àn
, c⁄° *
msg
);

61 
ªp‹t_misc
(c⁄° *
msg
);

68 
ªp‹t_fmt
(c⁄° *
fmt
, ...);

77 
f‹m©_îr
(*
buf
, 
Àn
, c⁄° *
msg
, 
code
);

84 
ªp‹t_îr
(c⁄° *
msg
, 
code
);

91 
ªp‹t_Áèl
(c⁄° *
msg
, 
code
);

99 
ªp‹t_⁄_îr
(c⁄° *
exp
, 
löe
, 
v
);

107 
Áèl_⁄_îr
(c⁄° *
exp
, 
löe
, 
v
);

	@410user/libtest/test.c

	@410user/libtest/test.h

6 #i‚de‡
LIBTEST_TEST_H


7 
	#LIBTEST_TEST_H


	)

21 
exhau°i⁄
((*
func
)(*), *
¨g
Ë
	`__©åibuã__
((
n‹ëu∫
));

32 
	$f‹k_™d_exô
(*
¨g
Ë
	`__©åibuã__
((
n‹ëu∫
));

40 
	$exô_suc˚ss
(*
¨g
Ë
	`__©åibuã__
((
n‹ëu∫
));

45 
	`ûÀgÆ
();

50 
	`assuªdly_misbehave
(
mode
);

	@410user/libthrgrp/thrgrp.c

14 
	~<c⁄d.h
>

15 
	~<thrgΩ.h
>

16 
	~<thªad.h
>

17 
	~<°ddef.h
>

18 
	~<sysˇŒ.h
>

19 
	~<°dlib.h
>

20 
	~<°dio.h
>

21 
	~<simics.h
>

22 
	~<as£π.h
>

35 
	$thrgΩ_öô_group
(
thrgΩ_group_t
 *
eg
){

36 
ªt
;

37 
eg
->
zombõ_ö
=
NULL
;

38 
eg
->
zombõ_out
=
NULL
;

39 if((
ªt
=
	`muãx_öô
(&(
eg
->
lock
))))

40  
ªt
;

41 if((
ªt
=
	`c⁄d_öô
(&(
eg
->
cv
))))

42  
ªt
;

44 
	}
}

57 
	$thrgΩ_de°roy_group
(
thrgΩ_group_t
 *
eg
){

58 
ªt
=0;

59 
	`muãx_lock
(&(
eg
->
lock
));

61 if(
eg
->
zombõ_ö
 ||Ég->
zombõ_out
)

62 
ªt
 = 1;

63 
	`muãx_u∆ock
(&(
eg
->
lock
));

64 
	`muãx_de°roy
(&(
eg
->
lock
));

65 
	`c⁄d_de°roy
(&(
eg
->
cv
));

66  
ªt
;

67 
	}
}

77 *
	$thrgΩ_bŸtom
(*
ö_d©a
){

78 
thrgΩ_d©a_t
 *
d©a
 = (thrgΩ_d©a_à*Ë
ö_d©a
;

79 *(*
func
)(*Ë
d©a
->
tmp
.func;

80 *
¨g
 = 
d©a
->
tmp
.arg;

81 
thrgΩ_group_t
 *
tg
 = 
d©a
->
tmp
.tg;

82 * 
ªt
;

87 
d©a
->
qñ
.
√xt
 = 
NULL
;

88 
d©a
->
qñ
.
tid
 = 
	`thr_gëid
();

91 
ªt
 = 
	`func
(
¨g
);

94 
	`muãx_lock
(&(
tg
->
lock
));

95 if(
tg
->
zombõ_ö
)

96 
tg
->
zombõ_ö
->
√xt
 = &(
d©a
->
qñ
);

97 
tg
->
zombõ_ö
 = &(
d©a
->
qñ
);

98 if(
tg
->
zombõ_out
 =
NULL
)

99 
tg
->
zombõ_out
 = &(
d©a
->
qñ
);

102 
	`c⁄d_sig«l
(&(
tg
->
cv
));

103 
	`muãx_u∆ock
(&(
tg
->
lock
));

106  
ªt
;

107 
	}
}

116 
thrgΩ_¸óã
(
thrgΩ_group_t
 *
tg
, *(*
func
)(*),*
¨g
){

117 
	gtid
;

118 
thrgΩ_d©a_t
 * 
	gd©a
;

123 
	gd©a
 = 
mÆloc
((
thrgΩ_d©a_t
));

124 if(
	gd©a
 =
NULL
)

126 
	gd©a
->
	gtmp
.
	gfunc
 = 
func
;

127 
	gd©a
->
	gtmp
.
	g¨g
 = 
¨g
;

128 
	gd©a
->
	gtmp
.
	gtg
 = 
tg
;

131 
	gtid
 = 
thr_¸óã
(
thrgΩ_bŸtom
, 
d©a
);

134 if(
	gtid
 < 0)

135  
	gtid
;

160 
	$thrgΩ_joö
(
thrgΩ_group_t
* 
eg
, **
°©us
){

161 
thrgΩ_queue_ñ_t
 *
thr_d©a
;

162 
tid
;

164 
	`muãx_lock
(&(
eg
->
lock
));

166 
eg
->
zombõ_out
 =
NULL
){

168 
	`c⁄d_waô
(&(
eg
->
cv
), &”g->
lock
));

174 
thr_d©a
 = 
eg
->
zombõ_out
;

175 if(
eg
->
zombõ_out
 =eg->
zombõ_ö
){

176 
eg
->
zombõ_ö
 = 
NULL
;

177 
eg
->
zombõ_out
 = 
NULL
;

179 
eg
->
zombõ_out
 =Ég->zombõ_out->
√xt
;

181 
	`muãx_u∆ock
(&(
eg
->
lock
));

184 
tid
 = 
thr_d©a
->tid;

186 
	`‰ì
(
thr_d©a
);

188  
	`thr_joö
(
tid
, 
°©us
);

189 
	}
}

	@410user/libthrgrp/thrgrp.h

8 #i‚de‡
THRGRP_H


9 
	#THRGRP_H


	)

10 
	~<c⁄d.h
>

16 
	sthrgΩ_queue_ñ
{

18 
thrgΩ_queue_ñ
 *
	m√xt
;

20 
	mtid
;

21 } 
	tthrgΩ_queue_ñ_t
;

30 
c⁄d_t
 
	mcv
;

32 
thrgΩ_queue_ñ_t
 *
	mzombõ_ö
;

33 
thrgΩ_queue_ñ_t
 *
	mzombõ_out
;

35 
muãx_t
 
	mlock
;

36 } 
	tthrgΩ_group_t
;

42 
	sthrgΩ_tmp_d©a
{

44 *(*
	mfunc
)(*);

46 *
	m¨g
;

48 
thrgΩ_group_t
 *
	mtg
;

49 } 
	tthrgΩ_tmp_d©a_t
;

56 
	uthrgΩ_d©a
{

58 
thrgΩ_queue_ñ_t
 
	mqñ
;

60 
thrgΩ_tmp_d©a_t
 
	mtmp
;

61 } 
	tthrgΩ_d©a_t
;

64 
thrgΩ_öô_group
(
thrgΩ_group_t
 *
eg
);

66 
thrgΩ_de°roy_group
(
thrgΩ_group_t
* 
eg
);

68 
thrgΩ_¸óã
(
thrgΩ_group_t
 *
tg
, *(*
func
)(*), *
¨gs
);

70 
thrgΩ_joö
(
thrgΩ_group_t
 *
tg
, **
°©us
);

	@410user/libx86/gccisms.c

41 
	#HALF_BITS
 (()*8/2)

	)

42 
	#B
 (()1 << 
HALF_BITS
Ë

	)

43 
	#H
 1

	)

44 
	#L
 0

	)

55 
	#HHALF
(
x
Ë((
u_öt
)(xË>> 
HALF_BITS
)

	)

56 
	#LHALF
(
x
Ë((
u_öt
)(xË& ((()1 << 
HALF_BITS
Ë- 1))

	)

58 
	tu_öt
;

60 
u_öt
 
	tdigô
;

61 
	tquad_t
;

62 
	tu_quad_t
;

68 
	uuu
 {

69 
quad_t
 
	mq
;

70 
u_quad_t
 
	muq
;

71 
	m¶
[2];

72 
u_öt
 
	mul
[2];

76 
	#COMBINE
(
a
, 
b
Ë(((
u_öt
)◊Ë<< 
HALF_BITS
Ë| (b))

	)

79 
shl
(
digô
 *
p
, 
Àn
, 
sh
);

89 
u_quad_t


90 
	$__qdivªm
(
u_quad_t
 
uq
, u_quad_à
vq
, u_quad_à*
¨q
)

92 
uu
 
tmp
;

93 
digô
 *
u
, *
v
, *
q
;

94 
digô
 
v1
, 
v2
;

95 
u_öt
 
qh©
, 
rh©
, 
t
;

96 
m
, 
n
, 
d
, 
j
, 
i
;

97 
digô
 
u•a˚
[5], 
v•a˚
[5], 
q•a˚
[5];

102 i‡(
vq
 == 0) {

104 vﬁ©ûêc⁄° 
zîo
 = 0;

106 
tmp
.
ul
[
H
] =Åmp.ul[
L
] = 1 / 
zîo
;

107 i‡(
¨q
)

108 *
¨q
 = 
uq
;

109  (
tmp
.
q
);

111 i‡(
uq
 < 
vq
) {

112 i‡(
¨q
)

113 *
¨q
 = 
uq
;

116 
u
 = &
u•a˚
[0];

117 
v
 = &
v•a˚
[0];

118 
q
 = &
q•a˚
[0];

133 
tmp
.
uq
 = uq;

134 
u
[0] = 0;

135 
u
[1] = (
digô
)
	`HHALF
(
tmp
.
ul
[
H
]);

136 
u
[2] = (
digô
)
	`LHALF
(
tmp
.
ul
[
H
]);

137 
u
[3] = (
digô
)
	`HHALF
(
tmp
.
ul
[
L
]);

138 
u
[4] = (
digô
)
	`LHALF
(
tmp
.
ul
[
L
]);

139 
tmp
.
uq
 = 
vq
;

140 
v
[1] = (
digô
)
	`HHALF
(
tmp
.
ul
[
H
]);

141 
v
[2] = (
digô
)
	`LHALF
(
tmp
.
ul
[
H
]);

142 
v
[3] = (
digô
)
	`HHALF
(
tmp
.
ul
[
L
]);

143 
v
[4] = (
digô
)
	`LHALF
(
tmp
.
ul
[
L
]);

144 
n
 = 4; 
v
[1] == 0; v++) {

145 i‡(--
n
 == 1) {

146 
u_öt
 
rbj
;

147 
digô
 
q1
, 
q2
, 
q3
, 
q4
;

157 
t
 = 
v
[2];

158 
q1
 = (
digô
)(
u
[1] / 
t
);

159 
rbj
 = 
	`COMBINE
(
u
[1] % 
t
, u[2]);

160 
q2
 = (
digô
)(
rbj
 / 
t
);

161 
rbj
 = 
	`COMBINE
‘bj % 
t
, 
u
[3]);

162 
q3
 = (
digô
)(
rbj
 / 
t
);

163 
rbj
 = 
	`COMBINE
‘bj % 
t
, 
u
[4]);

164 
q4
 = (
digô
)(
rbj
 / 
t
);

165 i‡(
¨q
)

166 *
¨q
 = 
rbj
 % 
t
;

167 
tmp
.
ul
[
H
] = 
	`COMBINE
(
q1
, 
q2
);

168 
tmp
.
ul
[
L
] = 
	`COMBINE
(
q3
, 
q4
);

169  (
tmp
.
q
);

178 
m
 = 4 - 
n
; 
u
[1] == 0; u++)

179 
m
--;

180 
i
 = 4 - 
m
; --i >= 0;)

181 
q
[
i
] = 0;

182 
q
 +4 - 
m
;

190 
d
 = 0;

191 
t
 = 
v
[1];Å < 
B
 / 2;Å <<= 1)

192 
d
++;

193 i‡(
d
 > 0) {

194 
	`shl
(&
u
[0], 
m
 + 
n
, 
d
);

195 
	`shl
(&
v
[1], 
n
 - 1, 
d
);

200 
j
 = 0;

201 
v1
 = 
v
[1];

202 
v2
 = 
v
[2];

204 
digô
 
uj0
, 
uj1
, 
uj2
;

214 
uj0
 = 
u
[
j
 + 0];

215 
uj1
 = 
u
[
j
 + 1];

216 
uj2
 = 
u
[
j
 + 2];

217 i‡(
uj0
 =
v1
) {

218 
qh©
 = 
B
;

219 
rh©
 = 
uj1
;

220 
qh©_too_big
;

222 
u_öt
 
¬
 = 
	`COMBINE
(
uj0
, 
uj1
);

223 
qh©
 = 
¬
 / 
v1
;

224 
rh©
 = 
¬
 % 
v1
;

226 
v2
 * 
qh©
 > 
	`COMBINE
(
rh©
, 
uj2
)) {

227 
qh©_too_big
:

228 
qh©
--;

229 i‡((
rh©
 +
v1
Ë>
B
)

238 
t
 = 0, 
i
 = 
n
; i > 0; i--) {

239 
t
 = 
u
[
i
 + 
j
] - 
v
[i] * 
qh©
 -Å;

240 
u
[
i
 + 
j
] = (
digô
)
	`LHALF
(
t
);

241 
t
 = (
B
 - 
	`HHALF
(t)) & (B - 1);

243 
t
 = 
u
[
j
] -Å;

244 
u
[
j
] = (
digô
)
	`LHALF
(
t
);

251 i‡(
	`HHALF
(
t
)) {

252 
qh©
--;

253 
t
 = 0, 
i
 = 
n
; i > 0; i--) {

254 
t
 +
u
[
i
 + 
j
] + 
v
[i];

255 
u
[
i
 + 
j
] = (
digô
)
	`LHALF
(
t
);

256 
t
 = 
	`HHALF
(t);

258 
u
[
j
] = (
digô
)
	`LHALF
(u[j] + 
t
);

260 
q
[
j
] = (
digô
)
qh©
;

261 } ++
j
 <
m
);

268 i‡(
¨q
) {

269 i‡(
d
) {

270 
i
 = 
m
 + 
n
; i > m; --i)

271 
u
[
i
] = (
digô
)(((
u_öt
)u[i] >> 
d
) |

272 
	`LHALF
((
u_öt
)
u
[
i
 - 1] << (
HALF_BITS
 - 
d
)));

273 
u
[
i
] = 0;

275 
tmp
.
ul
[
H
] = 
	`COMBINE
(
u•a˚
[1], uspace[2]);

276 
tmp
.
ul
[
L
] = 
	`COMBINE
(
u•a˚
[3], uspace[4]);

277 *
¨q
 = 
tmp
.
q
;

280 
tmp
.
ul
[
H
] = 
	`COMBINE
(
q•a˚
[1], qspace[2]);

281 
tmp
.
ul
[
L
] = 
	`COMBINE
(
q•a˚
[3], qspace[4]);

282  (
tmp
.
q
);

283 
	}
}

291 
	$shl
(
digô
 *
p
, 
Àn
, 
sh
)

293 
i
;

295 
i
 = 0; i < 
Àn
; i++)

296 
p
[
i
] = (
digô
)(
	`LHALF
((
u_öt
Ì[i] << 
sh
) |

297 ((
u_öt
)
p
[
i
 + 1] >> (
HALF_BITS
 - 
sh
)));

298 
p
[
i
] = (
digô
)(
	`LHALF
((
u_öt
Ì[i] << 
sh
));

299 
	}
}

305 
u_quad_t


306 
	$__umoddi3
(
u_quad_t
 
a
, u_quad_à
b
)

308 
u_quad_t
 
r
;

310 ()
	`__qdivªm
(
a
, 
b
, &
r
);

311  (
r
);

312 
	}
}

317 
u_quad_t


318 
	$__udivdi3
(
u_quad_t
 
a
, u_quad_à
b
)

321  (
	`__qdivªm
(
a
, 
b
, (
u_quad_t
 *)0));

322 
	}
}

	@410user/progs/actual_wait.c

10 
	~<sysˇŒ.h
>

11 
	~<°dlib.h
>

12 
	~<°dio.h
>

13 
	~<simics.h
>

15 
	~"410_ã°s.h
"

16 
DEF_TEST_NAME
("actual_wait:");

18 
	#NCHILD
 40

	)

19 
	#PRESERVE
 (1024*1024)

	)

21 
chûd
();

24 
	$maö
(
¨gc
, *
¨gv
[])

26 
buf
[4096];

27 
pid
, 
pids
[
NCHILD
];

28 
c
, 
¥e£rve
;

29 
msg
[128];

31 
buf
[0] = buf[ (buf) - 1] = 'q';

33 
REPORT_START_CMPLT
;

35 
c
 = 0; c < 
NCHILD
; ++c)

36 
pid
 = 
	`f‹k
()) {

38 
	`REPORT_MISC
("cannot fork");

39 
Áû
;

41 
	`chûd
(
c
);

44 
pids
[
c
] = 
pid
;

46 
	`¢¥ötf
(
msg
,  (msg), "¶Ÿ %dÖid %d", 
c
, 
pid
);

47 
	`¥ötf
("%s\n", 
msg
);

48 
	`REPORT_MISC
(
msg
);

50 i‡(
c
 & 1)

51 
	`yõld
(-1);

55 
c
 = 0; c < 
NCHILD
; ++c) {

56 
¶Ÿ
;

57 
msg
[128];

59 i‡((
c
 & 8) == 8)

60 
	`yõld
(-1);

62 
pid
 = 
	`waô
(&
¶Ÿ
);

64 
	`¢¥ötf
(
msg
,  (msg), "¶Ÿ %dÖid %d", 
¶Ÿ
, 
pid
);

65 
	`¥ötf
("%s\n", 
msg
);

66 
	`REPORT_MISC
(
msg
);

68 i‡((
¶Ÿ
 < 0Ë|| (¶Ÿ >
NCHILD
)) {

69 
	`REPORT_MISC
("invalid slot");

70 
Áû
;

72 i‡(
pids
[
¶Ÿ
] !
pid
) {

73 
	`REPORT_MISC
("pid/slot mismatch");

74 
Áû
;

76 
pids
[
¶Ÿ
] = -1;

79 
¥e£rve
 = 
PRESERVE
;

80 
pid
 = 
	`waô
(&
¥e£rve
);

81 i‡(
pid
 >= 0) {

82 
	`REPORT_MISC
("phantom menace");

83 
Áû
;

85 i‡(
¥e£rve
 !
PRESERVE
) {

86 
	`REPORT_MISC
("obliteration");

87 
Áû
;

90 
REPORT_END_SUCCESS
;

91 
	`exô
(0);

93 
Áû
:

94 
REPORT_END_FAIL
;

95 
	`exô
(9);

96 
	}
}

99 
	$chûd
(
which
)

101 
wpid
, 
gpid
;

102 
msg
[128];

104 
	`¢¥ötf
(
msg
,  (msg), "chûd %d", 
which
);

105 
	`¥ötf
("%s\n", 
msg
);

106 
	`REPORT_MISC
(
msg
);

108 
gpid
 = 
	`f‹k
()) {

110 
	`REPORT_MISC
("child cannot fork");

111 
Áû
;

114 i‡(
which
 & 1) {

115 
	`yõld
(-1);

116 
	`yõld
(-1);

118 
	`exô
(0);

120 i‡((
which
 & 4) != 4) {

121 i‡((
wpid
 = 
	`waô
(0)Ë!
gpid
) {

122 
	`REPORT_MISC
("grandchild??");

123 
Áû
;

126 
	`exô
(
which
);

130 
Áû
:

131 
	`exô
(-1);

132 
	}
}

	@410user/progs/agility_drill.c

68 
	~<thªad.h
>

69 
	~<°dio.h
>

70 
	~<sysˇŒ.h
>

71 
	~<°dlib.h
>

72 
	~<muãx.h
>

73 
	~<as£π.h
>

74 
	~<thrgΩ.h
>

75 
	~"410_ã°s.h
"

76 
DEF_TEST_NAME
 ("agility_drill:");

78 
	#STACK_SIZE
 4096

	)

80 
	#STUPID_MAGIC_CONSTANT
 4

	)

82 
	gn_muãxes
 = 200;

83 
	gn_cha£thªads
 = 20;

84 
	gfoŸ¥öt
 = 2;

85 
muãx_t
 * 
	gmtxs
;

86 
thrgΩ_group_t
 
	gtg
;

91 * 
	$cha£
(* 
¨g
) {

92 
√xt_muãx_to_acquúe
 = 0;

93 
highe°_muãx_ªÀa£d
 = -1;

95 
my_¸óti⁄_numbî
 = ()
¨g
;

96 
buf
[80];

98 
	`¢¥ötf
(
buf
,  (buf), "Sèπög cha£Åhªad wôh cª©i⁄Çumbî %d", 
my_¸óti⁄_numbî
);

99 
	`REPORT_MISC
(
buf
);

101 
highe°_muãx_ªÀa£d
 < 
n_muãxes
 - 1) {

104 i‡(
√xt_muãx_to_acquúe
 < 
n_muãxes
) {

105 
	`muãx_lock
(&(
mtxs
[
√xt_muãx_to_acquúe
++]));

109 i‡(((
my_¸óti⁄_numbî
 % 
STUPID_MAGIC_CONSTANT
) == 0)

110 && ((
highe°_muãx_ªÀa£d
 % 
STUPID_MAGIC_CONSTANT
) == 0)) {

111 
	`yõld
(-1);

114 i‡(
√xt_muãx_to_acquúe
 >
foŸ¥öt
) {

115 
	`muãx_u∆ock
(&(
mtxs
[++
highe°_muãx_ªÀa£d
]));

119 
	`¢¥ötf
(
buf
,  (buf), "Suc˚ssfu»föish f‹Åhªad wôh cª©i⁄Çumbî %d", 
my_¸óti⁄_numbî
);

120 
	`REPORT_MISC
(
buf
);

123 
	}
}

125 
	$maö
–
¨gc
, *
¨gv
[] ) {

126 
i
;

127 * 
°©us_ãmp‹¨y
;

129 
	`thr_öô
(
STACK_SIZE
);

130 
REPORT_START_CMPLT
;

133 
¨gc
) {

135 
foŸ¥öt
 = 
	`©oi
(
¨gv
[3]);

138 
n_cha£thªads
 = 
	`©oi
(
¨gv
[2]);

141 
n_muãxes
 = 
	`©oi
(
¨gv
[1]);

151 i‡–(
¨gc
 > 4) ||

152 (
foŸ¥öt
 < 1) ||

153 (
n_cha£thªads
 < (2 * 
STUPID_MAGIC_CONSTANT
 - 1)) ||

154 (
n_muãxes
 < 3) ||

155 (
n_muãxes
 <
foŸ¥öt
)

157 
	`¥ötf
("Ußge: %†[numbî o‡muãxes] [numbî o‡cha£Åhªads] [foŸ¥öt]\n", 
¨gv
[0]);

158 
	`¥ötf
("Number of mutexes must beátÜeast 3ánd strictly greaterÅhan footprint\n");

159 
	`¥ötf
("Numbî o‡cha£thªad†mu° bê©Üó° (2 * STUPID_MAGIC_CONSTANT - 1Ë%d\n", (2 * 
STUPID_MAGIC_CONSTANT
 - 1));

160 
	`¥ötf
("Footprint (number ofÜocksácquiredátÅhe sameÅime) must beátÜeast 1\n");

162 
	`exô
(1);

164 
	`thrgΩ_öô_group
(&
tg
);

165 
mtxs
 = (
muãx_t
 *)
	`ˇŒoc
(
n_muãxes
, (mutex_t));

166 
i
 = 0; i < 
n_muãxes
; i++) {

167 
	`as£π
(
	`muãx_öô
(&(
mtxs
[
i
])) == 0);

169 
i
 = 0; i < 
n_cha£thªads
; i++) {

170 
	`as£π
(
	`thrgΩ_¸óã
(&
tg
, 
cha£
, (*)
i
) >= 0);

172 
i
 = 0; i < 
n_cha£thªads
; i++) {

173 
	`as£π
(
	`thrgΩ_joö
(&
tg
, &
°©us_ãmp‹¨y
) == 0);

175 
	`‰ì
(
mtxs
);

176 
REPORT_END_SUCCESS
;

177 
	`exô
(0);

178 
	}
}

	@410user/progs/beady_test.c

33 
	~<thªad.h
>

34 
	~<°dio.h
>

35 
	~<sysˇŒ.h
>

36 
	~<simics.h
>

37 
	~<°dlib.h
>

38 
	~<muãx.h
>

39 
	~<c⁄d.h
>

40 
	~<thrgΩ.h
>

42 
	#NUM_THREADS
 4

	)

44 
	eTHR_EXIT_CODES
{

45 
	mUPDATE_EXIT_CODE
=1,

46 
	mCONTROL_EXIT_CODE
,

47 
	mBEAD_EXIT_CODE
,

48 
	mSCORE_EXIT_CODE


52 #unde‡
åy


53 
	#åy
(
evt
Ëif((
îr‹
=(evt)) < 0) \

54 {
	`Õrötf
 ("bódy_ã°Éº‹ %d\n",
îr‹
);}

	)

56 
	#TARGET_TIME
 25

	)

57 
	#SCORE_TIME
 5

	)

59 
	#GAMEBAR_BAR
 "-"

	)

60 
	#GAME_TARGET
 "*"

	)

61 
	#GAME_CURSOR
 "^"

	)

62 
	#ERASE_CURSOR
 " "

	)

64 
	#GAMEBAR_ROW
 12

	)

65 
	#P1_ROW
 13

	)

66 
	#CURSOR_MAX
 75

	)

67 
	#CURSOR_MIN
 5

	)

68 
	#FIRSTSTEP
 0x„edÁ˚

	)

70 
muãx_t
 
	gw‹ldLock
;

71 
c⁄d_t
 
	gupd©es
;

76 
	ggoFœg
=0;

77 
c⁄d_t
 
	ggameOvî
;

78 
muãx_t
 
	gupd©eLock
;

80 
	gupd©ePídög
=0;

81 
	gp1Sc‹e
=0;

83 
	gp1Curs‹
=40;

84 
	gﬁdP1Curs‹
=40;

86 
	gèrgëPos
=50;

87 
	gﬁdT¨gëPos
 = 50;

94 
	$scheduÀUpd©e
()

97 
	`muãx_lock
(&
upd©eLock
);

100 
upd©ePídög
=1;

103 
	`c⁄d_sig«l
(&
upd©es
);

106 
	`muãx_u∆ock
(&
upd©eLock
);

108 
	}
}

117 
	$waôUpd©e
()

120 
	`muãx_lock
(&
upd©eLock
);

121 if(
upd©ePídög
==0)

124 
	`c⁄d_waô
(&
upd©es
, &
upd©eLock
);

128 
upd©ePídög
=0;

130 
	`muãx_u∆ock
(&
upd©eLock
);

131 
	}
}

139 *
	$upd©e
(*
ign‹ed
)

145 
	`waôUpd©e
();

147 if(
goFœg
)

148  (*)
UPDATE_EXIT_CODE
;

152 
	`muãx_lock
(&
w‹ldLock
);

155 
	`£t_curs‹_pos
(
GAMEBAR_ROW
, 
ﬁdT¨gëPos
);

156 
	`¥öt
(1, 
GAMEBAR_BAR
);

157 
	`£t_curs‹_pos
(
GAMEBAR_ROW
, 
èrgëPos
);

158 
	`¥öt
(1, 
GAME_TARGET
);

159 
ﬁdT¨gëPos
=
èrgëPos
;

162 
	`£t_curs‹_pos
(
P1_ROW
, 
ﬁdP1Curs‹
);

163 
	`¥öt
(1, 
ERASE_CURSOR
);

164 
	`£t_curs‹_pos
(
P1_ROW
, 
p1Curs‹
);

165 
	`¥öt
(1, 
GAME_CURSOR
);

166 
ﬁdP1Curs‹
=
p1Curs‹
;

169 
	`£t_curs‹_pos
(22,0);

170 
	`¥ötf
("Sc‹e: %d\n",
p1Sc‹e
);

175 
	`muãx_u∆ock
(&
w‹ldLock
);

179 
	`yõld
(-1);

181 
	}
}

190 *
	$c⁄åﬁThªad
(*
ign‹ed
)

193 
d⁄e
 = 0;

194 !
d⁄e
)

197 
	`gëch¨
())

200 
	`muãx_lock
(&
w‹ldLock
);

201 
p1Curs‹
++;

202 if(
p1Curs‹
 > 
CURSOR_MAX
)

204 
p1Curs‹
=
CURSOR_MAX
;

206 
	`scheduÀUpd©e
();

207 
	`muãx_u∆ock
(&
w‹ldLock
);

210 
	`muãx_lock
(&
w‹ldLock
);

211 
p1Curs‹
--;

212 if(
p1Curs‹
 < 
CURSOR_MIN
)

214 
p1Curs‹
=
CURSOR_MIN
;

216 
	`scheduÀUpd©e
();

217 
	`muãx_u∆ock
(&
w‹ldLock
);

220 
	`¥ötf
("Game over.\n");

221 
goFœg
=1;

222 
	`c⁄d_sig«l
(&
gameOvî
);

224  (*)
CONTROL_EXIT_CODE
;

227 
	`yõld
(-1);

229  (*)
CONTROL_EXIT_CODE
;

230 
	}
}

238 *
	$èrgëThªad
(*
ign‹ed
)

240 
√xtSãp
=
FIRSTSTEP
;

245 
	`¶ìp
(
TARGET_TIME
);

248 
√xtSãp
 ^=ÇextStep>> 5;

249 
√xtSãp
 ^=ÇextStep<< 13;

252 
	`muãx_lock
(&
w‹ldLock
);

255 if((
√xtSãp
 & 0x01))

257 
èrgëPos
++;

258 if(
èrgëPos
 > 
CURSOR_MAX
)

260 
èrgëPos
 = 
CURSOR_MAX
;

265 
èrgëPos
--;

266 if(
èrgëPos
 < 
CURSOR_MIN
)

268 
èrgëPos
 = 
CURSOR_MIN
;

273 
	`scheduÀUpd©e
();

274 
	`muãx_u∆ock
(&
w‹ldLock
);

275 if(
goFœg
)

276  (*Ë
BEAD_EXIT_CODE
;

280 
	}
}

294 *
	$sc‹eThªad
(*
ign‹e
)

299 
	`¶ìp
(
SCORE_TIME
);

302 
	`muãx_lock
(&
w‹ldLock
);

305 if(
èrgëPos
 =
p1Curs‹
)

307 
p1Sc‹e
++;

310 
	`muãx_u∆ock
(&
w‹ldLock
);

311 if(
goFœg
)

312  (*)
SCORE_EXIT_CODE
;

314 
	}
}

316 
	$öôS¸ìn
()

318 
i
;

319 
i
=0; i<24; i++)

320 
	`¥ötf
(" ");

321 
	`£t_curs‹_pos
(
GAMEBAR_ROW
, 3);

322 
	`¥öt
(1,"<");

323 
i
=0; i<74; i++)

325 
	`¥öt
(1, 
GAMEBAR_BAR
);

327 
	`¥öt
(1,">");

328 
	}
}

330 
	$maö
(
¨gc
, ** 
¨gv
)

332 
îr‹
;

333 
i
;

334 
ªtcode
;

335 
thrgΩ_group_t
 
tg
;

338 
	`åy
(
	`thr_öô
(7*1024));

339 
	`åy
(
	`muãx_öô
(&
w‹ldLock
));

340 
	`åy
(
	`muãx_öô
(&
upd©eLock
));

341 
	`åy
(
	`c⁄d_öô
(&
upd©es
));

342 
	`åy
(
	`c⁄d_öô
(&
gameOvî
));

343 
	`öôS¸ìn
();

345 
	`thrgΩ_öô_group
(&
tg
);

346 
	`åy
(
	`thrgΩ_¸óã
(&
tg
,
upd©e
, 0));

347 
	`åy
(
	`thrgΩ_¸óã
(&
tg
,
c⁄åﬁThªad
, 0));

348 
	`åy
(
	`thrgΩ_¸óã
(&
tg
,
èrgëThªad
, 0));

349 
	`åy
(
	`thrgΩ_¸óã
(&
tg
,
sc‹eThªad
, 0));

355 
	`muãx_lock
(&
w‹ldLock
);

356 
	`c⁄d_waô
(&
gameOvî
, &
w‹ldLock
);

357 
	`muãx_u∆ock
(&
w‹ldLock
);

360 
	`c⁄d_sig«l
(&
upd©es
);

363 
i
=0; i<
NUM_THREADS
; i++)

365 
	`åy
(
	`thrgΩ_joö
(&
tg
, (**)&
ªtcode
));

366 
	`¥ötf
("W‹kîÅhªadÑëu∫ed wôh codê%d.\n",
ªtcode
);

370 
	}
}

	@410user/progs/bistromath.c

42 
	~<sysˇŒ.h
>

43 
	~<°dlib.h
>

44 
	~<°ddef.h
>

45 
	~<°rög.h
>

46 
	~<as£π.h
>

47 
	~<°dio.h
>

48 
	~<°döt.h
>

50 
	~"ønd.h
"

51 
	~"thªad.h
"

53 #i‚de‡
ARRAY_SIZE


54 
	#ARRAY_SIZE
(
a
Ë((◊))/(◊[0])))

	)

61 #i‚de‡
ATTACKS_H


62 
	#ATTACKS_H


	)

64 
	#U64
(
x
Ë((
uöt64_t
)(x ## 
uŒ
))

	)

65 
	#U32
(
x
Ë((
uöt32_t
)(x))

	)

67 
uöt64_t
 
knighèâacks
[64];

68 
uöt64_t
 
kög©ècks
[64];

69 
uöt64_t
 
∑w«âacks
[2][64];

70 
uöt64_t
 
∑wnmoves
[2][64];

72 
uöt64_t
 
row©ècks
[256][8];

73 
uöt64_t
 
cﬁ©ècks
[256][8];

75 
rŸ45dügödex
[64];

76 
rŸ315dügödex
[64];

78 
rŸ45ödex_shi·amou¡right
[15];

79 
rŸ315ödex_shi·amou¡right
[15];

80 
rŸ315ödex_shi·amou¡À·
[15];

82 
rŸªsu…_shi·amou¡À·
[15];

83 
rŸªsu…_shi·amou¡right
[15];

85 
uöt64_t
 
	grŸ45©ècks
[256][8];

86 
uöt64_t
 
	grŸ315©ècks
[256][8];

93 #i‚de‡
BITSCAN_H


94 
	#BITSCAN_H


	)

96 
	#BITSCAN
(
x
Ë(
	`ff¶l
(x)-1)

	)

121 
	#ffs
(
x
Ë
	`__ffs
(x)

	)

125 
	$__ffs
 (
i
)

126 
i
;

128 c⁄° 
èbÀ
[] =

139 
a
;

140 
x
 = 
i
 & -i;

142 
a
 = 
x
 <= 0xffff ? (x <= 0xff ? 0 : 8) : (x <= 0xffffff ? 16 : 24);

144  
èbÀ
[
x
 >> 
a
] +á;

145 
	}
}

166 
	$ff¶l
 (
i
)

167 
i
;

169 
x
 = 
i
 & -i;

171 i‡(
x
 <= 0xffffffff)

172  
	`ffs
 (
i
);

174  32 + 
	`ffs
 (
i
 >> 32);

175 
	}
}

181 #i‚de‡
POPCNT_H


182 
	#POPCNT_H


	)

186 
	#POPCOUNT
(
x
Ë
	`p›˙t2
(x)

	)

191 
p›˙t
(
uöt64_t
);

196 
p›˙t2
(
uöt64_t
);

197 
p›˙t3
(
uöt64_t
);

206 
ønd_öô
();

208 
uöt32_t
 
ønd32
();

210 
uöt64_t
 
ønd64
();

216 #i‚de‡
MOVELIST_H


217 
	#MOVELIST_H


	)

220 
	#MOVELIST_NUM_BUCKETS
 64

	)

221 
	#MOVELIST_SUBLIST_LENGTH
 128

	)

262 
	#MOVELIST_INDEX_MAT_LOSS
 9

	)

264 
	#MOVELIST_INDEX_REGULAR
 25

	)

267 
	#MOVELIST_INDEX_PROM_MINOR
 42

	)

269 
	#MOVELIST_INDEX_CASTLE
 43

	)

271 
	#MOVELIST_INDEX_NEUTRAL
 45

	)

273 
	#MOVELIST_INDEX_MAT_GAIN
 49

	)

275 
	#MOVELIST_INDEX_PROM_QUEEN
 59

	)

287 
uöt32_t
 
	m¨øy
[
MOVELIST_NUM_BUCKETS
][
MOVELIST_SUBLIST_LENGTH
];

288 
	msubli°_cou¡
[
MOVELIST_NUM_BUCKETS
];

291 
	mmax
;

292 } 
	tmovñi°_ö√r_t
;

294 
movñi°_ö√r_t
 *
	tmovñi°_t
;

298 
ölöe
 
	$movñi°_öô
(
movñi°_t
 *
ml
)

300 *
ml
 = 
	`mÆloc
((
movñi°_ö√r_t
));

301 
	`as£π
(*
ml
 && "Couldn'tállocate memoryÅo generate moves");

302 
	`mem£t
((*
ml
)->
subli°_cou¡
, 0, 
MOVELIST_NUM_BUCKETS
*());

303 (*
ml
)->
max
 = 0;

304 
	}
}

306 
	#movñi°_de°roy
(
mÕ
Ëdÿ{ 
	`‰ì
(*mÕ); } 0)

	)

308 
movñi°_add
(
movñi°_t
 *, 
uöt64_t
[2], 
uöt32_t
);

309 
movñi°_addtohód
(
movñi°_t
 *, 
uöt32_t
, );

310 
movñi°_i£m±y
(
movñi°_t
 *);

311 
uöt32_t
 
movñi°_ªmove_max
(
movñi°_t
 *);

319 #i‚de‡
BOARD_H


320 
	#BOARD_H


	)

326 
	#WHITE
 0

	)

327 
	#BLACK
 1

	)

330 
	#OTHERCOLOR
(
x
Ë(1^(x))

	)

332 
	#HOMEROW
(
x
Ë((x =
WHITE
Ë? 0 : 7)

	)

335 
	#PAWN
 0x0

	)

336 
	#KNIGHT
 0x1

	)

337 
	#BISHOP
 0x2

	)

338 
	#ROOK
 0x3

	)

339 
	#QUEEN
 0x4

	)

340 
	#KING
 0x5

	)

341 
	#PIECE_SLIDES
(
p
Ë((’Ë> 
KNIGHT
Ë&& (’Ë< 
KING
))

	)

342 
uöt8_t
 
	tpõ˚_t
;

344 *
põ˚«me
[2][6];

351 
	#A1
 0x00

	)

352 
	#B1
 0x01

	)

353 
	#C1
 0x02

	)

354 
	#D1
 0x03

	)

355 
	#E1
 0x04

	)

356 
	#F1
 0x05

	)

357 
	#G1
 0x06

	)

358 
	#H1
 0x07

	)

359 
	#A2
 0x08

	)

360 
	#B2
 0x09

	)

361 
	#C2
 0x0a

	)

362 
	#D2
 0x0b

	)

363 
	#E2
 0x0c

	)

364 
	#F2
 0x0d

	)

365 
	#G2
 0x0e

	)

366 
	#H2
 0x0f

	)

367 
	#A3
 0x10

	)

368 
	#B3
 0x11

	)

369 
	#C3
 0x12

	)

370 
	#D3
 0x13

	)

371 
	#E3
 0x14

	)

372 
	#F3
 0x15

	)

373 
	#G3
 0x16

	)

374 
	#H3
 0x17

	)

375 
	#A4
 0x18

	)

376 
	#B4
 0x19

	)

377 
	#C4
 0x1a

	)

378 
	#D4
 0x1b

	)

379 
	#E4
 0x1c

	)

380 
	#F4
 0x1d

	)

381 
	#G4
 0x1e

	)

382 
	#H4
 0x1f

	)

383 
	#A5
 0x20

	)

384 
	#B5
 0x21

	)

385 
	#C5
 0x22

	)

386 
	#D5
 0x23

	)

387 
	#E5
 0x24

	)

388 
	#F5
 0x25

	)

389 
	#G5
 0x26

	)

390 
	#H5
 0x27

	)

391 
	#A6
 0x28

	)

392 
	#B6
 0x29

	)

393 
	#C6
 0x2a

	)

394 
	#D6
 0x2b

	)

395 
	#E6
 0x2c

	)

396 
	#F6
 0x2d

	)

397 
	#G6
 0x2e

	)

398 
	#H6
 0x2f

	)

399 
	#A7
 0x30

	)

400 
	#B7
 0x31

	)

401 
	#C7
 0x32

	)

402 
	#D7
 0x33

	)

403 
	#E7
 0x34

	)

404 
	#F7
 0x35

	)

405 
	#G7
 0x36

	)

406 
	#H7
 0x37

	)

407 
	#A8
 0x38

	)

408 
	#B8
 0x39

	)

409 
	#C8
 0x3a

	)

410 
	#D8
 0x3b

	)

411 
	#E8
 0x3c

	)

412 
	#F8
 0x3d

	)

413 
	#G8
 0x3e

	)

414 
	#H8
 0x3f

	)

415 
uöt8_t
 
	tsqu¨e_t
;

418 *
squ¨íame
[64];

420 
	#RANK_1
 0

	)

421 
	#RANK_2
 1

	)

422 
	#RANK_3
 2

	)

423 
	#RANK_4
 3

	)

424 
	#RANK_5
 4

	)

425 
	#RANK_6
 5

	)

426 
	#RANK_7
 6

	)

427 
	#RANK_8
 7

	)

428 
	#COL_A
 0

	)

429 
	#COL_B
 1

	)

430 
	#COL_C
 2

	)

431 
	#COL_D
 3

	)

432 
	#COL_E
 4

	)

433 
	#COL_F
 5

	)

434 
	#COL_G
 6

	)

435 
	#COL_H
 7

	)

438 
	#COL
(
s
Ë((sË& 0x7Ë

	)

439 
	#ROW
(
s
Ë((sË>> 3Ë

	)

440 
	#SQUARE
(
c
,
r
Ë((
squ¨e_t
)((cË| (‘Ë<< 3))Ë

	)

442 
	#PARITY
(
s
Ë((
	`COL
(sË+ 
	`ROW
(s)Ë& 0x1)

	)

445 
	#QUEENSIDE
 0

	)

446 
	#KINGSIDE
 1

	)

448 
	#CASTLE_DEST_COL
(
x
Ë(((xË=
QUEENSIDE
Ë? 
COL_C
 : 
COL_G
)

	)

451 
	#BOARD_CHECKMATED
 1

	)

452 
	#BOARD_STALEMATED
 2

	)

475 
uöt32_t
 
	tmove_t
;

476 
	#MOV_INDEX_SRC
 0

	)

477 
	#MOV_INDEX_DEST
 6

	)

478 
	#MOV_INDEX_COLOR
 12

	)

479 
	#MOV_INDEX_CASTLE
 13

	)

480 
	#MOV_INDEX_EP
 14

	)

481 
	#MOV_INDEX_CAPT
 15

	)

482 
	#MOV_INDEX_PROM
 16

	)

483 
	#MOV_INDEX_CAPTPC
 17

	)

484 
	#MOV_INDEX_PROMPC
 20

	)

485 
	#MOV_INDEX_PIECE
 23

	)

486 
	#MOV_INDEX_UNUSED
 26

	)

488 
	#MOV_SRC
(
m
Ë((
squ¨e_t
)(((mË>> 
MOV_INDEX_SRC
Ë& 0x3f))

	)

489 
	#MOV_DEST
(
m
Ë((
squ¨e_t
)(((mË>> 
MOV_INDEX_DEST
Ë& 0x3f))

	)

490 
	#MOV_COLOR
(
m
Ë(((mË>> 
MOV_INDEX_COLOR
Ë& 0x1)

	)

491 
	#MOV_CASTLE
(
m
Ë(((mË>> 
MOV_INDEX_CASTLE
Ë& 0x1)

	)

492 
	#MOV_EP
(
m
Ë(((mË>> 
MOV_INDEX_EP
Ë& 0x1)

	)

493 
	#MOV_CAPT
(
m
Ë(((mË>> 
MOV_INDEX_CAPT
Ë& 0x1)

	)

494 
	#MOV_PROM
(
m
Ë(((mË>> 
MOV_INDEX_PROM
Ë& 0x1)

	)

495 
	#MOV_CAPTPC
(
m
Ë((
põ˚_t
)(((mË>> 
MOV_INDEX_CAPTPC
Ë& 0x7))

	)

496 
	#MOV_PROMPC
(
m
Ë((
põ˚_t
)(((mË>> 
MOV_INDEX_PROMPC
Ë& 0x7))

	)

497 
	#MOV_PIECE
(
m
Ë((
põ˚_t
)(((mË>> 
MOV_INDEX_PIECE
Ë& 0x7))

	)

503 
uöt64_t
 
	tbôbﬂrd_t
;

508 
uöt64_t
 
	tzobri°_t
;

511 
	#HISTORY_STACK_SIZE
 2048

	)

517 
zobri°_t
 
	mhash
;

518 
bôbﬂrd_t
 
	m©èckedby
[2];

519 
	mˇ°À
[2][2];

520 
squ¨e_t
 
	mï
;

521 
	mhÆfmoves
;

522 
	mªps
;

523 
move_t
 
	mmove
;

524 } 
	thi°‹y_t
;

591 
bôbﬂrd_t
 
	mpos
[2][6];

592 
bôbﬂrd_t
 
	mpõ˚sofcﬁ‹
[2];

593 
bôbﬂrd_t
 
	m©èckedby
[2];

596 
bôbﬂrd_t
 
	moccupõd
;

597 
bôbﬂrd_t
 
	moccupõd90
;

598 
bôbﬂrd_t
 
	moccupõd45
;

599 
bôbﬂrd_t
 
	moccupõd315
;

601 
zobri°_t
 
	mhash
;

603 
hi°‹y_t
 
	mhi°‹y
[
HISTORY_STACK_SIZE
];

608 
squ¨e_t
 
	mï
;

610 
	mˇ°À
[2][2];

612 
	mhasˇ°Àd
[2];

613 
	mtomove
;

614 
	mhÆfmoves
;

616 
	mmoves
;

618 
	mªps
;

620 
öt16_t
 
	mm©îül
[2];

621 } 
	tbﬂrd_t
;

626 
	#BB
(
b
Ë((
bôbﬂrd_t
)(b ## 
uŒ
))

	)

627 
	#BB_FILEA
 
	`BB
(0x0101010101010101)

	)

628 
	#BB_FILEB
 
	`BB
(0x0202020202020202)

	)

629 
	#BB_FILEC
 
	`BB
(0x0404040404040404)

	)

630 
	#BB_FILED
 
	`BB
(0x0808080808080808)

	)

631 
	#BB_FILEE
 
	`BB
(0x1010101010101010)

	)

632 
	#BB_FILEF
 
	`BB
(0x2020202020202020)

	)

633 
	#BB_FILEG
 
	`BB
(0x4040404040404040)

	)

634 
	#BB_FILEH
 
	`BB
(0x8080808080808080)

	)

635 
	#BB_FILE
(
c
Ë(
BB_FILEA
 << (c))

	)

636 
	#BB_RANK1
 
	`BB
(0x00000000000000ff)

	)

637 
	#BB_RANK2
 
	`BB
(0x000000000000ff00)

	)

638 
	#BB_RANK3
 
	`BB
(0x0000000000ff0000)

	)

639 
	#BB_RANK4
 
	`BB
(0x00000000ff000000)

	)

640 
	#BB_RANK5
 
	`BB
(0x000000ff00000000)

	)

641 
	#BB_RANK6
 
	`BB
(0x0000ff0000000000)

	)

642 
	#BB_RANK7
 
	`BB
(0x00ff000000000000)

	)

643 
	#BB_RANK8
 
	`BB
(0xff00000000000000)

	)

644 
	#BB_RANK
(
r
Ë(
BB_RANK1
 << (8 * (r)))

	)

645 
	#BB_HALF_RANKS
(
s
Ë(((sË=
WHITE
Ë? 
	`BB
(0x00000000ffffffffË: BB(0xffffffff00000000))

	)

646 
	#BB_HALF_FILES
(
s
Ë(((sË=
QUEENSIDE
Ë? 
	`BB
(0x0f0f0f0f0f0f0f0fË: BB(0xf0f0f0f0f0f0f0f0))

	)

650 
bôbﬂrd_t
 
bb_adja˚¡cﬁs
[8];

651 
bôbﬂrd_t
 
bb_∑s£d∑wnmask
[2][64];

656 #ifde‡
BB_SHIFTFLIP


657 
	#BB_SQUARE
(
x
Ë
	`BB
((BB(0x1))<<(x))

	)

658 
	#BB_ALLEXCEPT
(
x
Ë
	`BB
(~(
	`BB_SQUARE
(x)))

	)

660 
	#BB_SQUARE
(
x
Ë
bb_squ¨e
[x]

	)

661 
	#BB_ALLEXCEPT
(
x
Ë
bb_ÆÀx˚±
[x]

	)

662 
bôbﬂrd_t
 
bb_squ¨e
[64];

663 
bôbﬂrd_t
 
bb_ÆÀx˚±
[64];

667 
	#BB_EP_FROMRANK
(
c
Ë(((cË=
WHITE
Ë? 
BB_RANK5
 : 
BB_RANK4
)

	)

669 
	#BB_EP_TORANK
(
c
Ë(((cË=
WHITE
Ë? 
BB_RANK3
 : 
BB_RANK6
)

	)

674 
öô_zobri°
();

675 
zobri°_gí
(
bﬂrd_t
 *);

677 
bﬂrd_t
 *
bﬂrd_öô
();

678 
bﬂrd_de°roy
(
bﬂrd_t
 *);

679 *
bﬂrd_„n
(
bﬂrd_t
 *);

680 
põ˚_t
 
bﬂrd_põ˚©squ¨e
(
bﬂrd_t
 *, 
squ¨e_t
, *);

681 
bﬂrd_öcheck
(
bﬂrd_t
 *);

682 
bﬂrd_cﬁ‹öcheck
(
bﬂrd_t
 *, );

683 
bﬂrd_m©ed
(
bﬂrd_t
 *);

684 
bﬂrd_∑w≈as£d
(
bﬂrd_t
 *, 
squ¨e_t
, );

685 
bﬂrd_squ¨eißâacked
(
bﬂrd_t
 *, 
squ¨e_t
, );

686 
bﬂrd_squ¨eßª©ècked
(
bﬂrd_t
 *, 
bôbﬂrd_t
, );

687 
bôbﬂrd_t
 
bﬂrd_©ècks‰om
(
bﬂrd_t
 *, 
squ¨e_t
, 
põ˚_t
, );

688 
bôbﬂrd_t
 
bﬂrd_∑w≈ushes‰om
(
bﬂrd_t
 *, 
squ¨e_t
, );

689 
bﬂrd_gíî©emoves
(
bﬂrd_t
 *, 
movñi°_t
 *);

690 
bﬂrd_gíî©eˇ±uªs
(
bﬂrd_t
 *, 
movñi°_t
 *);

691 
bﬂrd_≠∂ymove
(
bﬂrd_t
 *, 
move_t
);

692 
bﬂrd_undomove
(
bﬂrd_t
 *, 
move_t
);

693 
bôbﬂrd_t
 
bﬂrd_∑w«âacks
(bôbﬂrd_à
∑wns
, );

694 
bﬂrd_thªefﬁd_døw
(
bﬂrd_t
 *);

696 
move_t
 
move_‰om°rög
(*);

697 
move_t
 
move_i¶egÆ
(
bﬂrd_t
 *, *, **);

698 *
move_to°rög
(
move_t
);

705 #i‚de‡
EVAL_H


706 
	#EVAL_H


	)

708 #i‚de‡
EVAL_LAZY_THRESHHOLD


709 
	#EVAL_LAZY_THRESHHOLD
 250

	)

715 
evÆ_i£ndgame
(
bﬂrd_t
 *);

723 
öt16_t
 
evÆ
(
bﬂrd_t
 *);

728 
öt16_t
 
evÆ_œzy
(
bﬂrd_t
 *);

735 #i‚de‡
PAWNSTRUCTURE_H


736 
	#PAWNSTRUCTURE_H


	)

745 
öt16_t
 
evÆ_∑wn°ru˘uª
(
bﬂrd_t
 *, , 
bôbﬂrd_t
 *);

752 #i‚de‡
QUIESCENT_H


753 
	#QUIESCENT_H


	)

755 
öt16_t
 
quõs˚
(
bﬂrd_t
 *
bﬂrd
, i¡16_à
Æpha
, i¡16_à
bëa
);

762 #i‚de‡
TRANSPOSITION_H


763 
	#TRANSPOSITION_H


	)

794 
	så™s_d©a_t
 {

797 
uöt8_t
 
	mÊags
;

798 
uöt8_t
 
	mgamedïth
;

799 
öt16_t
 
	mvÆue
;

800 
uöt32_t
 
	mmove
;

801 } 
	tå™s_d©a_t
;

810 
	#TRANS_FLAG_EXACT
 0x2

	)

811 
	#TRANS_FLAG_BETA
 0x1

	)

812 
	#TRANS_FLAG_ALPHA
 0x0

	)

814 
	#TRANS_INDEX_FLAG
 0

	)

815 
	#TRANS_INDEX_SEARCHDEPTH
 2

	)

816 
	#TRANS_FLAG
(
t
Ë((—).
Êags
 >> 
TRANS_INDEX_FLAG
Ë& 0x3)

	)

817 
	#TRANS_SEARCHDEPTH
(
t
Ë((—).
Êags
 >> 
TRANS_INDEX_SEARCHDEPTH
Ë& 0x3f)

	)

818 
	#TRANS_GAMEDEPTH
(
t
Ë(—).
gamedïth
)

	)

819 
	#TRANS_VALUE
(
t
Ë(—).
vÆue
)

	)

820 
	#TRANS_MOVE
(
t
Ë(—).
move
 & ((1 << 
MOV_INDEX_UNUSED
Ë- 1))

	)

821 
	#TRANS_REPS
(
t
Ë(—).
move
 >> 
MOV_INDEX_UNUSED
)

	)

824 
å™s_add
(
zobri°_t
, 
move_t
, 
uöt8_t
, 
öt16_t
, uint8_t, uint8_t, uint8_t,

828 
å™s_d©a_t
 
å™s_gë
(
zobri°_t
);

830 
å™s_d©a_vÆid
(
å™s_d©a_t
);

837 #i‚de‡
BOOK_H


838 
	#BOOK_H


	)

840 
	#BOOK_LINE_MAX_LENGTH
 256

	)

842 
move_t
 
book_move
(*
löe
, 
bﬂrd_t
 *
bﬂrd
);

849 #i‚de‡
SEARCH_H


850 
	#SEARCH_H


	)

859 
	$move_t
 (*
	t£¨ch_‚
)(
	tbﬂrd_t
 *, , *, 
	töt16_t
 *);

861 
move_t
 
	`gëbe°move
(
bﬂrd_t
 *, , *, 
öt16_t
 *);

868 #i‚de‡
ENGINE_H


869 
	#ENGINE_H


	)

872 
	#ENGINE_NAME
 "bi°rom©h"

	)

874 
	sígöe_t
 {

875 
bﬂrd_t
 *
bﬂrd
;

876 
£¨ch_‚
 
£¨ch
;

877 
löe
[
BOOK_LINE_MAX_LENGTH
];

878 
löe_moves
;

879 
öbook
;

880 } 
	tígöe_t
;

882 
ígöe_t
 *
	`ígöe_öô
(
£¨ch_‚
);

883 *
	`ígöe_gíî©emove
(
ígöe_t
 *);

884 
	`ígöe_≠∂ymove
(
ígöe_t
 *, *, **);

885 
	`ígöe_de°roy
(
ígöe_t
 *);

896 
uöt64_t
 
knighèâacks
[64] = {

898 
	`U64
(0x0000000000020400), U64(0x0000000000050800), U64(0x00000000000a1100), U64(0x0000000000142200),

899 
	`U64
(0x0000000000284400), U64(0x0000000000508800), U64(0x0000000000a01000), U64(0x0000000000402000),

901 
	`U64
(0x0000000002040004), U64(0x0000000005080008), U64(0x000000000a110011), U64(0x0000000014220022),

902 
	`U64
(0x0000000028440044), U64(0x0000000050880088), U64(0x00000000a0100010), U64(0x0000000040200020),

904 
	`U64
(0x0000000204000402), U64(0x0000000508000805), U64(0x0000000a1100110a), U64(0x0000001422002214),

905 
	`U64
(0x0000002844004428), U64(0x0000005088008850), U64(0x000000a0100010a0), U64(0x0000004020002040),

907 
	`U64
(0x0000020400040200), U64(0x0000050800080500), U64(0x00000a1100110a00), U64(0x0000142200221400),

908 
	`U64
(0x0000284400442800), U64(0x0000508800885000), U64(0x0000a0100010a000), U64(0x0000402000204000),

910 
	`U64
(0x0002040004020000), U64(0x0005080008050000), U64(0x000a1100110a0000), U64(0x0014220022140000),

911 
	`U64
(0x0028440044280000), U64(0x0050880088500000), U64(0x00a0100010a00000), U64(0x0040200020400000),

913 
	`U64
(0x0204000402000000), U64(0x0508000805000000), U64(0x0a1100110a000000), U64(0x1422002214000000),

914 
	`U64
(0x2844004428000000), U64(0x5088008850000000), U64(0xa0100010a0000000), U64(0x4020002040000000),

916 
	`U64
(0x0400040200000000), U64(0x0800080500000000), U64(0x1100110a00000000), U64(0x2200221400000000),

917 
	`U64
(0x4400442800000000), U64(0x8800885000000000), U64(0x100010a000000000), U64(0x2000204000000000),

919 
	`U64
(0x0004020000000000), U64(0x0008050000000000), U64(0x00110a0000000000), U64(0x0022140000000000),

920 
	`U64
(0x0044280000000000), U64(0x0088500000000000), U64(0x0010a00000000000), U64(0x0020400000000000)

921 
	}
};

922 
uöt64_t
 
	gkög©ècks
[64] = {

924 
U64
(0x0000000000000302), U64(0x0000000000000705), U64(0x0000000000000e0a), U64(0x0000000000001c14),

925 
U64
(0x0000000000003828), U64(0x0000000000007050), U64(0x000000000000e0a0), U64(0x000000000000c040),

927 
U64
(0x0000000000030203), U64(0x0000000000070507), U64(0x00000000000e0a0e), U64(0x00000000001c141c),

928 
U64
(0x0000000000382838), U64(0x0000000000705070), U64(0x0000000000e0a0e0), U64(0x0000000000c040c0),

930 
U64
(0x0000000003020300), U64(0x0000000007050700), U64(0x000000000e0a0e00), U64(0x000000001c141c00),

931 
U64
(0x0000000038283800), U64(0x0000000070507000), U64(0x00000000e0a0e000), U64(0x00000000c040c000),

933 
U64
(0x0000000302030000), U64(0x0000000705070000), U64(0x0000000e0a0e0000), U64(0x0000001c141c0000),

934 
U64
(0x0000003828380000), U64(0x0000007050700000), U64(0x000000e0a0e00000), U64(0x000000c040c00000),

936 
U64
(0x0000030203000000), U64(0x0000070507000000), U64(0x00000e0a0e000000), U64(0x00001c141c000000),

937 
U64
(0x0000382838000000), U64(0x0000705070000000), U64(0x0000e0a0e0000000), U64(0x0000c040c0000000),

939 
U64
(0x0003020300000000), U64(0x0007050700000000), U64(0x000e0a0e00000000), U64(0x001c141c00000000),

940 
U64
(0x0038283800000000), U64(0x0070507000000000), U64(0x00e0a0e000000000), U64(0x00c040c000000000),

942 
U64
(0x0302030000000000), U64(0x0705070000000000), U64(0x0e0a0e0000000000), U64(0x1c141c0000000000),

943 
U64
(0x3828380000000000), U64(0x7050700000000000), U64(0xe0a0e00000000000), U64(0xc040c00000000000),

945 
U64
(0x0203000000000000), U64(0x0507000000000000), U64(0x0a0e000000000000), U64(0x141c000000000000),

946 
U64
(0x2838000000000000), U64(0x5070000000000000), U64(0xa0e0000000000000), U64(0x40c0000000000000)

948 
uöt64_t
 
	g∑w«âacks
[2][64] = {

951 
U64
(0x0000000000000200), U64(0x0000000000000500), U64(0x0000000000000a00), U64(0x0000000000001400),

952 
U64
(0x0000000000002800), U64(0x0000000000005000), U64(0x000000000000a000), U64(0x0000000000004000),

954 
U64
(0x0000000000020000), U64(0x0000000000050000), U64(0x00000000000a0000), U64(0x0000000000140000),

955 
U64
(0x0000000000280000), U64(0x0000000000500000), U64(0x0000000000a00000), U64(0x0000000000400000),

957 
U64
(0x0000000002000000), U64(0x0000000005000000), U64(0x000000000a000000), U64(0x0000000014000000),

958 
U64
(0x0000000028000000), U64(0x0000000050000000), U64(0x00000000a0000000), U64(0x0000000040000000),

960 
U64
(0x0000000200000000), U64(0x0000000500000000), U64(0x0000000a00000000), U64(0x0000001400000000),

961 
U64
(0x0000002800000000), U64(0x0000005000000000), U64(0x000000a000000000), U64(0x0000004000000000),

963 
U64
(0x0000020000000000), U64(0x0000050000000000), U64(0x00000a0000000000), U64(0x0000140000000000),

964 
U64
(0x0000280000000000), U64(0x0000500000000000), U64(0x0000a00000000000), U64(0x0000400000000000),

966 
U64
(0x0002000000000000), U64(0x0005000000000000), U64(0x000a000000000000), U64(0x0014000000000000),

967 
U64
(0x0028000000000000), U64(0x0050000000000000), U64(0x00a0000000000000), U64(0x0040000000000000),

969 
U64
(0x0200000000000000), U64(0x0500000000000000), U64(0x0a00000000000000), U64(0x1400000000000000),

970 
U64
(0x2800000000000000), U64(0x5000000000000000), U64(0xa000000000000000), U64(0x4000000000000000),

972 
U64
(0x0000000000000000), U64(0x0000000000000000), U64(0x0000000000000000), U64(0x0000000000000000),

973 
U64
(0x0000000000000000), U64(0x0000000000000000), U64(0x0000000000000000), U64(0x0000000000000000)

977 
U64
(0x0000000000000000), U64(0x0000000000000000), U64(0x0000000000000000), U64(0x0000000000000000),

978 
U64
(0x0000000000000000), U64(0x0000000000000000), U64(0x0000000000000000), U64(0x0000000000000000),

980 
U64
(0x0000000000000002), U64(0x0000000000000005), U64(0x000000000000000a), U64(0x0000000000000014),

981 
U64
(0x0000000000000028), U64(0x0000000000000050), U64(0x00000000000000a0), U64(0x0000000000000040),

983 
U64
(0x0000000000000200), U64(0x0000000000000500), U64(0x0000000000000a00), U64(0x0000000000001400),

984 
U64
(0x0000000000002800), U64(0x0000000000005000), U64(0x000000000000a000), U64(0x0000000000004000),

986 
U64
(0x0000000000020000), U64(0x0000000000050000), U64(0x00000000000a0000), U64(0x0000000000140000),

987 
U64
(0x0000000000280000), U64(0x0000000000500000), U64(0x0000000000a00000), U64(0x0000000000400000),

989 
U64
(0x0000000002000000), U64(0x0000000005000000), U64(0x000000000a000000), U64(0x0000000014000000),

990 
U64
(0x0000000028000000), U64(0x0000000050000000), U64(0x00000000a0000000), U64(0x0000000040000000),

992 
U64
(0x0000000200000000), U64(0x0000000500000000), U64(0x0000000a00000000), U64(0x0000001400000000),

993 
U64
(0x0000002800000000), U64(0x0000005000000000), U64(0x000000a000000000), U64(0x0000004000000000),

995 
U64
(0x0000020000000000), U64(0x0000050000000000), U64(0x00000a0000000000), U64(0x0000140000000000),

996 
U64
(0x0000280000000000), U64(0x0000500000000000), U64(0x0000a00000000000), U64(0x0000400000000000),

998 
U64
(0x0002000000000000), U64(0x0005000000000000), U64(0x000a000000000000), U64(0x0014000000000000),

999 
U64
(0x0028000000000000), U64(0x0050000000000000), U64(0x00a0000000000000), U64(0x0040000000000000)

1004 
uöt64_t
 
	g∑wnmoves
[2][64] = {

1007 
U64
(0x0000000000000000), U64(0x0000000000000000), U64(0x0000000000000000), U64(0x0000000000000000),

1008 
U64
(0x0000000000000000), U64(0x0000000000000000), U64(0x0000000000000000), U64(0x0000000000000000),

1010 
U64
(0x0000000000010000), U64(0x0000000000020000), U64(0x0000000000040000), U64(0x0000000000080000),

1011 
U64
(0x0000000000100000), U64(0x0000000000200000), U64(0x0000000000400000), U64(0x0000000000800000),

1013 
U64
(0x0000000001000000), U64(0x0000000002000000), U64(0x0000000004000000), U64(0x0000000008000000),

1014 
U64
(0x0000000010000000), U64(0x0000000020000000), U64(0x0000000040000000), U64(0x0000000080000000),

1016 
U64
(0x0000000100000000), U64(0x0000000200000000), U64(0x0000000400000000), U64(0x0000000800000000),

1017 
U64
(0x0000001000000000), U64(0x0000002000000000), U64(0x0000004000000000), U64(0x0000008000000000),

1019 
U64
(0x0000010000000000), U64(0x0000020000000000), U64(0x0000040000000000), U64(0x0000080000000000),

1020 
U64
(0x0000100000000000), U64(0x0000200000000000), U64(0x0000400000000000), U64(0x0000800000000000),

1022 
U64
(0x0001000000000000), U64(0x0002000000000000), U64(0x0004000000000000), U64(0x0008000000000000),

1023 
U64
(0x0010000000000000), U64(0x0020000000000000), U64(0x0040000000000000), U64(0x0080000000000000),

1025 
U64
(0x0100000000000000), U64(0x0200000000000000), U64(0x0400000000000000), U64(0x0800000000000000),

1026 
U64
(0x1000000000000000), U64(0x2000000000000000), U64(0x4000000000000000), U64(0x8000000000000000),

1028 
U64
(0x0000000000000000), U64(0x0000000000000000), U64(0x0000000000000000), U64(0x0000000000000000),

1029 
U64
(0x0000000000000000), U64(0x0000000000000000), U64(0x0000000000000000), U64(0x0000000000000000)

1033 
U64
(0x0000000000000000), U64(0x0000000000000000), U64(0x0000000000000000), U64(0x0000000000000000),

1034 
U64
(0x0000000000000000), U64(0x0000000000000000), U64(0x0000000000000000), U64(0x0000000000000000),

1036 
U64
(0x0000000000000001), U64(0x0000000000000002), U64(0x0000000000000004), U64(0x0000000000000008),

1037 
U64
(0x0000000000000010), U64(0x0000000000000020), U64(0x0000000000000040), U64(0x0000000000000080),

1039 
U64
(0x0000000000000100), U64(0x0000000000000200), U64(0x0000000000000400), U64(0x0000000000000800),

1040 
U64
(0x0000000000001000), U64(0x0000000000002000), U64(0x0000000000004000), U64(0x0000000000008000),

1042 
U64
(0x0000000000010000), U64(0x0000000000020000), U64(0x0000000000040000), U64(0x0000000000080000),

1043 
U64
(0x0000000000100000), U64(0x0000000000200000), U64(0x0000000000400000), U64(0x0000000000800000),

1045 
U64
(0x0000000001000000), U64(0x0000000002000000), U64(0x0000000004000000), U64(0x0000000008000000),

1046 
U64
(0x0000000010000000), U64(0x0000000020000000), U64(0x0000000040000000), U64(0x0000000080000000),

1048 
U64
(0x0000000100000000), U64(0x0000000200000000), U64(0x0000000400000000), U64(0x0000000800000000),

1049 
U64
(0x0000001000000000), U64(0x0000002000000000), U64(0x0000004000000000), U64(0x0000008000000000),

1051 
U64
(0x0000010000000000), U64(0x0000020000000000), U64(0x0000040000000000), U64(0x0000080000000000),

1052 
U64
(0x0000100000000000), U64(0x0000200000000000), U64(0x0000400000000000), U64(0x0000800000000000),

1054 
U64
(0x0000000000000000), U64(0x0000000000000000), U64(0x0000000000000000), U64(0x0000000000000000),

1055 
U64
(0x0000000000000000), U64(0x0000000000000000), U64(0x0000000000000000), U64(0x0000000000000000)

1075 
uöt64_t
 
	grow©ècks
[256][8] = {

1076 { 
U64
(0xfe), U64(0xfd), U64(0xfb), U64(0xf7), U64(0xef), U64(0xdf), U64(0xbf), U64(0x7f) },

1077 { 
U64
(0xfe), U64(0xfd), U64(0xfb), U64(0xf7), U64(0xef), U64(0xdf), U64(0xbf), U64(0x7f) },

1078 { 
U64
(0x02), U64(0xfd), U64(0xfa), U64(0xf6), U64(0xee), U64(0xde), U64(0xbe), U64(0x7e) },

1079 { 
U64
(0x02), U64(0xfd), U64(0xfa), U64(0xf6), U64(0xee), U64(0xde), U64(0xbe), U64(0x7e) },

1080 { 
U64
(0x06), U64(0x05), U64(0xfb), U64(0xf4), U64(0xec), U64(0xdc), U64(0xbc), U64(0x7c) },

1081 { 
U64
(0x06), U64(0x05), U64(0xfb), U64(0xf4), U64(0xec), U64(0xdc), U64(0xbc), U64(0x7c) },

1082 { 
U64
(0x02), U64(0x05), U64(0xfa), U64(0xf4), U64(0xec), U64(0xdc), U64(0xbc), U64(0x7c) },

1083 { 
U64
(0x02), U64(0x05), U64(0xfa), U64(0xf4), U64(0xec), U64(0xdc), U64(0xbc), U64(0x7c) },

1084 { 
U64
(0x0e), U64(0x0d), U64(0x0b), U64(0xf7), U64(0xe8), U64(0xd8), U64(0xb8), U64(0x78) },

1085 { 
U64
(0x0e), U64(0x0d), U64(0x0b), U64(0xf7), U64(0xe8), U64(0xd8), U64(0xb8), U64(0x78) },

1086 { 
U64
(0x02), U64(0x0d), U64(0x0a), U64(0xf6), U64(0xe8), U64(0xd8), U64(0xb8), U64(0x78) },

1087 { 
U64
(0x02), U64(0x0d), U64(0x0a), U64(0xf6), U64(0xe8), U64(0xd8), U64(0xb8), U64(0x78) },

1088 { 
U64
(0x06), U64(0x05), U64(0x0b), U64(0xf4), U64(0xe8), U64(0xd8), U64(0xb8), U64(0x78) },

1089 { 
U64
(0x06), U64(0x05), U64(0x0b), U64(0xf4), U64(0xe8), U64(0xd8), U64(0xb8), U64(0x78) },

1090 { 
U64
(0x02), U64(0x05), U64(0x0a), U64(0xf4), U64(0xe8), U64(0xd8), U64(0xb8), U64(0x78) },

1091 { 
U64
(0x02), U64(0x05), U64(0x0a), U64(0xf4), U64(0xe8), U64(0xd8), U64(0xb8), U64(0x78) },

1092 { 
U64
(0x1e), U64(0x1d), U64(0x1b), U64(0x17), U64(0xef), U64(0xd0), U64(0xb0), U64(0x70) },

1093 { 
U64
(0x1e), U64(0x1d), U64(0x1b), U64(0x17), U64(0xef), U64(0xd0), U64(0xb0), U64(0x70) },

1094 { 
U64
(0x02), U64(0x1d), U64(0x1a), U64(0x16), U64(0xee), U64(0xd0), U64(0xb0), U64(0x70) },

1095 { 
U64
(0x02), U64(0x1d), U64(0x1a), U64(0x16), U64(0xee), U64(0xd0), U64(0xb0), U64(0x70) },

1096 { 
U64
(0x06), U64(0x05), U64(0x1b), U64(0x14), U64(0xec), U64(0xd0), U64(0xb0), U64(0x70) },

1097 { 
U64
(0x06), U64(0x05), U64(0x1b), U64(0x14), U64(0xec), U64(0xd0), U64(0xb0), U64(0x70) },

1098 { 
U64
(0x02), U64(0x05), U64(0x1a), U64(0x14), U64(0xec), U64(0xd0), U64(0xb0), U64(0x70) },

1099 { 
U64
(0x02), U64(0x05), U64(0x1a), U64(0x14), U64(0xec), U64(0xd0), U64(0xb0), U64(0x70) },

1100 { 
U64
(0x0e), U64(0x0d), U64(0x0b), U64(0x17), U64(0xe8), U64(0xd0), U64(0xb0), U64(0x70) },

1101 { 
U64
(0x0e), U64(0x0d), U64(0x0b), U64(0x17), U64(0xe8), U64(0xd0), U64(0xb0), U64(0x70) },

1102 { 
U64
(0x02), U64(0x0d), U64(0x0a), U64(0x16), U64(0xe8), U64(0xd0), U64(0xb0), U64(0x70) },

1103 { 
U64
(0x02), U64(0x0d), U64(0x0a), U64(0x16), U64(0xe8), U64(0xd0), U64(0xb0), U64(0x70) },

1104 { 
U64
(0x06), U64(0x05), U64(0x0b), U64(0x14), U64(0xe8), U64(0xd0), U64(0xb0), U64(0x70) },

1105 { 
U64
(0x06), U64(0x05), U64(0x0b), U64(0x14), U64(0xe8), U64(0xd0), U64(0xb0), U64(0x70) },

1106 { 
U64
(0x02), U64(0x05), U64(0x0a), U64(0x14), U64(0xe8), U64(0xd0), U64(0xb0), U64(0x70) },

1107 { 
U64
(0x02), U64(0x05), U64(0x0a), U64(0x14), U64(0xe8), U64(0xd0), U64(0xb0), U64(0x70) },

1108 { 
U64
(0x3e), U64(0x3d), U64(0x3b), U64(0x37), U64(0x2f), U64(0xdf), U64(0xa0), U64(0x60) },

1109 { 
U64
(0x3e), U64(0x3d), U64(0x3b), U64(0x37), U64(0x2f), U64(0xdf), U64(0xa0), U64(0x60) },

1110 { 
U64
(0x02), U64(0x3d), U64(0x3a), U64(0x36), U64(0x2e), U64(0xde), U64(0xa0), U64(0x60) },

1111 { 
U64
(0x02), U64(0x3d), U64(0x3a), U64(0x36), U64(0x2e), U64(0xde), U64(0xa0), U64(0x60) },

1112 { 
U64
(0x06), U64(0x05), U64(0x3b), U64(0x34), U64(0x2c), U64(0xdc), U64(0xa0), U64(0x60) },

1113 { 
U64
(0x06), U64(0x05), U64(0x3b), U64(0x34), U64(0x2c), U64(0xdc), U64(0xa0), U64(0x60) },

1114 { 
U64
(0x02), U64(0x05), U64(0x3a), U64(0x34), U64(0x2c), U64(0xdc), U64(0xa0), U64(0x60) },

1115 { 
U64
(0x02), U64(0x05), U64(0x3a), U64(0x34), U64(0x2c), U64(0xdc), U64(0xa0), U64(0x60) },

1116 { 
U64
(0x0e), U64(0x0d), U64(0x0b), U64(0x37), U64(0x28), U64(0xd8), U64(0xa0), U64(0x60) },

1117 { 
U64
(0x0e), U64(0x0d), U64(0x0b), U64(0x37), U64(0x28), U64(0xd8), U64(0xa0), U64(0x60) },

1118 { 
U64
(0x02), U64(0x0d), U64(0x0a), U64(0x36), U64(0x28), U64(0xd8), U64(0xa0), U64(0x60) },

1119 { 
U64
(0x02), U64(0x0d), U64(0x0a), U64(0x36), U64(0x28), U64(0xd8), U64(0xa0), U64(0x60) },

1120 { 
U64
(0x06), U64(0x05), U64(0x0b), U64(0x34), U64(0x28), U64(0xd8), U64(0xa0), U64(0x60) },

1121 { 
U64
(0x06), U64(0x05), U64(0x0b), U64(0x34), U64(0x28), U64(0xd8), U64(0xa0), U64(0x60) },

1122 { 
U64
(0x02), U64(0x05), U64(0x0a), U64(0x34), U64(0x28), U64(0xd8), U64(0xa0), U64(0x60) },

1123 { 
U64
(0x02), U64(0x05), U64(0x0a), U64(0x34), U64(0x28), U64(0xd8), U64(0xa0), U64(0x60) },

1124 { 
U64
(0x1e), U64(0x1d), U64(0x1b), U64(0x17), U64(0x2f), U64(0xd0), U64(0xa0), U64(0x60) },

1125 { 
U64
(0x1e), U64(0x1d), U64(0x1b), U64(0x17), U64(0x2f), U64(0xd0), U64(0xa0), U64(0x60) },

1126 { 
U64
(0x02), U64(0x1d), U64(0x1a), U64(0x16), U64(0x2e), U64(0xd0), U64(0xa0), U64(0x60) },

1127 { 
U64
(0x02), U64(0x1d), U64(0x1a), U64(0x16), U64(0x2e), U64(0xd0), U64(0xa0), U64(0x60) },

1128 { 
U64
(0x06), U64(0x05), U64(0x1b), U64(0x14), U64(0x2c), U64(0xd0), U64(0xa0), U64(0x60) },

1129 { 
U64
(0x06), U64(0x05), U64(0x1b), U64(0x14), U64(0x2c), U64(0xd0), U64(0xa0), U64(0x60) },

1130 { 
U64
(0x02), U64(0x05), U64(0x1a), U64(0x14), U64(0x2c), U64(0xd0), U64(0xa0), U64(0x60) },

1131 { 
U64
(0x02), U64(0x05), U64(0x1a), U64(0x14), U64(0x2c), U64(0xd0), U64(0xa0), U64(0x60) },

1132 { 
U64
(0x0e), U64(0x0d), U64(0x0b), U64(0x17), U64(0x28), U64(0xd0), U64(0xa0), U64(0x60) },

1133 { 
U64
(0x0e), U64(0x0d), U64(0x0b), U64(0x17), U64(0x28), U64(0xd0), U64(0xa0), U64(0x60) },

1134 { 
U64
(0x02), U64(0x0d), U64(0x0a), U64(0x16), U64(0x28), U64(0xd0), U64(0xa0), U64(0x60) },

1135 { 
U64
(0x02), U64(0x0d), U64(0x0a), U64(0x16), U64(0x28), U64(0xd0), U64(0xa0), U64(0x60) },

1136 { 
U64
(0x06), U64(0x05), U64(0x0b), U64(0x14), U64(0x28), U64(0xd0), U64(0xa0), U64(0x60) },

1137 { 
U64
(0x06), U64(0x05), U64(0x0b), U64(0x14), U64(0x28), U64(0xd0), U64(0xa0), U64(0x60) },

1138 { 
U64
(0x02), U64(0x05), U64(0x0a), U64(0x14), U64(0x28), U64(0xd0), U64(0xa0), U64(0x60) },

1139 { 
U64
(0x02), U64(0x05), U64(0x0a), U64(0x14), U64(0x28), U64(0xd0), U64(0xa0), U64(0x60) },

1140 { 
U64
(0x7e), U64(0x7d), U64(0x7b), U64(0x77), U64(0x6f), U64(0x5f), U64(0xbf), U64(0x40) },

1141 { 
U64
(0x7e), U64(0x7d), U64(0x7b), U64(0x77), U64(0x6f), U64(0x5f), U64(0xbf), U64(0x40) },

1142 { 
U64
(0x02), U64(0x7d), U64(0x7a), U64(0x76), U64(0x6e), U64(0x5e), U64(0xbe), U64(0x40) },

1143 { 
U64
(0x02), U64(0x7d), U64(0x7a), U64(0x76), U64(0x6e), U64(0x5e), U64(0xbe), U64(0x40) },

1144 { 
U64
(0x06), U64(0x05), U64(0x7b), U64(0x74), U64(0x6c), U64(0x5c), U64(0xbc), U64(0x40) },

1145 { 
U64
(0x06), U64(0x05), U64(0x7b), U64(0x74), U64(0x6c), U64(0x5c), U64(0xbc), U64(0x40) },

1146 { 
U64
(0x02), U64(0x05), U64(0x7a), U64(0x74), U64(0x6c), U64(0x5c), U64(0xbc), U64(0x40) },

1147 { 
U64
(0x02), U64(0x05), U64(0x7a), U64(0x74), U64(0x6c), U64(0x5c), U64(0xbc), U64(0x40) },

1148 { 
U64
(0x0e), U64(0x0d), U64(0x0b), U64(0x77), U64(0x68), U64(0x58), U64(0xb8), U64(0x40) },

1149 { 
U64
(0x0e), U64(0x0d), U64(0x0b), U64(0x77), U64(0x68), U64(0x58), U64(0xb8), U64(0x40) },

1150 { 
U64
(0x02), U64(0x0d), U64(0x0a), U64(0x76), U64(0x68), U64(0x58), U64(0xb8), U64(0x40) },

1151 { 
U64
(0x02), U64(0x0d), U64(0x0a), U64(0x76), U64(0x68), U64(0x58), U64(0xb8), U64(0x40) },

1152 { 
U64
(0x06), U64(0x05), U64(0x0b), U64(0x74), U64(0x68), U64(0x58), U64(0xb8), U64(0x40) },

1153 { 
U64
(0x06), U64(0x05), U64(0x0b), U64(0x74), U64(0x68), U64(0x58), U64(0xb8), U64(0x40) },

1154 { 
U64
(0x02), U64(0x05), U64(0x0a), U64(0x74), U64(0x68), U64(0x58), U64(0xb8), U64(0x40) },

1155 { 
U64
(0x02), U64(0x05), U64(0x0a), U64(0x74), U64(0x68), U64(0x58), U64(0xb8), U64(0x40) },

1156 { 
U64
(0x1e), U64(0x1d), U64(0x1b), U64(0x17), U64(0x6f), U64(0x50), U64(0xb0), U64(0x40) },

1157 { 
U64
(0x1e), U64(0x1d), U64(0x1b), U64(0x17), U64(0x6f), U64(0x50), U64(0xb0), U64(0x40) },

1158 { 
U64
(0x02), U64(0x1d), U64(0x1a), U64(0x16), U64(0x6e), U64(0x50), U64(0xb0), U64(0x40) },

1159 { 
U64
(0x02), U64(0x1d), U64(0x1a), U64(0x16), U64(0x6e), U64(0x50), U64(0xb0), U64(0x40) },

1160 { 
U64
(0x06), U64(0x05), U64(0x1b), U64(0x14), U64(0x6c), U64(0x50), U64(0xb0), U64(0x40) },

1161 { 
U64
(0x06), U64(0x05), U64(0x1b), U64(0x14), U64(0x6c), U64(0x50), U64(0xb0), U64(0x40) },

1162 { 
U64
(0x02), U64(0x05), U64(0x1a), U64(0x14), U64(0x6c), U64(0x50), U64(0xb0), U64(0x40) },

1163 { 
U64
(0x02), U64(0x05), U64(0x1a), U64(0x14), U64(0x6c), U64(0x50), U64(0xb0), U64(0x40) },

1164 { 
U64
(0x0e), U64(0x0d), U64(0x0b), U64(0x17), U64(0x68), U64(0x50), U64(0xb0), U64(0x40) },

1165 { 
U64
(0x0e), U64(0x0d), U64(0x0b), U64(0x17), U64(0x68), U64(0x50), U64(0xb0), U64(0x40) },

1166 { 
U64
(0x02), U64(0x0d), U64(0x0a), U64(0x16), U64(0x68), U64(0x50), U64(0xb0), U64(0x40) },

1167 { 
U64
(0x02), U64(0x0d), U64(0x0a), U64(0x16), U64(0x68), U64(0x50), U64(0xb0), U64(0x40) },

1168 { 
U64
(0x06), U64(0x05), U64(0x0b), U64(0x14), U64(0x68), U64(0x50), U64(0xb0), U64(0x40) },

1169 { 
U64
(0x06), U64(0x05), U64(0x0b), U64(0x14), U64(0x68), U64(0x50), U64(0xb0), U64(0x40) },

1170 { 
U64
(0x02), U64(0x05), U64(0x0a), U64(0x14), U64(0x68), U64(0x50), U64(0xb0), U64(0x40) },

1171 { 
U64
(0x02), U64(0x05), U64(0x0a), U64(0x14), U64(0x68), U64(0x50), U64(0xb0), U64(0x40) },

1172 { 
U64
(0x3e), U64(0x3d), U64(0x3b), U64(0x37), U64(0x2f), U64(0x5f), U64(0xa0), U64(0x40) },

1173 { 
U64
(0x3e), U64(0x3d), U64(0x3b), U64(0x37), U64(0x2f), U64(0x5f), U64(0xa0), U64(0x40) },

1174 { 
U64
(0x02), U64(0x3d), U64(0x3a), U64(0x36), U64(0x2e), U64(0x5e), U64(0xa0), U64(0x40) },

1175 { 
U64
(0x02), U64(0x3d), U64(0x3a), U64(0x36), U64(0x2e), U64(0x5e), U64(0xa0), U64(0x40) },

1176 { 
U64
(0x06), U64(0x05), U64(0x3b), U64(0x34), U64(0x2c), U64(0x5c), U64(0xa0), U64(0x40) },

1177 { 
U64
(0x06), U64(0x05), U64(0x3b), U64(0x34), U64(0x2c), U64(0x5c), U64(0xa0), U64(0x40) },

1178 { 
U64
(0x02), U64(0x05), U64(0x3a), U64(0x34), U64(0x2c), U64(0x5c), U64(0xa0), U64(0x40) },

1179 { 
U64
(0x02), U64(0x05), U64(0x3a), U64(0x34), U64(0x2c), U64(0x5c), U64(0xa0), U64(0x40) },

1180 { 
U64
(0x0e), U64(0x0d), U64(0x0b), U64(0x37), U64(0x28), U64(0x58), U64(0xa0), U64(0x40) },

1181 { 
U64
(0x0e), U64(0x0d), U64(0x0b), U64(0x37), U64(0x28), U64(0x58), U64(0xa0), U64(0x40) },

1182 { 
U64
(0x02), U64(0x0d), U64(0x0a), U64(0x36), U64(0x28), U64(0x58), U64(0xa0), U64(0x40) },

1183 { 
U64
(0x02), U64(0x0d), U64(0x0a), U64(0x36), U64(0x28), U64(0x58), U64(0xa0), U64(0x40) },

1184 { 
U64
(0x06), U64(0x05), U64(0x0b), U64(0x34), U64(0x28), U64(0x58), U64(0xa0), U64(0x40) },

1185 { 
U64
(0x06), U64(0x05), U64(0x0b), U64(0x34), U64(0x28), U64(0x58), U64(0xa0), U64(0x40) },

1186 { 
U64
(0x02), U64(0x05), U64(0x0a), U64(0x34), U64(0x28), U64(0x58), U64(0xa0), U64(0x40) },

1187 { 
U64
(0x02), U64(0x05), U64(0x0a), U64(0x34), U64(0x28), U64(0x58), U64(0xa0), U64(0x40) },

1188 { 
U64
(0x1e), U64(0x1d), U64(0x1b), U64(0x17), U64(0x2f), U64(0x50), U64(0xa0), U64(0x40) },

1189 { 
U64
(0x1e), U64(0x1d), U64(0x1b), U64(0x17), U64(0x2f), U64(0x50), U64(0xa0), U64(0x40) },

1190 { 
U64
(0x02), U64(0x1d), U64(0x1a), U64(0x16), U64(0x2e), U64(0x50), U64(0xa0), U64(0x40) },

1191 { 
U64
(0x02), U64(0x1d), U64(0x1a), U64(0x16), U64(0x2e), U64(0x50), U64(0xa0), U64(0x40) },

1192 { 
U64
(0x06), U64(0x05), U64(0x1b), U64(0x14), U64(0x2c), U64(0x50), U64(0xa0), U64(0x40) },

1193 { 
U64
(0x06), U64(0x05), U64(0x1b), U64(0x14), U64(0x2c), U64(0x50), U64(0xa0), U64(0x40) },

1194 { 
U64
(0x02), U64(0x05), U64(0x1a), U64(0x14), U64(0x2c), U64(0x50), U64(0xa0), U64(0x40) },

1195 { 
U64
(0x02), U64(0x05), U64(0x1a), U64(0x14), U64(0x2c), U64(0x50), U64(0xa0), U64(0x40) },

1196 { 
U64
(0x0e), U64(0x0d), U64(0x0b), U64(0x17), U64(0x28), U64(0x50), U64(0xa0), U64(0x40) },

1197 { 
U64
(0x0e), U64(0x0d), U64(0x0b), U64(0x17), U64(0x28), U64(0x50), U64(0xa0), U64(0x40) },

1198 { 
U64
(0x02), U64(0x0d), U64(0x0a), U64(0x16), U64(0x28), U64(0x50), U64(0xa0), U64(0x40) },

1199 { 
U64
(0x02), U64(0x0d), U64(0x0a), U64(0x16), U64(0x28), U64(0x50), U64(0xa0), U64(0x40) },

1200 { 
U64
(0x06), U64(0x05), U64(0x0b), U64(0x14), U64(0x28), U64(0x50), U64(0xa0), U64(0x40) },

1201 { 
U64
(0x06), U64(0x05), U64(0x0b), U64(0x14), U64(0x28), U64(0x50), U64(0xa0), U64(0x40) },

1202 { 
U64
(0x02), U64(0x05), U64(0x0a), U64(0x14), U64(0x28), U64(0x50), U64(0xa0), U64(0x40) },

1203 { 
U64
(0x02), U64(0x05), U64(0x0a), U64(0x14), U64(0x28), U64(0x50), U64(0xa0), U64(0x40) },

1204 { 
U64
(0xfe), U64(0xfd), U64(0xfb), U64(0xf7), U64(0xef), U64(0xdf), U64(0xbf), U64(0x7f) },

1205 { 
U64
(0xfe), U64(0xfd), U64(0xfb), U64(0xf7), U64(0xef), U64(0xdf), U64(0xbf), U64(0x7f) },

1206 { 
U64
(0x02), U64(0xfd), U64(0xfa), U64(0xf6), U64(0xee), U64(0xde), U64(0xbe), U64(0x7e) },

1207 { 
U64
(0x02), U64(0xfd), U64(0xfa), U64(0xf6), U64(0xee), U64(0xde), U64(0xbe), U64(0x7e) },

1208 { 
U64
(0x06), U64(0x05), U64(0xfb), U64(0xf4), U64(0xec), U64(0xdc), U64(0xbc), U64(0x7c) },

1209 { 
U64
(0x06), U64(0x05), U64(0xfb), U64(0xf4), U64(0xec), U64(0xdc), U64(0xbc), U64(0x7c) },

1210 { 
U64
(0x02), U64(0x05), U64(0xfa), U64(0xf4), U64(0xec), U64(0xdc), U64(0xbc), U64(0x7c) },

1211 { 
U64
(0x02), U64(0x05), U64(0xfa), U64(0xf4), U64(0xec), U64(0xdc), U64(0xbc), U64(0x7c) },

1212 { 
U64
(0x0e), U64(0x0d), U64(0x0b), U64(0xf7), U64(0xe8), U64(0xd8), U64(0xb8), U64(0x78) },

1213 { 
U64
(0x0e), U64(0x0d), U64(0x0b), U64(0xf7), U64(0xe8), U64(0xd8), U64(0xb8), U64(0x78) },

1214 { 
U64
(0x02), U64(0x0d), U64(0x0a), U64(0xf6), U64(0xe8), U64(0xd8), U64(0xb8), U64(0x78) },

1215 { 
U64
(0x02), U64(0x0d), U64(0x0a), U64(0xf6), U64(0xe8), U64(0xd8), U64(0xb8), U64(0x78) },

1216 { 
U64
(0x06), U64(0x05), U64(0x0b), U64(0xf4), U64(0xe8), U64(0xd8), U64(0xb8), U64(0x78) },

1217 { 
U64
(0x06), U64(0x05), U64(0x0b), U64(0xf4), U64(0xe8), U64(0xd8), U64(0xb8), U64(0x78) },

1218 { 
U64
(0x02), U64(0x05), U64(0x0a), U64(0xf4), U64(0xe8), U64(0xd8), U64(0xb8), U64(0x78) },

1219 { 
U64
(0x02), U64(0x05), U64(0x0a), U64(0xf4), U64(0xe8), U64(0xd8), U64(0xb8), U64(0x78) },

1220 { 
U64
(0x1e), U64(0x1d), U64(0x1b), U64(0x17), U64(0xef), U64(0xd0), U64(0xb0), U64(0x70) },

1221 { 
U64
(0x1e), U64(0x1d), U64(0x1b), U64(0x17), U64(0xef), U64(0xd0), U64(0xb0), U64(0x70) },

1222 { 
U64
(0x02), U64(0x1d), U64(0x1a), U64(0x16), U64(0xee), U64(0xd0), U64(0xb0), U64(0x70) },

1223 { 
U64
(0x02), U64(0x1d), U64(0x1a), U64(0x16), U64(0xee), U64(0xd0), U64(0xb0), U64(0x70) },

1224 { 
U64
(0x06), U64(0x05), U64(0x1b), U64(0x14), U64(0xec), U64(0xd0), U64(0xb0), U64(0x70) },

1225 { 
U64
(0x06), U64(0x05), U64(0x1b), U64(0x14), U64(0xec), U64(0xd0), U64(0xb0), U64(0x70) },

1226 { 
U64
(0x02), U64(0x05), U64(0x1a), U64(0x14), U64(0xec), U64(0xd0), U64(0xb0), U64(0x70) },

1227 { 
U64
(0x02), U64(0x05), U64(0x1a), U64(0x14), U64(0xec), U64(0xd0), U64(0xb0), U64(0x70) },

1228 { 
U64
(0x0e), U64(0x0d), U64(0x0b), U64(0x17), U64(0xe8), U64(0xd0), U64(0xb0), U64(0x70) },

1229 { 
U64
(0x0e), U64(0x0d), U64(0x0b), U64(0x17), U64(0xe8), U64(0xd0), U64(0xb0), U64(0x70) },

1230 { 
U64
(0x02), U64(0x0d), U64(0x0a), U64(0x16), U64(0xe8), U64(0xd0), U64(0xb0), U64(0x70) },

1231 { 
U64
(0x02), U64(0x0d), U64(0x0a), U64(0x16), U64(0xe8), U64(0xd0), U64(0xb0), U64(0x70) },

1232 { 
U64
(0x06), U64(0x05), U64(0x0b), U64(0x14), U64(0xe8), U64(0xd0), U64(0xb0), U64(0x70) },

1233 { 
U64
(0x06), U64(0x05), U64(0x0b), U64(0x14), U64(0xe8), U64(0xd0), U64(0xb0), U64(0x70) },

1234 { 
U64
(0x02), U64(0x05), U64(0x0a), U64(0x14), U64(0xe8), U64(0xd0), U64(0xb0), U64(0x70) },

1235 { 
U64
(0x02), U64(0x05), U64(0x0a), U64(0x14), U64(0xe8), U64(0xd0), U64(0xb0), U64(0x70) },

1236 { 
U64
(0x3e), U64(0x3d), U64(0x3b), U64(0x37), U64(0x2f), U64(0xdf), U64(0xa0), U64(0x60) },

1237 { 
U64
(0x3e), U64(0x3d), U64(0x3b), U64(0x37), U64(0x2f), U64(0xdf), U64(0xa0), U64(0x60) },

1238 { 
U64
(0x02), U64(0x3d), U64(0x3a), U64(0x36), U64(0x2e), U64(0xde), U64(0xa0), U64(0x60) },

1239 { 
U64
(0x02), U64(0x3d), U64(0x3a), U64(0x36), U64(0x2e), U64(0xde), U64(0xa0), U64(0x60) },

1240 { 
U64
(0x06), U64(0x05), U64(0x3b), U64(0x34), U64(0x2c), U64(0xdc), U64(0xa0), U64(0x60) },

1241 { 
U64
(0x06), U64(0x05), U64(0x3b), U64(0x34), U64(0x2c), U64(0xdc), U64(0xa0), U64(0x60) },

1242 { 
U64
(0x02), U64(0x05), U64(0x3a), U64(0x34), U64(0x2c), U64(0xdc), U64(0xa0), U64(0x60) },

1243 { 
U64
(0x02), U64(0x05), U64(0x3a), U64(0x34), U64(0x2c), U64(0xdc), U64(0xa0), U64(0x60) },

1244 { 
U64
(0x0e), U64(0x0d), U64(0x0b), U64(0x37), U64(0x28), U64(0xd8), U64(0xa0), U64(0x60) },

1245 { 
U64
(0x0e), U64(0x0d), U64(0x0b), U64(0x37), U64(0x28), U64(0xd8), U64(0xa0), U64(0x60) },

1246 { 
U64
(0x02), U64(0x0d), U64(0x0a), U64(0x36), U64(0x28), U64(0xd8), U64(0xa0), U64(0x60) },

1247 { 
U64
(0x02), U64(0x0d), U64(0x0a), U64(0x36), U64(0x28), U64(0xd8), U64(0xa0), U64(0x60) },

1248 { 
U64
(0x06), U64(0x05), U64(0x0b), U64(0x34), U64(0x28), U64(0xd8), U64(0xa0), U64(0x60) },

1249 { 
U64
(0x06), U64(0x05), U64(0x0b), U64(0x34), U64(0x28), U64(0xd8), U64(0xa0), U64(0x60) },

1250 { 
U64
(0x02), U64(0x05), U64(0x0a), U64(0x34), U64(0x28), U64(0xd8), U64(0xa0), U64(0x60) },

1251 { 
U64
(0x02), U64(0x05), U64(0x0a), U64(0x34), U64(0x28), U64(0xd8), U64(0xa0), U64(0x60) },

1252 { 
U64
(0x1e), U64(0x1d), U64(0x1b), U64(0x17), U64(0x2f), U64(0xd0), U64(0xa0), U64(0x60) },

1253 { 
U64
(0x1e), U64(0x1d), U64(0x1b), U64(0x17), U64(0x2f), U64(0xd0), U64(0xa0), U64(0x60) },

1254 { 
U64
(0x02), U64(0x1d), U64(0x1a), U64(0x16), U64(0x2e), U64(0xd0), U64(0xa0), U64(0x60) },

1255 { 
U64
(0x02), U64(0x1d), U64(0x1a), U64(0x16), U64(0x2e), U64(0xd0), U64(0xa0), U64(0x60) },

1256 { 
U64
(0x06), U64(0x05), U64(0x1b), U64(0x14), U64(0x2c), U64(0xd0), U64(0xa0), U64(0x60) },

1257 { 
U64
(0x06), U64(0x05), U64(0x1b), U64(0x14), U64(0x2c), U64(0xd0), U64(0xa0), U64(0x60) },

1258 { 
U64
(0x02), U64(0x05), U64(0x1a), U64(0x14), U64(0x2c), U64(0xd0), U64(0xa0), U64(0x60) },

1259 { 
U64
(0x02), U64(0x05), U64(0x1a), U64(0x14), U64(0x2c), U64(0xd0), U64(0xa0), U64(0x60) },

1260 { 
U64
(0x0e), U64(0x0d), U64(0x0b), U64(0x17), U64(0x28), U64(0xd0), U64(0xa0), U64(0x60) },

1261 { 
U64
(0x0e), U64(0x0d), U64(0x0b), U64(0x17), U64(0x28), U64(0xd0), U64(0xa0), U64(0x60) },

1262 { 
U64
(0x02), U64(0x0d), U64(0x0a), U64(0x16), U64(0x28), U64(0xd0), U64(0xa0), U64(0x60) },

1263 { 
U64
(0x02), U64(0x0d), U64(0x0a), U64(0x16), U64(0x28), U64(0xd0), U64(0xa0), U64(0x60) },

1264 { 
U64
(0x06), U64(0x05), U64(0x0b), U64(0x14), U64(0x28), U64(0xd0), U64(0xa0), U64(0x60) },

1265 { 
U64
(0x06), U64(0x05), U64(0x0b), U64(0x14), U64(0x28), U64(0xd0), U64(0xa0), U64(0x60) },

1266 { 
U64
(0x02), U64(0x05), U64(0x0a), U64(0x14), U64(0x28), U64(0xd0), U64(0xa0), U64(0x60) },

1267 { 
U64
(0x02), U64(0x05), U64(0x0a), U64(0x14), U64(0x28), U64(0xd0), U64(0xa0), U64(0x60) },

1268 { 
U64
(0x7e), U64(0x7d), U64(0x7b), U64(0x77), U64(0x6f), U64(0x5f), U64(0xbf), U64(0x40) },

1269 { 
U64
(0x7e), U64(0x7d), U64(0x7b), U64(0x77), U64(0x6f), U64(0x5f), U64(0xbf), U64(0x40) },

1270 { 
U64
(0x02), U64(0x7d), U64(0x7a), U64(0x76), U64(0x6e), U64(0x5e), U64(0xbe), U64(0x40) },

1271 { 
U64
(0x02), U64(0x7d), U64(0x7a), U64(0x76), U64(0x6e), U64(0x5e), U64(0xbe), U64(0x40) },

1272 { 
U64
(0x06), U64(0x05), U64(0x7b), U64(0x74), U64(0x6c), U64(0x5c), U64(0xbc), U64(0x40) },

1273 { 
U64
(0x06), U64(0x05), U64(0x7b), U64(0x74), U64(0x6c), U64(0x5c), U64(0xbc), U64(0x40) },

1274 { 
U64
(0x02), U64(0x05), U64(0x7a), U64(0x74), U64(0x6c), U64(0x5c), U64(0xbc), U64(0x40) },

1275 { 
U64
(0x02), U64(0x05), U64(0x7a), U64(0x74), U64(0x6c), U64(0x5c), U64(0xbc), U64(0x40) },

1276 { 
U64
(0x0e), U64(0x0d), U64(0x0b), U64(0x77), U64(0x68), U64(0x58), U64(0xb8), U64(0x40) },

1277 { 
U64
(0x0e), U64(0x0d), U64(0x0b), U64(0x77), U64(0x68), U64(0x58), U64(0xb8), U64(0x40) },

1278 { 
U64
(0x02), U64(0x0d), U64(0x0a), U64(0x76), U64(0x68), U64(0x58), U64(0xb8), U64(0x40) },

1279 { 
U64
(0x02), U64(0x0d), U64(0x0a), U64(0x76), U64(0x68), U64(0x58), U64(0xb8), U64(0x40) },

1280 { 
U64
(0x06), U64(0x05), U64(0x0b), U64(0x74), U64(0x68), U64(0x58), U64(0xb8), U64(0x40) },

1281 { 
U64
(0x06), U64(0x05), U64(0x0b), U64(0x74), U64(0x68), U64(0x58), U64(0xb8), U64(0x40) },

1282 { 
U64
(0x02), U64(0x05), U64(0x0a), U64(0x74), U64(0x68), U64(0x58), U64(0xb8), U64(0x40) },

1283 { 
U64
(0x02), U64(0x05), U64(0x0a), U64(0x74), U64(0x68), U64(0x58), U64(0xb8), U64(0x40) },

1284 { 
U64
(0x1e), U64(0x1d), U64(0x1b), U64(0x17), U64(0x6f), U64(0x50), U64(0xb0), U64(0x40) },

1285 { 
U64
(0x1e), U64(0x1d), U64(0x1b), U64(0x17), U64(0x6f), U64(0x50), U64(0xb0), U64(0x40) },

1286 { 
U64
(0x02), U64(0x1d), U64(0x1a), U64(0x16), U64(0x6e), U64(0x50), U64(0xb0), U64(0x40) },

1287 { 
U64
(0x02), U64(0x1d), U64(0x1a), U64(0x16), U64(0x6e), U64(0x50), U64(0xb0), U64(0x40) },

1288 { 
U64
(0x06), U64(0x05), U64(0x1b), U64(0x14), U64(0x6c), U64(0x50), U64(0xb0), U64(0x40) },

1289 { 
U64
(0x06), U64(0x05), U64(0x1b), U64(0x14), U64(0x6c), U64(0x50), U64(0xb0), U64(0x40) },

1290 { 
U64
(0x02), U64(0x05), U64(0x1a), U64(0x14), U64(0x6c), U64(0x50), U64(0xb0), U64(0x40) },

1291 { 
U64
(0x02), U64(0x05), U64(0x1a), U64(0x14), U64(0x6c), U64(0x50), U64(0xb0), U64(0x40) },

1292 { 
U64
(0x0e), U64(0x0d), U64(0x0b), U64(0x17), U64(0x68), U64(0x50), U64(0xb0), U64(0x40) },

1293 { 
U64
(0x0e), U64(0x0d), U64(0x0b), U64(0x17), U64(0x68), U64(0x50), U64(0xb0), U64(0x40) },

1294 { 
U64
(0x02), U64(0x0d), U64(0x0a), U64(0x16), U64(0x68), U64(0x50), U64(0xb0), U64(0x40) },

1295 { 
U64
(0x02), U64(0x0d), U64(0x0a), U64(0x16), U64(0x68), U64(0x50), U64(0xb0), U64(0x40) },

1296 { 
U64
(0x06), U64(0x05), U64(0x0b), U64(0x14), U64(0x68), U64(0x50), U64(0xb0), U64(0x40) },

1297 { 
U64
(0x06), U64(0x05), U64(0x0b), U64(0x14), U64(0x68), U64(0x50), U64(0xb0), U64(0x40) },

1298 { 
U64
(0x02), U64(0x05), U64(0x0a), U64(0x14), U64(0x68), U64(0x50), U64(0xb0), U64(0x40) },

1299 { 
U64
(0x02), U64(0x05), U64(0x0a), U64(0x14), U64(0x68), U64(0x50), U64(0xb0), U64(0x40) },

1300 { 
U64
(0x3e), U64(0x3d), U64(0x3b), U64(0x37), U64(0x2f), U64(0x5f), U64(0xa0), U64(0x40) },

1301 { 
U64
(0x3e), U64(0x3d), U64(0x3b), U64(0x37), U64(0x2f), U64(0x5f), U64(0xa0), U64(0x40) },

1302 { 
U64
(0x02), U64(0x3d), U64(0x3a), U64(0x36), U64(0x2e), U64(0x5e), U64(0xa0), U64(0x40) },

1303 { 
U64
(0x02), U64(0x3d), U64(0x3a), U64(0x36), U64(0x2e), U64(0x5e), U64(0xa0), U64(0x40) },

1304 { 
U64
(0x06), U64(0x05), U64(0x3b), U64(0x34), U64(0x2c), U64(0x5c), U64(0xa0), U64(0x40) },

1305 { 
U64
(0x06), U64(0x05), U64(0x3b), U64(0x34), U64(0x2c), U64(0x5c), U64(0xa0), U64(0x40) },

1306 { 
U64
(0x02), U64(0x05), U64(0x3a), U64(0x34), U64(0x2c), U64(0x5c), U64(0xa0), U64(0x40) },

1307 { 
U64
(0x02), U64(0x05), U64(0x3a), U64(0x34), U64(0x2c), U64(0x5c), U64(0xa0), U64(0x40) },

1308 { 
U64
(0x0e), U64(0x0d), U64(0x0b), U64(0x37), U64(0x28), U64(0x58), U64(0xa0), U64(0x40) },

1309 { 
U64
(0x0e), U64(0x0d), U64(0x0b), U64(0x37), U64(0x28), U64(0x58), U64(0xa0), U64(0x40) },

1310 { 
U64
(0x02), U64(0x0d), U64(0x0a), U64(0x36), U64(0x28), U64(0x58), U64(0xa0), U64(0x40) },

1311 { 
U64
(0x02), U64(0x0d), U64(0x0a), U64(0x36), U64(0x28), U64(0x58), U64(0xa0), U64(0x40) },

1312 { 
U64
(0x06), U64(0x05), U64(0x0b), U64(0x34), U64(0x28), U64(0x58), U64(0xa0), U64(0x40) },

1313 { 
U64
(0x06), U64(0x05), U64(0x0b), U64(0x34), U64(0x28), U64(0x58), U64(0xa0), U64(0x40) },

1314 { 
U64
(0x02), U64(0x05), U64(0x0a), U64(0x34), U64(0x28), U64(0x58), U64(0xa0), U64(0x40) },

1315 { 
U64
(0x02), U64(0x05), U64(0x0a), U64(0x34), U64(0x28), U64(0x58), U64(0xa0), U64(0x40) },

1316 { 
U64
(0x1e), U64(0x1d), U64(0x1b), U64(0x17), U64(0x2f), U64(0x50), U64(0xa0), U64(0x40) },

1317 { 
U64
(0x1e), U64(0x1d), U64(0x1b), U64(0x17), U64(0x2f), U64(0x50), U64(0xa0), U64(0x40) },

1318 { 
U64
(0x02), U64(0x1d), U64(0x1a), U64(0x16), U64(0x2e), U64(0x50), U64(0xa0), U64(0x40) },

1319 { 
U64
(0x02), U64(0x1d), U64(0x1a), U64(0x16), U64(0x2e), U64(0x50), U64(0xa0), U64(0x40) },

1320 { 
U64
(0x06), U64(0x05), U64(0x1b), U64(0x14), U64(0x2c), U64(0x50), U64(0xa0), U64(0x40) },

1321 { 
U64
(0x06), U64(0x05), U64(0x1b), U64(0x14), U64(0x2c), U64(0x50), U64(0xa0), U64(0x40) },

1322 { 
U64
(0x02), U64(0x05), U64(0x1a), U64(0x14), U64(0x2c), U64(0x50), U64(0xa0), U64(0x40) },

1323 { 
U64
(0x02), U64(0x05), U64(0x1a), U64(0x14), U64(0x2c), U64(0x50), U64(0xa0), U64(0x40) },

1324 { 
U64
(0x0e), U64(0x0d), U64(0x0b), U64(0x17), U64(0x28), U64(0x50), U64(0xa0), U64(0x40) },

1325 { 
U64
(0x0e), U64(0x0d), U64(0x0b), U64(0x17), U64(0x28), U64(0x50), U64(0xa0), U64(0x40) },

1326 { 
U64
(0x02), U64(0x0d), U64(0x0a), U64(0x16), U64(0x28), U64(0x50), U64(0xa0), U64(0x40) },

1327 { 
U64
(0x02), U64(0x0d), U64(0x0a), U64(0x16), U64(0x28), U64(0x50), U64(0xa0), U64(0x40) },

1328 { 
U64
(0x06), U64(0x05), U64(0x0b), U64(0x14), U64(0x28), U64(0x50), U64(0xa0), U64(0x40) },

1329 { 
U64
(0x06), U64(0x05), U64(0x0b), U64(0x14), U64(0x28), U64(0x50), U64(0xa0), U64(0x40) },

1330 { 
U64
(0x02), U64(0x05), U64(0x0a), U64(0x14), U64(0x28), U64(0x50), U64(0xa0), U64(0x40) },

1331 { 
U64
(0x02), U64(0x05), U64(0x0a), U64(0x14), U64(0x28), U64(0x50), U64(0xa0), U64(0x40) }

1346 
uöt64_t
 
	gcﬁ©ècks
[256][8] = {

1347 { 
U64
(0x0101010101010100), U64(0x0101010101010001), U64(0x0101010101000101), U64(0x0101010100010101), U64(0x0101010001010101), U64(0x0101000101010101), U64(0x0100010101010101), U64(0x0001010101010101) },

1348 { 
U64
(0x0101010101010100), U64(0x0101010101010001), U64(0x0101010101000101), U64(0x0101010100010101), U64(0x0101010001010101), U64(0x0101000101010101), U64(0x0100010101010101), U64(0x0001010101010101) },

1349 { 
U64
(0x0000000000000100), U64(0x0101010101010001), U64(0x0101010101000100), U64(0x0101010100010100), U64(0x0101010001010100), U64(0x0101000101010100), U64(0x0100010101010100), U64(0x0001010101010100) },

1350 { 
U64
(0x0000000000000100), U64(0x0101010101010001), U64(0x0101010101000100), U64(0x0101010100010100), U64(0x0101010001010100), U64(0x0101000101010100), U64(0x0100010101010100), U64(0x0001010101010100) },

1351 { 
U64
(0x0000000000010100), U64(0x0000000000010001), U64(0x0101010101000101), U64(0x0101010100010000), U64(0x0101010001010000), U64(0x0101000101010000), U64(0x0100010101010000), U64(0x0001010101010000) },

1352 { 
U64
(0x0000000000010100), U64(0x0000000000010001), U64(0x0101010101000101), U64(0x0101010100010000), U64(0x0101010001010000), U64(0x0101000101010000), U64(0x0100010101010000), U64(0x0001010101010000) },

1353 { 
U64
(0x0000000000000100), U64(0x0000000000010001), U64(0x0101010101000100), U64(0x0101010100010000), U64(0x0101010001010000), U64(0x0101000101010000), U64(0x0100010101010000), U64(0x0001010101010000) },

1354 { 
U64
(0x0000000000000100), U64(0x0000000000010001), U64(0x0101010101000100), U64(0x0101010100010000), U64(0x0101010001010000), U64(0x0101000101010000), U64(0x0100010101010000), U64(0x0001010101010000) },

1355 { 
U64
(0x0000000001010100), U64(0x0000000001010001), U64(0x0000000001000101), U64(0x0101010100010101), U64(0x0101010001000000), U64(0x0101000101000000), U64(0x0100010101000000), U64(0x0001010101000000) },

1356 { 
U64
(0x0000000001010100), U64(0x0000000001010001), U64(0x0000000001000101), U64(0x0101010100010101), U64(0x0101010001000000), U64(0x0101000101000000), U64(0x0100010101000000), U64(0x0001010101000000) },

1357 { 
U64
(0x0000000000000100), U64(0x0000000001010001), U64(0x0000000001000100), U64(0x0101010100010100), U64(0x0101010001000000), U64(0x0101000101000000), U64(0x0100010101000000), U64(0x0001010101000000) },

1358 { 
U64
(0x0000000000000100), U64(0x0000000001010001), U64(0x0000000001000100), U64(0x0101010100010100), U64(0x0101010001000000), U64(0x0101000101000000), U64(0x0100010101000000), U64(0x0001010101000000) },

1359 { 
U64
(0x0000000000010100), U64(0x0000000000010001), U64(0x0000000001000101), U64(0x0101010100010000), U64(0x0101010001000000), U64(0x0101000101000000), U64(0x0100010101000000), U64(0x0001010101000000) },

1360 { 
U64
(0x0000000000010100), U64(0x0000000000010001), U64(0x0000000001000101), U64(0x0101010100010000), U64(0x0101010001000000), U64(0x0101000101000000), U64(0x0100010101000000), U64(0x0001010101000000) },

1361 { 
U64
(0x0000000000000100), U64(0x0000000000010001), U64(0x0000000001000100), U64(0x0101010100010000), U64(0x0101010001000000), U64(0x0101000101000000), U64(0x0100010101000000), U64(0x0001010101000000) },

1362 { 
U64
(0x0000000000000100), U64(0x0000000000010001), U64(0x0000000001000100), U64(0x0101010100010000), U64(0x0101010001000000), U64(0x0101000101000000), U64(0x0100010101000000), U64(0x0001010101000000) },

1363 { 
U64
(0x0000000101010100), U64(0x0000000101010001), U64(0x0000000101000101), U64(0x0000000100010101), U64(0x0101010001010101), U64(0x0101000100000000), U64(0x0100010100000000), U64(0x0001010100000000) },

1364 { 
U64
(0x0000000101010100), U64(0x0000000101010001), U64(0x0000000101000101), U64(0x0000000100010101), U64(0x0101010001010101), U64(0x0101000100000000), U64(0x0100010100000000), U64(0x0001010100000000) },

1365 { 
U64
(0x0000000000000100), U64(0x0000000101010001), U64(0x0000000101000100), U64(0x0000000100010100), U64(0x0101010001010100), U64(0x0101000100000000), U64(0x0100010100000000), U64(0x0001010100000000) },

1366 { 
U64
(0x0000000000000100), U64(0x0000000101010001), U64(0x0000000101000100), U64(0x0000000100010100), U64(0x0101010001010100), U64(0x0101000100000000), U64(0x0100010100000000), U64(0x0001010100000000) },

1367 { 
U64
(0x0000000000010100), U64(0x0000000000010001), U64(0x0000000101000101), U64(0x0000000100010000), U64(0x0101010001010000), U64(0x0101000100000000), U64(0x0100010100000000), U64(0x0001010100000000) },

1368 { 
U64
(0x0000000000010100), U64(0x0000000000010001), U64(0x0000000101000101), U64(0x0000000100010000), U64(0x0101010001010000), U64(0x0101000100000000), U64(0x0100010100000000), U64(0x0001010100000000) },

1369 { 
U64
(0x0000000000000100), U64(0x0000000000010001), U64(0x0000000101000100), U64(0x0000000100010000), U64(0x0101010001010000), U64(0x0101000100000000), U64(0x0100010100000000), U64(0x0001010100000000) },

1370 { 
U64
(0x0000000000000100), U64(0x0000000000010001), U64(0x0000000101000100), U64(0x0000000100010000), U64(0x0101010001010000), U64(0x0101000100000000), U64(0x0100010100000000), U64(0x0001010100000000) },

1371 { 
U64
(0x0000000001010100), U64(0x0000000001010001), U64(0x0000000001000101), U64(0x0000000100010101), U64(0x0101010001000000), U64(0x0101000100000000), U64(0x0100010100000000), U64(0x0001010100000000) },

1372 { 
U64
(0x0000000001010100), U64(0x0000000001010001), U64(0x0000000001000101), U64(0x0000000100010101), U64(0x0101010001000000), U64(0x0101000100000000), U64(0x0100010100000000), U64(0x0001010100000000) },

1373 { 
U64
(0x0000000000000100), U64(0x0000000001010001), U64(0x0000000001000100), U64(0x0000000100010100), U64(0x0101010001000000), U64(0x0101000100000000), U64(0x0100010100000000), U64(0x0001010100000000) },

1374 { 
U64
(0x0000000000000100), U64(0x0000000001010001), U64(0x0000000001000100), U64(0x0000000100010100), U64(0x0101010001000000), U64(0x0101000100000000), U64(0x0100010100000000), U64(0x0001010100000000) },

1375 { 
U64
(0x0000000000010100), U64(0x0000000000010001), U64(0x0000000001000101), U64(0x0000000100010000), U64(0x0101010001000000), U64(0x0101000100000000), U64(0x0100010100000000), U64(0x0001010100000000) },

1376 { 
U64
(0x0000000000010100), U64(0x0000000000010001), U64(0x0000000001000101), U64(0x0000000100010000), U64(0x0101010001000000), U64(0x0101000100000000), U64(0x0100010100000000), U64(0x0001010100000000) },

1377 { 
U64
(0x0000000000000100), U64(0x0000000000010001), U64(0x0000000001000100), U64(0x0000000100010000), U64(0x0101010001000000), U64(0x0101000100000000), U64(0x0100010100000000), U64(0x0001010100000000) },

1378 { 
U64
(0x0000000000000100), U64(0x0000000000010001), U64(0x0000000001000100), U64(0x0000000100010000), U64(0x0101010001000000), U64(0x0101000100000000), U64(0x0100010100000000), U64(0x0001010100000000) },

1379 { 
U64
(0x0000010101010100), U64(0x0000010101010001), U64(0x0000010101000101), U64(0x0000010100010101), U64(0x0000010001010101), U64(0x0101000101010101), U64(0x0100010000000000), U64(0x0001010000000000) },

1380 { 
U64
(0x0000010101010100), U64(0x0000010101010001), U64(0x0000010101000101), U64(0x0000010100010101), U64(0x0000010001010101), U64(0x0101000101010101), U64(0x0100010000000000), U64(0x0001010000000000) },

1381 { 
U64
(0x0000000000000100), U64(0x0000010101010001), U64(0x0000010101000100), U64(0x0000010100010100), U64(0x0000010001010100), U64(0x0101000101010100), U64(0x0100010000000000), U64(0x0001010000000000) },

1382 { 
U64
(0x0000000000000100), U64(0x0000010101010001), U64(0x0000010101000100), U64(0x0000010100010100), U64(0x0000010001010100), U64(0x0101000101010100), U64(0x0100010000000000), U64(0x0001010000000000) },

1383 { 
U64
(0x0000000000010100), U64(0x0000000000010001), U64(0x0000010101000101), U64(0x0000010100010000), U64(0x0000010001010000), U64(0x0101000101010000), U64(0x0100010000000000), U64(0x0001010000000000) },

1384 { 
U64
(0x0000000000010100), U64(0x0000000000010001), U64(0x0000010101000101), U64(0x0000010100010000), U64(0x0000010001010000), U64(0x0101000101010000), U64(0x0100010000000000), U64(0x0001010000000000) },

1385 { 
U64
(0x0000000000000100), U64(0x0000000000010001), U64(0x0000010101000100), U64(0x0000010100010000), U64(0x0000010001010000), U64(0x0101000101010000), U64(0x0100010000000000), U64(0x0001010000000000) },

1386 { 
U64
(0x0000000000000100), U64(0x0000000000010001), U64(0x0000010101000100), U64(0x0000010100010000), U64(0x0000010001010000), U64(0x0101000101010000), U64(0x0100010000000000), U64(0x0001010000000000) },

1387 { 
U64
(0x0000000001010100), U64(0x0000000001010001), U64(0x0000000001000101), U64(0x0000010100010101), U64(0x0000010001000000), U64(0x0101000101000000), U64(0x0100010000000000), U64(0x0001010000000000) },

1388 { 
U64
(0x0000000001010100), U64(0x0000000001010001), U64(0x0000000001000101), U64(0x0000010100010101), U64(0x0000010001000000), U64(0x0101000101000000), U64(0x0100010000000000), U64(0x0001010000000000) },

1389 { 
U64
(0x0000000000000100), U64(0x0000000001010001), U64(0x0000000001000100), U64(0x0000010100010100), U64(0x0000010001000000), U64(0x0101000101000000), U64(0x0100010000000000), U64(0x0001010000000000) },

1390 { 
U64
(0x0000000000000100), U64(0x0000000001010001), U64(0x0000000001000100), U64(0x0000010100010100), U64(0x0000010001000000), U64(0x0101000101000000), U64(0x0100010000000000), U64(0x0001010000000000) },

1391 { 
U64
(0x0000000000010100), U64(0x0000000000010001), U64(0x0000000001000101), U64(0x0000010100010000), U64(0x0000010001000000), U64(0x0101000101000000), U64(0x0100010000000000), U64(0x0001010000000000) },

1392 { 
U64
(0x0000000000010100), U64(0x0000000000010001), U64(0x0000000001000101), U64(0x0000010100010000), U64(0x0000010001000000), U64(0x0101000101000000), U64(0x0100010000000000), U64(0x0001010000000000) },

1393 { 
U64
(0x0000000000000100), U64(0x0000000000010001), U64(0x0000000001000100), U64(0x0000010100010000), U64(0x0000010001000000), U64(0x0101000101000000), U64(0x0100010000000000), U64(0x0001010000000000) },

1394 { 
U64
(0x0000000000000100), U64(0x0000000000010001), U64(0x0000000001000100), U64(0x0000010100010000), U64(0x0000010001000000), U64(0x0101000101000000), U64(0x0100010000000000), U64(0x0001010000000000) },

1395 { 
U64
(0x0000000101010100), U64(0x0000000101010001), U64(0x0000000101000101), U64(0x0000000100010101), U64(0x0000010001010101), U64(0x0101000100000000), U64(0x0100010000000000), U64(0x0001010000000000) },

1396 { 
U64
(0x0000000101010100), U64(0x0000000101010001), U64(0x0000000101000101), U64(0x0000000100010101), U64(0x0000010001010101), U64(0x0101000100000000), U64(0x0100010000000000), U64(0x0001010000000000) },

1397 { 
U64
(0x0000000000000100), U64(0x0000000101010001), U64(0x0000000101000100), U64(0x0000000100010100), U64(0x0000010001010100), U64(0x0101000100000000), U64(0x0100010000000000), U64(0x0001010000000000) },

1398 { 
U64
(0x0000000000000100), U64(0x0000000101010001), U64(0x0000000101000100), U64(0x0000000100010100), U64(0x0000010001010100), U64(0x0101000100000000), U64(0x0100010000000000), U64(0x0001010000000000) },

1399 { 
U64
(0x0000000000010100), U64(0x0000000000010001), U64(0x0000000101000101), U64(0x0000000100010000), U64(0x0000010001010000), U64(0x0101000100000000), U64(0x0100010000000000), U64(0x0001010000000000) },

1400 { 
U64
(0x0000000000010100), U64(0x0000000000010001), U64(0x0000000101000101), U64(0x0000000100010000), U64(0x0000010001010000), U64(0x0101000100000000), U64(0x0100010000000000), U64(0x0001010000000000) },

1401 { 
U64
(0x0000000000000100), U64(0x0000000000010001), U64(0x0000000101000100), U64(0x0000000100010000), U64(0x0000010001010000), U64(0x0101000100000000), U64(0x0100010000000000), U64(0x0001010000000000) },

1402 { 
U64
(0x0000000000000100), U64(0x0000000000010001), U64(0x0000000101000100), U64(0x0000000100010000), U64(0x0000010001010000), U64(0x0101000100000000), U64(0x0100010000000000), U64(0x0001010000000000) },

1403 { 
U64
(0x0000000001010100), U64(0x0000000001010001), U64(0x0000000001000101), U64(0x0000000100010101), U64(0x0000010001000000), U64(0x0101000100000000), U64(0x0100010000000000), U64(0x0001010000000000) },

1404 { 
U64
(0x0000000001010100), U64(0x0000000001010001), U64(0x0000000001000101), U64(0x0000000100010101), U64(0x0000010001000000), U64(0x0101000100000000), U64(0x0100010000000000), U64(0x0001010000000000) },

1405 { 
U64
(0x0000000000000100), U64(0x0000000001010001), U64(0x0000000001000100), U64(0x0000000100010100), U64(0x0000010001000000), U64(0x0101000100000000), U64(0x0100010000000000), U64(0x0001010000000000) },

1406 { 
U64
(0x0000000000000100), U64(0x0000000001010001), U64(0x0000000001000100), U64(0x0000000100010100), U64(0x0000010001000000), U64(0x0101000100000000), U64(0x0100010000000000), U64(0x0001010000000000) },

1407 { 
U64
(0x0000000000010100), U64(0x0000000000010001), U64(0x0000000001000101), U64(0x0000000100010000), U64(0x0000010001000000), U64(0x0101000100000000), U64(0x0100010000000000), U64(0x0001010000000000) },

1408 { 
U64
(0x0000000000010100), U64(0x0000000000010001), U64(0x0000000001000101), U64(0x0000000100010000), U64(0x0000010001000000), U64(0x0101000100000000), U64(0x0100010000000000), U64(0x0001010000000000) },

1409 { 
U64
(0x0000000000000100), U64(0x0000000000010001), U64(0x0000000001000100), U64(0x0000000100010000), U64(0x0000010001000000), U64(0x0101000100000000), U64(0x0100010000000000), U64(0x0001010000000000) },

1410 { 
U64
(0x0000000000000100), U64(0x0000000000010001), U64(0x0000000001000100), U64(0x0000000100010000), U64(0x0000010001000000), U64(0x0101000100000000), U64(0x0100010000000000), U64(0x0001010000000000) },

1411 { 
U64
(0x0001010101010100), U64(0x0001010101010001), U64(0x0001010101000101), U64(0x0001010100010101), U64(0x0001010001010101), U64(0x0001000101010101), U64(0x0100010101010101), U64(0x0001000000000000) },

1412 { 
U64
(0x0001010101010100), U64(0x0001010101010001), U64(0x0001010101000101), U64(0x0001010100010101), U64(0x0001010001010101), U64(0x0001000101010101), U64(0x0100010101010101), U64(0x0001000000000000) },

1413 { 
U64
(0x0000000000000100), U64(0x0001010101010001), U64(0x0001010101000100), U64(0x0001010100010100), U64(0x0001010001010100), U64(0x0001000101010100), U64(0x0100010101010100), U64(0x0001000000000000) },

1414 { 
U64
(0x0000000000000100), U64(0x0001010101010001), U64(0x0001010101000100), U64(0x0001010100010100), U64(0x0001010001010100), U64(0x0001000101010100), U64(0x0100010101010100), U64(0x0001000000000000) },

1415 { 
U64
(0x0000000000010100), U64(0x0000000000010001), U64(0x0001010101000101), U64(0x0001010100010000), U64(0x0001010001010000), U64(0x0001000101010000), U64(0x0100010101010000), U64(0x0001000000000000) },

1416 { 
U64
(0x0000000000010100), U64(0x0000000000010001), U64(0x0001010101000101), U64(0x0001010100010000), U64(0x0001010001010000), U64(0x0001000101010000), U64(0x0100010101010000), U64(0x0001000000000000) },

1417 { 
U64
(0x0000000000000100), U64(0x0000000000010001), U64(0x0001010101000100), U64(0x0001010100010000), U64(0x0001010001010000), U64(0x0001000101010000), U64(0x0100010101010000), U64(0x0001000000000000) },

1418 { 
U64
(0x0000000000000100), U64(0x0000000000010001), U64(0x0001010101000100), U64(0x0001010100010000), U64(0x0001010001010000), U64(0x0001000101010000), U64(0x0100010101010000), U64(0x0001000000000000) },

1419 { 
U64
(0x0000000001010100), U64(0x0000000001010001), U64(0x0000000001000101), U64(0x0001010100010101), U64(0x0001010001000000), U64(0x0001000101000000), U64(0x0100010101000000), U64(0x0001000000000000) },

1420 { 
U64
(0x0000000001010100), U64(0x0000000001010001), U64(0x0000000001000101), U64(0x0001010100010101), U64(0x0001010001000000), U64(0x0001000101000000), U64(0x0100010101000000), U64(0x0001000000000000) },

1421 { 
U64
(0x0000000000000100), U64(0x0000000001010001), U64(0x0000000001000100), U64(0x0001010100010100), U64(0x0001010001000000), U64(0x0001000101000000), U64(0x0100010101000000), U64(0x0001000000000000) },

1422 { 
U64
(0x0000000000000100), U64(0x0000000001010001), U64(0x0000000001000100), U64(0x0001010100010100), U64(0x0001010001000000), U64(0x0001000101000000), U64(0x0100010101000000), U64(0x0001000000000000) },

1423 { 
U64
(0x0000000000010100), U64(0x0000000000010001), U64(0x0000000001000101), U64(0x0001010100010000), U64(0x0001010001000000), U64(0x0001000101000000), U64(0x0100010101000000), U64(0x0001000000000000) },

1424 { 
U64
(0x0000000000010100), U64(0x0000000000010001), U64(0x0000000001000101), U64(0x0001010100010000), U64(0x0001010001000000), U64(0x0001000101000000), U64(0x0100010101000000), U64(0x0001000000000000) },

1425 { 
U64
(0x0000000000000100), U64(0x0000000000010001), U64(0x0000000001000100), U64(0x0001010100010000), U64(0x0001010001000000), U64(0x0001000101000000), U64(0x0100010101000000), U64(0x0001000000000000) },

1426 { 
U64
(0x0000000000000100), U64(0x0000000000010001), U64(0x0000000001000100), U64(0x0001010100010000), U64(0x0001010001000000), U64(0x0001000101000000), U64(0x0100010101000000), U64(0x0001000000000000) },

1427 { 
U64
(0x0000000101010100), U64(0x0000000101010001), U64(0x0000000101000101), U64(0x0000000100010101), U64(0x0001010001010101), U64(0x0001000100000000), U64(0x0100010100000000), U64(0x0001000000000000) },

1428 { 
U64
(0x0000000101010100), U64(0x0000000101010001), U64(0x0000000101000101), U64(0x0000000100010101), U64(0x0001010001010101), U64(0x0001000100000000), U64(0x0100010100000000), U64(0x0001000000000000) },

1429 { 
U64
(0x0000000000000100), U64(0x0000000101010001), U64(0x0000000101000100), U64(0x0000000100010100), U64(0x0001010001010100), U64(0x0001000100000000), U64(0x0100010100000000), U64(0x0001000000000000) },

1430 { 
U64
(0x0000000000000100), U64(0x0000000101010001), U64(0x0000000101000100), U64(0x0000000100010100), U64(0x0001010001010100), U64(0x0001000100000000), U64(0x0100010100000000), U64(0x0001000000000000) },

1431 { 
U64
(0x0000000000010100), U64(0x0000000000010001), U64(0x0000000101000101), U64(0x0000000100010000), U64(0x0001010001010000), U64(0x0001000100000000), U64(0x0100010100000000), U64(0x0001000000000000) },

1432 { 
U64
(0x0000000000010100), U64(0x0000000000010001), U64(0x0000000101000101), U64(0x0000000100010000), U64(0x0001010001010000), U64(0x0001000100000000), U64(0x0100010100000000), U64(0x0001000000000000) },

1433 { 
U64
(0x0000000000000100), U64(0x0000000000010001), U64(0x0000000101000100), U64(0x0000000100010000), U64(0x0001010001010000), U64(0x0001000100000000), U64(0x0100010100000000), U64(0x0001000000000000) },

1434 { 
U64
(0x0000000000000100), U64(0x0000000000010001), U64(0x0000000101000100), U64(0x0000000100010000), U64(0x0001010001010000), U64(0x0001000100000000), U64(0x0100010100000000), U64(0x0001000000000000) },

1435 { 
U64
(0x0000000001010100), U64(0x0000000001010001), U64(0x0000000001000101), U64(0x0000000100010101), U64(0x0001010001000000), U64(0x0001000100000000), U64(0x0100010100000000), U64(0x0001000000000000) },

1436 { 
U64
(0x0000000001010100), U64(0x0000000001010001), U64(0x0000000001000101), U64(0x0000000100010101), U64(0x0001010001000000), U64(0x0001000100000000), U64(0x0100010100000000), U64(0x0001000000000000) },

1437 { 
U64
(0x0000000000000100), U64(0x0000000001010001), U64(0x0000000001000100), U64(0x0000000100010100), U64(0x0001010001000000), U64(0x0001000100000000), U64(0x0100010100000000), U64(0x0001000000000000) },

1438 { 
U64
(0x0000000000000100), U64(0x0000000001010001), U64(0x0000000001000100), U64(0x0000000100010100), U64(0x0001010001000000), U64(0x0001000100000000), U64(0x0100010100000000), U64(0x0001000000000000) },

1439 { 
U64
(0x0000000000010100), U64(0x0000000000010001), U64(0x0000000001000101), U64(0x0000000100010000), U64(0x0001010001000000), U64(0x0001000100000000), U64(0x0100010100000000), U64(0x0001000000000000) },

1440 { 
U64
(0x0000000000010100), U64(0x0000000000010001), U64(0x0000000001000101), U64(0x0000000100010000), U64(0x0001010001000000), U64(0x0001000100000000), U64(0x0100010100000000), U64(0x0001000000000000) },

1441 { 
U64
(0x0000000000000100), U64(0x0000000000010001), U64(0x0000000001000100), U64(0x0000000100010000), U64(0x0001010001000000), U64(0x0001000100000000), U64(0x0100010100000000), U64(0x0001000000000000) },

1442 { 
U64
(0x0000000000000100), U64(0x0000000000010001), U64(0x0000000001000100), U64(0x0000000100010000), U64(0x0001010001000000), U64(0x0001000100000000), U64(0x0100010100000000), U64(0x0001000000000000) },

1443 { 
U64
(0x0000010101010100), U64(0x0000010101010001), U64(0x0000010101000101), U64(0x0000010100010101), U64(0x0000010001010101), U64(0x0001000101010101), U64(0x0100010000000000), U64(0x0001000000000000) },

1444 { 
U64
(0x0000010101010100), U64(0x0000010101010001), U64(0x0000010101000101), U64(0x0000010100010101), U64(0x0000010001010101), U64(0x0001000101010101), U64(0x0100010000000000), U64(0x0001000000000000) },

1445 { 
U64
(0x0000000000000100), U64(0x0000010101010001), U64(0x0000010101000100), U64(0x0000010100010100), U64(0x0000010001010100), U64(0x0001000101010100), U64(0x0100010000000000), U64(0x0001000000000000) },

1446 { 
U64
(0x0000000000000100), U64(0x0000010101010001), U64(0x0000010101000100), U64(0x0000010100010100), U64(0x0000010001010100), U64(0x0001000101010100), U64(0x0100010000000000), U64(0x0001000000000000) },

1447 { 
U64
(0x0000000000010100), U64(0x0000000000010001), U64(0x0000010101000101), U64(0x0000010100010000), U64(0x0000010001010000), U64(0x0001000101010000), U64(0x0100010000000000), U64(0x0001000000000000) },

1448 { 
U64
(0x0000000000010100), U64(0x0000000000010001), U64(0x0000010101000101), U64(0x0000010100010000), U64(0x0000010001010000), U64(0x0001000101010000), U64(0x0100010000000000), U64(0x0001000000000000) },

1449 { 
U64
(0x0000000000000100), U64(0x0000000000010001), U64(0x0000010101000100), U64(0x0000010100010000), U64(0x0000010001010000), U64(0x0001000101010000), U64(0x0100010000000000), U64(0x0001000000000000) },

1450 { 
U64
(0x0000000000000100), U64(0x0000000000010001), U64(0x0000010101000100), U64(0x0000010100010000), U64(0x0000010001010000), U64(0x0001000101010000), U64(0x0100010000000000), U64(0x0001000000000000) },

1451 { 
U64
(0x0000000001010100), U64(0x0000000001010001), U64(0x0000000001000101), U64(0x0000010100010101), U64(0x0000010001000000), U64(0x0001000101000000), U64(0x0100010000000000), U64(0x0001000000000000) },

1452 { 
U64
(0x0000000001010100), U64(0x0000000001010001), U64(0x0000000001000101), U64(0x0000010100010101), U64(0x0000010001000000), U64(0x0001000101000000), U64(0x0100010000000000), U64(0x0001000000000000) },

1453 { 
U64
(0x0000000000000100), U64(0x0000000001010001), U64(0x0000000001000100), U64(0x0000010100010100), U64(0x0000010001000000), U64(0x0001000101000000), U64(0x0100010000000000), U64(0x0001000000000000) },

1454 { 
U64
(0x0000000000000100), U64(0x0000000001010001), U64(0x0000000001000100), U64(0x0000010100010100), U64(0x0000010001000000), U64(0x0001000101000000), U64(0x0100010000000000), U64(0x0001000000000000) },

1455 { 
U64
(0x0000000000010100), U64(0x0000000000010001), U64(0x0000000001000101), U64(0x0000010100010000), U64(0x0000010001000000), U64(0x0001000101000000), U64(0x0100010000000000), U64(0x0001000000000000) },

1456 { 
U64
(0x0000000000010100), U64(0x0000000000010001), U64(0x0000000001000101), U64(0x0000010100010000), U64(0x0000010001000000), U64(0x0001000101000000), U64(0x0100010000000000), U64(0x0001000000000000) },

1457 { 
U64
(0x0000000000000100), U64(0x0000000000010001), U64(0x0000000001000100), U64(0x0000010100010000), U64(0x0000010001000000), U64(0x0001000101000000), U64(0x0100010000000000), U64(0x0001000000000000) },

1458 { 
U64
(0x0000000000000100), U64(0x0000000000010001), U64(0x0000000001000100), U64(0x0000010100010000), U64(0x0000010001000000), U64(0x0001000101000000), U64(0x0100010000000000), U64(0x0001000000000000) },

1459 { 
U64
(0x0000000101010100), U64(0x0000000101010001), U64(0x0000000101000101), U64(0x0000000100010101), U64(0x0000010001010101), U64(0x0001000100000000), U64(0x0100010000000000), U64(0x0001000000000000) },

1460 { 
U64
(0x0000000101010100), U64(0x0000000101010001), U64(0x0000000101000101), U64(0x0000000100010101), U64(0x0000010001010101), U64(0x0001000100000000), U64(0x0100010000000000), U64(0x0001000000000000) },

1461 { 
U64
(0x0000000000000100), U64(0x0000000101010001), U64(0x0000000101000100), U64(0x0000000100010100), U64(0x0000010001010100), U64(0x0001000100000000), U64(0x0100010000000000), U64(0x0001000000000000) },

1462 { 
U64
(0x0000000000000100), U64(0x0000000101010001), U64(0x0000000101000100), U64(0x0000000100010100), U64(0x0000010001010100), U64(0x0001000100000000), U64(0x0100010000000000), U64(0x0001000000000000) },

1463 { 
U64
(0x0000000000010100), U64(0x0000000000010001), U64(0x0000000101000101), U64(0x0000000100010000), U64(0x0000010001010000), U64(0x0001000100000000), U64(0x0100010000000000), U64(0x0001000000000000) },

1464 { 
U64
(0x0000000000010100), U64(0x0000000000010001), U64(0x0000000101000101), U64(0x0000000100010000), U64(0x0000010001010000), U64(0x0001000100000000), U64(0x0100010000000000), U64(0x0001000000000000) },

1465 { 
U64
(0x0000000000000100), U64(0x0000000000010001), U64(0x0000000101000100), U64(0x0000000100010000), U64(0x0000010001010000), U64(0x0001000100000000), U64(0x0100010000000000), U64(0x0001000000000000) },

1466 { 
U64
(0x0000000000000100), U64(0x0000000000010001), U64(0x0000000101000100), U64(0x0000000100010000), U64(0x0000010001010000), U64(0x0001000100000000), U64(0x0100010000000000), U64(0x0001000000000000) },

1467 { 
U64
(0x0000000001010100), U64(0x0000000001010001), U64(0x0000000001000101), U64(0x0000000100010101), U64(0x0000010001000000), U64(0x0001000100000000), U64(0x0100010000000000), U64(0x0001000000000000) },

1468 { 
U64
(0x0000000001010100), U64(0x0000000001010001), U64(0x0000000001000101), U64(0x0000000100010101), U64(0x0000010001000000), U64(0x0001000100000000), U64(0x0100010000000000), U64(0x0001000000000000) },

1469 { 
U64
(0x0000000000000100), U64(0x0000000001010001), U64(0x0000000001000100), U64(0x0000000100010100), U64(0x0000010001000000), U64(0x0001000100000000), U64(0x0100010000000000), U64(0x0001000000000000) },

1470 { 
U64
(0x0000000000000100), U64(0x0000000001010001), U64(0x0000000001000100), U64(0x0000000100010100), U64(0x0000010001000000), U64(0x0001000100000000), U64(0x0100010000000000), U64(0x0001000000000000) },

1471 { 
U64
(0x0000000000010100), U64(0x0000000000010001), U64(0x0000000001000101), U64(0x0000000100010000), U64(0x0000010001000000), U64(0x0001000100000000), U64(0x0100010000000000), U64(0x0001000000000000) },

1472 { 
U64
(0x0000000000010100), U64(0x0000000000010001), U64(0x0000000001000101), U64(0x0000000100010000), U64(0x0000010001000000), U64(0x0001000100000000), U64(0x0100010000000000), U64(0x0001000000000000) },

1473 { 
U64
(0x0000000000000100), U64(0x0000000000010001), U64(0x0000000001000100), U64(0x0000000100010000), U64(0x0000010001000000), U64(0x0001000100000000), U64(0x0100010000000000), U64(0x0001000000000000) },

1474 { 
U64
(0x0000000000000100), U64(0x0000000000010001), U64(0x0000000001000100), U64(0x0000000100010000), U64(0x0000010001000000), U64(0x0001000100000000), U64(0x0100010000000000), U64(0x0001000000000000) },

1475 { 
U64
(0x0101010101010100), U64(0x0101010101010001), U64(0x0101010101000101), U64(0x0101010100010101), U64(0x0101010001010101), U64(0x0101000101010101), U64(0x0100010101010101), U64(0x0001010101010101) },

1476 { 
U64
(0x0101010101010100), U64(0x0101010101010001), U64(0x0101010101000101), U64(0x0101010100010101), U64(0x0101010001010101), U64(0x0101000101010101), U64(0x0100010101010101), U64(0x0001010101010101) },

1477 { 
U64
(0x0000000000000100), U64(0x0101010101010001), U64(0x0101010101000100), U64(0x0101010100010100), U64(0x0101010001010100), U64(0x0101000101010100), U64(0x0100010101010100), U64(0x0001010101010100) },

1478 { 
U64
(0x0000000000000100), U64(0x0101010101010001), U64(0x0101010101000100), U64(0x0101010100010100), U64(0x0101010001010100), U64(0x0101000101010100), U64(0x0100010101010100), U64(0x0001010101010100) },

1479 { 
U64
(0x0000000000010100), U64(0x0000000000010001), U64(0x0101010101000101), U64(0x0101010100010000), U64(0x0101010001010000), U64(0x0101000101010000), U64(0x0100010101010000), U64(0x0001010101010000) },

1480 { 
U64
(0x0000000000010100), U64(0x0000000000010001), U64(0x0101010101000101), U64(0x0101010100010000), U64(0x0101010001010000), U64(0x0101000101010000), U64(0x0100010101010000), U64(0x0001010101010000) },

1481 { 
U64
(0x0000000000000100), U64(0x0000000000010001), U64(0x0101010101000100), U64(0x0101010100010000), U64(0x0101010001010000), U64(0x0101000101010000), U64(0x0100010101010000), U64(0x0001010101010000) },

1482 { 
U64
(0x0000000000000100), U64(0x0000000000010001), U64(0x0101010101000100), U64(0x0101010100010000), U64(0x0101010001010000), U64(0x0101000101010000), U64(0x0100010101010000), U64(0x0001010101010000) },

1483 { 
U64
(0x0000000001010100), U64(0x0000000001010001), U64(0x0000000001000101), U64(0x0101010100010101), U64(0x0101010001000000), U64(0x0101000101000000), U64(0x0100010101000000), U64(0x0001010101000000) },

1484 { 
U64
(0x0000000001010100), U64(0x0000000001010001), U64(0x0000000001000101), U64(0x0101010100010101), U64(0x0101010001000000), U64(0x0101000101000000), U64(0x0100010101000000), U64(0x0001010101000000) },

1485 { 
U64
(0x0000000000000100), U64(0x0000000001010001), U64(0x0000000001000100), U64(0x0101010100010100), U64(0x0101010001000000), U64(0x0101000101000000), U64(0x0100010101000000), U64(0x0001010101000000) },

1486 { 
U64
(0x0000000000000100), U64(0x0000000001010001), U64(0x0000000001000100), U64(0x0101010100010100), U64(0x0101010001000000), U64(0x0101000101000000), U64(0x0100010101000000), U64(0x0001010101000000) },

1487 { 
U64
(0x0000000000010100), U64(0x0000000000010001), U64(0x0000000001000101), U64(0x0101010100010000), U64(0x0101010001000000), U64(0x0101000101000000), U64(0x0100010101000000), U64(0x0001010101000000) },

1488 { 
U64
(0x0000000000010100), U64(0x0000000000010001), U64(0x0000000001000101), U64(0x0101010100010000), U64(0x0101010001000000), U64(0x0101000101000000), U64(0x0100010101000000), U64(0x0001010101000000) },

1489 { 
U64
(0x0000000000000100), U64(0x0000000000010001), U64(0x0000000001000100), U64(0x0101010100010000), U64(0x0101010001000000), U64(0x0101000101000000), U64(0x0100010101000000), U64(0x0001010101000000) },

1490 { 
U64
(0x0000000000000100), U64(0x0000000000010001), U64(0x0000000001000100), U64(0x0101010100010000), U64(0x0101010001000000), U64(0x0101000101000000), U64(0x0100010101000000), U64(0x0001010101000000) },

1491 { 
U64
(0x0000000101010100), U64(0x0000000101010001), U64(0x0000000101000101), U64(0x0000000100010101), U64(0x0101010001010101), U64(0x0101000100000000), U64(0x0100010100000000), U64(0x0001010100000000) },

1492 { 
U64
(0x0000000101010100), U64(0x0000000101010001), U64(0x0000000101000101), U64(0x0000000100010101), U64(0x0101010001010101), U64(0x0101000100000000), U64(0x0100010100000000), U64(0x0001010100000000) },

1493 { 
U64
(0x0000000000000100), U64(0x0000000101010001), U64(0x0000000101000100), U64(0x0000000100010100), U64(0x0101010001010100), U64(0x0101000100000000), U64(0x0100010100000000), U64(0x0001010100000000) },

1494 { 
U64
(0x0000000000000100), U64(0x0000000101010001), U64(0x0000000101000100), U64(0x0000000100010100), U64(0x0101010001010100), U64(0x0101000100000000), U64(0x0100010100000000), U64(0x0001010100000000) },

1495 { 
U64
(0x0000000000010100), U64(0x0000000000010001), U64(0x0000000101000101), U64(0x0000000100010000), U64(0x0101010001010000), U64(0x0101000100000000), U64(0x0100010100000000), U64(0x0001010100000000) },

1496 { 
U64
(0x0000000000010100), U64(0x0000000000010001), U64(0x0000000101000101), U64(0x0000000100010000), U64(0x0101010001010000), U64(0x0101000100000000), U64(0x0100010100000000), U64(0x0001010100000000) },

1497 { 
U64
(0x0000000000000100), U64(0x0000000000010001), U64(0x0000000101000100), U64(0x0000000100010000), U64(0x0101010001010000), U64(0x0101000100000000), U64(0x0100010100000000), U64(0x0001010100000000) },

1498 { 
U64
(0x0000000000000100), U64(0x0000000000010001), U64(0x0000000101000100), U64(0x0000000100010000), U64(0x0101010001010000), U64(0x0101000100000000), U64(0x0100010100000000), U64(0x0001010100000000) },

1499 { 
U64
(0x0000000001010100), U64(0x0000000001010001), U64(0x0000000001000101), U64(0x0000000100010101), U64(0x0101010001000000), U64(0x0101000100000000), U64(0x0100010100000000), U64(0x0001010100000000) },

1500 { 
U64
(0x0000000001010100), U64(0x0000000001010001), U64(0x0000000001000101), U64(0x0000000100010101), U64(0x0101010001000000), U64(0x0101000100000000), U64(0x0100010100000000), U64(0x0001010100000000) },

1501 { 
U64
(0x0000000000000100), U64(0x0000000001010001), U64(0x0000000001000100), U64(0x0000000100010100), U64(0x0101010001000000), U64(0x0101000100000000), U64(0x0100010100000000), U64(0x0001010100000000) },

1502 { 
U64
(0x0000000000000100), U64(0x0000000001010001), U64(0x0000000001000100), U64(0x0000000100010100), U64(0x0101010001000000), U64(0x0101000100000000), U64(0x0100010100000000), U64(0x0001010100000000) },

1503 { 
U64
(0x0000000000010100), U64(0x0000000000010001), U64(0x0000000001000101), U64(0x0000000100010000), U64(0x0101010001000000), U64(0x0101000100000000), U64(0x0100010100000000), U64(0x0001010100000000) },

1504 { 
U64
(0x0000000000010100), U64(0x0000000000010001), U64(0x0000000001000101), U64(0x0000000100010000), U64(0x0101010001000000), U64(0x0101000100000000), U64(0x0100010100000000), U64(0x0001010100000000) },

1505 { 
U64
(0x0000000000000100), U64(0x0000000000010001), U64(0x0000000001000100), U64(0x0000000100010000), U64(0x0101010001000000), U64(0x0101000100000000), U64(0x0100010100000000), U64(0x0001010100000000) },

1506 { 
U64
(0x0000000000000100), U64(0x0000000000010001), U64(0x0000000001000100), U64(0x0000000100010000), U64(0x0101010001000000), U64(0x0101000100000000), U64(0x0100010100000000), U64(0x0001010100000000) },

1507 { 
U64
(0x0000010101010100), U64(0x0000010101010001), U64(0x0000010101000101), U64(0x0000010100010101), U64(0x0000010001010101), U64(0x0101000101010101), U64(0x0100010000000000), U64(0x0001010000000000) },

1508 { 
U64
(0x0000010101010100), U64(0x0000010101010001), U64(0x0000010101000101), U64(0x0000010100010101), U64(0x0000010001010101), U64(0x0101000101010101), U64(0x0100010000000000), U64(0x0001010000000000) },

1509 { 
U64
(0x0000000000000100), U64(0x0000010101010001), U64(0x0000010101000100), U64(0x0000010100010100), U64(0x0000010001010100), U64(0x0101000101010100), U64(0x0100010000000000), U64(0x0001010000000000) },

1510 { 
U64
(0x0000000000000100), U64(0x0000010101010001), U64(0x0000010101000100), U64(0x0000010100010100), U64(0x0000010001010100), U64(0x0101000101010100), U64(0x0100010000000000), U64(0x0001010000000000) },

1511 { 
U64
(0x0000000000010100), U64(0x0000000000010001), U64(0x0000010101000101), U64(0x0000010100010000), U64(0x0000010001010000), U64(0x0101000101010000), U64(0x0100010000000000), U64(0x0001010000000000) },

1512 { 
U64
(0x0000000000010100), U64(0x0000000000010001), U64(0x0000010101000101), U64(0x0000010100010000), U64(0x0000010001010000), U64(0x0101000101010000), U64(0x0100010000000000), U64(0x0001010000000000) },

1513 { 
U64
(0x0000000000000100), U64(0x0000000000010001), U64(0x0000010101000100), U64(0x0000010100010000), U64(0x0000010001010000), U64(0x0101000101010000), U64(0x0100010000000000), U64(0x0001010000000000) },

1514 { 
U64
(0x0000000000000100), U64(0x0000000000010001), U64(0x0000010101000100), U64(0x0000010100010000), U64(0x0000010001010000), U64(0x0101000101010000), U64(0x0100010000000000), U64(0x0001010000000000) },

1515 { 
U64
(0x0000000001010100), U64(0x0000000001010001), U64(0x0000000001000101), U64(0x0000010100010101), U64(0x0000010001000000), U64(0x0101000101000000), U64(0x0100010000000000), U64(0x0001010000000000) },

1516 { 
U64
(0x0000000001010100), U64(0x0000000001010001), U64(0x0000000001000101), U64(0x0000010100010101), U64(0x0000010001000000), U64(0x0101000101000000), U64(0x0100010000000000), U64(0x0001010000000000) },

1517 { 
U64
(0x0000000000000100), U64(0x0000000001010001), U64(0x0000000001000100), U64(0x0000010100010100), U64(0x0000010001000000), U64(0x0101000101000000), U64(0x0100010000000000), U64(0x0001010000000000) },

1518 { 
U64
(0x0000000000000100), U64(0x0000000001010001), U64(0x0000000001000100), U64(0x0000010100010100), U64(0x0000010001000000), U64(0x0101000101000000), U64(0x0100010000000000), U64(0x0001010000000000) },

1519 { 
U64
(0x0000000000010100), U64(0x0000000000010001), U64(0x0000000001000101), U64(0x0000010100010000), U64(0x0000010001000000), U64(0x0101000101000000), U64(0x0100010000000000), U64(0x0001010000000000) },

1520 { 
U64
(0x0000000000010100), U64(0x0000000000010001), U64(0x0000000001000101), U64(0x0000010100010000), U64(0x0000010001000000), U64(0x0101000101000000), U64(0x0100010000000000), U64(0x0001010000000000) },

1521 { 
U64
(0x0000000000000100), U64(0x0000000000010001), U64(0x0000000001000100), U64(0x0000010100010000), U64(0x0000010001000000), U64(0x0101000101000000), U64(0x0100010000000000), U64(0x0001010000000000) },

1522 { 
U64
(0x0000000000000100), U64(0x0000000000010001), U64(0x0000000001000100), U64(0x0000010100010000), U64(0x0000010001000000), U64(0x0101000101000000), U64(0x0100010000000000), U64(0x0001010000000000) },

1523 { 
U64
(0x0000000101010100), U64(0x0000000101010001), U64(0x0000000101000101), U64(0x0000000100010101), U64(0x0000010001010101), U64(0x0101000100000000), U64(0x0100010000000000), U64(0x0001010000000000) },

1524 { 
U64
(0x0000000101010100), U64(0x0000000101010001), U64(0x0000000101000101), U64(0x0000000100010101), U64(0x0000010001010101), U64(0x0101000100000000), U64(0x0100010000000000), U64(0x0001010000000000) },

1525 { 
U64
(0x0000000000000100), U64(0x0000000101010001), U64(0x0000000101000100), U64(0x0000000100010100), U64(0x0000010001010100), U64(0x0101000100000000), U64(0x0100010000000000), U64(0x0001010000000000) },

1526 { 
U64
(0x0000000000000100), U64(0x0000000101010001), U64(0x0000000101000100), U64(0x0000000100010100), U64(0x0000010001010100), U64(0x0101000100000000), U64(0x0100010000000000), U64(0x0001010000000000) },

1527 { 
U64
(0x0000000000010100), U64(0x0000000000010001), U64(0x0000000101000101), U64(0x0000000100010000), U64(0x0000010001010000), U64(0x0101000100000000), U64(0x0100010000000000), U64(0x0001010000000000) },

1528 { 
U64
(0x0000000000010100), U64(0x0000000000010001), U64(0x0000000101000101), U64(0x0000000100010000), U64(0x0000010001010000), U64(0x0101000100000000), U64(0x0100010000000000), U64(0x0001010000000000) },

1529 { 
U64
(0x0000000000000100), U64(0x0000000000010001), U64(0x0000000101000100), U64(0x0000000100010000), U64(0x0000010001010000), U64(0x0101000100000000), U64(0x0100010000000000), U64(0x0001010000000000) },

1530 { 
U64
(0x0000000000000100), U64(0x0000000000010001), U64(0x0000000101000100), U64(0x0000000100010000), U64(0x0000010001010000), U64(0x0101000100000000), U64(0x0100010000000000), U64(0x0001010000000000) },

1531 { 
U64
(0x0000000001010100), U64(0x0000000001010001), U64(0x0000000001000101), U64(0x0000000100010101), U64(0x0000010001000000), U64(0x0101000100000000), U64(0x0100010000000000), U64(0x0001010000000000) },

1532 { 
U64
(0x0000000001010100), U64(0x0000000001010001), U64(0x0000000001000101), U64(0x0000000100010101), U64(0x0000010001000000), U64(0x0101000100000000), U64(0x0100010000000000), U64(0x0001010000000000) },

1533 { 
U64
(0x0000000000000100), U64(0x0000000001010001), U64(0x0000000001000100), U64(0x0000000100010100), U64(0x0000010001000000), U64(0x0101000100000000), U64(0x0100010000000000), U64(0x0001010000000000) },

1534 { 
U64
(0x0000000000000100), U64(0x0000000001010001), U64(0x0000000001000100), U64(0x0000000100010100), U64(0x0000010001000000), U64(0x0101000100000000), U64(0x0100010000000000), U64(0x0001010000000000) },

1535 { 
U64
(0x0000000000010100), U64(0x0000000000010001), U64(0x0000000001000101), U64(0x0000000100010000), U64(0x0000010001000000), U64(0x0101000100000000), U64(0x0100010000000000), U64(0x0001010000000000) },

1536 { 
U64
(0x0000000000010100), U64(0x0000000000010001), U64(0x0000000001000101), U64(0x0000000100010000), U64(0x0000010001000000), U64(0x0101000100000000), U64(0x0100010000000000), U64(0x0001010000000000) },

1537 { 
U64
(0x0000000000000100), U64(0x0000000000010001), U64(0x0000000001000100), U64(0x0000000100010000), U64(0x0000010001000000), U64(0x0101000100000000), U64(0x0100010000000000), U64(0x0001010000000000) },

1538 { 
U64
(0x0000000000000100), U64(0x0000000000010001), U64(0x0000000001000100), U64(0x0000000100010000), U64(0x0000010001000000), U64(0x0101000100000000), U64(0x0100010000000000), U64(0x0001010000000000) },

1539 { 
U64
(0x0001010101010100), U64(0x0001010101010001), U64(0x0001010101000101), U64(0x0001010100010101), U64(0x0001010001010101), U64(0x0001000101010101), U64(0x0100010101010101), U64(0x0001000000000000) },

1540 { 
U64
(0x0001010101010100), U64(0x0001010101010001), U64(0x0001010101000101), U64(0x0001010100010101), U64(0x0001010001010101), U64(0x0001000101010101), U64(0x0100010101010101), U64(0x0001000000000000) },

1541 { 
U64
(0x0000000000000100), U64(0x0001010101010001), U64(0x0001010101000100), U64(0x0001010100010100), U64(0x0001010001010100), U64(0x0001000101010100), U64(0x0100010101010100), U64(0x0001000000000000) },

1542 { 
U64
(0x0000000000000100), U64(0x0001010101010001), U64(0x0001010101000100), U64(0x0001010100010100), U64(0x0001010001010100), U64(0x0001000101010100), U64(0x0100010101010100), U64(0x0001000000000000) },

1543 { 
U64
(0x0000000000010100), U64(0x0000000000010001), U64(0x0001010101000101), U64(0x0001010100010000), U64(0x0001010001010000), U64(0x0001000101010000), U64(0x0100010101010000), U64(0x0001000000000000) },

1544 { 
U64
(0x0000000000010100), U64(0x0000000000010001), U64(0x0001010101000101), U64(0x0001010100010000), U64(0x0001010001010000), U64(0x0001000101010000), U64(0x0100010101010000), U64(0x0001000000000000) },

1545 { 
U64
(0x0000000000000100), U64(0x0000000000010001), U64(0x0001010101000100), U64(0x0001010100010000), U64(0x0001010001010000), U64(0x0001000101010000), U64(0x0100010101010000), U64(0x0001000000000000) },

1546 { 
U64
(0x0000000000000100), U64(0x0000000000010001), U64(0x0001010101000100), U64(0x0001010100010000), U64(0x0001010001010000), U64(0x0001000101010000), U64(0x0100010101010000), U64(0x0001000000000000) },

1547 { 
U64
(0x0000000001010100), U64(0x0000000001010001), U64(0x0000000001000101), U64(0x0001010100010101), U64(0x0001010001000000), U64(0x0001000101000000), U64(0x0100010101000000), U64(0x0001000000000000) },

1548 { 
U64
(0x0000000001010100), U64(0x0000000001010001), U64(0x0000000001000101), U64(0x0001010100010101), U64(0x0001010001000000), U64(0x0001000101000000), U64(0x0100010101000000), U64(0x0001000000000000) },

1549 { 
U64
(0x0000000000000100), U64(0x0000000001010001), U64(0x0000000001000100), U64(0x0001010100010100), U64(0x0001010001000000), U64(0x0001000101000000), U64(0x0100010101000000), U64(0x0001000000000000) },

1550 { 
U64
(0x0000000000000100), U64(0x0000000001010001), U64(0x0000000001000100), U64(0x0001010100010100), U64(0x0001010001000000), U64(0x0001000101000000), U64(0x0100010101000000), U64(0x0001000000000000) },

1551 { 
U64
(0x0000000000010100), U64(0x0000000000010001), U64(0x0000000001000101), U64(0x0001010100010000), U64(0x0001010001000000), U64(0x0001000101000000), U64(0x0100010101000000), U64(0x0001000000000000) },

1552 { 
U64
(0x0000000000010100), U64(0x0000000000010001), U64(0x0000000001000101), U64(0x0001010100010000), U64(0x0001010001000000), U64(0x0001000101000000), U64(0x0100010101000000), U64(0x0001000000000000) },

1553 { 
U64
(0x0000000000000100), U64(0x0000000000010001), U64(0x0000000001000100), U64(0x0001010100010000), U64(0x0001010001000000), U64(0x0001000101000000), U64(0x0100010101000000), U64(0x0001000000000000) },

1554 { 
U64
(0x0000000000000100), U64(0x0000000000010001), U64(0x0000000001000100), U64(0x0001010100010000), U64(0x0001010001000000), U64(0x0001000101000000), U64(0x0100010101000000), U64(0x0001000000000000) },

1555 { 
U64
(0x0000000101010100), U64(0x0000000101010001), U64(0x0000000101000101), U64(0x0000000100010101), U64(0x0001010001010101), U64(0x0001000100000000), U64(0x0100010100000000), U64(0x0001000000000000) },

1556 { 
U64
(0x0000000101010100), U64(0x0000000101010001), U64(0x0000000101000101), U64(0x0000000100010101), U64(0x0001010001010101), U64(0x0001000100000000), U64(0x0100010100000000), U64(0x0001000000000000) },

1557 { 
U64
(0x0000000000000100), U64(0x0000000101010001), U64(0x0000000101000100), U64(0x0000000100010100), U64(0x0001010001010100), U64(0x0001000100000000), U64(0x0100010100000000), U64(0x0001000000000000) },

1558 { 
U64
(0x0000000000000100), U64(0x0000000101010001), U64(0x0000000101000100), U64(0x0000000100010100), U64(0x0001010001010100), U64(0x0001000100000000), U64(0x0100010100000000), U64(0x0001000000000000) },

1559 { 
U64
(0x0000000000010100), U64(0x0000000000010001), U64(0x0000000101000101), U64(0x0000000100010000), U64(0x0001010001010000), U64(0x0001000100000000), U64(0x0100010100000000), U64(0x0001000000000000) },

1560 { 
U64
(0x0000000000010100), U64(0x0000000000010001), U64(0x0000000101000101), U64(0x0000000100010000), U64(0x0001010001010000), U64(0x0001000100000000), U64(0x0100010100000000), U64(0x0001000000000000) },

1561 { 
U64
(0x0000000000000100), U64(0x0000000000010001), U64(0x0000000101000100), U64(0x0000000100010000), U64(0x0001010001010000), U64(0x0001000100000000), U64(0x0100010100000000), U64(0x0001000000000000) },

1562 { 
U64
(0x0000000000000100), U64(0x0000000000010001), U64(0x0000000101000100), U64(0x0000000100010000), U64(0x0001010001010000), U64(0x0001000100000000), U64(0x0100010100000000), U64(0x0001000000000000) },

1563 { 
U64
(0x0000000001010100), U64(0x0000000001010001), U64(0x0000000001000101), U64(0x0000000100010101), U64(0x0001010001000000), U64(0x0001000100000000), U64(0x0100010100000000), U64(0x0001000000000000) },

1564 { 
U64
(0x0000000001010100), U64(0x0000000001010001), U64(0x0000000001000101), U64(0x0000000100010101), U64(0x0001010001000000), U64(0x0001000100000000), U64(0x0100010100000000), U64(0x0001000000000000) },

1565 { 
U64
(0x0000000000000100), U64(0x0000000001010001), U64(0x0000000001000100), U64(0x0000000100010100), U64(0x0001010001000000), U64(0x0001000100000000), U64(0x0100010100000000), U64(0x0001000000000000) },

1566 { 
U64
(0x0000000000000100), U64(0x0000000001010001), U64(0x0000000001000100), U64(0x0000000100010100), U64(0x0001010001000000), U64(0x0001000100000000), U64(0x0100010100000000), U64(0x0001000000000000) },

1567 { 
U64
(0x0000000000010100), U64(0x0000000000010001), U64(0x0000000001000101), U64(0x0000000100010000), U64(0x0001010001000000), U64(0x0001000100000000), U64(0x0100010100000000), U64(0x0001000000000000) },

1568 { 
U64
(0x0000000000010100), U64(0x0000000000010001), U64(0x0000000001000101), U64(0x0000000100010000), U64(0x0001010001000000), U64(0x0001000100000000), U64(0x0100010100000000), U64(0x0001000000000000) },

1569 { 
U64
(0x0000000000000100), U64(0x0000000000010001), U64(0x0000000001000100), U64(0x0000000100010000), U64(0x0001010001000000), U64(0x0001000100000000), U64(0x0100010100000000), U64(0x0001000000000000) },

1570 { 
U64
(0x0000000000000100), U64(0x0000000000010001), U64(0x0000000001000100), U64(0x0000000100010000), U64(0x0001010001000000), U64(0x0001000100000000), U64(0x0100010100000000), U64(0x0001000000000000) },

1571 { 
U64
(0x0000010101010100), U64(0x0000010101010001), U64(0x0000010101000101), U64(0x0000010100010101), U64(0x0000010001010101), U64(0x0001000101010101), U64(0x0100010000000000), U64(0x0001000000000000) },

1572 { 
U64
(0x0000010101010100), U64(0x0000010101010001), U64(0x0000010101000101), U64(0x0000010100010101), U64(0x0000010001010101), U64(0x0001000101010101), U64(0x0100010000000000), U64(0x0001000000000000) },

1573 { 
U64
(0x0000000000000100), U64(0x0000010101010001), U64(0x0000010101000100), U64(0x0000010100010100), U64(0x0000010001010100), U64(0x0001000101010100), U64(0x0100010000000000), U64(0x0001000000000000) },

1574 { 
U64
(0x0000000000000100), U64(0x0000010101010001), U64(0x0000010101000100), U64(0x0000010100010100), U64(0x0000010001010100), U64(0x0001000101010100), U64(0x0100010000000000), U64(0x0001000000000000) },

1575 { 
U64
(0x0000000000010100), U64(0x0000000000010001), U64(0x0000010101000101), U64(0x0000010100010000), U64(0x0000010001010000), U64(0x0001000101010000), U64(0x0100010000000000), U64(0x0001000000000000) },

1576 { 
U64
(0x0000000000010100), U64(0x0000000000010001), U64(0x0000010101000101), U64(0x0000010100010000), U64(0x0000010001010000), U64(0x0001000101010000), U64(0x0100010000000000), U64(0x0001000000000000) },

1577 { 
U64
(0x0000000000000100), U64(0x0000000000010001), U64(0x0000010101000100), U64(0x0000010100010000), U64(0x0000010001010000), U64(0x0001000101010000), U64(0x0100010000000000), U64(0x0001000000000000) },

1578 { 
U64
(0x0000000000000100), U64(0x0000000000010001), U64(0x0000010101000100), U64(0x0000010100010000), U64(0x0000010001010000), U64(0x0001000101010000), U64(0x0100010000000000), U64(0x0001000000000000) },

1579 { 
U64
(0x0000000001010100), U64(0x0000000001010001), U64(0x0000000001000101), U64(0x0000010100010101), U64(0x0000010001000000), U64(0x0001000101000000), U64(0x0100010000000000), U64(0x0001000000000000) },

1580 { 
U64
(0x0000000001010100), U64(0x0000000001010001), U64(0x0000000001000101), U64(0x0000010100010101), U64(0x0000010001000000), U64(0x0001000101000000), U64(0x0100010000000000), U64(0x0001000000000000) },

1581 { 
U64
(0x0000000000000100), U64(0x0000000001010001), U64(0x0000000001000100), U64(0x0000010100010100), U64(0x0000010001000000), U64(0x0001000101000000), U64(0x0100010000000000), U64(0x0001000000000000) },

1582 { 
U64
(0x0000000000000100), U64(0x0000000001010001), U64(0x0000000001000100), U64(0x0000010100010100), U64(0x0000010001000000), U64(0x0001000101000000), U64(0x0100010000000000), U64(0x0001000000000000) },

1583 { 
U64
(0x0000000000010100), U64(0x0000000000010001), U64(0x0000000001000101), U64(0x0000010100010000), U64(0x0000010001000000), U64(0x0001000101000000), U64(0x0100010000000000), U64(0x0001000000000000) },

1584 { 
U64
(0x0000000000010100), U64(0x0000000000010001), U64(0x0000000001000101), U64(0x0000010100010000), U64(0x0000010001000000), U64(0x0001000101000000), U64(0x0100010000000000), U64(0x0001000000000000) },

1585 { 
U64
(0x0000000000000100), U64(0x0000000000010001), U64(0x0000000001000100), U64(0x0000010100010000), U64(0x0000010001000000), U64(0x0001000101000000), U64(0x0100010000000000), U64(0x0001000000000000) },

1586 { 
U64
(0x0000000000000100), U64(0x0000000000010001), U64(0x0000000001000100), U64(0x0000010100010000), U64(0x0000010001000000), U64(0x0001000101000000), U64(0x0100010000000000), U64(0x0001000000000000) },

1587 { 
U64
(0x0000000101010100), U64(0x0000000101010001), U64(0x0000000101000101), U64(0x0000000100010101), U64(0x0000010001010101), U64(0x0001000100000000), U64(0x0100010000000000), U64(0x0001000000000000) },

1588 { 
U64
(0x0000000101010100), U64(0x0000000101010001), U64(0x0000000101000101), U64(0x0000000100010101), U64(0x0000010001010101), U64(0x0001000100000000), U64(0x0100010000000000), U64(0x0001000000000000) },

1589 { 
U64
(0x0000000000000100), U64(0x0000000101010001), U64(0x0000000101000100), U64(0x0000000100010100), U64(0x0000010001010100), U64(0x0001000100000000), U64(0x0100010000000000), U64(0x0001000000000000) },

1590 { 
U64
(0x0000000000000100), U64(0x0000000101010001), U64(0x0000000101000100), U64(0x0000000100010100), U64(0x0000010001010100), U64(0x0001000100000000), U64(0x0100010000000000), U64(0x0001000000000000) },

1591 { 
U64
(0x0000000000010100), U64(0x0000000000010001), U64(0x0000000101000101), U64(0x0000000100010000), U64(0x0000010001010000), U64(0x0001000100000000), U64(0x0100010000000000), U64(0x0001000000000000) },

1592 { 
U64
(0x0000000000010100), U64(0x0000000000010001), U64(0x0000000101000101), U64(0x0000000100010000), U64(0x0000010001010000), U64(0x0001000100000000), U64(0x0100010000000000), U64(0x0001000000000000) },

1593 { 
U64
(0x0000000000000100), U64(0x0000000000010001), U64(0x0000000101000100), U64(0x0000000100010000), U64(0x0000010001010000), U64(0x0001000100000000), U64(0x0100010000000000), U64(0x0001000000000000) },

1594 { 
U64
(0x0000000000000100), U64(0x0000000000010001), U64(0x0000000101000100), U64(0x0000000100010000), U64(0x0000010001010000), U64(0x0001000100000000), U64(0x0100010000000000), U64(0x0001000000000000) },

1595 { 
U64
(0x0000000001010100), U64(0x0000000001010001), U64(0x0000000001000101), U64(0x0000000100010101), U64(0x0000010001000000), U64(0x0001000100000000), U64(0x0100010000000000), U64(0x0001000000000000) },

1596 { 
U64
(0x0000000001010100), U64(0x0000000001010001), U64(0x0000000001000101), U64(0x0000000100010101), U64(0x0000010001000000), U64(0x0001000100000000), U64(0x0100010000000000), U64(0x0001000000000000) },

1597 { 
U64
(0x0000000000000100), U64(0x0000000001010001), U64(0x0000000001000100), U64(0x0000000100010100), U64(0x0000010001000000), U64(0x0001000100000000), U64(0x0100010000000000), U64(0x0001000000000000) },

1598 { 
U64
(0x0000000000000100), U64(0x0000000001010001), U64(0x0000000001000100), U64(0x0000000100010100), U64(0x0000010001000000), U64(0x0001000100000000), U64(0x0100010000000000), U64(0x0001000000000000) },

1599 { 
U64
(0x0000000000010100), U64(0x0000000000010001), U64(0x0000000001000101), U64(0x0000000100010000), U64(0x0000010001000000), U64(0x0001000100000000), U64(0x0100010000000000), U64(0x0001000000000000) },

1600 { 
U64
(0x0000000000010100), U64(0x0000000000010001), U64(0x0000000001000101), U64(0x0000000100010000), U64(0x0000010001000000), U64(0x0001000100000000), U64(0x0100010000000000), U64(0x0001000000000000) },

1601 { 
U64
(0x0000000000000100), U64(0x0000000000010001), U64(0x0000000001000100), U64(0x0000000100010000), U64(0x0000010001000000), U64(0x0001000100000000), U64(0x0100010000000000), U64(0x0001000000000000) },

1602 { 
U64
(0x0000000000000100), U64(0x0000000000010001), U64(0x0000000001000100), U64(0x0000000100010000), U64(0x0000010001000000), U64(0x0001000100000000), U64(0x0100010000000000), U64(0x0001000000000000) }

1639 
	grŸ45dügödex
[64] = {

1649 
	grŸ315dügödex
[64] = {

1670 
	grŸ45ödex_shi·amou¡right
[15] = { 0, 1, 3, 6, 10, 15, 21, 28, 35, 41, 46, 50, 53, 55, 56 };

1671 
	grŸ315ödex_shi·amou¡right
[15] = { 0, 0, 0, 2, 7, 13, 20, 28, 36, 43, 49, 54, 58, 61, 63 };

1672 
	grŸ315ödex_shi·amou¡À·
[15] = { 7, 5, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

1676 
	grŸªsu…_shi·amou¡À·
[15] = { 0, 0, 0, 0, 0, 0, 0, 0, 8, 16, 24, 32, 40, 48, 56 };

1677 
	grŸªsu…_shi·amou¡right
[15] = { 56, 48, 40, 32, 24, 16, 8, 0, 0, 0, 0, 0, 0, 0, 0 };

1679 
uöt64_t
 
	grŸ45©ècks
[256][8] = {

1680 { 
U64
(0x0002040810204080), U64(0x0100040810204080), U64(0x0102000810204080), U64(0x0102040010204080), U64(0x0102040800204080), U64(0x0102040810004080), U64(0x0102040810200080), U64(0x0102040810204000) },

1681 { 
U64
(0x0002040810204080), U64(0x0100040810204080), U64(0x0102000810204080), U64(0x0102040010204080), U64(0x0102040800204080), U64(0x0102040810004080), U64(0x0102040810200080), U64(0x0102040810204000) },

1682 { 
U64
(0x0002000000000000), U64(0x0100040810204080), U64(0x0002000810204080), U64(0x0002040010204080), U64(0x0002040800204080), U64(0x0002040810004080), U64(0x0002040810200080), U64(0x0002040810204000) },

1683 { 
U64
(0x0002000000000000), U64(0x0100040810204080), U64(0x0002000810204080), U64(0x0002040010204080), U64(0x0002040800204080), U64(0x0002040810004080), U64(0x0002040810200080), U64(0x0002040810204000) },

1684 { 
U64
(0x0002040000000000), U64(0x0100040000000000), U64(0x0102000810204080), U64(0x0000040010204080), U64(0x0000040800204080), U64(0x0000040810004080), U64(0x0000040810200080), U64(0x0000040810204000) },

1685 { 
U64
(0x0002040000000000), U64(0x0100040000000000), U64(0x0102000810204080), U64(0x0000040010204080), U64(0x0000040800204080), U64(0x0000040810004080), U64(0x0000040810200080), U64(0x0000040810204000) },

1686 { 
U64
(0x0002000000000000), U64(0x0100040000000000), U64(0x0002000810204080), U64(0x0000040010204080), U64(0x0000040800204080), U64(0x0000040810004080), U64(0x0000040810200080), U64(0x0000040810204000) },

1687 { 
U64
(0x0002000000000000), U64(0x0100040000000000), U64(0x0002000810204080), U64(0x0000040010204080), U64(0x0000040800204080), U64(0x0000040810004080), U64(0x0000040810200080), U64(0x0000040810204000) },

1688 { 
U64
(0x0002040800000000), U64(0x0100040800000000), U64(0x0102000800000000), U64(0x0102040010204080), U64(0x0000000800204080), U64(0x0000000810004080), U64(0x0000000810200080), U64(0x0000000810204000) },

1689 { 
U64
(0x0002040800000000), U64(0x0100040800000000), U64(0x0102000800000000), U64(0x0102040010204080), U64(0x0000000800204080), U64(0x0000000810004080), U64(0x0000000810200080), U64(0x0000000810204000) },

1690 { 
U64
(0x0002000000000000), U64(0x0100040800000000), U64(0x0002000800000000), U64(0x0002040010204080), U64(0x0000000800204080), U64(0x0000000810004080), U64(0x0000000810200080), U64(0x0000000810204000) },

1691 { 
U64
(0x0002000000000000), U64(0x0100040800000000), U64(0x0002000800000000), U64(0x0002040010204080), U64(0x0000000800204080), U64(0x0000000810004080), U64(0x0000000810200080), U64(0x0000000810204000) },

1692 { 
U64
(0x0002040000000000), U64(0x0100040000000000), U64(0x0102000800000000), U64(0x0000040010204080), U64(0x0000000800204080), U64(0x0000000810004080), U64(0x0000000810200080), U64(0x0000000810204000) },

1693 { 
U64
(0x0002040000000000), U64(0x0100040000000000), U64(0x0102000800000000), U64(0x0000040010204080), U64(0x0000000800204080), U64(0x0000000810004080), U64(0x0000000810200080), U64(0x0000000810204000) },

1694 { 
U64
(0x0002000000000000), U64(0x0100040000000000), U64(0x0002000800000000), U64(0x0000040010204080), U64(0x0000000800204080), U64(0x0000000810004080), U64(0x0000000810200080), U64(0x0000000810204000) },

1695 { 
U64
(0x0002000000000000), U64(0x0100040000000000), U64(0x0002000800000000), U64(0x0000040010204080), U64(0x0000000800204080), U64(0x0000000810004080), U64(0x0000000810200080), U64(0x0000000810204000) },

1696 { 
U64
(0x0002040810000000), U64(0x0100040810000000), U64(0x0102000810000000), U64(0x0102040010000000), U64(0x0102040800204080), U64(0x0000000010004080), U64(0x0000000010200080), U64(0x0000000010204000) },

1697 { 
U64
(0x0002040810000000), U64(0x0100040810000000), U64(0x0102000810000000), U64(0x0102040010000000), U64(0x0102040800204080), U64(0x0000000010004080), U64(0x0000000010200080), U64(0x0000000010204000) },

1698 { 
U64
(0x0002000000000000), U64(0x0100040810000000), U64(0x0002000810000000), U64(0x0002040010000000), U64(0x0002040800204080), U64(0x0000000010004080), U64(0x0000000010200080), U64(0x0000000010204000) },

1699 { 
U64
(0x0002000000000000), U64(0x0100040810000000), U64(0x0002000810000000), U64(0x0002040010000000), U64(0x0002040800204080), U64(0x0000000010004080), U64(0x0000000010200080), U64(0x0000000010204000) },

1700 { 
U64
(0x0002040000000000), U64(0x0100040000000000), U64(0x0102000810000000), U64(0x0000040010000000), U64(0x0000040800204080), U64(0x0000000010004080), U64(0x0000000010200080), U64(0x0000000010204000) },

1701 { 
U64
(0x0002040000000000), U64(0x0100040000000000), U64(0x0102000810000000), U64(0x0000040010000000), U64(0x0000040800204080), U64(0x0000000010004080), U64(0x0000000010200080), U64(0x0000000010204000) },

1702 { 
U64
(0x0002000000000000), U64(0x0100040000000000), U64(0x0002000810000000), U64(0x0000040010000000), U64(0x0000040800204080), U64(0x0000000010004080), U64(0x0000000010200080), U64(0x0000000010204000) },

1703 { 
U64
(0x0002000000000000), U64(0x0100040000000000), U64(0x0002000810000000), U64(0x0000040010000000), U64(0x0000040800204080), U64(0x0000000010004080), U64(0x0000000010200080), U64(0x0000000010204000) },

1704 { 
U64
(0x0002040800000000), U64(0x0100040800000000), U64(0x0102000800000000), U64(0x0102040010000000), U64(0x0000000800204080), U64(0x0000000010004080), U64(0x0000000010200080), U64(0x0000000010204000) },

1705 { 
U64
(0x0002040800000000), U64(0x0100040800000000), U64(0x0102000800000000), U64(0x0102040010000000), U64(0x0000000800204080), U64(0x0000000010004080), U64(0x0000000010200080), U64(0x0000000010204000) },

1706 { 
U64
(0x0002000000000000), U64(0x0100040800000000), U64(0x0002000800000000), U64(0x0002040010000000), U64(0x0000000800204080), U64(0x0000000010004080), U64(0x0000000010200080), U64(0x0000000010204000) },

1707 { 
U64
(0x0002000000000000), U64(0x0100040800000000), U64(0x0002000800000000), U64(0x0002040010000000), U64(0x0000000800204080), U64(0x0000000010004080), U64(0x0000000010200080), U64(0x0000000010204000) },

1708 { 
U64
(0x0002040000000000), U64(0x0100040000000000), U64(0x0102000800000000), U64(0x0000040010000000), U64(0x0000000800204080), U64(0x0000000010004080), U64(0x0000000010200080), U64(0x0000000010204000) },

1709 { 
U64
(0x0002040000000000), U64(0x0100040000000000), U64(0x0102000800000000), U64(0x0000040010000000), U64(0x0000000800204080), U64(0x0000000010004080), U64(0x0000000010200080), U64(0x0000000010204000) },

1710 { 
U64
(0x0002000000000000), U64(0x0100040000000000), U64(0x0002000800000000), U64(0x0000040010000000), U64(0x0000000800204080), U64(0x0000000010004080), U64(0x0000000010200080), U64(0x0000000010204000) },

1711 { 
U64
(0x0002000000000000), U64(0x0100040000000000), U64(0x0002000800000000), U64(0x0000040010000000), U64(0x0000000800204080), U64(0x0000000010004080), U64(0x0000000010200080), U64(0x0000000010204000) },

1712 { 
U64
(0x0002040810200000), U64(0x0100040810200000), U64(0x0102000810200000), U64(0x0102040010200000), U64(0x0102040800200000), U64(0x0102040810004080), U64(0x0000000000200080), U64(0x0000000000204000) },

1713 { 
U64
(0x0002040810200000), U64(0x0100040810200000), U64(0x0102000810200000), U64(0x0102040010200000), U64(0x0102040800200000), U64(0x0102040810004080), U64(0x0000000000200080), U64(0x0000000000204000) },

1714 { 
U64
(0x0002000000000000), U64(0x0100040810200000), U64(0x0002000810200000), U64(0x0002040010200000), U64(0x0002040800200000), U64(0x0002040810004080), U64(0x0000000000200080), U64(0x0000000000204000) },

1715 { 
U64
(0x0002000000000000), U64(0x0100040810200000), U64(0x0002000810200000), U64(0x0002040010200000), U64(0x0002040800200000), U64(0x0002040810004080), U64(0x0000000000200080), U64(0x0000000000204000) },

1716 { 
U64
(0x0002040000000000), U64(0x0100040000000000), U64(0x0102000810200000), U64(0x0000040010200000), U64(0x0000040800200000), U64(0x0000040810004080), U64(0x0000000000200080), U64(0x0000000000204000) },

1717 { 
U64
(0x0002040000000000), U64(0x0100040000000000), U64(0x0102000810200000), U64(0x0000040010200000), U64(0x0000040800200000), U64(0x0000040810004080), U64(0x0000000000200080), U64(0x0000000000204000) },

1718 { 
U64
(0x0002000000000000), U64(0x0100040000000000), U64(0x0002000810200000), U64(0x0000040010200000), U64(0x0000040800200000), U64(0x0000040810004080), U64(0x0000000000200080), U64(0x0000000000204000) },

1719 { 
U64
(0x0002000000000000), U64(0x0100040000000000), U64(0x0002000810200000), U64(0x0000040010200000), U64(0x0000040800200000), U64(0x0000040810004080), U64(0x0000000000200080), U64(0x0000000000204000) },

1720 { 
U64
(0x0002040800000000), U64(0x0100040800000000), U64(0x0102000800000000), U64(0x0102040010200000), U64(0x0000000800200000), U64(0x0000000810004080), U64(0x0000000000200080), U64(0x0000000000204000) },

1721 { 
U64
(0x0002040800000000), U64(0x0100040800000000), U64(0x0102000800000000), U64(0x0102040010200000), U64(0x0000000800200000), U64(0x0000000810004080), U64(0x0000000000200080), U64(0x0000000000204000) },

1722 { 
U64
(0x0002000000000000), U64(0x0100040800000000), U64(0x0002000800000000), U64(0x0002040010200000), U64(0x0000000800200000), U64(0x0000000810004080), U64(0x0000000000200080), U64(0x0000000000204000) },

1723 { 
U64
(0x0002000000000000), U64(0x0100040800000000), U64(0x0002000800000000), U64(0x0002040010200000), U64(0x0000000800200000), U64(0x0000000810004080), U64(0x0000000000200080), U64(0x0000000000204000) },

1724 { 
U64
(0x0002040000000000), U64(0x0100040000000000), U64(0x0102000800000000), U64(0x0000040010200000), U64(0x0000000800200000), U64(0x0000000810004080), U64(0x0000000000200080), U64(0x0000000000204000) },

1725 { 
U64
(0x0002040000000000), U64(0x0100040000000000), U64(0x0102000800000000), U64(0x0000040010200000), U64(0x0000000800200000), U64(0x0000000810004080), U64(0x0000000000200080), U64(0x0000000000204000) },

1726 { 
U64
(0x0002000000000000), U64(0x0100040000000000), U64(0x0002000800000000), U64(0x0000040010200000), U64(0x0000000800200000), U64(0x0000000810004080), U64(0x0000000000200080), U64(0x0000000000204000) },

1727 { 
U64
(0x0002000000000000), U64(0x0100040000000000), U64(0x0002000800000000), U64(0x0000040010200000), U64(0x0000000800200000), U64(0x0000000810004080), U64(0x0000000000200080), U64(0x0000000000204000) },

1728 { 
U64
(0x0002040810000000), U64(0x0100040810000000), U64(0x0102000810000000), U64(0x0102040010000000), U64(0x0102040800200000), U64(0x0000000010004080), U64(0x0000000000200080), U64(0x0000000000204000) },

1729 { 
U64
(0x0002040810000000), U64(0x0100040810000000), U64(0x0102000810000000), U64(0x0102040010000000), U64(0x0102040800200000), U64(0x0000000010004080), U64(0x0000000000200080), U64(0x0000000000204000) },

1730 { 
U64
(0x0002000000000000), U64(0x0100040810000000), U64(0x0002000810000000), U64(0x0002040010000000), U64(0x0002040800200000), U64(0x0000000010004080), U64(0x0000000000200080), U64(0x0000000000204000) },

1731 { 
U64
(0x0002000000000000), U64(0x0100040810000000), U64(0x0002000810000000), U64(0x0002040010000000), U64(0x0002040800200000), U64(0x0000000010004080), U64(0x0000000000200080), U64(0x0000000000204000) },

1732 { 
U64
(0x0002040000000000), U64(0x0100040000000000), U64(0x0102000810000000), U64(0x0000040010000000), U64(0x0000040800200000), U64(0x0000000010004080), U64(0x0000000000200080), U64(0x0000000000204000) },

1733 { 
U64
(0x0002040000000000), U64(0x0100040000000000), U64(0x0102000810000000), U64(0x0000040010000000), U64(0x0000040800200000), U64(0x0000000010004080), U64(0x0000000000200080), U64(0x0000000000204000) },

1734 { 
U64
(0x0002000000000000), U64(0x0100040000000000), U64(0x0002000810000000), U64(0x0000040010000000), U64(0x0000040800200000), U64(0x0000000010004080), U64(0x0000000000200080), U64(0x0000000000204000) },

1735 { 
U64
(0x0002000000000000), U64(0x0100040000000000), U64(0x0002000810000000), U64(0x0000040010000000), U64(0x0000040800200000), U64(0x0000000010004080), U64(0x0000000000200080), U64(0x0000000000204000) },

1736 { 
U64
(0x0002040800000000), U64(0x0100040800000000), U64(0x0102000800000000), U64(0x0102040010000000), U64(0x0000000800200000), U64(0x0000000010004080), U64(0x0000000000200080), U64(0x0000000000204000) },

1737 { 
U64
(0x0002040800000000), U64(0x0100040800000000), U64(0x0102000800000000), U64(0x0102040010000000), U64(0x0000000800200000), U64(0x0000000010004080), U64(0x0000000000200080), U64(0x0000000000204000) },

1738 { 
U64
(0x0002000000000000), U64(0x0100040800000000), U64(0x0002000800000000), U64(0x0002040010000000), U64(0x0000000800200000), U64(0x0000000010004080), U64(0x0000000000200080), U64(0x0000000000204000) },

1739 { 
U64
(0x0002000000000000), U64(0x0100040800000000), U64(0x0002000800000000), U64(0x0002040010000000), U64(0x0000000800200000), U64(0x0000000010004080), U64(0x0000000000200080), U64(0x0000000000204000) },

1740 { 
U64
(0x0002040000000000), U64(0x0100040000000000), U64(0x0102000800000000), U64(0x0000040010000000), U64(0x0000000800200000), U64(0x0000000010004080), U64(0x0000000000200080), U64(0x0000000000204000) },

1741 { 
U64
(0x0002040000000000), U64(0x0100040000000000), U64(0x0102000800000000), U64(0x0000040010000000), U64(0x0000000800200000), U64(0x0000000010004080), U64(0x0000000000200080), U64(0x0000000000204000) },

1742 { 
U64
(0x0002000000000000), U64(0x0100040000000000), U64(0x0002000800000000), U64(0x0000040010000000), U64(0x0000000800200000), U64(0x0000000010004080), U64(0x0000000000200080), U64(0x0000000000204000) },

1743 { 
U64
(0x0002000000000000), U64(0x0100040000000000), U64(0x0002000800000000), U64(0x0000040010000000), U64(0x0000000800200000), U64(0x0000000010004080), U64(0x0000000000200080), U64(0x0000000000204000) },

1744 { 
U64
(0x0002040810204000), U64(0x0100040810204000), U64(0x0102000810204000), U64(0x0102040010204000), U64(0x0102040800204000), U64(0x0102040810004000), U64(0x0102040810200080), U64(0x0000000000004000) },

1745 { 
U64
(0x0002040810204000), U64(0x0100040810204000), U64(0x0102000810204000), U64(0x0102040010204000), U64(0x0102040800204000), U64(0x0102040810004000), U64(0x0102040810200080), U64(0x0000000000004000) },

1746 { 
U64
(0x0002000000000000), U64(0x0100040810204000), U64(0x0002000810204000), U64(0x0002040010204000), U64(0x0002040800204000), U64(0x0002040810004000), U64(0x0002040810200080), U64(0x0000000000004000) },

1747 { 
U64
(0x0002000000000000), U64(0x0100040810204000), U64(0x0002000810204000), U64(0x0002040010204000), U64(0x0002040800204000), U64(0x0002040810004000), U64(0x0002040810200080), U64(0x0000000000004000) },

1748 { 
U64
(0x0002040000000000), U64(0x0100040000000000), U64(0x0102000810204000), U64(0x0000040010204000), U64(0x0000040800204000), U64(0x0000040810004000), U64(0x0000040810200080), U64(0x0000000000004000) },

1749 { 
U64
(0x0002040000000000), U64(0x0100040000000000), U64(0x0102000810204000), U64(0x0000040010204000), U64(0x0000040800204000), U64(0x0000040810004000), U64(0x0000040810200080), U64(0x0000000000004000) },

1750 { 
U64
(0x0002000000000000), U64(0x0100040000000000), U64(0x0002000810204000), U64(0x0000040010204000), U64(0x0000040800204000), U64(0x0000040810004000), U64(0x0000040810200080), U64(0x0000000000004000) },

1751 { 
U64
(0x0002000000000000), U64(0x0100040000000000), U64(0x0002000810204000), U64(0x0000040010204000), U64(0x0000040800204000), U64(0x0000040810004000), U64(0x0000040810200080), U64(0x0000000000004000) },

1752 { 
U64
(0x0002040800000000), U64(0x0100040800000000), U64(0x0102000800000000), U64(0x0102040010204000), U64(0x0000000800204000), U64(0x0000000810004000), U64(0x0000000810200080), U64(0x0000000000004000) },

1753 { 
U64
(0x0002040800000000), U64(0x0100040800000000), U64(0x0102000800000000), U64(0x0102040010204000), U64(0x0000000800204000), U64(0x0000000810004000), U64(0x0000000810200080), U64(0x0000000000004000) },

1754 { 
U64
(0x0002000000000000), U64(0x0100040800000000), U64(0x0002000800000000), U64(0x0002040010204000), U64(0x0000000800204000), U64(0x0000000810004000), U64(0x0000000810200080), U64(0x0000000000004000) },

1755 { 
U64
(0x0002000000000000), U64(0x0100040800000000), U64(0x0002000800000000), U64(0x0002040010204000), U64(0x0000000800204000), U64(0x0000000810004000), U64(0x0000000810200080), U64(0x0000000000004000) },

1756 { 
U64
(0x0002040000000000), U64(0x0100040000000000), U64(0x0102000800000000), U64(0x0000040010204000), U64(0x0000000800204000), U64(0x0000000810004000), U64(0x0000000810200080), U64(0x0000000000004000) },

1757 { 
U64
(0x0002040000000000), U64(0x0100040000000000), U64(0x0102000800000000), U64(0x0000040010204000), U64(0x0000000800204000), U64(0x0000000810004000), U64(0x0000000810200080), U64(0x0000000000004000) },

1758 { 
U64
(0x0002000000000000), U64(0x0100040000000000), U64(0x0002000800000000), U64(0x0000040010204000), U64(0x0000000800204000), U64(0x0000000810004000), U64(0x0000000810200080), U64(0x0000000000004000) },

1759 { 
U64
(0x0002000000000000), U64(0x0100040000000000), U64(0x0002000800000000), U64(0x0000040010204000), U64(0x0000000800204000), U64(0x0000000810004000), U64(0x0000000810200080), U64(0x0000000000004000) },

1760 { 
U64
(0x0002040810000000), U64(0x0100040810000000), U64(0x0102000810000000), U64(0x0102040010000000), U64(0x0102040800204000), U64(0x0000000010004000), U64(0x0000000010200080), U64(0x0000000000004000) },

1761 { 
U64
(0x0002040810000000), U64(0x0100040810000000), U64(0x0102000810000000), U64(0x0102040010000000), U64(0x0102040800204000), U64(0x0000000010004000), U64(0x0000000010200080), U64(0x0000000000004000) },

1762 { 
U64
(0x0002000000000000), U64(0x0100040810000000), U64(0x0002000810000000), U64(0x0002040010000000), U64(0x0002040800204000), U64(0x0000000010004000), U64(0x0000000010200080), U64(0x0000000000004000) },

1763 { 
U64
(0x0002000000000000), U64(0x0100040810000000), U64(0x0002000810000000), U64(0x0002040010000000), U64(0x0002040800204000), U64(0x0000000010004000), U64(0x0000000010200080), U64(0x0000000000004000) },

1764 { 
U64
(0x0002040000000000), U64(0x0100040000000000), U64(0x0102000810000000), U64(0x0000040010000000), U64(0x0000040800204000), U64(0x0000000010004000), U64(0x0000000010200080), U64(0x0000000000004000) },

1765 { 
U64
(0x0002040000000000), U64(0x0100040000000000), U64(0x0102000810000000), U64(0x0000040010000000), U64(0x0000040800204000), U64(0x0000000010004000), U64(0x0000000010200080), U64(0x0000000000004000) },

1766 { 
U64
(0x0002000000000000), U64(0x0100040000000000), U64(0x0002000810000000), U64(0x0000040010000000), U64(0x0000040800204000), U64(0x0000000010004000), U64(0x0000000010200080), U64(0x0000000000004000) },

1767 { 
U64
(0x0002000000000000), U64(0x0100040000000000), U64(0x0002000810000000), U64(0x0000040010000000), U64(0x0000040800204000), U64(0x0000000010004000), U64(0x0000000010200080), U64(0x0000000000004000) },

1768 { 
U64
(0x0002040800000000), U64(0x0100040800000000), U64(0x0102000800000000), U64(0x0102040010000000), U64(0x0000000800204000), U64(0x0000000010004000), U64(0x0000000010200080), U64(0x0000000000004000) },

1769 { 
U64
(0x0002040800000000), U64(0x0100040800000000), U64(0x0102000800000000), U64(0x0102040010000000), U64(0x0000000800204000), U64(0x0000000010004000), U64(0x0000000010200080), U64(0x0000000000004000) },

1770 { 
U64
(0x0002000000000000), U64(0x0100040800000000), U64(0x0002000800000000), U64(0x0002040010000000), U64(0x0000000800204000), U64(0x0000000010004000), U64(0x0000000010200080), U64(0x0000000000004000) },

1771 { 
U64
(0x0002000000000000), U64(0x0100040800000000), U64(0x0002000800000000), U64(0x0002040010000000), U64(0x0000000800204000), U64(0x0000000010004000), U64(0x0000000010200080), U64(0x0000000000004000) },

1772 { 
U64
(0x0002040000000000), U64(0x0100040000000000), U64(0x0102000800000000), U64(0x0000040010000000), U64(0x0000000800204000), U64(0x0000000010004000), U64(0x0000000010200080), U64(0x0000000000004000) },

1773 { 
U64
(0x0002040000000000), U64(0x0100040000000000), U64(0x0102000800000000), U64(0x0000040010000000), U64(0x0000000800204000), U64(0x0000000010004000), U64(0x0000000010200080), U64(0x0000000000004000) },

1774 { 
U64
(0x0002000000000000), U64(0x0100040000000000), U64(0x0002000800000000), U64(0x0000040010000000), U64(0x0000000800204000), U64(0x0000000010004000), U64(0x0000000010200080), U64(0x0000000000004000) },

1775 { 
U64
(0x0002000000000000), U64(0x0100040000000000), U64(0x0002000800000000), U64(0x0000040010000000), U64(0x0000000800204000), U64(0x0000000010004000), U64(0x0000000010200080), U64(0x0000000000004000) },

1776 { 
U64
(0x0002040810200000), U64(0x0100040810200000), U64(0x0102000810200000), U64(0x0102040010200000), U64(0x0102040800200000), U64(0x0102040810004000), U64(0x0000000000200080), U64(0x0000000000004000) },

1777 { 
U64
(0x0002040810200000), U64(0x0100040810200000), U64(0x0102000810200000), U64(0x0102040010200000), U64(0x0102040800200000), U64(0x0102040810004000), U64(0x0000000000200080), U64(0x0000000000004000) },

1778 { 
U64
(0x0002000000000000), U64(0x0100040810200000), U64(0x0002000810200000), U64(0x0002040010200000), U64(0x0002040800200000), U64(0x0002040810004000), U64(0x0000000000200080), U64(0x0000000000004000) },

1779 { 
U64
(0x0002000000000000), U64(0x0100040810200000), U64(0x0002000810200000), U64(0x0002040010200000), U64(0x0002040800200000), U64(0x0002040810004000), U64(0x0000000000200080), U64(0x0000000000004000) },

1780 { 
U64
(0x0002040000000000), U64(0x0100040000000000), U64(0x0102000810200000), U64(0x0000040010200000), U64(0x0000040800200000), U64(0x0000040810004000), U64(0x0000000000200080), U64(0x0000000000004000) },

1781 { 
U64
(0x0002040000000000), U64(0x0100040000000000), U64(0x0102000810200000), U64(0x0000040010200000), U64(0x0000040800200000), U64(0x0000040810004000), U64(0x0000000000200080), U64(0x0000000000004000) },

1782 { 
U64
(0x0002000000000000), U64(0x0100040000000000), U64(0x0002000810200000), U64(0x0000040010200000), U64(0x0000040800200000), U64(0x0000040810004000), U64(0x0000000000200080), U64(0x0000000000004000) },

1783 { 
U64
(0x0002000000000000), U64(0x0100040000000000), U64(0x0002000810200000), U64(0x0000040010200000), U64(0x0000040800200000), U64(0x0000040810004000), U64(0x0000000000200080), U64(0x0000000000004000) },

1784 { 
U64
(0x0002040800000000), U64(0x0100040800000000), U64(0x0102000800000000), U64(0x0102040010200000), U64(0x0000000800200000), U64(0x0000000810004000), U64(0x0000000000200080), U64(0x0000000000004000) },

1785 { 
U64
(0x0002040800000000), U64(0x0100040800000000), U64(0x0102000800000000), U64(0x0102040010200000), U64(0x0000000800200000), U64(0x0000000810004000), U64(0x0000000000200080), U64(0x0000000000004000) },

1786 { 
U64
(0x0002000000000000), U64(0x0100040800000000), U64(0x0002000800000000), U64(0x0002040010200000), U64(0x0000000800200000), U64(0x0000000810004000), U64(0x0000000000200080), U64(0x0000000000004000) },

1787 { 
U64
(0x0002000000000000), U64(0x0100040800000000), U64(0x0002000800000000), U64(0x0002040010200000), U64(0x0000000800200000), U64(0x0000000810004000), U64(0x0000000000200080), U64(0x0000000000004000) },

1788 { 
U64
(0x0002040000000000), U64(0x0100040000000000), U64(0x0102000800000000), U64(0x0000040010200000), U64(0x0000000800200000), U64(0x0000000810004000), U64(0x0000000000200080), U64(0x0000000000004000) },

1789 { 
U64
(0x0002040000000000), U64(0x0100040000000000), U64(0x0102000800000000), U64(0x0000040010200000), U64(0x0000000800200000), U64(0x0000000810004000), U64(0x0000000000200080), U64(0x0000000000004000) },

1790 { 
U64
(0x0002000000000000), U64(0x0100040000000000), U64(0x0002000800000000), U64(0x0000040010200000), U64(0x0000000800200000), U64(0x0000000810004000), U64(0x0000000000200080), U64(0x0000000000004000) },

1791 { 
U64
(0x0002000000000000), U64(0x0100040000000000), U64(0x0002000800000000), U64(0x0000040010200000), U64(0x0000000800200000), U64(0x0000000810004000), U64(0x0000000000200080), U64(0x0000000000004000) },

1792 { 
U64
(0x0002040810000000), U64(0x0100040810000000), U64(0x0102000810000000), U64(0x0102040010000000), U64(0x0102040800200000), U64(0x0000000010004000), U64(0x0000000000200080), U64(0x0000000000004000) },

1793 { 
U64
(0x0002040810000000), U64(0x0100040810000000), U64(0x0102000810000000), U64(0x0102040010000000), U64(0x0102040800200000), U64(0x0000000010004000), U64(0x0000000000200080), U64(0x0000000000004000) },

1794 { 
U64
(0x0002000000000000), U64(0x0100040810000000), U64(0x0002000810000000), U64(0x0002040010000000), U64(0x0002040800200000), U64(0x0000000010004000), U64(0x0000000000200080), U64(0x0000000000004000) },

1795 { 
U64
(0x0002000000000000), U64(0x0100040810000000), U64(0x0002000810000000), U64(0x0002040010000000), U64(0x0002040800200000), U64(0x0000000010004000), U64(0x0000000000200080), U64(0x0000000000004000) },

1796 { 
U64
(0x0002040000000000), U64(0x0100040000000000), U64(0x0102000810000000), U64(0x0000040010000000), U64(0x0000040800200000), U64(0x0000000010004000), U64(0x0000000000200080), U64(0x0000000000004000) },

1797 { 
U64
(0x0002040000000000), U64(0x0100040000000000), U64(0x0102000810000000), U64(0x0000040010000000), U64(0x0000040800200000), U64(0x0000000010004000), U64(0x0000000000200080), U64(0x0000000000004000) },

1798 { 
U64
(0x0002000000000000), U64(0x0100040000000000), U64(0x0002000810000000), U64(0x0000040010000000), U64(0x0000040800200000), U64(0x0000000010004000), U64(0x0000000000200080), U64(0x0000000000004000) },

1799 { 
U64
(0x0002000000000000), U64(0x0100040000000000), U64(0x0002000810000000), U64(0x0000040010000000), U64(0x0000040800200000), U64(0x0000000010004000), U64(0x0000000000200080), U64(0x0000000000004000) },

1800 { 
U64
(0x0002040800000000), U64(0x0100040800000000), U64(0x0102000800000000), U64(0x0102040010000000), U64(0x0000000800200000), U64(0x0000000010004000), U64(0x0000000000200080), U64(0x0000000000004000) },

1801 { 
U64
(0x0002040800000000), U64(0x0100040800000000), U64(0x0102000800000000), U64(0x0102040010000000), U64(0x0000000800200000), U64(0x0000000010004000), U64(0x0000000000200080), U64(0x0000000000004000) },

1802 { 
U64
(0x0002000000000000), U64(0x0100040800000000), U64(0x0002000800000000), U64(0x0002040010000000), U64(0x0000000800200000), U64(0x0000000010004000), U64(0x0000000000200080), U64(0x0000000000004000) },

1803 { 
U64
(0x0002000000000000), U64(0x0100040800000000), U64(0x0002000800000000), U64(0x0002040010000000), U64(0x0000000800200000), U64(0x0000000010004000), U64(0x0000000000200080), U64(0x0000000000004000) },

1804 { 
U64
(0x0002040000000000), U64(0x0100040000000000), U64(0x0102000800000000), U64(0x0000040010000000), U64(0x0000000800200000), U64(0x0000000010004000), U64(0x0000000000200080), U64(0x0000000000004000) },

1805 { 
U64
(0x0002040000000000), U64(0x0100040000000000), U64(0x0102000800000000), U64(0x0000040010000000), U64(0x0000000800200000), U64(0x0000000010004000), U64(0x0000000000200080), U64(0x0000000000004000) },

1806 { 
U64
(0x0002000000000000), U64(0x0100040000000000), U64(0x0002000800000000), U64(0x0000040010000000), U64(0x0000000800200000), U64(0x0000000010004000), U64(0x0000000000200080), U64(0x0000000000004000) },

1807 { 
U64
(0x0002000000000000), U64(0x0100040000000000), U64(0x0002000800000000), U64(0x0000040010000000), U64(0x0000000800200000), U64(0x0000000010004000), U64(0x0000000000200080), U64(0x0000000000004000) },

1808 { 
U64
(0x0002040810204080), U64(0x0100040810204080), U64(0x0102000810204080), U64(0x0102040010204080), U64(0x0102040800204080), U64(0x0102040810004080), U64(0x0102040810200080), U64(0x0102040810204000) },

1809 { 
U64
(0x0002040810204080), U64(0x0100040810204080), U64(0x0102000810204080), U64(0x0102040010204080), U64(0x0102040800204080), U64(0x0102040810004080), U64(0x0102040810200080), U64(0x0102040810204000) },

1810 { 
U64
(0x0002000000000000), U64(0x0100040810204080), U64(0x0002000810204080), U64(0x0002040010204080), U64(0x0002040800204080), U64(0x0002040810004080), U64(0x0002040810200080), U64(0x0002040810204000) },

1811 { 
U64
(0x0002000000000000), U64(0x0100040810204080), U64(0x0002000810204080), U64(0x0002040010204080), U64(0x0002040800204080), U64(0x0002040810004080), U64(0x0002040810200080), U64(0x0002040810204000) },

1812 { 
U64
(0x0002040000000000), U64(0x0100040000000000), U64(0x0102000810204080), U64(0x0000040010204080), U64(0x0000040800204080), U64(0x0000040810004080), U64(0x0000040810200080), U64(0x0000040810204000) },

1813 { 
U64
(0x0002040000000000), U64(0x0100040000000000), U64(0x0102000810204080), U64(0x0000040010204080), U64(0x0000040800204080), U64(0x0000040810004080), U64(0x0000040810200080), U64(0x0000040810204000) },

1814 { 
U64
(0x0002000000000000), U64(0x0100040000000000), U64(0x0002000810204080), U64(0x0000040010204080), U64(0x0000040800204080), U64(0x0000040810004080), U64(0x0000040810200080), U64(0x0000040810204000) },

1815 { 
U64
(0x0002000000000000), U64(0x0100040000000000), U64(0x0002000810204080), U64(0x0000040010204080), U64(0x0000040800204080), U64(0x0000040810004080), U64(0x0000040810200080), U64(0x0000040810204000) },

1816 { 
U64
(0x0002040800000000), U64(0x0100040800000000), U64(0x0102000800000000), U64(0x0102040010204080), U64(0x0000000800204080), U64(0x0000000810004080), U64(0x0000000810200080), U64(0x0000000810204000) },

1817 { 
U64
(0x0002040800000000), U64(0x0100040800000000), U64(0x0102000800000000), U64(0x0102040010204080), U64(0x0000000800204080), U64(0x0000000810004080), U64(0x0000000810200080), U64(0x0000000810204000) },

1818 { 
U64
(0x0002000000000000), U64(0x0100040800000000), U64(0x0002000800000000), U64(0x0002040010204080), U64(0x0000000800204080), U64(0x0000000810004080), U64(0x0000000810200080), U64(0x0000000810204000) },

1819 { 
U64
(0x0002000000000000), U64(0x0100040800000000), U64(0x0002000800000000), U64(0x0002040010204080), U64(0x0000000800204080), U64(0x0000000810004080), U64(0x0000000810200080), U64(0x0000000810204000) },

1820 { 
U64
(0x0002040000000000), U64(0x0100040000000000), U64(0x0102000800000000), U64(0x0000040010204080), U64(0x0000000800204080), U64(0x0000000810004080), U64(0x0000000810200080), U64(0x0000000810204000) },

1821 { 
U64
(0x0002040000000000), U64(0x0100040000000000), U64(0x0102000800000000), U64(0x0000040010204080), U64(0x0000000800204080), U64(0x0000000810004080), U64(0x0000000810200080), U64(0x0000000810204000) },

1822 { 
U64
(0x0002000000000000), U64(0x0100040000000000), U64(0x0002000800000000), U64(0x0000040010204080), U64(0x0000000800204080), U64(0x0000000810004080), U64(0x0000000810200080), U64(0x0000000810204000) },

1823 { 
U64
(0x0002000000000000), U64(0x0100040000000000), U64(0x0002000800000000), U64(0x0000040010204080), U64(0x0000000800204080), U64(0x0000000810004080), U64(0x0000000810200080), U64(0x0000000810204000) },

1824 { 
U64
(0x0002040810000000), U64(0x0100040810000000), U64(0x0102000810000000), U64(0x0102040010000000), U64(0x0102040800204080), U64(0x0000000010004080), U64(0x0000000010200080), U64(0x0000000010204000) },

1825 { 
U64
(0x0002040810000000), U64(0x0100040810000000), U64(0x0102000810000000), U64(0x0102040010000000), U64(0x0102040800204080), U64(0x0000000010004080), U64(0x0000000010200080), U64(0x0000000010204000) },

1826 { 
U64
(0x0002000000000000), U64(0x0100040810000000), U64(0x0002000810000000), U64(0x0002040010000000), U64(0x0002040800204080), U64(0x0000000010004080), U64(0x0000000010200080), U64(0x0000000010204000) },

1827 { 
U64
(0x0002000000000000), U64(0x0100040810000000), U64(0x0002000810000000), U64(0x0002040010000000), U64(0x0002040800204080), U64(0x0000000010004080), U64(0x0000000010200080), U64(0x0000000010204000) },

1828 { 
U64
(0x0002040000000000), U64(0x0100040000000000), U64(0x0102000810000000), U64(0x0000040010000000), U64(0x0000040800204080), U64(0x0000000010004080), U64(0x0000000010200080), U64(0x0000000010204000) },

1829 { 
U64
(0x0002040000000000), U64(0x0100040000000000), U64(0x0102000810000000), U64(0x0000040010000000), U64(0x0000040800204080), U64(0x0000000010004080), U64(0x0000000010200080), U64(0x0000000010204000) },

1830 { 
U64
(0x0002000000000000), U64(0x0100040000000000), U64(0x0002000810000000), U64(0x0000040010000000), U64(0x0000040800204080), U64(0x0000000010004080), U64(0x0000000010200080), U64(0x0000000010204000) },

1831 { 
U64
(0x0002000000000000), U64(0x0100040000000000), U64(0x0002000810000000), U64(0x0000040010000000), U64(0x0000040800204080), U64(0x0000000010004080), U64(0x0000000010200080), U64(0x0000000010204000) },

1832 { 
U64
(0x0002040800000000), U64(0x0100040800000000), U64(0x0102000800000000), U64(0x0102040010000000), U64(0x0000000800204080), U64(0x0000000010004080), U64(0x0000000010200080), U64(0x0000000010204000) },

1833 { 
U64
(0x0002040800000000), U64(0x0100040800000000), U64(0x0102000800000000), U64(0x0102040010000000), U64(0x0000000800204080), U64(0x0000000010004080), U64(0x0000000010200080), U64(0x0000000010204000) },

1834 { 
U64
(0x0002000000000000), U64(0x0100040800000000), U64(0x0002000800000000), U64(0x0002040010000000), U64(0x0000000800204080), U64(0x0000000010004080), U64(0x0000000010200080), U64(0x0000000010204000) },

1835 { 
U64
(0x0002000000000000), U64(0x0100040800000000), U64(0x0002000800000000), U64(0x0002040010000000), U64(0x0000000800204080), U64(0x0000000010004080), U64(0x0000000010200080), U64(0x0000000010204000) },

1836 { 
U64
(0x0002040000000000), U64(0x0100040000000000), U64(0x0102000800000000), U64(0x0000040010000000), U64(0x0000000800204080), U64(0x0000000010004080), U64(0x0000000010200080), U64(0x0000000010204000) },

1837 { 
U64
(0x0002040000000000), U64(0x0100040000000000), U64(0x0102000800000000), U64(0x0000040010000000), U64(0x0000000800204080), U64(0x0000000010004080), U64(0x0000000010200080), U64(0x0000000010204000) },

1838 { 
U64
(0x0002000000000000), U64(0x0100040000000000), U64(0x0002000800000000), U64(0x0000040010000000), U64(0x0000000800204080), U64(0x0000000010004080), U64(0x0000000010200080), U64(0x0000000010204000) },

1839 { 
U64
(0x0002000000000000), U64(0x0100040000000000), U64(0x0002000800000000), U64(0x0000040010000000), U64(0x0000000800204080), U64(0x0000000010004080), U64(0x0000000010200080), U64(0x0000000010204000) },

1840 { 
U64
(0x0002040810200000), U64(0x0100040810200000), U64(0x0102000810200000), U64(0x0102040010200000), U64(0x0102040800200000), U64(0x0102040810004080), U64(0x0000000000200080), U64(0x0000000000204000) },

1841 { 
U64
(0x0002040810200000), U64(0x0100040810200000), U64(0x0102000810200000), U64(0x0102040010200000), U64(0x0102040800200000), U64(0x0102040810004080), U64(0x0000000000200080), U64(0x0000000000204000) },

1842 { 
U64
(0x0002000000000000), U64(0x0100040810200000), U64(0x0002000810200000), U64(0x0002040010200000), U64(0x0002040800200000), U64(0x0002040810004080), U64(0x0000000000200080), U64(0x0000000000204000) },

1843 { 
U64
(0x0002000000000000), U64(0x0100040810200000), U64(0x0002000810200000), U64(0x0002040010200000), U64(0x0002040800200000), U64(0x0002040810004080), U64(0x0000000000200080), U64(0x0000000000204000) },

1844 { 
U64
(0x0002040000000000), U64(0x0100040000000000), U64(0x0102000810200000), U64(0x0000040010200000), U64(0x0000040800200000), U64(0x0000040810004080), U64(0x0000000000200080), U64(0x0000000000204000) },

1845 { 
U64
(0x0002040000000000), U64(0x0100040000000000), U64(0x0102000810200000), U64(0x0000040010200000), U64(0x0000040800200000), U64(0x0000040810004080), U64(0x0000000000200080), U64(0x0000000000204000) },

1846 { 
U64
(0x0002000000000000), U64(0x0100040000000000), U64(0x0002000810200000), U64(0x0000040010200000), U64(0x0000040800200000), U64(0x0000040810004080), U64(0x0000000000200080), U64(0x0000000000204000) },

1847 { 
U64
(0x0002000000000000), U64(0x0100040000000000), U64(0x0002000810200000), U64(0x0000040010200000), U64(0x0000040800200000), U64(0x0000040810004080), U64(0x0000000000200080), U64(0x0000000000204000) },

1848 { 
U64
(0x0002040800000000), U64(0x0100040800000000), U64(0x0102000800000000), U64(0x0102040010200000), U64(0x0000000800200000), U64(0x0000000810004080), U64(0x0000000000200080), U64(0x0000000000204000) },

1849 { 
U64
(0x0002040800000000), U64(0x0100040800000000), U64(0x0102000800000000), U64(0x0102040010200000), U64(0x0000000800200000), U64(0x0000000810004080), U64(0x0000000000200080), U64(0x0000000000204000) },

1850 { 
U64
(0x0002000000000000), U64(0x0100040800000000), U64(0x0002000800000000), U64(0x0002040010200000), U64(0x0000000800200000), U64(0x0000000810004080), U64(0x0000000000200080), U64(0x0000000000204000) },

1851 { 
U64
(0x0002000000000000), U64(0x0100040800000000), U64(0x0002000800000000), U64(0x0002040010200000), U64(0x0000000800200000), U64(0x0000000810004080), U64(0x0000000000200080), U64(0x0000000000204000) },

1852 { 
U64
(0x0002040000000000), U64(0x0100040000000000), U64(0x0102000800000000), U64(0x0000040010200000), U64(0x0000000800200000), U64(0x0000000810004080), U64(0x0000000000200080), U64(0x0000000000204000) },

1853 { 
U64
(0x0002040000000000), U64(0x0100040000000000), U64(0x0102000800000000), U64(0x0000040010200000), U64(0x0000000800200000), U64(0x0000000810004080), U64(0x0000000000200080), U64(0x0000000000204000) },

1854 { 
U64
(0x0002000000000000), U64(0x0100040000000000), U64(0x0002000800000000), U64(0x0000040010200000), U64(0x0000000800200000), U64(0x0000000810004080), U64(0x0000000000200080), U64(0x0000000000204000) },

1855 { 
U64
(0x0002000000000000), U64(0x0100040000000000), U64(0x0002000800000000), U64(0x0000040010200000), U64(0x0000000800200000), U64(0x0000000810004080), U64(0x0000000000200080), U64(0x0000000000204000) },

1856 { 
U64
(0x0002040810000000), U64(0x0100040810000000), U64(0x0102000810000000), U64(0x0102040010000000), U64(0x0102040800200000), U64(0x0000000010004080), U64(0x0000000000200080), U64(0x0000000000204000) },

1857 { 
U64
(0x0002040810000000), U64(0x0100040810000000), U64(0x0102000810000000), U64(0x0102040010000000), U64(0x0102040800200000), U64(0x0000000010004080), U64(0x0000000000200080), U64(0x0000000000204000) },

1858 { 
U64
(0x0002000000000000), U64(0x0100040810000000), U64(0x0002000810000000), U64(0x0002040010000000), U64(0x0002040800200000), U64(0x0000000010004080), U64(0x0000000000200080), U64(0x0000000000204000) },

1859 { 
U64
(0x0002000000000000), U64(0x0100040810000000), U64(0x0002000810000000), U64(0x0002040010000000), U64(0x0002040800200000), U64(0x0000000010004080), U64(0x0000000000200080), U64(0x0000000000204000) },

1860 { 
U64
(0x0002040000000000), U64(0x0100040000000000), U64(0x0102000810000000), U64(0x0000040010000000), U64(0x0000040800200000), U64(0x0000000010004080), U64(0x0000000000200080), U64(0x0000000000204000) },

1861 { 
U64
(0x0002040000000000), U64(0x0100040000000000), U64(0x0102000810000000), U64(0x0000040010000000), U64(0x0000040800200000), U64(0x0000000010004080), U64(0x0000000000200080), U64(0x0000000000204000) },

1862 { 
U64
(0x0002000000000000), U64(0x0100040000000000), U64(0x0002000810000000), U64(0x0000040010000000), U64(0x0000040800200000), U64(0x0000000010004080), U64(0x0000000000200080), U64(0x0000000000204000) },

1863 { 
U64
(0x0002000000000000), U64(0x0100040000000000), U64(0x0002000810000000), U64(0x0000040010000000), U64(0x0000040800200000), U64(0x0000000010004080), U64(0x0000000000200080), U64(0x0000000000204000) },

1864 { 
U64
(0x0002040800000000), U64(0x0100040800000000), U64(0x0102000800000000), U64(0x0102040010000000), U64(0x0000000800200000), U64(0x0000000010004080), U64(0x0000000000200080), U64(0x0000000000204000) },

1865 { 
U64
(0x0002040800000000), U64(0x0100040800000000), U64(0x0102000800000000), U64(0x0102040010000000), U64(0x0000000800200000), U64(0x0000000010004080), U64(0x0000000000200080), U64(0x0000000000204000) },

1866 { 
U64
(0x0002000000000000), U64(0x0100040800000000), U64(0x0002000800000000), U64(0x0002040010000000), U64(0x0000000800200000), U64(0x0000000010004080), U64(0x0000000000200080), U64(0x0000000000204000) },

1867 { 
U64
(0x0002000000000000), U64(0x0100040800000000), U64(0x0002000800000000), U64(0x0002040010000000), U64(0x0000000800200000), U64(0x0000000010004080), U64(0x0000000000200080), U64(0x0000000000204000) },

1868 { 
U64
(0x0002040000000000), U64(0x0100040000000000), U64(0x0102000800000000), U64(0x0000040010000000), U64(0x0000000800200000), U64(0x0000000010004080), U64(0x0000000000200080), U64(0x0000000000204000) },

1869 { 
U64
(0x0002040000000000), U64(0x0100040000000000), U64(0x0102000800000000), U64(0x0000040010000000), U64(0x0000000800200000), U64(0x0000000010004080), U64(0x0000000000200080), U64(0x0000000000204000) },

1870 { 
U64
(0x0002000000000000), U64(0x0100040000000000), U64(0x0002000800000000), U64(0x0000040010000000), U64(0x0000000800200000), U64(0x0000000010004080), U64(0x0000000000200080), U64(0x0000000000204000) },

1871 { 
U64
(0x0002000000000000), U64(0x0100040000000000), U64(0x0002000800000000), U64(0x0000040010000000), U64(0x0000000800200000), U64(0x0000000010004080), U64(0x0000000000200080), U64(0x0000000000204000) },

1872 { 
U64
(0x0002040810204000), U64(0x0100040810204000), U64(0x0102000810204000), U64(0x0102040010204000), U64(0x0102040800204000), U64(0x0102040810004000), U64(0x0102040810200080), U64(0x0000000000004000) },

1873 { 
U64
(0x0002040810204000), U64(0x0100040810204000), U64(0x0102000810204000), U64(0x0102040010204000), U64(0x0102040800204000), U64(0x0102040810004000), U64(0x0102040810200080), U64(0x0000000000004000) },

1874 { 
U64
(0x0002000000000000), U64(0x0100040810204000), U64(0x0002000810204000), U64(0x0002040010204000), U64(0x0002040800204000), U64(0x0002040810004000), U64(0x0002040810200080), U64(0x0000000000004000) },

1875 { 
U64
(0x0002000000000000), U64(0x0100040810204000), U64(0x0002000810204000), U64(0x0002040010204000), U64(0x0002040800204000), U64(0x0002040810004000), U64(0x0002040810200080), U64(0x0000000000004000) },

1876 { 
U64
(0x0002040000000000), U64(0x0100040000000000), U64(0x0102000810204000), U64(0x0000040010204000), U64(0x0000040800204000), U64(0x0000040810004000), U64(0x0000040810200080), U64(0x0000000000004000) },

1877 { 
U64
(0x0002040000000000), U64(0x0100040000000000), U64(0x0102000810204000), U64(0x0000040010204000), U64(0x0000040800204000), U64(0x0000040810004000), U64(0x0000040810200080), U64(0x0000000000004000) },

1878 { 
U64
(0x0002000000000000), U64(0x0100040000000000), U64(0x0002000810204000), U64(0x0000040010204000), U64(0x0000040800204000), U64(0x0000040810004000), U64(0x0000040810200080), U64(0x0000000000004000) },

1879 { 
U64
(0x0002000000000000), U64(0x0100040000000000), U64(0x0002000810204000), U64(0x0000040010204000), U64(0x0000040800204000), U64(0x0000040810004000), U64(0x0000040810200080), U64(0x0000000000004000) },

1880 { 
U64
(0x0002040800000000), U64(0x0100040800000000), U64(0x0102000800000000), U64(0x0102040010204000), U64(0x0000000800204000), U64(0x0000000810004000), U64(0x0000000810200080), U64(0x0000000000004000) },

1881 { 
U64
(0x0002040800000000), U64(0x0100040800000000), U64(0x0102000800000000), U64(0x0102040010204000), U64(0x0000000800204000), U64(0x0000000810004000), U64(0x0000000810200080), U64(0x0000000000004000) },

1882 { 
U64
(0x0002000000000000), U64(0x0100040800000000), U64(0x0002000800000000), U64(0x0002040010204000), U64(0x0000000800204000), U64(0x0000000810004000), U64(0x0000000810200080), U64(0x0000000000004000) },

1883 { 
U64
(0x0002000000000000), U64(0x0100040800000000), U64(0x0002000800000000), U64(0x0002040010204000), U64(0x0000000800204000), U64(0x0000000810004000), U64(0x0000000810200080), U64(0x0000000000004000) },

1884 { 
U64
(0x0002040000000000), U64(0x0100040000000000), U64(0x0102000800000000), U64(0x0000040010204000), U64(0x0000000800204000), U64(0x0000000810004000), U64(0x0000000810200080), U64(0x0000000000004000) },

1885 { 
U64
(0x0002040000000000), U64(0x0100040000000000), U64(0x0102000800000000), U64(0x0000040010204000), U64(0x0000000800204000), U64(0x0000000810004000), U64(0x0000000810200080), U64(0x0000000000004000) },

1886 { 
U64
(0x0002000000000000), U64(0x0100040000000000), U64(0x0002000800000000), U64(0x0000040010204000), U64(0x0000000800204000), U64(0x0000000810004000), U64(0x0000000810200080), U64(0x0000000000004000) },

1887 { 
U64
(0x0002000000000000), U64(0x0100040000000000), U64(0x0002000800000000), U64(0x0000040010204000), U64(0x0000000800204000), U64(0x0000000810004000), U64(0x0000000810200080), U64(0x0000000000004000) },

1888 { 
U64
(0x0002040810000000), U64(0x0100040810000000), U64(0x0102000810000000), U64(0x0102040010000000), U64(0x0102040800204000), U64(0x0000000010004000), U64(0x0000000010200080), U64(0x0000000000004000) },

1889 { 
U64
(0x0002040810000000), U64(0x0100040810000000), U64(0x0102000810000000), U64(0x0102040010000000), U64(0x0102040800204000), U64(0x0000000010004000), U64(0x0000000010200080), U64(0x0000000000004000) },

1890 { 
U64
(0x0002000000000000), U64(0x0100040810000000), U64(0x0002000810000000), U64(0x0002040010000000), U64(0x0002040800204000), U64(0x0000000010004000), U64(0x0000000010200080), U64(0x0000000000004000) },

1891 { 
U64
(0x0002000000000000), U64(0x0100040810000000), U64(0x0002000810000000), U64(0x0002040010000000), U64(0x0002040800204000), U64(0x0000000010004000), U64(0x0000000010200080), U64(0x0000000000004000) },

1892 { 
U64
(0x0002040000000000), U64(0x0100040000000000), U64(0x0102000810000000), U64(0x0000040010000000), U64(0x0000040800204000), U64(0x0000000010004000), U64(0x0000000010200080), U64(0x0000000000004000) },

1893 { 
U64
(0x0002040000000000), U64(0x0100040000000000), U64(0x0102000810000000), U64(0x0000040010000000), U64(0x0000040800204000), U64(0x0000000010004000), U64(0x0000000010200080), U64(0x0000000000004000) },

1894 { 
U64
(0x0002000000000000), U64(0x0100040000000000), U64(0x0002000810000000), U64(0x0000040010000000), U64(0x0000040800204000), U64(0x0000000010004000), U64(0x0000000010200080), U64(0x0000000000004000) },

1895 { 
U64
(0x0002000000000000), U64(0x0100040000000000), U64(0x0002000810000000), U64(0x0000040010000000), U64(0x0000040800204000), U64(0x0000000010004000), U64(0x0000000010200080), U64(0x0000000000004000) },

1896 { 
U64
(0x0002040800000000), U64(0x0100040800000000), U64(0x0102000800000000), U64(0x0102040010000000), U64(0x0000000800204000), U64(0x0000000010004000), U64(0x0000000010200080), U64(0x0000000000004000) },

1897 { 
U64
(0x0002040800000000), U64(0x0100040800000000), U64(0x0102000800000000), U64(0x0102040010000000), U64(0x0000000800204000), U64(0x0000000010004000), U64(0x0000000010200080), U64(0x0000000000004000) },

1898 { 
U64
(0x0002000000000000), U64(0x0100040800000000), U64(0x0002000800000000), U64(0x0002040010000000), U64(0x0000000800204000), U64(0x0000000010004000), U64(0x0000000010200080), U64(0x0000000000004000) },

1899 { 
U64
(0x0002000000000000), U64(0x0100040800000000), U64(0x0002000800000000), U64(0x0002040010000000), U64(0x0000000800204000), U64(0x0000000010004000), U64(0x0000000010200080), U64(0x0000000000004000) },

1900 { 
U64
(0x0002040000000000), U64(0x0100040000000000), U64(0x0102000800000000), U64(0x0000040010000000), U64(0x0000000800204000), U64(0x0000000010004000), U64(0x0000000010200080), U64(0x0000000000004000) },

1901 { 
U64
(0x0002040000000000), U64(0x0100040000000000), U64(0x0102000800000000), U64(0x0000040010000000), U64(0x0000000800204000), U64(0x0000000010004000), U64(0x0000000010200080), U64(0x0000000000004000) },

1902 { 
U64
(0x0002000000000000), U64(0x0100040000000000), U64(0x0002000800000000), U64(0x0000040010000000), U64(0x0000000800204000), U64(0x0000000010004000), U64(0x0000000010200080), U64(0x0000000000004000) },

1903 { 
U64
(0x0002000000000000), U64(0x0100040000000000), U64(0x0002000800000000), U64(0x0000040010000000), U64(0x0000000800204000), U64(0x0000000010004000), U64(0x0000000010200080), U64(0x0000000000004000) },

1904 { 
U64
(0x0002040810200000), U64(0x0100040810200000), U64(0x0102000810200000), U64(0x0102040010200000), U64(0x0102040800200000), U64(0x0102040810004000), U64(0x0000000000200080), U64(0x0000000000004000) },

1905 { 
U64
(0x0002040810200000), U64(0x0100040810200000), U64(0x0102000810200000), U64(0x0102040010200000), U64(0x0102040800200000), U64(0x0102040810004000), U64(0x0000000000200080), U64(0x0000000000004000) },

1906 { 
U64
(0x0002000000000000), U64(0x0100040810200000), U64(0x0002000810200000), U64(0x0002040010200000), U64(0x0002040800200000), U64(0x0002040810004000), U64(0x0000000000200080), U64(0x0000000000004000) },

1907 { 
U64
(0x0002000000000000), U64(0x0100040810200000), U64(0x0002000810200000), U64(0x0002040010200000), U64(0x0002040800200000), U64(0x0002040810004000), U64(0x0000000000200080), U64(0x0000000000004000) },

1908 { 
U64
(0x0002040000000000), U64(0x0100040000000000), U64(0x0102000810200000), U64(0x0000040010200000), U64(0x0000040800200000), U64(0x0000040810004000), U64(0x0000000000200080), U64(0x0000000000004000) },

1909 { 
U64
(0x0002040000000000), U64(0x0100040000000000), U64(0x0102000810200000), U64(0x0000040010200000), U64(0x0000040800200000), U64(0x0000040810004000), U64(0x0000000000200080), U64(0x0000000000004000) },

1910 { 
U64
(0x0002000000000000), U64(0x0100040000000000), U64(0x0002000810200000), U64(0x0000040010200000), U64(0x0000040800200000), U64(0x0000040810004000), U64(0x0000000000200080), U64(0x0000000000004000) },

1911 { 
U64
(0x0002000000000000), U64(0x0100040000000000), U64(0x0002000810200000), U64(0x0000040010200000), U64(0x0000040800200000), U64(0x0000040810004000), U64(0x0000000000200080), U64(0x0000000000004000) },

1912 { 
U64
(0x0002040800000000), U64(0x0100040800000000), U64(0x0102000800000000), U64(0x0102040010200000), U64(0x0000000800200000), U64(0x0000000810004000), U64(0x0000000000200080), U64(0x0000000000004000) },

1913 { 
U64
(0x0002040800000000), U64(0x0100040800000000), U64(0x0102000800000000), U64(0x0102040010200000), U64(0x0000000800200000), U64(0x0000000810004000), U64(0x0000000000200080), U64(0x0000000000004000) },

1914 { 
U64
(0x0002000000000000), U64(0x0100040800000000), U64(0x0002000800000000), U64(0x0002040010200000), U64(0x0000000800200000), U64(0x0000000810004000), U64(0x0000000000200080), U64(0x0000000000004000) },

1915 { 
U64
(0x0002000000000000), U64(0x0100040800000000), U64(0x0002000800000000), U64(0x0002040010200000), U64(0x0000000800200000), U64(0x0000000810004000), U64(0x0000000000200080), U64(0x0000000000004000) },

1916 { 
U64
(0x0002040000000000), U64(0x0100040000000000), U64(0x0102000800000000), U64(0x0000040010200000), U64(0x0000000800200000), U64(0x0000000810004000), U64(0x0000000000200080), U64(0x0000000000004000) },

1917 { 
U64
(0x0002040000000000), U64(0x0100040000000000), U64(0x0102000800000000), U64(0x0000040010200000), U64(0x0000000800200000), U64(0x0000000810004000), U64(0x0000000000200080), U64(0x0000000000004000) },

1918 { 
U64
(0x0002000000000000), U64(0x0100040000000000), U64(0x0002000800000000), U64(0x0000040010200000), U64(0x0000000800200000), U64(0x0000000810004000), U64(0x0000000000200080), U64(0x0000000000004000) },

1919 { 
U64
(0x0002000000000000), U64(0x0100040000000000), U64(0x0002000800000000), U64(0x0000040010200000), U64(0x0000000800200000), U64(0x0000000810004000), U64(0x0000000000200080), U64(0x0000000000004000) },

1920 { 
U64
(0x0002040810000000), U64(0x0100040810000000), U64(0x0102000810000000), U64(0x0102040010000000), U64(0x0102040800200000), U64(0x0000000010004000), U64(0x0000000000200080), U64(0x0000000000004000) },

1921 { 
U64
(0x0002040810000000), U64(0x0100040810000000), U64(0x0102000810000000), U64(0x0102040010000000), U64(0x0102040800200000), U64(0x0000000010004000), U64(0x0000000000200080), U64(0x0000000000004000) },

1922 { 
U64
(0x0002000000000000), U64(0x0100040810000000), U64(0x0002000810000000), U64(0x0002040010000000), U64(0x0002040800200000), U64(0x0000000010004000), U64(0x0000000000200080), U64(0x0000000000004000) },

1923 { 
U64
(0x0002000000000000), U64(0x0100040810000000), U64(0x0002000810000000), U64(0x0002040010000000), U64(0x0002040800200000), U64(0x0000000010004000), U64(0x0000000000200080), U64(0x0000000000004000) },

1924 { 
U64
(0x0002040000000000), U64(0x0100040000000000), U64(0x0102000810000000), U64(0x0000040010000000), U64(0x0000040800200000), U64(0x0000000010004000), U64(0x0000000000200080), U64(0x0000000000004000) },

1925 { 
U64
(0x0002040000000000), U64(0x0100040000000000), U64(0x0102000810000000), U64(0x0000040010000000), U64(0x0000040800200000), U64(0x0000000010004000), U64(0x0000000000200080), U64(0x0000000000004000) },

1926 { 
U64
(0x0002000000000000), U64(0x0100040000000000), U64(0x0002000810000000), U64(0x0000040010000000), U64(0x0000040800200000), U64(0x0000000010004000), U64(0x0000000000200080), U64(0x0000000000004000) },

1927 { 
U64
(0x0002000000000000), U64(0x0100040000000000), U64(0x0002000810000000), U64(0x0000040010000000), U64(0x0000040800200000), U64(0x0000000010004000), U64(0x0000000000200080), U64(0x0000000000004000) },

1928 { 
U64
(0x0002040800000000), U64(0x0100040800000000), U64(0x0102000800000000), U64(0x0102040010000000), U64(0x0000000800200000), U64(0x0000000010004000), U64(0x0000000000200080), U64(0x0000000000004000) },

1929 { 
U64
(0x0002040800000000), U64(0x0100040800000000), U64(0x0102000800000000), U64(0x0102040010000000), U64(0x0000000800200000), U64(0x0000000010004000), U64(0x0000000000200080), U64(0x0000000000004000) },

1930 { 
U64
(0x0002000000000000), U64(0x0100040800000000), U64(0x0002000800000000), U64(0x0002040010000000), U64(0x0000000800200000), U64(0x0000000010004000), U64(0x0000000000200080), U64(0x0000000000004000) },

1931 { 
U64
(0x0002000000000000), U64(0x0100040800000000), U64(0x0002000800000000), U64(0x0002040010000000), U64(0x0000000800200000), U64(0x0000000010004000), U64(0x0000000000200080), U64(0x0000000000004000) },

1932 { 
U64
(0x0002040000000000), U64(0x0100040000000000), U64(0x0102000800000000), U64(0x0000040010000000), U64(0x0000000800200000), U64(0x0000000010004000), U64(0x0000000000200080), U64(0x0000000000004000) },

1933 { 
U64
(0x0002040000000000), U64(0x0100040000000000), U64(0x0102000800000000), U64(0x0000040010000000), U64(0x0000000800200000), U64(0x0000000010004000), U64(0x0000000000200080), U64(0x0000000000004000) },

1934 { 
U64
(0x0002000000000000), U64(0x0100040000000000), U64(0x0002000800000000), U64(0x0000040010000000), U64(0x0000000800200000), U64(0x0000000010004000), U64(0x0000000000200080), U64(0x0000000000004000) },

1935 { 
U64
(0x0002000000000000), U64(0x0100040000000000), U64(0x0002000800000000), U64(0x0000040010000000), U64(0x0000000800200000), U64(0x0000000010004000), U64(0x0000000000200080), U64(0x0000000000004000) }

1938 
uöt64_t
 
	grŸ315©ècks
[256][8] = {

1939 { 
U64
(0x8040201008040200), U64(0x8040201008040001), U64(0x8040201008000201), U64(0x8040201000040201), U64(0x8040200008040201), U64(0x8040001008040201), U64(0x8000201008040201), U64(0x0040201008040201) },

1940 { 
U64
(0x8040201008040200), U64(0x8040201008040001), U64(0x8040201008000201), U64(0x8040201000040201), U64(0x8040200008040201), U64(0x8040001008040201), U64(0x8000201008040201), U64(0x0040201008040201) },

1941 { 
U64
(0x0000000000000200), U64(0x8040201008040001), U64(0x8040201008000200), U64(0x8040201000040200), U64(0x8040200008040200), U64(0x8040001008040200), U64(0x8000201008040200), U64(0x0040201008040200) },

1942 { 
U64
(0x0000000000000200), U64(0x8040201008040001), U64(0x8040201008000200), U64(0x8040201000040200), U64(0x8040200008040200), U64(0x8040001008040200), U64(0x8000201008040200), U64(0x0040201008040200) },

1943 { 
U64
(0x0000000000040200), U64(0x0000000000040001), U64(0x8040201008000201), U64(0x8040201000040000), U64(0x8040200008040000), U64(0x8040001008040000), U64(0x8000201008040000), U64(0x0040201008040000) },

1944 { 
U64
(0x0000000000040200), U64(0x0000000000040001), U64(0x8040201008000201), U64(0x8040201000040000), U64(0x8040200008040000), U64(0x8040001008040000), U64(0x8000201008040000), U64(0x0040201008040000) },

1945 { 
U64
(0x0000000000000200), U64(0x0000000000040001), U64(0x8040201008000200), U64(0x8040201000040000), U64(0x8040200008040000), U64(0x8040001008040000), U64(0x8000201008040000), U64(0x0040201008040000) },

1946 { 
U64
(0x0000000000000200), U64(0x0000000000040001), U64(0x8040201008000200), U64(0x8040201000040000), U64(0x8040200008040000), U64(0x8040001008040000), U64(0x8000201008040000), U64(0x0040201008040000) },

1947 { 
U64
(0x0000000008040200), U64(0x0000000008040001), U64(0x0000000008000201), U64(0x8040201000040201), U64(0x8040200008000000), U64(0x8040001008000000), U64(0x8000201008000000), U64(0x0040201008000000) },

1948 { 
U64
(0x0000000008040200), U64(0x0000000008040001), U64(0x0000000008000201), U64(0x8040201000040201), U64(0x8040200008000000), U64(0x8040001008000000), U64(0x8000201008000000), U64(0x0040201008000000) },

1949 { 
U64
(0x0000000000000200), U64(0x0000000008040001), U64(0x0000000008000200), U64(0x8040201000040200), U64(0x8040200008000000), U64(0x8040001008000000), U64(0x8000201008000000), U64(0x0040201008000000) },

1950 { 
U64
(0x0000000000000200), U64(0x0000000008040001), U64(0x0000000008000200), U64(0x8040201000040200), U64(0x8040200008000000), U64(0x8040001008000000), U64(0x8000201008000000), U64(0x0040201008000000) },

1951 { 
U64
(0x0000000000040200), U64(0x0000000000040001), U64(0x0000000008000201), U64(0x8040201000040000), U64(0x8040200008000000), U64(0x8040001008000000), U64(0x8000201008000000), U64(0x0040201008000000) },

1952 { 
U64
(0x0000000000040200), U64(0x0000000000040001), U64(0x0000000008000201), U64(0x8040201000040000), U64(0x8040200008000000), U64(0x8040001008000000), U64(0x8000201008000000), U64(0x0040201008000000) },

1953 { 
U64
(0x0000000000000200), U64(0x0000000000040001), U64(0x0000000008000200), U64(0x8040201000040000), U64(0x8040200008000000), U64(0x8040001008000000), U64(0x8000201008000000), U64(0x0040201008000000) },

1954 { 
U64
(0x0000000000000200), U64(0x0000000000040001), U64(0x0000000008000200), U64(0x8040201000040000), U64(0x8040200008000000), U64(0x8040001008000000), U64(0x8000201008000000), U64(0x0040201008000000) },

1955 { 
U64
(0x0000001008040200), U64(0x0000001008040001), U64(0x0000001008000201), U64(0x0000001000040201), U64(0x8040200008040201), U64(0x8040001000000000), U64(0x8000201000000000), U64(0x0040201000000000) },

1956 { 
U64
(0x0000001008040200), U64(0x0000001008040001), U64(0x0000001008000201), U64(0x0000001000040201), U64(0x8040200008040201), U64(0x8040001000000000), U64(0x8000201000000000), U64(0x0040201000000000) },

1957 { 
U64
(0x0000000000000200), U64(0x0000001008040001), U64(0x0000001008000200), U64(0x0000001000040200), U64(0x8040200008040200), U64(0x8040001000000000), U64(0x8000201000000000), U64(0x0040201000000000) },

1958 { 
U64
(0x0000000000000200), U64(0x0000001008040001), U64(0x0000001008000200), U64(0x0000001000040200), U64(0x8040200008040200), U64(0x8040001000000000), U64(0x8000201000000000), U64(0x0040201000000000) },

1959 { 
U64
(0x0000000000040200), U64(0x0000000000040001), U64(0x0000001008000201), U64(0x0000001000040000), U64(0x8040200008040000), U64(0x8040001000000000), U64(0x8000201000000000), U64(0x0040201000000000) },

1960 { 
U64
(0x0000000000040200), U64(0x0000000000040001), U64(0x0000001008000201), U64(0x0000001000040000), U64(0x8040200008040000), U64(0x8040001000000000), U64(0x8000201000000000), U64(0x0040201000000000) },

1961 { 
U64
(0x0000000000000200), U64(0x0000000000040001), U64(0x0000001008000200), U64(0x0000001000040000), U64(0x8040200008040000), U64(0x8040001000000000), U64(0x8000201000000000), U64(0x0040201000000000) },

1962 { 
U64
(0x0000000000000200), U64(0x0000000000040001), U64(0x0000001008000200), U64(0x0000001000040000), U64(0x8040200008040000), U64(0x8040001000000000), U64(0x8000201000000000), U64(0x0040201000000000) },

1963 { 
U64
(0x0000000008040200), U64(0x0000000008040001), U64(0x0000000008000201), U64(0x0000001000040201), U64(0x8040200008000000), U64(0x8040001000000000), U64(0x8000201000000000), U64(0x0040201000000000) },

1964 { 
U64
(0x0000000008040200), U64(0x0000000008040001), U64(0x0000000008000201), U64(0x0000001000040201), U64(0x8040200008000000), U64(0x8040001000000000), U64(0x8000201000000000), U64(0x0040201000000000) },

1965 { 
U64
(0x0000000000000200), U64(0x0000000008040001), U64(0x0000000008000200), U64(0x0000001000040200), U64(0x8040200008000000), U64(0x8040001000000000), U64(0x8000201000000000), U64(0x0040201000000000) },

1966 { 
U64
(0x0000000000000200), U64(0x0000000008040001), U64(0x0000000008000200), U64(0x0000001000040200), U64(0x8040200008000000), U64(0x8040001000000000), U64(0x8000201000000000), U64(0x0040201000000000) },

1967 { 
U64
(0x0000000000040200), U64(0x0000000000040001), U64(0x0000000008000201), U64(0x0000001000040000), U64(0x8040200008000000), U64(0x8040001000000000), U64(0x8000201000000000), U64(0x0040201000000000) },

1968 { 
U64
(0x0000000000040200), U64(0x0000000000040001), U64(0x0000000008000201), U64(0x0000001000040000), U64(0x8040200008000000), U64(0x8040001000000000), U64(0x8000201000000000), U64(0x0040201000000000) },

1969 { 
U64
(0x0000000000000200), U64(0x0000000000040001), U64(0x0000000008000200), U64(0x0000001000040000), U64(0x8040200008000000), U64(0x8040001000000000), U64(0x8000201000000000), U64(0x0040201000000000) },

1970 { 
U64
(0x0000000000000200), U64(0x0000000000040001), U64(0x0000000008000200), U64(0x0000001000040000), U64(0x8040200008000000), U64(0x8040001000000000), U64(0x8000201000000000), U64(0x0040201000000000) },

1971 { 
U64
(0x0000201008040200), U64(0x0000201008040001), U64(0x0000201008000201), U64(0x0000201000040201), U64(0x0000200008040201), U64(0x8040001008040201), U64(0x8000200000000000), U64(0x0040200000000000) },

1972 { 
U64
(0x0000201008040200), U64(0x0000201008040001), U64(0x0000201008000201), U64(0x0000201000040201), U64(0x0000200008040201), U64(0x8040001008040201), U64(0x8000200000000000), U64(0x0040200000000000) },

1973 { 
U64
(0x0000000000000200), U64(0x0000201008040001), U64(0x0000201008000200), U64(0x0000201000040200), U64(0x0000200008040200), U64(0x8040001008040200), U64(0x8000200000000000), U64(0x0040200000000000) },

1974 { 
U64
(0x0000000000000200), U64(0x0000201008040001), U64(0x0000201008000200), U64(0x0000201000040200), U64(0x0000200008040200), U64(0x8040001008040200), U64(0x8000200000000000), U64(0x0040200000000000) },

1975 { 
U64
(0x0000000000040200), U64(0x0000000000040001), U64(0x0000201008000201), U64(0x0000201000040000), U64(0x0000200008040000), U64(0x8040001008040000), U64(0x8000200000000000), U64(0x0040200000000000) },

1976 { 
U64
(0x0000000000040200), U64(0x0000000000040001), U64(0x0000201008000201), U64(0x0000201000040000), U64(0x0000200008040000), U64(0x8040001008040000), U64(0x8000200000000000), U64(0x0040200000000000) },

1977 { 
U64
(0x0000000000000200), U64(0x0000000000040001), U64(0x0000201008000200), U64(0x0000201000040000), U64(0x0000200008040000), U64(0x8040001008040000), U64(0x8000200000000000), U64(0x0040200000000000) },

1978 { 
U64
(0x0000000000000200), U64(0x0000000000040001), U64(0x0000201008000200), U64(0x0000201000040000), U64(0x0000200008040000), U64(0x8040001008040000), U64(0x8000200000000000), U64(0x0040200000000000) },

1979 { 
U64
(0x0000000008040200), U64(0x0000000008040001), U64(0x0000000008000201), U64(0x0000201000040201), U64(0x0000200008000000), U64(0x8040001008000000), U64(0x8000200000000000), U64(0x0040200000000000) },

1980 { 
U64
(0x0000000008040200), U64(0x0000000008040001), U64(0x0000000008000201), U64(0x0000201000040201), U64(0x0000200008000000), U64(0x8040001008000000), U64(0x8000200000000000), U64(0x0040200000000000) },

1981 { 
U64
(0x0000000000000200), U64(0x0000000008040001), U64(0x0000000008000200), U64(0x0000201000040200), U64(0x0000200008000000), U64(0x8040001008000000), U64(0x8000200000000000), U64(0x0040200000000000) },

1982 { 
U64
(0x0000000000000200), U64(0x0000000008040001), U64(0x0000000008000200), U64(0x0000201000040200), U64(0x0000200008000000), U64(0x8040001008000000), U64(0x8000200000000000), U64(0x0040200000000000) },

1983 { 
U64
(0x0000000000040200), U64(0x0000000000040001), U64(0x0000000008000201), U64(0x0000201000040000), U64(0x0000200008000000), U64(0x8040001008000000), U64(0x8000200000000000), U64(0x0040200000000000) },

1984 { 
U64
(0x0000000000040200), U64(0x0000000000040001), U64(0x0000000008000201), U64(0x0000201000040000), U64(0x0000200008000000), U64(0x8040001008000000), U64(0x8000200000000000), U64(0x0040200000000000) },

1985 { 
U64
(0x0000000000000200), U64(0x0000000000040001), U64(0x0000000008000200), U64(0x0000201000040000), U64(0x0000200008000000), U64(0x8040001008000000), U64(0x8000200000000000), U64(0x0040200000000000) },

1986 { 
U64
(0x0000000000000200), U64(0x0000000000040001), U64(0x0000000008000200), U64(0x0000201000040000), U64(0x0000200008000000), U64(0x8040001008000000), U64(0x8000200000000000), U64(0x0040200000000000) },

1987 { 
U64
(0x0000001008040200), U64(0x0000001008040001), U64(0x0000001008000201), U64(0x0000001000040201), U64(0x0000200008040201), U64(0x8040001000000000), U64(0x8000200000000000), U64(0x0040200000000000) },

1988 { 
U64
(0x0000001008040200), U64(0x0000001008040001), U64(0x0000001008000201), U64(0x0000001000040201), U64(0x0000200008040201), U64(0x8040001000000000), U64(0x8000200000000000), U64(0x0040200000000000) },

1989 { 
U64
(0x0000000000000200), U64(0x0000001008040001), U64(0x0000001008000200), U64(0x0000001000040200), U64(0x0000200008040200), U64(0x8040001000000000), U64(0x8000200000000000), U64(0x0040200000000000) },

1990 { 
U64
(0x0000000000000200), U64(0x0000001008040001), U64(0x0000001008000200), U64(0x0000001000040200), U64(0x0000200008040200), U64(0x8040001000000000), U64(0x8000200000000000), U64(0x0040200000000000) },

1991 { 
U64
(0x0000000000040200), U64(0x0000000000040001), U64(0x0000001008000201), U64(0x0000001000040000), U64(0x0000200008040000), U64(0x8040001000000000), U64(0x8000200000000000), U64(0x0040200000000000) },

1992 { 
U64
(0x0000000000040200), U64(0x0000000000040001), U64(0x0000001008000201), U64(0x0000001000040000), U64(0x0000200008040000), U64(0x8040001000000000), U64(0x8000200000000000), U64(0x0040200000000000) },

1993 { 
U64
(0x0000000000000200), U64(0x0000000000040001), U64(0x0000001008000200), U64(0x0000001000040000), U64(0x0000200008040000), U64(0x8040001000000000), U64(0x8000200000000000), U64(0x0040200000000000) },

1994 { 
U64
(0x0000000000000200), U64(0x0000000000040001), U64(0x0000001008000200), U64(0x0000001000040000), U64(0x0000200008040000), U64(0x8040001000000000), U64(0x8000200000000000), U64(0x0040200000000000) },

1995 { 
U64
(0x0000000008040200), U64(0x0000000008040001), U64(0x0000000008000201), U64(0x0000001000040201), U64(0x0000200008000000), U64(0x8040001000000000), U64(0x8000200000000000), U64(0x0040200000000000) },

1996 { 
U64
(0x0000000008040200), U64(0x0000000008040001), U64(0x0000000008000201), U64(0x0000001000040201), U64(0x0000200008000000), U64(0x8040001000000000), U64(0x8000200000000000), U64(0x0040200000000000) },

1997 { 
U64
(0x0000000000000200), U64(0x0000000008040001), U64(0x0000000008000200), U64(0x0000001000040200), U64(0x0000200008000000), U64(0x8040001000000000), U64(0x8000200000000000), U64(0x0040200000000000) },

1998 { 
U64
(0x0000000000000200), U64(0x0000000008040001), U64(0x0000000008000200), U64(0x0000001000040200), U64(0x0000200008000000), U64(0x8040001000000000), U64(0x8000200000000000), U64(0x0040200000000000) },

1999 { 
U64
(0x0000000000040200), U64(0x0000000000040001), U64(0x0000000008000201), U64(0x0000001000040000), U64(0x0000200008000000), U64(0x8040001000000000), U64(0x8000200000000000), U64(0x0040200000000000) },

2000 { 
U64
(0x0000000000040200), U64(0x0000000000040001), U64(0x0000000008000201), U64(0x0000001000040000), U64(0x0000200008000000), U64(0x8040001000000000), U64(0x8000200000000000), U64(0x0040200000000000) },

2001 { 
U64
(0x0000000000000200), U64(0x0000000000040001), U64(0x0000000008000200), U64(0x0000001000040000), U64(0x0000200008000000), U64(0x8040001000000000), U64(0x8000200000000000), U64(0x0040200000000000) },

2002 { 
U64
(0x0000000000000200), U64(0x0000000000040001), U64(0x0000000008000200), U64(0x0000001000040000), U64(0x0000200008000000), U64(0x8040001000000000), U64(0x8000200000000000), U64(0x0040200000000000) },

2003 { 
U64
(0x0040201008040200), U64(0x0040201008040001), U64(0x0040201008000201), U64(0x0040201000040201), U64(0x0040200008040201), U64(0x0040001008040201), U64(0x8000201008040201), U64(0x0040000000000000) },

2004 { 
U64
(0x0040201008040200), U64(0x0040201008040001), U64(0x0040201008000201), U64(0x0040201000040201), U64(0x0040200008040201), U64(0x0040001008040201), U64(0x8000201008040201), U64(0x0040000000000000) },

2005 { 
U64
(0x0000000000000200), U64(0x0040201008040001), U64(0x0040201008000200), U64(0x0040201000040200), U64(0x0040200008040200), U64(0x0040001008040200), U64(0x8000201008040200), U64(0x0040000000000000) },

2006 { 
U64
(0x0000000000000200), U64(0x0040201008040001), U64(0x0040201008000200), U64(0x0040201000040200), U64(0x0040200008040200), U64(0x0040001008040200), U64(0x8000201008040200), U64(0x0040000000000000) },

2007 { 
U64
(0x0000000000040200), U64(0x0000000000040001), U64(0x0040201008000201), U64(0x0040201000040000), U64(0x0040200008040000), U64(0x0040001008040000), U64(0x8000201008040000), U64(0x0040000000000000) },

2008 { 
U64
(0x0000000000040200), U64(0x0000000000040001), U64(0x0040201008000201), U64(0x0040201000040000), U64(0x0040200008040000), U64(0x0040001008040000), U64(0x8000201008040000), U64(0x0040000000000000) },

2009 { 
U64
(0x0000000000000200), U64(0x0000000000040001), U64(0x0040201008000200), U64(0x0040201000040000), U64(0x0040200008040000), U64(0x0040001008040000), U64(0x8000201008040000), U64(0x0040000000000000) },

2010 { 
U64
(0x0000000000000200), U64(0x0000000000040001), U64(0x0040201008000200), U64(0x0040201000040000), U64(0x0040200008040000), U64(0x0040001008040000), U64(0x8000201008040000), U64(0x0040000000000000) },

2011 { 
U64
(0x0000000008040200), U64(0x0000000008040001), U64(0x0000000008000201), U64(0x0040201000040201), U64(0x0040200008000000), U64(0x0040001008000000), U64(0x8000201008000000), U64(0x0040000000000000) },

2012 { 
U64
(0x0000000008040200), U64(0x0000000008040001), U64(0x0000000008000201), U64(0x0040201000040201), U64(0x0040200008000000), U64(0x0040001008000000), U64(0x8000201008000000), U64(0x0040000000000000) },

2013 { 
U64
(0x0000000000000200), U64(0x0000000008040001), U64(0x0000000008000200), U64(0x0040201000040200), U64(0x0040200008000000), U64(0x0040001008000000), U64(0x8000201008000000), U64(0x0040000000000000) },

2014 { 
U64
(0x0000000000000200), U64(0x0000000008040001), U64(0x0000000008000200), U64(0x0040201000040200), U64(0x0040200008000000), U64(0x0040001008000000), U64(0x8000201008000000), U64(0x0040000000000000) },

2015 { 
U64
(0x0000000000040200), U64(0x0000000000040001), U64(0x0000000008000201), U64(0x0040201000040000), U64(0x0040200008000000), U64(0x0040001008000000), U64(0x8000201008000000), U64(0x0040000000000000) },

2016 { 
U64
(0x0000000000040200), U64(0x0000000000040001), U64(0x0000000008000201), U64(0x0040201000040000), U64(0x0040200008000000), U64(0x0040001008000000), U64(0x8000201008000000), U64(0x0040000000000000) },

2017 { 
U64
(0x0000000000000200), U64(0x0000000000040001), U64(0x0000000008000200), U64(0x0040201000040000), U64(0x0040200008000000), U64(0x0040001008000000), U64(0x8000201008000000), U64(0x0040000000000000) },

2018 { 
U64
(0x0000000000000200), U64(0x0000000000040001), U64(0x0000000008000200), U64(0x0040201000040000), U64(0x0040200008000000), U64(0x0040001008000000), U64(0x8000201008000000), U64(0x0040000000000000) },

2019 { 
U64
(0x0000001008040200), U64(0x0000001008040001), U64(0x0000001008000201), U64(0x0000001000040201), U64(0x0040200008040201), U64(0x0040001000000000), U64(0x8000201000000000), U64(0x0040000000000000) },

2020 { 
U64
(0x0000001008040200), U64(0x0000001008040001), U64(0x0000001008000201), U64(0x0000001000040201), U64(0x0040200008040201), U64(0x0040001000000000), U64(0x8000201000000000), U64(0x0040000000000000) },

2021 { 
U64
(0x0000000000000200), U64(0x0000001008040001), U64(0x0000001008000200), U64(0x0000001000040200), U64(0x0040200008040200), U64(0x0040001000000000), U64(0x8000201000000000), U64(0x0040000000000000) },

2022 { 
U64
(0x0000000000000200), U64(0x0000001008040001), U64(0x0000001008000200), U64(0x0000001000040200), U64(0x0040200008040200), U64(0x0040001000000000), U64(0x8000201000000000), U64(0x0040000000000000) },

2023 { 
U64
(0x0000000000040200), U64(0x0000000000040001), U64(0x0000001008000201), U64(0x0000001000040000), U64(0x0040200008040000), U64(0x0040001000000000), U64(0x8000201000000000), U64(0x0040000000000000) },

2024 { 
U64
(0x0000000000040200), U64(0x0000000000040001), U64(0x0000001008000201), U64(0x0000001000040000), U64(0x0040200008040000), U64(0x0040001000000000), U64(0x8000201000000000), U64(0x0040000000000000) },

2025 { 
U64
(0x0000000000000200), U64(0x0000000000040001), U64(0x0000001008000200), U64(0x0000001000040000), U64(0x0040200008040000), U64(0x0040001000000000), U64(0x8000201000000000), U64(0x0040000000000000) },

2026 { 
U64
(0x0000000000000200), U64(0x0000000000040001), U64(0x0000001008000200), U64(0x0000001000040000), U64(0x0040200008040000), U64(0x0040001000000000), U64(0x8000201000000000), U64(0x0040000000000000) },

2027 { 
U64
(0x0000000008040200), U64(0x0000000008040001), U64(0x0000000008000201), U64(0x0000001000040201), U64(0x0040200008000000), U64(0x0040001000000000), U64(0x8000201000000000), U64(0x0040000000000000) },

2028 { 
U64
(0x0000000008040200), U64(0x0000000008040001), U64(0x0000000008000201), U64(0x0000001000040201), U64(0x0040200008000000), U64(0x0040001000000000), U64(0x8000201000000000), U64(0x0040000000000000) },

2029 { 
U64
(0x0000000000000200), U64(0x0000000008040001), U64(0x0000000008000200), U64(0x0000001000040200), U64(0x0040200008000000), U64(0x0040001000000000), U64(0x8000201000000000), U64(0x0040000000000000) },

2030 { 
U64
(0x0000000000000200), U64(0x0000000008040001), U64(0x0000000008000200), U64(0x0000001000040200), U64(0x0040200008000000), U64(0x0040001000000000), U64(0x8000201000000000), U64(0x0040000000000000) },

2031 { 
U64
(0x0000000000040200), U64(0x0000000000040001), U64(0x0000000008000201), U64(0x0000001000040000), U64(0x0040200008000000), U64(0x0040001000000000), U64(0x8000201000000000), U64(0x0040000000000000) },

2032 { 
U64
(0x0000000000040200), U64(0x0000000000040001), U64(0x0000000008000201), U64(0x0000001000040000), U64(0x0040200008000000), U64(0x0040001000000000), U64(0x8000201000000000), U64(0x0040000000000000) },

2033 { 
U64
(0x0000000000000200), U64(0x0000000000040001), U64(0x0000000008000200), U64(0x0000001000040000), U64(0x0040200008000000), U64(0x0040001000000000), U64(0x8000201000000000), U64(0x0040000000000000) },

2034 { 
U64
(0x0000000000000200), U64(0x0000000000040001), U64(0x0000000008000200), U64(0x0000001000040000), U64(0x0040200008000000), U64(0x0040001000000000), U64(0x8000201000000000), U64(0x0040000000000000) },

2035 { 
U64
(0x0000201008040200), U64(0x0000201008040001), U64(0x0000201008000201), U64(0x0000201000040201), U64(0x0000200008040201), U64(0x0040001008040201), U64(0x8000200000000000), U64(0x0040000000000000) },

2036 { 
U64
(0x0000201008040200), U64(0x0000201008040001), U64(0x0000201008000201), U64(0x0000201000040201), U64(0x0000200008040201), U64(0x0040001008040201), U64(0x8000200000000000), U64(0x0040000000000000) },

2037 { 
U64
(0x0000000000000200), U64(0x0000201008040001), U64(0x0000201008000200), U64(0x0000201000040200), U64(0x0000200008040200), U64(0x0040001008040200), U64(0x8000200000000000), U64(0x0040000000000000) },

2038 { 
U64
(0x0000000000000200), U64(0x0000201008040001), U64(0x0000201008000200), U64(0x0000201000040200), U64(0x0000200008040200), U64(0x0040001008040200), U64(0x8000200000000000), U64(0x0040000000000000) },

2039 { 
U64
(0x0000000000040200), U64(0x0000000000040001), U64(0x0000201008000201), U64(0x0000201000040000), U64(0x0000200008040000), U64(0x0040001008040000), U64(0x8000200000000000), U64(0x0040000000000000) },

2040 { 
U64
(0x0000000000040200), U64(0x0000000000040001), U64(0x0000201008000201), U64(0x0000201000040000), U64(0x0000200008040000), U64(0x0040001008040000), U64(0x8000200000000000), U64(0x0040000000000000) },

2041 { 
U64
(0x0000000000000200), U64(0x0000000000040001), U64(0x0000201008000200), U64(0x0000201000040000), U64(0x0000200008040000), U64(0x0040001008040000), U64(0x8000200000000000), U64(0x0040000000000000) },

2042 { 
U64
(0x0000000000000200), U64(0x0000000000040001), U64(0x0000201008000200), U64(0x0000201000040000), U64(0x0000200008040000), U64(0x0040001008040000), U64(0x8000200000000000), U64(0x0040000000000000) },

2043 { 
U64
(0x0000000008040200), U64(0x0000000008040001), U64(0x0000000008000201), U64(0x0000201000040201), U64(0x0000200008000000), U64(0x0040001008000000), U64(0x8000200000000000), U64(0x0040000000000000) },

2044 { 
U64
(0x0000000008040200), U64(0x0000000008040001), U64(0x0000000008000201), U64(0x0000201000040201), U64(0x0000200008000000), U64(0x0040001008000000), U64(0x8000200000000000), U64(0x0040000000000000) },

2045 { 
U64
(0x0000000000000200), U64(0x0000000008040001), U64(0x0000000008000200), U64(0x0000201000040200), U64(0x0000200008000000), U64(0x0040001008000000), U64(0x8000200000000000), U64(0x0040000000000000) },

2046 { 
U64
(0x0000000000000200), U64(0x0000000008040001), U64(0x0000000008000200), U64(0x0000201000040200), U64(0x0000200008000000), U64(0x0040001008000000), U64(0x8000200000000000), U64(0x0040000000000000) },

2047 { 
U64
(0x0000000000040200), U64(0x0000000000040001), U64(0x0000000008000201), U64(0x0000201000040000), U64(0x0000200008000000), U64(0x0040001008000000), U64(0x8000200000000000), U64(0x0040000000000000) },

2048 { 
U64
(0x0000000000040200), U64(0x0000000000040001), U64(0x0000000008000201), U64(0x0000201000040000), U64(0x0000200008000000), U64(0x0040001008000000), U64(0x8000200000000000), U64(0x0040000000000000) },

2049 { 
U64
(0x0000000000000200), U64(0x0000000000040001), U64(0x0000000008000200), U64(0x0000201000040000), U64(0x0000200008000000), U64(0x0040001008000000), U64(0x8000200000000000), U64(0x0040000000000000) },

2050 { 
U64
(0x0000000000000200), U64(0x0000000000040001), U64(0x0000000008000200), U64(0x0000201000040000), U64(0x0000200008000000), U64(0x0040001008000000), U64(0x8000200000000000), U64(0x0040000000000000) },

2051 { 
U64
(0x0000001008040200), U64(0x0000001008040001), U64(0x0000001008000201), U64(0x0000001000040201), U64(0x0000200008040201), U64(0x0040001000000000), U64(0x8000200000000000), U64(0x0040000000000000) },

2052 { 
U64
(0x0000001008040200), U64(0x0000001008040001), U64(0x0000001008000201), U64(0x0000001000040201), U64(0x0000200008040201), U64(0x0040001000000000), U64(0x8000200000000000), U64(0x0040000000000000) },

2053 { 
U64
(0x0000000000000200), U64(0x0000001008040001), U64(0x0000001008000200), U64(0x0000001000040200), U64(0x0000200008040200), U64(0x0040001000000000), U64(0x8000200000000000), U64(0x0040000000000000) },

2054 { 
U64
(0x0000000000000200), U64(0x0000001008040001), U64(0x0000001008000200), U64(0x0000001000040200), U64(0x0000200008040200), U64(0x0040001000000000), U64(0x8000200000000000), U64(0x0040000000000000) },

2055 { 
U64
(0x0000000000040200), U64(0x0000000000040001), U64(0x0000001008000201), U64(0x0000001000040000), U64(0x0000200008040000), U64(0x0040001000000000), U64(0x8000200000000000), U64(0x0040000000000000) },

2056 { 
U64
(0x0000000000040200), U64(0x0000000000040001), U64(0x0000001008000201), U64(0x0000001000040000), U64(0x0000200008040000), U64(0x0040001000000000), U64(0x8000200000000000), U64(0x0040000000000000) },

2057 { 
U64
(0x0000000000000200), U64(0x0000000000040001), U64(0x0000001008000200), U64(0x0000001000040000), U64(0x0000200008040000), U64(0x0040001000000000), U64(0x8000200000000000), U64(0x0040000000000000) },

2058 { 
U64
(0x0000000000000200), U64(0x0000000000040001), U64(0x0000001008000200), U64(0x0000001000040000), U64(0x0000200008040000), U64(0x0040001000000000), U64(0x8000200000000000), U64(0x0040000000000000) },

2059 { 
U64
(0x0000000008040200), U64(0x0000000008040001), U64(0x0000000008000201), U64(0x0000001000040201), U64(0x0000200008000000), U64(0x0040001000000000), U64(0x8000200000000000), U64(0x0040000000000000) },

2060 { 
U64
(0x0000000008040200), U64(0x0000000008040001), U64(0x0000000008000201), U64(0x0000001000040201), U64(0x0000200008000000), U64(0x0040001000000000), U64(0x8000200000000000), U64(0x0040000000000000) },

2061 { 
U64
(0x0000000000000200), U64(0x0000000008040001), U64(0x0000000008000200), U64(0x0000001000040200), U64(0x0000200008000000), U64(0x0040001000000000), U64(0x8000200000000000), U64(0x0040000000000000) },

2062 { 
U64
(0x0000000000000200), U64(0x0000000008040001), U64(0x0000000008000200), U64(0x0000001000040200), U64(0x0000200008000000), U64(0x0040001000000000), U64(0x8000200000000000), U64(0x0040000000000000) },

2063 { 
U64
(0x0000000000040200), U64(0x0000000000040001), U64(0x0000000008000201), U64(0x0000001000040000), U64(0x0000200008000000), U64(0x0040001000000000), U64(0x8000200000000000), U64(0x0040000000000000) },

2064 { 
U64
(0x0000000000040200), U64(0x0000000000040001), U64(0x0000000008000201), U64(0x0000001000040000), U64(0x0000200008000000), U64(0x0040001000000000), U64(0x8000200000000000), U64(0x0040000000000000) },

2065 { 
U64
(0x0000000000000200), U64(0x0000000000040001), U64(0x0000000008000200), U64(0x0000001000040000), U64(0x0000200008000000), U64(0x0040001000000000), U64(0x8000200000000000), U64(0x0040000000000000) },

2066 { 
U64
(0x0000000000000200), U64(0x0000000000040001), U64(0x0000000008000200), U64(0x0000001000040000), U64(0x0000200008000000), U64(0x0040001000000000), U64(0x8000200000000000), U64(0x0040000000000000) },

2067 { 
U64
(0x8040201008040200), U64(0x8040201008040001), U64(0x8040201008000201), U64(0x8040201000040201), U64(0x8040200008040201), U64(0x8040001008040201), U64(0x8000201008040201), U64(0x0040201008040201) },

2068 { 
U64
(0x8040201008040200), U64(0x8040201008040001), U64(0x8040201008000201), U64(0x8040201000040201), U64(0x8040200008040201), U64(0x8040001008040201), U64(0x8000201008040201), U64(0x0040201008040201) },

2069 { 
U64
(0x0000000000000200), U64(0x8040201008040001), U64(0x8040201008000200), U64(0x8040201000040200), U64(0x8040200008040200), U64(0x8040001008040200), U64(0x8000201008040200), U64(0x0040201008040200) },

2070 { 
U64
(0x0000000000000200), U64(0x8040201008040001), U64(0x8040201008000200), U64(0x8040201000040200), U64(0x8040200008040200), U64(0x8040001008040200), U64(0x8000201008040200), U64(0x0040201008040200) },

2071 { 
U64
(0x0000000000040200), U64(0x0000000000040001), U64(0x8040201008000201), U64(0x8040201000040000), U64(0x8040200008040000), U64(0x8040001008040000), U64(0x8000201008040000), U64(0x0040201008040000) },

2072 { 
U64
(0x0000000000040200), U64(0x0000000000040001), U64(0x8040201008000201), U64(0x8040201000040000), U64(0x8040200008040000), U64(0x8040001008040000), U64(0x8000201008040000), U64(0x0040201008040000) },

2073 { 
U64
(0x0000000000000200), U64(0x0000000000040001), U64(0x8040201008000200), U64(0x8040201000040000), U64(0x8040200008040000), U64(0x8040001008040000), U64(0x8000201008040000), U64(0x0040201008040000) },

2074 { 
U64
(0x0000000000000200), U64(0x0000000000040001), U64(0x8040201008000200), U64(0x8040201000040000), U64(0x8040200008040000), U64(0x8040001008040000), U64(0x8000201008040000), U64(0x0040201008040000) },

2075 { 
U64
(0x0000000008040200), U64(0x0000000008040001), U64(0x0000000008000201), U64(0x8040201000040201), U64(0x8040200008000000), U64(0x8040001008000000), U64(0x8000201008000000), U64(0x0040201008000000) },

2076 { 
U64
(0x0000000008040200), U64(0x0000000008040001), U64(0x0000000008000201), U64(0x8040201000040201), U64(0x8040200008000000), U64(0x8040001008000000), U64(0x8000201008000000), U64(0x0040201008000000) },

2077 { 
U64
(0x0000000000000200), U64(0x0000000008040001), U64(0x0000000008000200), U64(0x8040201000040200), U64(0x8040200008000000), U64(0x8040001008000000), U64(0x8000201008000000), U64(0x0040201008000000) },

2078 { 
U64
(0x0000000000000200), U64(0x0000000008040001), U64(0x0000000008000200), U64(0x8040201000040200), U64(0x8040200008000000), U64(0x8040001008000000), U64(0x8000201008000000), U64(0x0040201008000000) },

2079 { 
U64
(0x0000000000040200), U64(0x0000000000040001), U64(0x0000000008000201), U64(0x8040201000040000), U64(0x8040200008000000), U64(0x8040001008000000), U64(0x8000201008000000), U64(0x0040201008000000) },

2080 { 
U64
(0x0000000000040200), U64(0x0000000000040001), U64(0x0000000008000201), U64(0x8040201000040000), U64(0x8040200008000000), U64(0x8040001008000000), U64(0x8000201008000000), U64(0x0040201008000000) },

2081 { 
U64
(0x0000000000000200), U64(0x0000000000040001), U64(0x0000000008000200), U64(0x8040201000040000), U64(0x8040200008000000), U64(0x8040001008000000), U64(0x8000201008000000), U64(0x0040201008000000) },

2082 { 
U64
(0x0000000000000200), U64(0x0000000000040001), U64(0x0000000008000200), U64(0x8040201000040000), U64(0x8040200008000000), U64(0x8040001008000000), U64(0x8000201008000000), U64(0x0040201008000000) },

2083 { 
U64
(0x0000001008040200), U64(0x0000001008040001), U64(0x0000001008000201), U64(0x0000001000040201), U64(0x8040200008040201), U64(0x8040001000000000), U64(0x8000201000000000), U64(0x0040201000000000) },

2084 { 
U64
(0x0000001008040200), U64(0x0000001008040001), U64(0x0000001008000201), U64(0x0000001000040201), U64(0x8040200008040201), U64(0x8040001000000000), U64(0x8000201000000000), U64(0x0040201000000000) },

2085 { 
U64
(0x0000000000000200), U64(0x0000001008040001), U64(0x0000001008000200), U64(0x0000001000040200), U64(0x8040200008040200), U64(0x8040001000000000), U64(0x8000201000000000), U64(0x0040201000000000) },

2086 { 
U64
(0x0000000000000200), U64(0x0000001008040001), U64(0x0000001008000200), U64(0x0000001000040200), U64(0x8040200008040200), U64(0x8040001000000000), U64(0x8000201000000000), U64(0x0040201000000000) },

2087 { 
U64
(0x0000000000040200), U64(0x0000000000040001), U64(0x0000001008000201), U64(0x0000001000040000), U64(0x8040200008040000), U64(0x8040001000000000), U64(0x8000201000000000), U64(0x0040201000000000) },

2088 { 
U64
(0x0000000000040200), U64(0x0000000000040001), U64(0x0000001008000201), U64(0x0000001000040000), U64(0x8040200008040000), U64(0x8040001000000000), U64(0x8000201000000000), U64(0x0040201000000000) },

2089 { 
U64
(0x0000000000000200), U64(0x0000000000040001), U64(0x0000001008000200), U64(0x0000001000040000), U64(0x8040200008040000), U64(0x8040001000000000), U64(0x8000201000000000), U64(0x0040201000000000) },

2090 { 
U64
(0x0000000000000200), U64(0x0000000000040001), U64(0x0000001008000200), U64(0x0000001000040000), U64(0x8040200008040000), U64(0x8040001000000000), U64(0x8000201000000000), U64(0x0040201000000000) },

2091 { 
U64
(0x0000000008040200), U64(0x0000000008040001), U64(0x0000000008000201), U64(0x0000001000040201), U64(0x8040200008000000), U64(0x8040001000000000), U64(0x8000201000000000), U64(0x0040201000000000) },

2092 { 
U64
(0x0000000008040200), U64(0x0000000008040001), U64(0x0000000008000201), U64(0x0000001000040201), U64(0x8040200008000000), U64(0x8040001000000000), U64(0x8000201000000000), U64(0x0040201000000000) },

2093 { 
U64
(0x0000000000000200), U64(0x0000000008040001), U64(0x0000000008000200), U64(0x0000001000040200), U64(0x8040200008000000), U64(0x8040001000000000), U64(0x8000201000000000), U64(0x0040201000000000) },

2094 { 
U64
(0x0000000000000200), U64(0x0000000008040001), U64(0x0000000008000200), U64(0x0000001000040200), U64(0x8040200008000000), U64(0x8040001000000000), U64(0x8000201000000000), U64(0x0040201000000000) },

2095 { 
U64
(0x0000000000040200), U64(0x0000000000040001), U64(0x0000000008000201), U64(0x0000001000040000), U64(0x8040200008000000), U64(0x8040001000000000), U64(0x8000201000000000), U64(0x0040201000000000) },

2096 { 
U64
(0x0000000000040200), U64(0x0000000000040001), U64(0x0000000008000201), U64(0x0000001000040000), U64(0x8040200008000000), U64(0x8040001000000000), U64(0x8000201000000000), U64(0x0040201000000000) },

2097 { 
U64
(0x0000000000000200), U64(0x0000000000040001), U64(0x0000000008000200), U64(0x0000001000040000), U64(0x8040200008000000), U64(0x8040001000000000), U64(0x8000201000000000), U64(0x0040201000000000) },

2098 { 
U64
(0x0000000000000200), U64(0x0000000000040001), U64(0x0000000008000200), U64(0x0000001000040000), U64(0x8040200008000000), U64(0x8040001000000000), U64(0x8000201000000000), U64(0x0040201000000000) },

2099 { 
U64
(0x0000201008040200), U64(0x0000201008040001), U64(0x0000201008000201), U64(0x0000201000040201), U64(0x0000200008040201), U64(0x8040001008040201), U64(0x8000200000000000), U64(0x0040200000000000) },

2100 { 
U64
(0x0000201008040200), U64(0x0000201008040001), U64(0x0000201008000201), U64(0x0000201000040201), U64(0x0000200008040201), U64(0x8040001008040201), U64(0x8000200000000000), U64(0x0040200000000000) },

2101 { 
U64
(0x0000000000000200), U64(0x0000201008040001), U64(0x0000201008000200), U64(0x0000201000040200), U64(0x0000200008040200), U64(0x8040001008040200), U64(0x8000200000000000), U64(0x0040200000000000) },

2102 { 
U64
(0x0000000000000200), U64(0x0000201008040001), U64(0x0000201008000200), U64(0x0000201000040200), U64(0x0000200008040200), U64(0x8040001008040200), U64(0x8000200000000000), U64(0x0040200000000000) },

2103 { 
U64
(0x0000000000040200), U64(0x0000000000040001), U64(0x0000201008000201), U64(0x0000201000040000), U64(0x0000200008040000), U64(0x8040001008040000), U64(0x8000200000000000), U64(0x0040200000000000) },

2104 { 
U64
(0x0000000000040200), U64(0x0000000000040001), U64(0x0000201008000201), U64(0x0000201000040000), U64(0x0000200008040000), U64(0x8040001008040000), U64(0x8000200000000000), U64(0x0040200000000000) },

2105 { 
U64
(0x0000000000000200), U64(0x0000000000040001), U64(0x0000201008000200), U64(0x0000201000040000), U64(0x0000200008040000), U64(0x8040001008040000), U64(0x8000200000000000), U64(0x0040200000000000) },

2106 { 
U64
(0x0000000000000200), U64(0x0000000000040001), U64(0x0000201008000200), U64(0x0000201000040000), U64(0x0000200008040000), U64(0x8040001008040000), U64(0x8000200000000000), U64(0x0040200000000000) },

2107 { 
U64
(0x0000000008040200), U64(0x0000000008040001), U64(0x0000000008000201), U64(0x0000201000040201), U64(0x0000200008000000), U64(0x8040001008000000), U64(0x8000200000000000), U64(0x0040200000000000) },

2108 { 
U64
(0x0000000008040200), U64(0x0000000008040001), U64(0x0000000008000201), U64(0x0000201000040201), U64(0x0000200008000000), U64(0x8040001008000000), U64(0x8000200000000000), U64(0x0040200000000000) },

2109 { 
U64
(0x0000000000000200), U64(0x0000000008040001), U64(0x0000000008000200), U64(0x0000201000040200), U64(0x0000200008000000), U64(0x8040001008000000), U64(0x8000200000000000), U64(0x0040200000000000) },

2110 { 
U64
(0x0000000000000200), U64(0x0000000008040001), U64(0x0000000008000200), U64(0x0000201000040200), U64(0x0000200008000000), U64(0x8040001008000000), U64(0x8000200000000000), U64(0x0040200000000000) },

2111 { 
U64
(0x0000000000040200), U64(0x0000000000040001), U64(0x0000000008000201), U64(0x0000201000040000), U64(0x0000200008000000), U64(0x8040001008000000), U64(0x8000200000000000), U64(0x0040200000000000) },

2112 { 
U64
(0x0000000000040200), U64(0x0000000000040001), U64(0x0000000008000201), U64(0x0000201000040000), U64(0x0000200008000000), U64(0x8040001008000000), U64(0x8000200000000000), U64(0x0040200000000000) },

2113 { 
U64
(0x0000000000000200), U64(0x0000000000040001), U64(0x0000000008000200), U64(0x0000201000040000), U64(0x0000200008000000), U64(0x8040001008000000), U64(0x8000200000000000), U64(0x0040200000000000) },

2114 { 
U64
(0x0000000000000200), U64(0x0000000000040001), U64(0x0000000008000200), U64(0x0000201000040000), U64(0x0000200008000000), U64(0x8040001008000000), U64(0x8000200000000000), U64(0x0040200000000000) },

2115 { 
U64
(0x0000001008040200), U64(0x0000001008040001), U64(0x0000001008000201), U64(0x0000001000040201), U64(0x0000200008040201), U64(0x8040001000000000), U64(0x8000200000000000), U64(0x0040200000000000) },

2116 { 
U64
(0x0000001008040200), U64(0x0000001008040001), U64(0x0000001008000201), U64(0x0000001000040201), U64(0x0000200008040201), U64(0x8040001000000000), U64(0x8000200000000000), U64(0x0040200000000000) },

2117 { 
U64
(0x0000000000000200), U64(0x0000001008040001), U64(0x0000001008000200), U64(0x0000001000040200), U64(0x0000200008040200), U64(0x8040001000000000), U64(0x8000200000000000), U64(0x0040200000000000) },

2118 { 
U64
(0x0000000000000200), U64(0x0000001008040001), U64(0x0000001008000200), U64(0x0000001000040200), U64(0x0000200008040200), U64(0x8040001000000000), U64(0x8000200000000000), U64(0x0040200000000000) },

2119 { 
U64
(0x0000000000040200), U64(0x0000000000040001), U64(0x0000001008000201), U64(0x0000001000040000), U64(0x0000200008040000), U64(0x8040001000000000), U64(0x8000200000000000), U64(0x0040200000000000) },

2120 { 
U64
(0x0000000000040200), U64(0x0000000000040001), U64(0x0000001008000201), U64(0x0000001000040000), U64(0x0000200008040000), U64(0x8040001000000000), U64(0x8000200000000000), U64(0x0040200000000000) },

2121 { 
U64
(0x0000000000000200), U64(0x0000000000040001), U64(0x0000001008000200), U64(0x0000001000040000), U64(0x0000200008040000), U64(0x8040001000000000), U64(0x8000200000000000), U64(0x0040200000000000) },

2122 { 
U64
(0x0000000000000200), U64(0x0000000000040001), U64(0x0000001008000200), U64(0x0000001000040000), U64(0x0000200008040000), U64(0x8040001000000000), U64(0x8000200000000000), U64(0x0040200000000000) },

2123 { 
U64
(0x0000000008040200), U64(0x0000000008040001), U64(0x0000000008000201), U64(0x0000001000040201), U64(0x0000200008000000), U64(0x8040001000000000), U64(0x8000200000000000), U64(0x0040200000000000) },

2124 { 
U64
(0x0000000008040200), U64(0x0000000008040001), U64(0x0000000008000201), U64(0x0000001000040201), U64(0x0000200008000000), U64(0x8040001000000000), U64(0x8000200000000000), U64(0x0040200000000000) },

2125 { 
U64
(0x0000000000000200), U64(0x0000000008040001), U64(0x0000000008000200), U64(0x0000001000040200), U64(0x0000200008000000), U64(0x8040001000000000), U64(0x8000200000000000), U64(0x0040200000000000) },

2126 { 
U64
(0x0000000000000200), U64(0x0000000008040001), U64(0x0000000008000200), U64(0x0000001000040200), U64(0x0000200008000000), U64(0x8040001000000000), U64(0x8000200000000000), U64(0x0040200000000000) },

2127 { 
U64
(0x0000000000040200), U64(0x0000000000040001), U64(0x0000000008000201), U64(0x0000001000040000), U64(0x0000200008000000), U64(0x8040001000000000), U64(0x8000200000000000), U64(0x0040200000000000) },

2128 { 
U64
(0x0000000000040200), U64(0x0000000000040001), U64(0x0000000008000201), U64(0x0000001000040000), U64(0x0000200008000000), U64(0x8040001000000000), U64(0x8000200000000000), U64(0x0040200000000000) },

2129 { 
U64
(0x0000000000000200), U64(0x0000000000040001), U64(0x0000000008000200), U64(0x0000001000040000), U64(0x0000200008000000), U64(0x8040001000000000), U64(0x8000200000000000), U64(0x0040200000000000) },

2130 { 
U64
(0x0000000000000200), U64(0x0000000000040001), U64(0x0000000008000200), U64(0x0000001000040000), U64(0x0000200008000000), U64(0x8040001000000000), U64(0x8000200000000000), U64(0x0040200000000000) },

2131 { 
U64
(0x0040201008040200), U64(0x0040201008040001), U64(0x0040201008000201), U64(0x0040201000040201), U64(0x0040200008040201), U64(0x0040001008040201), U64(0x8000201008040201), U64(0x0040000000000000) },

2132 { 
U64
(0x0040201008040200), U64(0x0040201008040001), U64(0x0040201008000201), U64(0x0040201000040201), U64(0x0040200008040201), U64(0x0040001008040201), U64(0x8000201008040201), U64(0x0040000000000000) },

2133 { 
U64
(0x0000000000000200), U64(0x0040201008040001), U64(0x0040201008000200), U64(0x0040201000040200), U64(0x0040200008040200), U64(0x0040001008040200), U64(0x8000201008040200), U64(0x0040000000000000) },

2134 { 
U64
(0x0000000000000200), U64(0x0040201008040001), U64(0x0040201008000200), U64(0x0040201000040200), U64(0x0040200008040200), U64(0x0040001008040200), U64(0x8000201008040200), U64(0x0040000000000000) },

2135 { 
U64
(0x0000000000040200), U64(0x0000000000040001), U64(0x0040201008000201), U64(0x0040201000040000), U64(0x0040200008040000), U64(0x0040001008040000), U64(0x8000201008040000), U64(0x0040000000000000) },

2136 { 
U64
(0x0000000000040200), U64(0x0000000000040001), U64(0x0040201008000201), U64(0x0040201000040000), U64(0x0040200008040000), U64(0x0040001008040000), U64(0x8000201008040000), U64(0x0040000000000000) },

2137 { 
U64
(0x0000000000000200), U64(0x0000000000040001), U64(0x0040201008000200), U64(0x0040201000040000), U64(0x0040200008040000), U64(0x0040001008040000), U64(0x8000201008040000), U64(0x0040000000000000) },

2138 { 
U64
(0x0000000000000200), U64(0x0000000000040001), U64(0x0040201008000200), U64(0x0040201000040000), U64(0x0040200008040000), U64(0x0040001008040000), U64(0x8000201008040000), U64(0x0040000000000000) },

2139 { 
U64
(0x0000000008040200), U64(0x0000000008040001), U64(0x0000000008000201), U64(0x0040201000040201), U64(0x0040200008000000), U64(0x0040001008000000), U64(0x8000201008000000), U64(0x0040000000000000) },

2140 { 
U64
(0x0000000008040200), U64(0x0000000008040001), U64(0x0000000008000201), U64(0x0040201000040201), U64(0x0040200008000000), U64(0x0040001008000000), U64(0x8000201008000000), U64(0x0040000000000000) },

2141 { 
U64
(0x0000000000000200), U64(0x0000000008040001), U64(0x0000000008000200), U64(0x0040201000040200), U64(0x0040200008000000), U64(0x0040001008000000), U64(0x8000201008000000), U64(0x0040000000000000) },

2142 { 
U64
(0x0000000000000200), U64(0x0000000008040001), U64(0x0000000008000200), U64(0x0040201000040200), U64(0x0040200008000000), U64(0x0040001008000000), U64(0x8000201008000000), U64(0x0040000000000000) },

2143 { 
U64
(0x0000000000040200), U64(0x0000000000040001), U64(0x0000000008000201), U64(0x0040201000040000), U64(0x0040200008000000), U64(0x0040001008000000), U64(0x8000201008000000), U64(0x0040000000000000) },

2144 { 
U64
(0x0000000000040200), U64(0x0000000000040001), U64(0x0000000008000201), U64(0x0040201000040000), U64(0x0040200008000000), U64(0x0040001008000000), U64(0x8000201008000000), U64(0x0040000000000000) },

2145 { 
U64
(0x0000000000000200), U64(0x0000000000040001), U64(0x0000000008000200), U64(0x0040201000040000), U64(0x0040200008000000), U64(0x0040001008000000), U64(0x8000201008000000), U64(0x0040000000000000) },

2146 { 
U64
(0x0000000000000200), U64(0x0000000000040001), U64(0x0000000008000200), U64(0x0040201000040000), U64(0x0040200008000000), U64(0x0040001008000000), U64(0x8000201008000000), U64(0x0040000000000000) },

2147 { 
U64
(0x0000001008040200), U64(0x0000001008040001), U64(0x0000001008000201), U64(0x0000001000040201), U64(0x0040200008040201), U64(0x0040001000000000), U64(0x8000201000000000), U64(0x0040000000000000) },

2148 { 
U64
(0x0000001008040200), U64(0x0000001008040001), U64(0x0000001008000201), U64(0x0000001000040201), U64(0x0040200008040201), U64(0x0040001000000000), U64(0x8000201000000000), U64(0x0040000000000000) },

2149 { 
U64
(0x0000000000000200), U64(0x0000001008040001), U64(0x0000001008000200), U64(0x0000001000040200), U64(0x0040200008040200), U64(0x0040001000000000), U64(0x8000201000000000), U64(0x0040000000000000) },

2150 { 
U64
(0x0000000000000200), U64(0x0000001008040001), U64(0x0000001008000200), U64(0x0000001000040200), U64(0x0040200008040200), U64(0x0040001000000000), U64(0x8000201000000000), U64(0x0040000000000000) },

2151 { 
U64
(0x0000000000040200), U64(0x0000000000040001), U64(0x0000001008000201), U64(0x0000001000040000), U64(0x0040200008040000), U64(0x0040001000000000), U64(0x8000201000000000), U64(0x0040000000000000) },

2152 { 
U64
(0x0000000000040200), U64(0x0000000000040001), U64(0x0000001008000201), U64(0x0000001000040000), U64(0x0040200008040000), U64(0x0040001000000000), U64(0x8000201000000000), U64(0x0040000000000000) },

2153 { 
U64
(0x0000000000000200), U64(0x0000000000040001), U64(0x0000001008000200), U64(0x0000001000040000), U64(0x0040200008040000), U64(0x0040001000000000), U64(0x8000201000000000), U64(0x0040000000000000) },

2154 { 
U64
(0x0000000000000200), U64(0x0000000000040001), U64(0x0000001008000200), U64(0x0000001000040000), U64(0x0040200008040000), U64(0x0040001000000000), U64(0x8000201000000000), U64(0x0040000000000000) },

2155 { 
U64
(0x0000000008040200), U64(0x0000000008040001), U64(0x0000000008000201), U64(0x0000001000040201), U64(0x0040200008000000), U64(0x0040001000000000), U64(0x8000201000000000), U64(0x0040000000000000) },

2156 { 
U64
(0x0000000008040200), U64(0x0000000008040001), U64(0x0000000008000201), U64(0x0000001000040201), U64(0x0040200008000000), U64(0x0040001000000000), U64(0x8000201000000000), U64(0x0040000000000000) },

2157 { 
U64
(0x0000000000000200), U64(0x0000000008040001), U64(0x0000000008000200), U64(0x0000001000040200), U64(0x0040200008000000), U64(0x0040001000000000), U64(0x8000201000000000), U64(0x0040000000000000) },

2158 { 
U64
(0x0000000000000200), U64(0x0000000008040001), U64(0x0000000008000200), U64(0x0000001000040200), U64(0x0040200008000000), U64(0x0040001000000000), U64(0x8000201000000000), U64(0x0040000000000000) },

2159 { 
U64
(0x0000000000040200), U64(0x0000000000040001), U64(0x0000000008000201), U64(0x0000001000040000), U64(0x0040200008000000), U64(0x0040001000000000), U64(0x8000201000000000), U64(0x0040000000000000) },

2160 { 
U64
(0x0000000000040200), U64(0x0000000000040001), U64(0x0000000008000201), U64(0x0000001000040000), U64(0x0040200008000000), U64(0x0040001000000000), U64(0x8000201000000000), U64(0x0040000000000000) },

2161 { 
U64
(0x0000000000000200), U64(0x0000000000040001), U64(0x0000000008000200), U64(0x0000001000040000), U64(0x0040200008000000), U64(0x0040001000000000), U64(0x8000201000000000), U64(0x0040000000000000) },

2162 { 
U64
(0x0000000000000200), U64(0x0000000000040001), U64(0x0000000008000200), U64(0x0000001000040000), U64(0x0040200008000000), U64(0x0040001000000000), U64(0x8000201000000000), U64(0x0040000000000000) },

2163 { 
U64
(0x0000201008040200), U64(0x0000201008040001), U64(0x0000201008000201), U64(0x0000201000040201), U64(0x0000200008040201), U64(0x0040001008040201), U64(0x8000200000000000), U64(0x0040000000000000) },

2164 { 
U64
(0x0000201008040200), U64(0x0000201008040001), U64(0x0000201008000201), U64(0x0000201000040201), U64(0x0000200008040201), U64(0x0040001008040201), U64(0x8000200000000000), U64(0x0040000000000000) },

2165 { 
U64
(0x0000000000000200), U64(0x0000201008040001), U64(0x0000201008000200), U64(0x0000201000040200), U64(0x0000200008040200), U64(0x0040001008040200), U64(0x8000200000000000), U64(0x0040000000000000) },

2166 { 
U64
(0x0000000000000200), U64(0x0000201008040001), U64(0x0000201008000200), U64(0x0000201000040200), U64(0x0000200008040200), U64(0x0040001008040200), U64(0x8000200000000000), U64(0x0040000000000000) },

2167 { 
U64
(0x0000000000040200), U64(0x0000000000040001), U64(0x0000201008000201), U64(0x0000201000040000), U64(0x0000200008040000), U64(0x0040001008040000), U64(0x8000200000000000), U64(0x0040000000000000) },

2168 { 
U64
(0x0000000000040200), U64(0x0000000000040001), U64(0x0000201008000201), U64(0x0000201000040000), U64(0x0000200008040000), U64(0x0040001008040000), U64(0x8000200000000000), U64(0x0040000000000000) },

2169 { 
U64
(0x0000000000000200), U64(0x0000000000040001), U64(0x0000201008000200), U64(0x0000201000040000), U64(0x0000200008040000), U64(0x0040001008040000), U64(0x8000200000000000), U64(0x0040000000000000) },

2170 { 
U64
(0x0000000000000200), U64(0x0000000000040001), U64(0x0000201008000200), U64(0x0000201000040000), U64(0x0000200008040000), U64(0x0040001008040000), U64(0x8000200000000000), U64(0x0040000000000000) },

2171 { 
U64
(0x0000000008040200), U64(0x0000000008040001), U64(0x0000000008000201), U64(0x0000201000040201), U64(0x0000200008000000), U64(0x0040001008000000), U64(0x8000200000000000), U64(0x0040000000000000) },

2172 { 
U64
(0x0000000008040200), U64(0x0000000008040001), U64(0x0000000008000201), U64(0x0000201000040201), U64(0x0000200008000000), U64(0x0040001008000000), U64(0x8000200000000000), U64(0x0040000000000000) },

2173 { 
U64
(0x0000000000000200), U64(0x0000000008040001), U64(0x0000000008000200), U64(0x0000201000040200), U64(0x0000200008000000), U64(0x0040001008000000), U64(0x8000200000000000), U64(0x0040000000000000) },

2174 { 
U64
(0x0000000000000200), U64(0x0000000008040001), U64(0x0000000008000200), U64(0x0000201000040200), U64(0x0000200008000000), U64(0x0040001008000000), U64(0x8000200000000000), U64(0x0040000000000000) },

2175 { 
U64
(0x0000000000040200), U64(0x0000000000040001), U64(0x0000000008000201), U64(0x0000201000040000), U64(0x0000200008000000), U64(0x0040001008000000), U64(0x8000200000000000), U64(0x0040000000000000) },

2176 { 
U64
(0x0000000000040200), U64(0x0000000000040001), U64(0x0000000008000201), U64(0x0000201000040000), U64(0x0000200008000000), U64(0x0040001008000000), U64(0x8000200000000000), U64(0x0040000000000000) },

2177 { 
U64
(0x0000000000000200), U64(0x0000000000040001), U64(0x0000000008000200), U64(0x0000201000040000), U64(0x0000200008000000), U64(0x0040001008000000), U64(0x8000200000000000), U64(0x0040000000000000) },

2178 { 
U64
(0x0000000000000200), U64(0x0000000000040001), U64(0x0000000008000200), U64(0x0000201000040000), U64(0x0000200008000000), U64(0x0040001008000000), U64(0x8000200000000000), U64(0x0040000000000000) },

2179 { 
U64
(0x0000001008040200), U64(0x0000001008040001), U64(0x0000001008000201), U64(0x0000001000040201), U64(0x0000200008040201), U64(0x0040001000000000), U64(0x8000200000000000), U64(0x0040000000000000) },

2180 { 
U64
(0x0000001008040200), U64(0x0000001008040001), U64(0x0000001008000201), U64(0x0000001000040201), U64(0x0000200008040201), U64(0x0040001000000000), U64(0x8000200000000000), U64(0x0040000000000000) },

2181 { 
U64
(0x0000000000000200), U64(0x0000001008040001), U64(0x0000001008000200), U64(0x0000001000040200), U64(0x0000200008040200), U64(0x0040001000000000), U64(0x8000200000000000), U64(0x0040000000000000) },

2182 { 
U64
(0x0000000000000200), U64(0x0000001008040001), U64(0x0000001008000200), U64(0x0000001000040200), U64(0x0000200008040200), U64(0x0040001000000000), U64(0x8000200000000000), U64(0x0040000000000000) },

2183 { 
U64
(0x0000000000040200), U64(0x0000000000040001), U64(0x0000001008000201), U64(0x0000001000040000), U64(0x0000200008040000), U64(0x0040001000000000), U64(0x8000200000000000), U64(0x0040000000000000) },

2184 { 
U64
(0x0000000000040200), U64(0x0000000000040001), U64(0x0000001008000201), U64(0x0000001000040000), U64(0x0000200008040000), U64(0x0040001000000000), U64(0x8000200000000000), U64(0x0040000000000000) },

2185 { 
U64
(0x0000000000000200), U64(0x0000000000040001), U64(0x0000001008000200), U64(0x0000001000040000), U64(0x0000200008040000), U64(0x0040001000000000), U64(0x8000200000000000), U64(0x0040000000000000) },

2186 { 
U64
(0x0000000000000200), U64(0x0000000000040001), U64(0x0000001008000200), U64(0x0000001000040000), U64(0x0000200008040000), U64(0x0040001000000000), U64(0x8000200000000000), U64(0x0040000000000000) },

2187 { 
U64
(0x0000000008040200), U64(0x0000000008040001), U64(0x0000000008000201), U64(0x0000001000040201), U64(0x0000200008000000), U64(0x0040001000000000), U64(0x8000200000000000), U64(0x0040000000000000) },

2188 { 
U64
(0x0000000008040200), U64(0x0000000008040001), U64(0x0000000008000201), U64(0x0000001000040201), U64(0x0000200008000000), U64(0x0040001000000000), U64(0x8000200000000000), U64(0x0040000000000000) },

2189 { 
U64
(0x0000000000000200), U64(0x0000000008040001), U64(0x0000000008000200), U64(0x0000001000040200), U64(0x0000200008000000), U64(0x0040001000000000), U64(0x8000200000000000), U64(0x0040000000000000) },

2190 { 
U64
(0x0000000000000200), U64(0x0000000008040001), U64(0x0000000008000200), U64(0x0000001000040200), U64(0x0000200008000000), U64(0x0040001000000000), U64(0x8000200000000000), U64(0x0040000000000000) },

2191 { 
U64
(0x0000000000040200), U64(0x0000000000040001), U64(0x0000000008000201), U64(0x0000001000040000), U64(0x0000200008000000), U64(0x0040001000000000), U64(0x8000200000000000), U64(0x0040000000000000) },

2192 { 
U64
(0x0000000000040200), U64(0x0000000000040001), U64(0x0000000008000201), U64(0x0000001000040000), U64(0x0000200008000000), U64(0x0040001000000000), U64(0x8000200000000000), U64(0x0040000000000000) },

2193 { 
U64
(0x0000000000000200), U64(0x0000000000040001), U64(0x0000000008000200), U64(0x0000001000040000), U64(0x0000200008000000), U64(0x0040001000000000), U64(0x8000200000000000), U64(0x0040000000000000) },

2194 { 
U64
(0x0000000000000200), U64(0x0000000000040001), U64(0x0000000008000200), U64(0x0000001000040000), U64(0x0000200008000000), U64(0x0040001000000000), U64(0x8000200000000000), U64(0x0040000000000000) }

2202 *
	gpõ˚«me
[2][6] = {

2207 *
	gsqu¨íame
[64] = {

2217 #i‚de‡
BB_SHIFTFLIP


2219 
bôbﬂrd_t
 
	gbb_squ¨e
[64] = {

2220 
BB
(0x0000000000000001), BB(0x0000000000000002), BB(0x0000000000000004), BB(0x0000000000000008),

2221 
BB
(0x0000000000000010), BB(0x0000000000000020), BB(0x0000000000000040), BB(0x0000000000000080),

2222 
BB
(0x0000000000000100), BB(0x0000000000000200), BB(0x0000000000000400), BB(0x0000000000000800),

2223 
BB
(0x0000000000001000), BB(0x0000000000002000), BB(0x0000000000004000), BB(0x0000000000008000),

2224 
BB
(0x0000000000010000), BB(0x0000000000020000), BB(0x0000000000040000), BB(0x0000000000080000),

2225 
BB
(0x0000000000100000), BB(0x0000000000200000), BB(0x0000000000400000), BB(0x0000000000800000),

2226 
BB
(0x0000000001000000), BB(0x0000000002000000), BB(0x0000000004000000), BB(0x0000000008000000),

2227 
BB
(0x0000000010000000), BB(0x0000000020000000), BB(0x0000000040000000), BB(0x0000000080000000),

2228 
BB
(0x0000000100000000), BB(0x0000000200000000), BB(0x0000000400000000), BB(0x0000000800000000),

2229 
BB
(0x0000001000000000), BB(0x0000002000000000), BB(0x0000004000000000), BB(0x0000008000000000),

2230 
BB
(0x0000010000000000), BB(0x0000020000000000), BB(0x0000040000000000), BB(0x0000080000000000),

2231 
BB
(0x0000100000000000), BB(0x0000200000000000), BB(0x0000400000000000), BB(0x0000800000000000),

2232 
BB
(0x0001000000000000), BB(0x0002000000000000), BB(0x0004000000000000), BB(0x0008000000000000),

2233 
BB
(0x0010000000000000), BB(0x0020000000000000), BB(0x0040000000000000), BB(0x0080000000000000),

2234 
BB
(0x0100000000000000), BB(0x0200000000000000), BB(0x0400000000000000), BB(0x0800000000000000),

2235 
BB
(0x1000000000000000), BB(0x2000000000000000), BB(0x4000000000000000), BB(0x8000000000000000),

2238 
bôbﬂrd_t
 
	gbb_ÆÀx˚±
[64] = {

2239 
BB
(0xfffffffffffffffe), BB(0xfffffffffffffffd), BB(0xfffffffffffffffb), BB(0xfffffffffffffff7),

2240 
BB
(0xffffffffffffffef), BB(0xffffffffffffffdf), BB(0xffffffffffffffbf), BB(0xffffffffffffff7f),

2241 
BB
(0xfffffffffffffeff), BB(0xfffffffffffffdff), BB(0xfffffffffffffbff), BB(0xfffffffffffff7ff),

2242 
BB
(0xffffffffffffefff), BB(0xffffffffffffdfff), BB(0xffffffffffffbfff), BB(0xffffffffffff7fff),

2243 
BB
(0xfffffffffffeffff), BB(0xfffffffffffdffff), BB(0xfffffffffffbffff), BB(0xfffffffffff7ffff),

2244 
BB
(0xffffffffffefffff), BB(0xffffffffffdfffff), BB(0xffffffffffbfffff), BB(0xffffffffff7fffff),

2245 
BB
(0xfffffffffeffffff), BB(0xfffffffffdffffff), BB(0xfffffffffbffffff), BB(0xfffffffff7ffffff),

2246 
BB
(0xffffffffefffffff), BB(0xffffffffdfffffff), BB(0xffffffffbfffffff), BB(0xffffffff7fffffff),

2247 
BB
(0xfffffffeffffffff), BB(0xfffffffdffffffff), BB(0xfffffffbffffffff), BB(0xfffffff7ffffffff),

2248 
BB
(0xffffffefffffffff), BB(0xffffffdfffffffff), BB(0xffffffbfffffffff), BB(0xffffff7fffffffff),

2249 
BB
(0xfffffeffffffffff), BB(0xfffffdffffffffff), BB(0xfffffbffffffffff), BB(0xfffff7ffffffffff),

2250 
BB
(0xffffefffffffffff), BB(0xffffdfffffffffff), BB(0xffffbfffffffffff), BB(0xffff7fffffffffff),

2251 
BB
(0xfffeffffffffffff), BB(0xfffdffffffffffff), BB(0xfffbffffffffffff), BB(0xfff7ffffffffffff),

2252 
BB
(0xffefffffffffffff), BB(0xffdfffffffffffff), BB(0xffbfffffffffffff), BB(0xff7fffffffffffff),

2253 
BB
(0xfeffffffffffffff), BB(0xfdffffffffffffff), BB(0xfbffffffffffffff), BB(0xf7ffffffffffffff),

2254 
BB
(0xefffffffffffffff), BB(0xdfffffffffffffff), BB(0xbfffffffffffffff), BB(0x7fffffffffffffff),

2259 
bôbﬂrd_t
 
	gˇ°À_˛órsqu¨es
[2][2] = {

2261 { 
BB
(0x000000000000000e), BB(0x0000000000000060) },

2262 { 
BB
(0x0e00000000000000), BB(0x6000000000000000) }

2265 
bôbﬂrd_t
 
	gˇ°À_ß„squ¨es
[2][2] = {

2267 { 
BB
(0x000000000000001c), BB(0x0000000000000070) },

2268 { 
BB
(0x1c00000000000000), BB(0x7000000000000000) }

2272 
bôbﬂrd_t
 
	gbb_adja˚¡cﬁs
[8] = {

2273 
BB_FILEB
,

2274 
BB_FILEA
 | 
BB_FILEC
,

2275 
BB_FILEB
 | 
BB_FILED
,

2276 
BB_FILEC
 | 
BB_FILEE
,

2277 
BB_FILED
 | 
BB_FILEF
,

2278 
BB_FILEE
 | 
BB_FILEG
,

2279 
BB_FILEF
 | 
BB_FILEH
,

2280 
BB_FILEG


2283 
bôbﬂrd_t
 
	gbb_∑s£d∑wnmask
[2][64] = {

2286 
BB
(0x0000000000000000), BB(0x0000000000000000), BB(0x0000000000000000), BB(0x0000000000000000), BB(0x0000000000000000), BB(0x0000000000000000), BB(0x0000000000000000), BB(0x0000000000000000),

2287 
BB
(0x0303030303030000), BB(0x0707070707070000), BB(0x0e0e0e0e0e0e0000), BB(0x1c1c1c1c1c1c0000), BB(0x3838383838380000), BB(0x7070707070700000), BB(0xe0e0e0e0e0e00000), BB(0xc0c0c0c0c0c00000),

2288 
BB
(0x0303030303000000), BB(0x0707070707000000), BB(0x0e0e0e0e0e000000), BB(0x1c1c1c1c1c000000), BB(0x3838383838000000), BB(0x7070707070000000), BB(0xe0e0e0e0e0000000), BB(0xc0c0c0c0c0000000),

2289 
BB
(0x0303030300000000), BB(0x0707070700000000), BB(0x0e0e0e0e00000000), BB(0x1c1c1c1c00000000), BB(0x3838383800000000), BB(0x7070707000000000), BB(0xe0e0e0e000000000), BB(0xc0c0c0c000000000),

2290 
BB
(0x0303030000000000), BB(0x0707070000000000), BB(0x0e0e0e0000000000), BB(0x1c1c1c0000000000), BB(0x3838380000000000), BB(0x7070700000000000), BB(0xe0e0e00000000000), BB(0xc0c0c00000000000),

2291 
BB
(0x0303000000000000), BB(0x0707000000000000), BB(0x0e0e000000000000), BB(0x1c1c000000000000), BB(0x3838000000000000), BB(0x7070000000000000), BB(0xe0e0000000000000), BB(0xc0c0000000000000),

2292 
BB
(0x0000000000000000), BB(0x0000000000000000), BB(0x0000000000000000), BB(0x0000000000000000), BB(0x0000000000000000), BB(0x0000000000000000), BB(0x0000000000000000), BB(0x0000000000000000),

2293 
BB
(0x0000000000000000), BB(0x0000000000000000), BB(0x0000000000000000), BB(0x0000000000000000), BB(0x0000000000000000), BB(0x0000000000000000), BB(0x0000000000000000), BB(0x0000000000000000)

2297 
BB
(0x0000000000000000), BB(0x0000000000000000), BB(0x0000000000000000), BB(0x0000000000000000), BB(0x0000000000000000), BB(0x0000000000000000), BB(0x0000000000000000), BB(0x0000000000000000),

2298 
BB
(0x0000000000000000), BB(0x0000000000000000), BB(0x0000000000000000), BB(0x0000000000000000), BB(0x0000000000000000), BB(0x0000000000000000), BB(0x0000000000000000), BB(0x0000000000000000),

2299 
BB
(0x0000000000000303), BB(0x0000000000000707), BB(0x0000000000000e0e), BB(0x0000000000001c1c), BB(0x0000000000003838), BB(0x0000000000007070), BB(0x000000000000e0e0), BB(0x000000000000c0c0),

2300 
BB
(0x0000000000030303), BB(0x0000000000070707), BB(0x00000000000e0e0e), BB(0x00000000001c1c1c), BB(0x0000000000383838), BB(0x0000000000707070), BB(0x0000000000e0e0e0), BB(0x0000000000c0c0c0),

2301 
BB
(0x0000000003030303), BB(0x0000000007070707), BB(0x000000000e0e0e0e), BB(0x000000001c1c1c1c), BB(0x0000000038383838), BB(0x0000000070707070), BB(0x00000000e0e0e0e0), BB(0x00000000c0c0c0c0),

2302 
BB
(0x0000000303030303), BB(0x0000000707070707), BB(0x0000000e0e0e0e0e), BB(0x0000001c1c1c1c1c), BB(0x0000003838383838), BB(0x0000007070707070), BB(0x000000e0e0e0e0e0), BB(0x000000c0c0c0c0c0),

2303 
BB
(0x0000030303030303), BB(0x0000070707070707), BB(0x00000e0e0e0e0e0e), BB(0x00001c1c1c1c1c1c), BB(0x0000383838383838), BB(0x0000707070707070), BB(0x0000e0e0e0e0e0e0), BB(0x0000c0c0c0c0c0c0),

2304 
BB
(0x0000000000000000), BB(0x0000000000000000), BB(0x0000000000000000), BB(0x0000000000000000), BB(0x0000000000000000), BB(0x0000000000000000), BB(0x0000000000000000), BB(0x0000000000000000)

2312 
	#ROT90SQUAREINDEX
(
s
Ë
rŸ90squ¨eödex
[s]

	)

2313 
	grŸ90squ¨eödex
[64] = {

2323 
	#ROT45SQUAREINDEX
(
s
Ë
rŸ45squ¨eödex
[s]

	)

2324 
	grŸ45squ¨eödex
[64] = {

2334 
	#ROT315SQUAREINDEX
(
s
Ë
rŸ315squ¨eödex
[s]

	)

2335 
	grŸ315squ¨eödex
[64] = {

2347 
öt16_t
 
evÆ_põ˚vÆue
[6];

2351 
	#ZOBRIST_DEFAULT_HASH
 0

	)

2355 
zobri°_t
 
	gzobri°_põ˚
[2][6][64];

2357 
zobri°_t
 
	gzobri°_tomove
;

2360 
zobri°_t
 
	gzobri°_ï
[64];

2363 
zobri°_t
 
	gzobri°_ˇ°À
[2][2];

2366 
	gzobri°_öôülized
 = 0;

2371 
	$öô_zobri°
()

2373 
i
, 
j
, 
k
;

2376 i‡(
zobri°_öôülized
)

2382 
i
 = 0; i < 2; i++)

2384 
j
 = 0; j < 6; j++)

2386 
k
 = 0; k < 64; k++)

2388 
zobri°_põ˚
[
i
][
j
][
k
] = (
zobri°_t
)
	`ønd64
();

2394 
zobri°_tomove
 = (
zobri°_t
)
	`ønd64
();

2397 
i
 = 0; i < 64; i++)

2399 
zobri°_ï
[
i
] = (
zobri°_t
)
	`ønd64
();

2403 
zobri°_ˇ°À
[0][0] = (
zobri°_t
)
	`ønd64
();

2404 
zobri°_ˇ°À
[0][1] = (
zobri°_t
)
	`ønd64
();

2405 
zobri°_ˇ°À
[1][0] = (
zobri°_t
)
	`ønd64
();

2406 
zobri°_ˇ°À
[1][1] = (
zobri°_t
)
	`ønd64
();

2408 
zobri°_öôülized
 = 1;

2410 
	}
}

2417 
	$zobri°_gí
(
bﬂrd_t
 *
bﬂrd
)

2419 
cﬁ‹
;

2420 
põ˚_t
 
põ˚
;

2421 
squ¨e_t
 
squ¨e
;

2423 
i
, 
j
;

2424 
bôbﬂrd_t
 
pos
;

2425 
zobri°_t
 
hash
 = 
ZOBRIST_DEFAULT_HASH
;

2427 i‡(
bﬂrd
 =
NULL
)

2431 i‡(!
zobri°_öôülized
)

2433 
	`öô_zobri°
();

2437 
cﬁ‹
 = 0; color < 2; color++)

2439 
põ˚
 = 0;Öiece < 6;Öiece++)

2441 
pos
 = 
bﬂrd
->pos[
cﬁ‹
][
põ˚
];

2442 
pos
)

2445 
squ¨e
 = 
	`BITSCAN
(
pos
);

2447 
hash
 ^
zobri°_põ˚
[
cﬁ‹
][
põ˚
][
squ¨e
];

2449 
pos
 &
	`BB_ALLEXCEPT
(
squ¨e
);

2455 
hash
 ^
zobri°_ï
[
bﬂrd
->
ï
];

2457 
i
 = 0; i < 2; i++)

2459 
j
 = 0; j < 2; j++)

2461 i‡(
bﬂrd
->
ˇ°À
[
i
][
j
])

2463 
hash
 ^
zobri°_ˇ°À
[
i
][
j
];

2468 i‡(
bﬂrd
->
tomove
 =
WHITE
)

2470 
hash
 ^
zobri°_tomove
;

2473 
bﬂrd
->
hash
 = hash;

2475 
	}
}

2480 
bﬂrd_addmoves_∑wn
(
bﬂrd_t
 *, 
squ¨e_t
, , 
movñi°_t
 *);

2481 
bﬂrd_addmoves_ï
(
bﬂrd_t
 *, , 
movñi°_t
 *);

2482 
bﬂrd_addmoves_kög
(
bﬂrd_t
 *, 
squ¨e_t
, , 
movñi°_t
 *);

2483 
bﬂrd_addmoves
(
bﬂrd_t
 *, 
squ¨e_t
, 
põ˚_t
, , 
movñi°_t
 *);

2485 
bﬂrd_addˇ±uªs_∑wn
(
bﬂrd_t
 *, 
squ¨e_t
, , 
movñi°_t
 *);

2486 
bﬂrd_addˇ±uªs_kög
(
bﬂrd_t
 *, 
squ¨e_t
, , 
movñi°_t
 *);

2487 
bﬂrd_addˇ±uªs
(
bﬂrd_t
 *, 
squ¨e_t
, 
põ˚_t
, , 
movñi°_t
 *);

2488 
bﬂrd_toggÀpõ˚
(
bﬂrd_t
 *, 
squ¨e_t
, , 
põ˚_t
);

2489 
bﬂrd_ªgíî©ëhª©íed
(
bﬂrd_t
 *);

2494 
bﬂrd_t
 *
	$bﬂrd_öô
()

2496 
bﬂrd_t
 *
bﬂrd
 = 
	`mÆloc
((board_t));

2498 
bﬂrd
->
pos
[
WHITE
][
PAWN
] = 
BB_RANK2
;

2499 
bﬂrd
->
pos
[
WHITE
][
KNIGHT
] = 
	`BB_SQUARE
(
B1
Ë| BB_SQUARE(
G1
);

2500 
bﬂrd
->
pos
[
WHITE
][
BISHOP
] = 
	`BB_SQUARE
(
C1
Ë| BB_SQUARE(
F1
);

2501 
bﬂrd
->
pos
[
WHITE
][
ROOK
] = 
	`BB_SQUARE
(
A1
Ë| BB_SQUARE(
H1
);

2502 
bﬂrd
->
pos
[
WHITE
][
QUEEN
] = 
	`BB_SQUARE
(
D1
);

2503 
bﬂrd
->
pos
[
WHITE
][
KING
] = 
	`BB_SQUARE
(
E1
);

2504 
bﬂrd
->
pos
[
BLACK
][
PAWN
] = 
BB_RANK7
;

2505 
bﬂrd
->
pos
[
BLACK
][
KNIGHT
] = 
	`BB_SQUARE
(
B8
Ë| BB_SQUARE(
G8
);

2506 
bﬂrd
->
pos
[
BLACK
][
BISHOP
] = 
	`BB_SQUARE
(
C8
Ë| BB_SQUARE(
F8
);

2507 
bﬂrd
->
pos
[
BLACK
][
ROOK
] = 
	`BB_SQUARE
(
A8
Ë| BB_SQUARE(
H8
);

2508 
bﬂrd
->
pos
[
BLACK
][
QUEEN
] = 
	`BB_SQUARE
(
D8
);

2509 
bﬂrd
->
pos
[
BLACK
][
KING
] = 
	`BB_SQUARE
(
E8
);

2511 
bﬂrd
->
põ˚sofcﬁ‹
[
WHITE
] = 
BB_RANK1
 | 
BB_RANK2
;

2512 
bﬂrd
->
põ˚sofcﬁ‹
[
BLACK
] = 
BB_RANK8
 | 
BB_RANK7
;

2514 
bﬂrd
->
©èckedby
[
WHITE
] = 
BB_RANK3
 | 
BB_RANK2
 | (
BB_RANK1
 ^ 
	`BB_SQUARE
(
A1
Ë^ BB_SQUARE(
H1
));

2515 
bﬂrd
->
©èckedby
[
BLACK
] = 
BB_RANK6
 | 
BB_RANK7
 | (
BB_RANK8
 ^ 
	`BB_SQUARE
(
A8
Ë^ BB_SQUARE(
H8
));

2517 
bﬂrd
->
occupõd
 = 
BB_RANK1
 | 
BB_RANK2
 | 
BB_RANK7
 | 
BB_RANK8
;

2518 
bﬂrd
->
occupõd90
 = 
BB_FILEA
 | 
BB_FILEB
 | 
BB_FILEG
 | 
BB_FILEH
;

2521 
bﬂrd
->
occupõd45
 = 
	`BB
(0xecc61c3c3c386337);

2522 
bﬂrd
->
occupõd315
 = 
	`BB
(0xfb31861c38618cdf);

2524 
bﬂrd
->
ï
 = 0;

2525 
bﬂrd
->
ˇ°À
[
WHITE
][
QUEENSIDE
] = 1;

2526 
bﬂrd
->
ˇ°À
[
WHITE
][
KINGSIDE
] = 1;

2527 
bﬂrd
->
ˇ°À
[
BLACK
][
QUEENSIDE
] = 1;

2528 
bﬂrd
->
ˇ°À
[
BLACK
][
KINGSIDE
] = 1;

2529 
bﬂrd
->
hasˇ°Àd
[
WHITE
] = 0;

2530 
bﬂrd
->
hasˇ°Àd
[
BLACK
] = 0;

2531 
bﬂrd
->
tomove
 = 
WHITE
;

2532 
bﬂrd
->
hÆfmoves
 = 0;

2533 
bﬂrd
->
moves
 = 0;

2534 
bﬂrd
->
ªps
 = 0;

2536 
bﬂrd
->
m©îül
[
WHITE
] = (8 * 
evÆ_põ˚vÆue
[
PAWN
]) +

2537 (2 * 
evÆ_põ˚vÆue
[
KNIGHT
]) +

2538 (2 * 
evÆ_põ˚vÆue
[
BISHOP
]) +

2539 (2 * 
evÆ_põ˚vÆue
[
ROOK
]) +

2540 (
evÆ_põ˚vÆue
[
QUEEN
]) +

2541 (
evÆ_põ˚vÆue
[
KING
]);

2542 
bﬂrd
->
m©îül
[
BLACK
] = bﬂrd->m©îül[
WHITE
];

2544 
	`zobri°_gí
(
bﬂrd
);

2546  
bﬂrd
;

2547 
	}
}

2552 
	$bﬂrd_de°roy
(
bﬂrd_t
 *
bﬂrd
)

2554 i‡(
bﬂrd
)

2556 
	`‰ì
(
bﬂrd
);

2558 
	}
}

2565 
	#FEN_MAX_LENGTH
 85

	)

2566 *
	$bﬂrd_„n
(
bﬂrd_t
 *
bﬂrd
)

2568 *
„n
;

2569 
row
, 
cﬁ
;

2570 
em±ysqu¨es
[] = "0";

2571 
hÆfmove
[8];

2572 
põ˚_t
 
põ˚
;

2573 
cﬁ‹
;

2574 
em±y_íd_of_löe
;

2576 i‡(
bﬂrd
 =
NULL
)

2578  
NULL
;

2581 
„n
 = 
	`mÆloc
(
FEN_MAX_LENGTH
 + 1);

2582 
„n
[0] = 0;

2584 
row
 = 7;Ñow >= 0;Ñow--)

2586 
em±ysqu¨es
[0] = '0';

2587 
em±y_íd_of_löe
 = 0;

2589 
cﬁ
 = 0; col < 8; col++)

2591 
cﬁ‹
 = 0;

2592 
põ˚
 = 
	`bﬂrd_põ˚©squ¨e
(
bﬂrd
, 
	`SQUARE
(
cﬁ
,
row
), &
cﬁ‹
);

2593 i‡(
põ˚
 =(
põ˚_t
)-1)

2595 
em±ysqu¨es
[0]++;

2596 i‡(
cﬁ
 == 7)

2598 
em±y_íd_of_löe
 = 1;

2604 i‡(
em±ysqu¨es
[0] != '0')

2606 
	`°rˇt
(
„n
, 
em±ysqu¨es
);

2607 
em±ysqu¨es
[0] = '0';

2609 
	`°rˇt
(
„n
, 
põ˚«me
[
cﬁ‹
][
põ˚
]);

2613 i‡(
em±y_íd_of_löe
)

2615 
	`°rˇt
(
„n
, 
em±ysqu¨es
);

2618 
	`°rˇt
(
„n
, ((
row
 > 0) ? "/" : " "));

2621 
	`°rˇt
(
„n
, ((
bﬂrd
->
tomove
 =
WHITE
) ? "w " : "b "));

2623 i‡(!(
bﬂrd
->
ˇ°À
[
WHITE
][
QUEENSIDE
] || bﬂrd->ˇ°À[WHITE][
KINGSIDE
] ||

2624 
bﬂrd
->
ˇ°À
[
BLACK
][
QUEENSIDE
] || bﬂrd->ˇ°À[BLACK][
KINGSIDE
]))

2626 
	`°rˇt
(
„n
, "-");

2630 i‡(
bﬂrd
->
ˇ°À
[
WHITE
][
KINGSIDE
]Ë
	`°rˇt
(
„n
, "K");

2631 i‡(
bﬂrd
->
ˇ°À
[
WHITE
][
QUEENSIDE
]Ë
	`°rˇt
(
„n
, "Q");

2632 i‡(
bﬂrd
->
ˇ°À
[
BLACK
][
KINGSIDE
]Ë
	`°rˇt
(
„n
, "k");

2633 i‡(
bﬂrd
->
ˇ°À
[
BLACK
][
QUEENSIDE
]Ë
	`°rˇt
(
„n
, "q");

2635 
	`°rˇt
(
„n
, " ");

2637 
	`°rˇt
(
„n
, ((
bﬂrd
->
ï
 !0Ë? 
squ¨íame
[board->ep] : "-"));

2638 
	`°rˇt
(
„n
, " ");

2640 
	`•rötf
(
hÆfmove
, "%d %d", 
bﬂrd
->
hÆfmoves
, (bﬂrd->
moves
 + 1)/2);

2641 
	`°rˇt
(
„n
, 
hÆfmove
);

2643  
„n
;

2644 
	}
}

2653 
põ˚_t
 
	$bﬂrd_põ˚©squ¨e
(
bﬂrd_t
 *
bﬂrd
, 
squ¨e_t
 
squ¨e
, *
c
)

2655 
bôbﬂrd_t
 
mask
;

2656 
põ˚_t
 
põ˚
;

2657 
cﬁ‹
;

2659 i‡(
bﬂrd
 =
NULL
 || 
squ¨e
 > 63)

2664 
mask
 = 
	`BB_SQUARE
(
squ¨e
);

2667 i‡(
bﬂrd
->
põ˚sofcﬁ‹
[
WHITE
] & 
mask
)

2669 
cﬁ‹
 = 
WHITE
;

2671 i‡(
bﬂrd
->
põ˚sofcﬁ‹
[
BLACK
] & 
mask
)

2673 
cﬁ‹
 = 
BLACK
;

2680 i‡(
c
 !
NULL
)

2682 *
c
 = 
cﬁ‹
;

2686 
põ˚
 = 0;

2687 !(
bﬂrd
->
pos
[
cﬁ‹
][
põ˚
] & 
mask
))

2689 
põ˚
++;

2691  
põ˚
;

2692 
	}
}

2697 
	$bﬂrd_öcheck
(
bﬂrd_t
 *
bﬂrd
)

2699  
	`bﬂrd_cﬁ‹öcheck
(
bﬂrd
, bﬂrd->
tomove
);

2700 
	}
}

2705 
	$bﬂrd_cﬁ‹öcheck
(
bﬂrd_t
 *
bﬂrd
, 
cﬁ‹
)

2707  !!(
bﬂrd
->
pos
[
cﬁ‹
][
KING
] & bﬂrd->
©èckedby
[
	`OTHERCOLOR
(color)]);

2708 
	}
}

2716 
	$bﬂrd_m©ed
(
bﬂrd_t
 *
bﬂrd
)

2718 
ªsu…
;

2719 
movñi°_t
 
moves
;

2720 
move_t
 
move
;

2721 
cﬁ‹
;

2723 
cﬁ‹
 = 
bﬂrd
->
tomove
;

2724 
ªsu…
 = 
	`bﬂrd_cﬁ‹öcheck
(
bﬂrd
, 
cﬁ‹
) ?

2725 
BOARD_CHECKMATED
 : 
BOARD_STALEMATED
;

2726 
	`bﬂrd_gíî©emoves
(
bﬂrd
, &
moves
);

2729 !
	`movñi°_i£m±y
(&
moves
))

2731 
move
 = 
	`movñi°_ªmove_max
(&
moves
);

2733 
	`bﬂrd_≠∂ymove
(
bﬂrd
, 
move
);

2734 i‡(!
	`bﬂrd_cﬁ‹öcheck
(
bﬂrd
, 
cﬁ‹
))

2737 
	`bﬂrd_undomove
(
bﬂrd
, 
move
);

2738 
ªsu…
 = 0;

2741 
	`bﬂrd_undomove
(
bﬂrd
, 
move
);

2743 
	`movñi°_de°roy
(&
moves
);

2744  
ªsu…
;

2745 
	}
}

2750 
	$bﬂrd_∑w≈as£d
(
bﬂrd_t
 *
bﬂrd
, 
squ¨e_t
 
squ¨e
, 
cﬁ‹
)

2752  !(
bb_∑s£d∑wnmask
[
cﬁ‹
][
squ¨e
] &

2753 
bﬂrd
->
pos
[
	`OTHERCOLOR
(
cﬁ‹
)][
PAWN
]);

2754 
	}
}

2762 
	$bﬂrd_squ¨eißâacked
(
bﬂrd_t
 *
bﬂrd
, 
squ¨e_t
 
squ¨e
, 
cﬁ‹
)

2764  !!(
	`BB_SQUARE
(
squ¨e
Ë& 
bﬂrd
->
©èckedby
[
cﬁ‹
]);

2765 
	}
}

2771 
	$bﬂrd_squ¨eßª©ècked
(
bﬂrd_t
 *
bﬂrd
, 
bôbﬂrd_t
 
squ¨es
, 
cﬁ‹
)

2773  !!(
squ¨es
 & 
bﬂrd
->
©èckedby
[
cﬁ‹
]);

2774 
	}
}

2801 
bôbﬂrd_t
 
	$bﬂrd_©ècks‰om
(
bﬂrd_t
 *
bﬂrd
, 
squ¨e_t
 
squ¨e
, 
põ˚_t
 
põ˚
, 
cﬁ‹
)

2804 
shi·amou¡
;

2805 
düg
;

2806 
bôbﬂrd_t
 
movemask
;

2807 
bôbﬂrd_t
 
row©k
, 
cﬁ©k
;

2808 
bôbﬂrd_t
 
düg45©ècks
, 
düg315©ècks
;

2811 
põ˚
)

2813 
PAWN
:

2814  
∑w«âacks
[
cﬁ‹
][
squ¨e
];

2815 
KNIGHT
:

2816  
knighèâacks
[
squ¨e
];

2817 
BISHOP
:

2819 
düg
 = 
rŸ45dügödex
[
squ¨e
];

2820 
movemask
 = 
rŸ45©ècks
[(
bﬂrd
->
occupõd45
 >> 
rŸ45ödex_shi·amou¡right
[
düg
]) & 0xFF]

2821 [
	`COL
(
squ¨e
)];

2822 
düg45©ècks
 = (
movemask
 << 
rŸªsu…_shi·amou¡À·
[
düg
])

2823 >> 
rŸªsu…_shi·amou¡right
[
düg
];

2825 
düg
 = 
rŸ315dügödex
[
squ¨e
];

2826 
movemask
 = 
rŸ315©ècks
[((
bﬂrd
->
occupõd315
 << 
rŸ315ödex_shi·amou¡À·
[
düg
]Ë>> 
rŸ315ödex_shi·amou¡right
[diag]) & 0xFF]

2827 [
	`COL
(
squ¨e
)];

2828 
düg315©ècks
 = (
movemask
 << 
rŸªsu…_shi·amou¡À·
[
düg
])

2829 >> 
rŸªsu…_shi·amou¡right
[
düg
];

2831  (
düg45©ècks
 | 
düg315©ècks
);

2832 
ROOK
:

2834 
shi·amou¡
 = 8 * 
	`ROW
(
squ¨e
);

2835 
movemask
 = 
row©ècks
[(
bﬂrd
->
occupõd
 >> 
shi·amou¡
Ë& 0xFF][
	`COL
(
squ¨e
)];

2836 
row©k
 = 
movemask
 << 
shi·amou¡
;

2838 
shi·amou¡
 = 
	`COL
(
squ¨e
);

2839 
movemask
 = 
cﬁ©ècks
[(
bﬂrd
->
occupõd90
 >> (
shi·amou¡
 * 8)Ë& 0xFF][
	`ROW
(
squ¨e
)];

2840 
cﬁ©k
 = 
movemask
 << 
shi·amou¡
;

2842  (
row©k
 | 
cﬁ©k
);

2843 
QUEEN
:

2844  
	`bﬂrd_©ècks‰om
(
bﬂrd
, 
squ¨e
, 
BISHOP
, 
cﬁ‹
) |

2845 
	`bﬂrd_©ècks‰om
(
bﬂrd
, 
squ¨e
, 
ROOK
, 
cﬁ‹
);

2846 
KING
:

2847  
kög©ècks
[
squ¨e
];

2850 
	`∑nic
("InvalidÖiece!");

2851  
	`BB
(0x0);

2852 
	}
}

2858 
bôbﬂrd_t
 
	$bﬂrd_∑w≈ushes‰om
(
bﬂrd_t
 *
bﬂrd
, 
squ¨e_t
 
squ¨e
, 
cﬁ‹
)

2860 
bôbﬂrd_t
 
moves
, 
em±ysqu¨es
;

2862 
em±ysqu¨es
 = ~(
bﬂrd
->
occupõd
);

2863 
moves
 = 
∑wnmoves
[
cﬁ‹
][
squ¨e
] & 
em±ysqu¨es
;

2865 i‡(
moves
)

2867 i‡(
cﬁ‹
 =
WHITE
)

2869 i‡(
	`ROW
(
squ¨e
Ë=
RANK_2
)

2871 
moves
 |
∑wnmoves
[
cﬁ‹
][
squ¨e
 + 8] & 
em±ysqu¨es
;

2874 i‡(
	`ROW
(
squ¨e
Ë=
RANK_7
)

2876 
moves
 |
∑wnmoves
[
cﬁ‹
][
squ¨e
 - 8] & 
em±ysqu¨es
;

2879  
moves
;

2880 
	}
}

2893 
	$bﬂrd_gíî©emoves
(
bﬂrd_t
 *
bﬂrd
, 
movñi°_t
 *
ml
)

2895 
bôbﬂrd_t
 
posôi⁄
;

2896 
põ˚_t
 
põ˚
;

2897 
squ¨e_t
 
squ¨e
;

2898 
cﬁ‹
;

2900 
	`as£π
(
bﬂrd
);

2902 
cﬁ‹
 = 
bﬂrd
->
tomove
;

2903 
	`movñi°_öô
(
ml
);

2905 i‡(
bﬂrd
->
ï
)

2907 
	`bﬂrd_addmoves_ï
(
bﬂrd
, 
cﬁ‹
, 
ml
);

2910 
põ˚
 = 0;Öiece < 6;Öiece++)

2912 
posôi⁄
 = 
bﬂrd
->
pos
[
cﬁ‹
][
põ˚
];

2913 
posôi⁄
)

2916 
squ¨e
 = 
	`BITSCAN
(
posôi⁄
);

2918 
posôi⁄
 ^
	`BB_SQUARE
(
squ¨e
);

2920 
põ˚
)

2922 
PAWN
:

2923 
	`bﬂrd_addmoves_∑wn
(
bﬂrd
, 
squ¨e
, 
cﬁ‹
, 
ml
);

2925 
KING
:

2926 
	`bﬂrd_addmoves_kög
(
bﬂrd
, 
squ¨e
, 
cﬁ‹
, 
ml
);

2931 
	`bﬂrd_addmoves
(
bﬂrd
, 
squ¨e
, 
põ˚
, 
cﬁ‹
, 
ml
);

2936 
	}
}

2943 
	$bﬂrd_addmoves_∑wn
(
bﬂrd_t
 *
bﬂrd
, 
squ¨e_t
 
squ¨e
, 
cﬁ‹
,

2944 
movñi°_t
 *
ml
)

2946 
bôbﬂrd_t
 
moves
;

2947 
squ¨e_t
 
de°squ¨e
;

2948 
põ˚_t
 
ˇ±põ˚
;

2949 
move_t
 
move
;

2952 
moves
 = 
∑w«âacks
[
cﬁ‹
][
squ¨e
] &

2953 
bﬂrd
->
põ˚sofcﬁ‹
[
	`OTHERCOLOR
(
cﬁ‹
)];

2954 
moves
)

2956 
de°squ¨e
 = 
	`BITSCAN
(
moves
);

2957 
moves
 ^
	`BB_SQUARE
(
de°squ¨e
);

2958 
ˇ±põ˚
 = 
	`bﬂrd_põ˚©squ¨e
(
bﬂrd
, 
de°squ¨e
, 
NULL
);

2959 
move
 = (
squ¨e
 << 
MOV_INDEX_SRC
) |

2960 (
de°squ¨e
 << 
MOV_INDEX_DEST
) |

2961 (
cﬁ‹
 << 
MOV_INDEX_COLOR
) |

2962 (0x1 << 
MOV_INDEX_CAPT
) |

2963 (
ˇ±põ˚
 << 
MOV_INDEX_CAPTPC
) |

2964 (
PAWN
 << 
MOV_INDEX_PIECE
);

2966 i‡(
	`ROW
(
de°squ¨e
Ë=
	`HOMEROW
(
	`OTHERCOLOR
(
cﬁ‹
)))

2968 
move
 |(0x1 << 
MOV_INDEX_PROM
);

2969 
	`movñi°_add
(
ml
, 
bﬂrd
->
©èckedby
, (
move
 | (
BISHOP
 << 
MOV_INDEX_PROMPC
)));

2970 
	`movñi°_add
(
ml
, 
bﬂrd
->
©èckedby
, (
move
 | (
ROOK
 << 
MOV_INDEX_PROMPC
)));

2971 
	`movñi°_add
(
ml
, 
bﬂrd
->
©èckedby
, (
move
 | (
KNIGHT
 << 
MOV_INDEX_PROMPC
)));

2972 
	`movñi°_add
(
ml
, 
bﬂrd
->
©èckedby
, (
move
 | (
QUEEN
 << 
MOV_INDEX_PROMPC
)));

2976 
	`movñi°_add
(
ml
, 
bﬂrd
->
©èckedby
, 
move
);

2980 
moves
 = 
	`bﬂrd_∑w≈ushes‰om
(
bﬂrd
, 
squ¨e
, 
cﬁ‹
);

2982 
moves
)

2984 
de°squ¨e
 = 
	`BITSCAN
(
moves
);

2985 
moves
 ^
	`BB_SQUARE
(
de°squ¨e
);

2986 
move
 = (
squ¨e
 << 
MOV_INDEX_SRC
) |

2987 (
de°squ¨e
 << 
MOV_INDEX_DEST
) |

2988 (
cﬁ‹
 << 
MOV_INDEX_COLOR
) |

2989 (
PAWN
 << 
MOV_INDEX_PIECE
);

2992 i‡(
	`ROW
(
de°squ¨e
Ë=
	`HOMEROW
(
	`OTHERCOLOR
(
cﬁ‹
)))

2994 
move
 |(0x1 << 
MOV_INDEX_PROM
);

2995 
	`movñi°_add
(
ml
, 
bﬂrd
->
©èckedby
, (
move
 | (
BISHOP
 << 
MOV_INDEX_PROMPC
)));

2996 
	`movñi°_add
(
ml
, 
bﬂrd
->
©èckedby
, (
move
 | (
ROOK
 << 
MOV_INDEX_PROMPC
)));

2997 
	`movñi°_add
(
ml
, 
bﬂrd
->
©èckedby
, (
move
 | (
KNIGHT
 << 
MOV_INDEX_PROMPC
)));

2998 
	`movñi°_add
(
ml
, 
bﬂrd
->
©èckedby
, (
move
 | (
QUEEN
 << 
MOV_INDEX_PROMPC
)));

3002 
	`movñi°_add
(
ml
, 
bﬂrd
->
©èckedby
, 
move
);

3007 
	}
}

3009 
	$bﬂrd_addmoves_ï
(
bﬂrd_t
 *
bﬂrd
, 
cﬁ‹
, 
movñi°_t
 *
ml
)

3011 
bôbﬂrd_t
 
∑wns
;

3012 
squ¨e_t
 
‰omsqu¨e
;

3013 
move_t
 
move
;

3015 
	`as£π
(
bﬂrd
->
ï
);

3018 
∑wns
 = 
bb_adja˚¡cﬁs
[
	`COL
(
bﬂrd
->
ï
)] &

3019 
	`BB_EP_FROMRANK
(
cﬁ‹
) &

3020 
bﬂrd
->
pos
[
cﬁ‹
][
PAWN
] ;

3021 
∑wns
)

3023 
‰omsqu¨e
 = 
	`BITSCAN
(
∑wns
);

3024 
∑wns
 ^
	`BB_SQUARE
(
‰omsqu¨e
);

3025 
move
 = (
‰omsqu¨e
 << 
MOV_INDEX_SRC
) |

3026 (
bﬂrd
->
ï
 << 
MOV_INDEX_DEST
) |

3027 (0x1 << 
MOV_INDEX_EP
) |

3028 (0x1 << 
MOV_INDEX_CAPT
) |

3029 (
PAWN
 << 
MOV_INDEX_CAPTPC
) |

3030 (
PAWN
 << 
MOV_INDEX_PIECE
);

3031 
	`movñi°_add
(
ml
, 
bﬂrd
->
©èckedby
, 
move
);

3034 
	}
}

3036 
	$bﬂrd_addmoves_kög
(
bﬂrd_t
 *
bﬂrd
, 
squ¨e_t
 
squ¨e
, 
cﬁ‹
,

3037 
movñi°_t
 *
ml
)

3039 
move_t
 
move
;

3040 
squ¨e_t
 
de°squ¨e
;

3041 
side
;

3043 
bôbﬂrd_t
 
moves
, 
ˇ±s
;

3044 
põ˚_t
 
ˇ±põ˚
;

3047 
side
 = 0; side < 2; side++)

3049 i‡(
bﬂrd
->
ˇ°À
[
cﬁ‹
][
side
])

3053 i‡(!((
ˇ°À_˛órsqu¨es
[
cﬁ‹
][
side
] &

3054 
bﬂrd
->
occupõd
) ||

3055 
	`bﬂrd_squ¨eßª©ècked
(
bﬂrd
, 
ˇ°À_ß„squ¨es
[
cﬁ‹
][
side
],

3056 
	`OTHERCOLOR
(
cﬁ‹
))))

3059 
de°squ¨e
 = 
	`SQUARE
(
	`CASTLE_DEST_COL
(
side
),

3060 
	`HOMEROW
(
cﬁ‹
));

3062 
move
 = (
squ¨e
 << 
MOV_INDEX_SRC
) |

3063 (
de°squ¨e
 << 
MOV_INDEX_DEST
) |

3064 (
cﬁ‹
 << 
MOV_INDEX_COLOR
) |

3065 (0x1 << 
MOV_INDEX_CASTLE
) |

3066 (
KING
 << 
MOV_INDEX_PIECE
);

3067 
	`movñi°_add
(
ml
, 
bﬂrd
->
©èckedby
, 
move
);

3077 
moves
 = 
kög©ècks
[
squ¨e
] & (~(
bﬂrd
->
põ˚sofcﬁ‹
[
cﬁ‹
]));

3083 
moves
 &(~(
bﬂrd
->
©èckedby
[
	`OTHERCOLOR
(
cﬁ‹
)]));

3085 
ˇ±s
 = 
moves
 & 
bﬂrd
->
põ˚sofcﬁ‹
[
	`OTHERCOLOR
(
cﬁ‹
)];

3086 
moves
 ^
ˇ±s
;

3089 
ˇ±s
)

3092 
de°squ¨e
 = 
	`BITSCAN
(
ˇ±s
);

3093 
ˇ±s
 ^
	`BB_SQUARE
(
de°squ¨e
);

3095 
ˇ±põ˚
 = 
	`bﬂrd_põ˚©squ¨e
(
bﬂrd
, 
de°squ¨e
, 
NULL
);

3097 
move
 = (
squ¨e
 << 
MOV_INDEX_SRC
) |

3098 (
de°squ¨e
 << 
MOV_INDEX_DEST
) |

3099 (
cﬁ‹
 << 
MOV_INDEX_COLOR
) |

3100 (0x1 << 
MOV_INDEX_CAPT
) |

3101 (
ˇ±põ˚
 << 
MOV_INDEX_CAPTPC
) |

3102 (
KING
 << 
MOV_INDEX_PIECE
);

3104 
	`movñi°_add
(
ml
, 
bﬂrd
->
©èckedby
, 
move
);

3107 
moves
)

3110 
de°squ¨e
 = 
	`BITSCAN
(
moves
);

3111 
moves
 ^
	`BB_SQUARE
(
de°squ¨e
);

3113 
move
 = (
squ¨e
 << 
MOV_INDEX_SRC
) |

3114 (
de°squ¨e
 << 
MOV_INDEX_DEST
) |

3115 (
cﬁ‹
 << 
MOV_INDEX_COLOR
) |

3116 (
KING
 << 
MOV_INDEX_PIECE
);

3118 
	`movñi°_add
(
ml
, 
bﬂrd
->
©èckedby
, 
move
);

3122 
	}
}

3124 
	$bﬂrd_addmoves
(
bﬂrd_t
 *
bﬂrd
, 
squ¨e_t
 
squ¨e
, 
põ˚_t
 
põ˚
, 
cﬁ‹
,

3125 
movñi°_t
 *
ml
)

3127 
bôbﬂrd_t
 
moves
, 
ˇ±s
;

3128 
squ¨e_t
 
de°squ¨e
;

3129 
põ˚_t
 
ˇ±põ˚
;

3130 
move_t
 
move
;

3134 
moves
 = 
	`bﬂrd_©ècks‰om
(
bﬂrd
, 
squ¨e
, 
põ˚
, 
cﬁ‹
Ë& (~(bﬂrd->
põ˚sofcﬁ‹
[color]));

3136 
ˇ±s
 = 
moves
 & 
bﬂrd
->
põ˚sofcﬁ‹
[
	`OTHERCOLOR
(
cﬁ‹
)];

3137 
moves
 ^
ˇ±s
;

3139 
ˇ±s
)

3142 
de°squ¨e
 = 
	`BITSCAN
(
ˇ±s
);

3143 
ˇ±s
 ^
	`BB_SQUARE
(
de°squ¨e
);

3145 
ˇ±põ˚
 = 
	`bﬂrd_põ˚©squ¨e
(
bﬂrd
, 
de°squ¨e
, 
NULL
);

3147 
move
 = (
squ¨e
 << 
MOV_INDEX_SRC
) |

3148 (
de°squ¨e
 << 
MOV_INDEX_DEST
) |

3149 (
cﬁ‹
 << 
MOV_INDEX_COLOR
) |

3150 (0x1 << 
MOV_INDEX_CAPT
) |

3151 (
ˇ±põ˚
 << 
MOV_INDEX_CAPTPC
) |

3152 (
põ˚
 << 
MOV_INDEX_PIECE
);

3154 
	`movñi°_add
(
ml
, 
bﬂrd
->
©èckedby
, 
move
);

3157 
moves
)

3160 
de°squ¨e
 = 
	`BITSCAN
(
moves
);

3161 
moves
 ^
	`BB_SQUARE
(
de°squ¨e
);

3163 
move
 = (
squ¨e
 << 
MOV_INDEX_SRC
) |

3164 (
de°squ¨e
 << 
MOV_INDEX_DEST
) |

3165 (
cﬁ‹
 << 
MOV_INDEX_COLOR
) |

3166 (
põ˚
 << 
MOV_INDEX_PIECE
);

3168 
	`movñi°_add
(
ml
, 
bﬂrd
->
©èckedby
, 
move
);

3171 
	}
}

3178 
	$bﬂrd_gíî©eˇ±uªs
(
bﬂrd_t
 *
bﬂrd
, 
movñi°_t
 *
ml
)

3180 
bôbﬂrd_t
 
posôi⁄
;

3181 
põ˚_t
 
põ˚
;

3182 
squ¨e_t
 
squ¨e
;

3183 
cﬁ‹
;

3185 
	`as£π
(
bﬂrd
);

3187 
cﬁ‹
 = 
bﬂrd
->
tomove
;

3188 
	`movñi°_öô
(
ml
);

3190 i‡(
bﬂrd
->
ï
)

3193 
	`bﬂrd_addmoves_ï
(
bﬂrd
, 
cﬁ‹
, 
ml
);

3195 
põ˚
 = 0;Öiece < 6;Öiece++)

3197 
posôi⁄
 = 
bﬂrd
->
pos
[
cﬁ‹
][
põ˚
];

3198 
posôi⁄
)

3201 
squ¨e
 = 
	`BITSCAN
(
posôi⁄
);

3203 
posôi⁄
 ^
	`BB_SQUARE
(
squ¨e
);

3204 
põ˚
)

3206 
PAWN
:

3207 
	`bﬂrd_addˇ±uªs_∑wn
(
bﬂrd
, 
squ¨e
, 
cﬁ‹
, 
ml
);

3209 
KING
:

3210 
	`bﬂrd_addˇ±uªs_kög
(
bﬂrd
, 
squ¨e
, 
cﬁ‹
, 
ml
);

3213 
	`bﬂrd_addˇ±uªs
(
bﬂrd
, 
squ¨e
, 
põ˚
, 
cﬁ‹
, 
ml
);

3218 
	}
}

3220 
	$bﬂrd_addˇ±uªs_∑wn
(
bﬂrd_t
 *
bﬂrd
, 
squ¨e_t
 
squ¨e
, 
cﬁ‹
, 
movñi°_t
 *
ml
)

3222 
bôbﬂrd_t
 
moves
;

3223 
squ¨e_t
 
de°squ¨e
;

3224 
põ˚_t
 
ˇ±põ˚
;

3225 
move_t
 
move
;

3227 
moves
 = 
∑w«âacks
[
cﬁ‹
][
squ¨e
] &

3228 
bﬂrd
->
põ˚sofcﬁ‹
[
	`OTHERCOLOR
(
cﬁ‹
)];

3229 
moves
)

3231 
de°squ¨e
 = 
	`BITSCAN
(
moves
);

3232 
moves
 ^
	`BB_SQUARE
(
de°squ¨e
);

3233 
ˇ±põ˚
 = 
	`bﬂrd_põ˚©squ¨e
(
bﬂrd
, 
de°squ¨e
, 
NULL
);

3234 
move
 = (
squ¨e
 << 
MOV_INDEX_SRC
) |

3235 (
de°squ¨e
 << 
MOV_INDEX_DEST
) |

3236 (
cﬁ‹
 << 
MOV_INDEX_COLOR
) |

3237 (0x1 << 
MOV_INDEX_CAPT
) |

3238 (
ˇ±põ˚
 << 
MOV_INDEX_CAPTPC
) |

3239 (
PAWN
 << 
MOV_INDEX_PIECE
);

3241 i‡(
	`ROW
(
de°squ¨e
Ë=
	`HOMEROW
(
	`OTHERCOLOR
(
cﬁ‹
)))

3243 
move
 |(0x1 << 
MOV_INDEX_PROM
);

3244 
	`movñi°_add
(
ml
, 
bﬂrd
->
©èckedby
, (
move
 | (
BISHOP
 << 
MOV_INDEX_PROMPC
)));

3245 
	`movñi°_add
(
ml
, 
bﬂrd
->
©èckedby
, (
move
 | (
ROOK
 << 
MOV_INDEX_PROMPC
)));

3246 
	`movñi°_add
(
ml
, 
bﬂrd
->
©èckedby
, (
move
 | (
KNIGHT
 << 
MOV_INDEX_PROMPC
)));

3247 
	`movñi°_add
(
ml
, 
bﬂrd
->
©èckedby
, (
move
 | (
QUEEN
 << 
MOV_INDEX_PROMPC
)));

3251 
	`movñi°_add
(
ml
, 
bﬂrd
->
©èckedby
, 
move
);

3255 i‡(
	`bﬂrd_∑w≈as£d
(
bﬂrd
, 
squ¨e
, 
cﬁ‹
))

3257 
moves
 = 
	`bﬂrd_∑w≈ushes‰om
(
bﬂrd
, 
squ¨e
, 
cﬁ‹
);

3259 
moves
)

3261 
de°squ¨e
 = 
	`BITSCAN
(
moves
);

3262 
moves
 ^
	`BB_SQUARE
(
de°squ¨e
);

3263 
move
 = (
squ¨e
 << 
MOV_INDEX_SRC
) |

3264 (
de°squ¨e
 << 
MOV_INDEX_DEST
) |

3265 (
cﬁ‹
 << 
MOV_INDEX_COLOR
) |

3266 (
PAWN
 << 
MOV_INDEX_PIECE
);

3268 i‡(
	`ROW
(
de°squ¨e
Ë=
	`HOMEROW
(
	`OTHERCOLOR
(
cﬁ‹
)))

3270 
move
 |(0x1 << 
MOV_INDEX_PROM
);

3271 
	`movñi°_add
(
ml
, 
bﬂrd
->
©èckedby
, (
move
 | (
BISHOP
 << 
MOV_INDEX_PROMPC
)));

3272 
	`movñi°_add
(
ml
, 
bﬂrd
->
©èckedby
, (
move
 | (
ROOK
 << 
MOV_INDEX_PROMPC
)));

3273 
	`movñi°_add
(
ml
, 
bﬂrd
->
©èckedby
, (
move
 | (
KNIGHT
 << 
MOV_INDEX_PROMPC
)));

3274 
	`movñi°_add
(
ml
, 
bﬂrd
->
©èckedby
, (
move
 | (
QUEEN
 << 
MOV_INDEX_PROMPC
)));

3278 
	`movñi°_add
(
ml
, 
bﬂrd
->
©èckedby
, 
move
);

3283 
	}
}

3285 
	$bﬂrd_addˇ±uªs_kög
(
bﬂrd_t
 *
bﬂrd
, 
squ¨e_t
 
squ¨e
, 
cﬁ‹
, 
movñi°_t
 *
ml
)

3287 
move_t
 
move
;

3288 
squ¨e_t
 
de°squ¨e
;

3289 
bôbﬂrd_t
 
moves
, 
ˇ±s
;

3290 
põ˚_t
 
ˇ±põ˚
;

3295 
moves
 = 
kög©ècks
[
squ¨e
] & (~(
bﬂrd
->
põ˚sofcﬁ‹
[
cﬁ‹
]));

3296 
moves
 &(~(
bﬂrd
->
©èckedby
[
	`OTHERCOLOR
(
cﬁ‹
)]));

3297 
ˇ±s
 = 
moves
 & 
bﬂrd
->
põ˚sofcﬁ‹
[
	`OTHERCOLOR
(
cﬁ‹
)];

3298 
moves
 ^
ˇ±s
;

3300 
ˇ±s
)

3303 
de°squ¨e
 = 
	`BITSCAN
(
ˇ±s
);

3304 
ˇ±s
 ^
	`BB_SQUARE
(
de°squ¨e
);

3306 
ˇ±põ˚
 = 
	`bﬂrd_põ˚©squ¨e
(
bﬂrd
, 
de°squ¨e
, 
NULL
);

3308 
move
 = (
squ¨e
 << 
MOV_INDEX_SRC
) |

3309 (
de°squ¨e
 << 
MOV_INDEX_DEST
) |

3310 (
cﬁ‹
 << 
MOV_INDEX_COLOR
) |

3311 (0x1 << 
MOV_INDEX_CAPT
) |

3312 (
ˇ±põ˚
 << 
MOV_INDEX_CAPTPC
) |

3313 (
KING
 << 
MOV_INDEX_PIECE
);

3315 
	`movñi°_add
(
ml
, 
bﬂrd
->
©èckedby
, 
move
);

3318 
	}
}

3320 
	$bﬂrd_addˇ±uªs
(
bﬂrd_t
 *
bﬂrd
, 
squ¨e_t
 
squ¨e
, 
põ˚_t
 
põ˚
, 
cﬁ‹
, 
movñi°_t
 *
ml
)

3322 
bôbﬂrd_t
 
moves
, 
ˇ±s
;

3323 
squ¨e_t
 
de°squ¨e
;

3324 
põ˚_t
 
ˇ±põ˚
;

3325 
move_t
 
move
;

3329 
moves
 = 
	`bﬂrd_©ècks‰om
(
bﬂrd
, 
squ¨e
, 
põ˚
, 
cﬁ‹
) &

3330 (~(
bﬂrd
->
põ˚sofcﬁ‹
[
cﬁ‹
]));

3332 
ˇ±s
 = 
moves
 & 
bﬂrd
->
põ˚sofcﬁ‹
[
	`OTHERCOLOR
(
cﬁ‹
)];

3333 
moves
 ^
ˇ±s
;

3335 
ˇ±s
)

3338 
de°squ¨e
 = 
	`BITSCAN
(
ˇ±s
);

3339 
ˇ±s
 ^
	`BB_SQUARE
(
de°squ¨e
);

3341 
ˇ±põ˚
 = 
	`bﬂrd_põ˚©squ¨e
(
bﬂrd
, 
de°squ¨e
, 
NULL
);

3343 
move
 = (
squ¨e
 << 
MOV_INDEX_SRC
) |

3344 (
de°squ¨e
 << 
MOV_INDEX_DEST
) |

3345 (
cﬁ‹
 << 
MOV_INDEX_COLOR
) |

3346 (0x1 << 
MOV_INDEX_CAPT
) |

3347 (
ˇ±põ˚
 << 
MOV_INDEX_CAPTPC
) |

3348 (
põ˚
 << 
MOV_INDEX_PIECE
);

3350 
	`movñi°_add
(
ml
, 
bﬂrd
->
©èckedby
, 
move
);

3353 
	}
}

3366 
	$bﬂrd_≠∂ymove
(
bﬂrd_t
 *
bﬂrd
, 
move_t
 
move
)

3368 
squ¨e_t
 
rook§c
, 
rookde°
;

3369 
squ¨e_t
 
ïˇ±uª
;

3370 
i
;

3373 
hi°‹y_t
 *
h
 = &
bﬂrd
->
hi°‹y
[bﬂrd->
moves
];

3374 
	`as£π
(
bﬂrd
->
moves
 < 
HISTORY_STACK_SIZE
);

3375 
h
->
hash
 = 
bﬂrd
->hash;

3376 
h
->
©èckedby
[
WHITE
] = 
bﬂrd
->attackedby[WHITE];

3377 
h
->
©èckedby
[
BLACK
] = 
bﬂrd
->attackedby[BLACK];

3378 
h
->
ˇ°À
[
WHITE
][
QUEENSIDE
] = 
bﬂrd
->castle[WHITE][QUEENSIDE];

3379 
h
->
ˇ°À
[
WHITE
][
KINGSIDE
] = 
bﬂrd
->castle[WHITE][KINGSIDE];

3380 
h
->
ˇ°À
[
BLACK
][
QUEENSIDE
] = 
bﬂrd
->castle[BLACK][QUEENSIDE];

3381 
h
->
ˇ°À
[
BLACK
][
KINGSIDE
] = 
bﬂrd
->castle[BLACK][KINGSIDE];

3382 
h
->
ï
 = 
bﬂrd
->ep;

3383 
h
->
hÆfmoves
 = 
bﬂrd
->halfmoves;

3384 
h
->
ªps
 = 
bﬂrd
->reps;

3385 
h
->
move
 = move;

3388 i‡(
move
 == 0)

3391 
bﬂrd
->
hash
 ^
zobri°_ï
[bﬂrd->
ï
];

3392 
bﬂrd
->
ï
 = 0;

3393 
bﬂrd
->
hash
 ^
zobri°_ï
[bﬂrd->
ï
];

3395 
bﬂrd
->
hÆfmoves
++;

3396 
bﬂrd
->
moves
++;

3398 
bﬂrd
->
ªps
 = 0;

3400 
bﬂrd
->
tomove
 = 
	`OTHERCOLOR
(board->tomove);

3401 
bﬂrd
->
hash
 ^
zobri°_tomove
;

3405 
	`as£π
(
	`MOV_PIECE
(
move
) >= 0 && MOV_PIECE(move) < 6);

3408 i‡(
	`MOV_CAPT
(
move
))

3411 i‡(
	`MOV_EP
(
move
))

3413 
	`as£π
(
	`ROW
(
	`MOV_SRC
(
move
)Ë=4 - 
bﬂrd
->
tomove
);

3415 
ïˇ±uª
 = (
bﬂrd
->
tomove
 =
WHITE
) ?

3416 (
	`MOV_DEST
(
move
) - 8) :

3417 (
	`MOV_DEST
(
move
) + 8);

3419 
	`bﬂrd_toggÀpõ˚
(
bﬂrd
, 
ïˇ±uª
,

3420 
	`OTHERCOLOR
(
bﬂrd
->
tomove
), 
PAWN
);

3422 
bﬂrd
->
m©îül
[
	`OTHERCOLOR
(bﬂrd->
tomove
)] -=

3423 
evÆ_põ˚vÆue
[
PAWN
];

3428 
	`bﬂrd_toggÀpõ˚
(
bﬂrd
, 
	`MOV_DEST
(
move
),

3429 
	`OTHERCOLOR
(
bﬂrd
->
tomove
),

3430 
	`MOV_CAPTPC
(
move
));

3434 i‡(
	`MOV_CAPTPC
(
move
Ë=
ROOK
 &&

3435 
	`ROW
(
	`MOV_DEST
(
move
)Ë=
	`HOMEROW
(
	`OTHERCOLOR
(
bﬂrd
->
tomove
)) &&

3436 (
	`COL
(
	`MOV_DEST
(
move
)Ë=
COL_H
 ||

3437 
	`COL
(
	`MOV_DEST
(
move
)Ë=
COL_A
))

3441 
side
 = (
	`COL
(
	`MOV_DEST
(
move
)Ë=
COL_H
);

3445 i‡(
bﬂrd
->
ˇ°À
[
	`OTHERCOLOR
(bﬂrd->
tomove
)][
side
])

3447 
bﬂrd
->
ˇ°À
[
	`OTHERCOLOR
(bﬂrd->
tomove
)][
side
] = 0;

3448 
bﬂrd
->
hash
 ^
zobri°_ˇ°À
[
	`OTHERCOLOR
(bﬂrd->
tomove
)]

3449 [
side
];

3454 
bﬂrd
->
m©îül
[
	`OTHERCOLOR
(bﬂrd->
tomove
)] -=

3455 
evÆ_põ˚vÆue
[
	`MOV_CAPTPC
(
move
)];

3457 
bﬂrd
->
hÆfmoves
 = 0;

3462 i‡(
	`MOV_PIECE
(
move
Ë=
PAWN
)

3464 
bﬂrd
->
hÆfmoves
 = 0;

3468 
bﬂrd
->
hÆfmoves
++;

3472 
bﬂrd
->
moves
++;

3475 i‡(
	`MOV_CASTLE
(
move
))

3478 i‡(
	`COL
(
	`MOV_DEST
(
move
)Ë=
COL_G
)

3480 
rook§c
 = 
	`SQUARE
(
COL_H
,
	`HOMEROW
(
bﬂrd
->
tomove
));

3481 
rookde°
 = 
	`SQUARE
(
COL_F
,
	`HOMEROW
(
bﬂrd
->
tomove
));

3485 
rook§c
 = 
	`SQUARE
(
COL_A
,
	`HOMEROW
(
bﬂrd
->
tomove
));

3486 
rookde°
 = 
	`SQUARE
(
COL_D
,
	`HOMEROW
(
bﬂrd
->
tomove
));

3489 
	`bﬂrd_toggÀpõ˚
(
bﬂrd
, 
rook§c
, bﬂrd->
tomove
, 
ROOK
);

3490 
	`bﬂrd_toggÀpõ˚
(
bﬂrd
, 
rookde°
, bﬂrd->
tomove
, 
ROOK
);

3492 
bﬂrd
->
hasˇ°Àd
[bﬂrd->
tomove
] = 1;

3497 
	`bﬂrd_toggÀpõ˚
(
bﬂrd
, 
	`MOV_SRC
(
move
), bﬂrd->
tomove
,

3498 
	`MOV_PIECE
(
move
));

3499 i‡(
	`MOV_PROM
(
move
))

3501 
	`as£π
(
	`ROW
(
	`MOV_DEST
(
move
)) ==

3502 
	`HOMEROW
(
	`OTHERCOLOR
(
bﬂrd
->
tomove
)));

3503 
	`bﬂrd_toggÀpõ˚
(
bﬂrd
, 
	`MOV_DEST
(
move
), bﬂrd->
tomove
,

3504 
	`MOV_PROMPC
(
move
));

3506 
bﬂrd
->
m©îül
[bﬂrd->
tomove
] +=

3507 (
evÆ_põ˚vÆue
[
	`MOV_PROMPC
(
move
)] -

3508 
evÆ_põ˚vÆue
[
PAWN
]);

3512 
	`bﬂrd_toggÀpõ˚
(
bﬂrd
, 
	`MOV_DEST
(
move
), bﬂrd->
tomove
,

3513 
	`MOV_PIECE
(
move
));

3517 i‡(
	`MOV_PIECE
(
move
Ë=
PAWN
)

3521 i‡((
bﬂrd
->
tomove
 =
WHITE
) &&

3522 ((
	`MOV_DEST
(
move
Ë- 
	`MOV_SRC
(move)) == 16))

3525 
bﬂrd
->
hash
 ^
zobri°_ï
[bﬂrd->
ï
];

3527 
bﬂrd
->
ï
 = 
	`MOV_SRC
(
move
) + 8;

3529 
bﬂrd
->
hash
 ^
zobri°_ï
[bﬂrd->
ï
];

3531 i‡((
bﬂrd
->
tomove
 =
BLACK
) &&

3532 ((
	`MOV_SRC
(
move
Ë- 
	`MOV_DEST
(move)) == 16))

3534 
bﬂrd
->
hash
 ^
zobri°_ï
[bﬂrd->
ï
];

3535 
bﬂrd
->
ï
 = 
	`MOV_DEST
(
move
) + 8;

3536 
bﬂrd
->
hash
 ^
zobri°_ï
[bﬂrd->
ï
];

3540 
bﬂrd
->
hash
 ^
zobri°_ï
[bﬂrd->
ï
];

3541 
bﬂrd
->
ï
 = 0;

3542 
bﬂrd
->
hash
 ^
zobri°_ï
[bﬂrd->
ï
];

3548 
bﬂrd
->
hash
 ^
zobri°_ï
[bﬂrd->
ï
];

3549 
bﬂrd
->
ï
 = 0;

3550 
bﬂrd
->
hash
 ^
zobri°_ï
[bﬂrd->
ï
];

3552 i‡(
	`MOV_PIECE
(
move
Ë=
KING
)

3554 i‡(
bﬂrd
->
ˇ°À
[bﬂrd->
tomove
][
KINGSIDE
])

3556 
bﬂrd
->
ˇ°À
[bﬂrd->
tomove
][
KINGSIDE
] = 0;

3557 
bﬂrd
->
hash
 ^
zobri°_ˇ°À
[bﬂrd->
tomove
][
KINGSIDE
];

3559 i‡(
bﬂrd
->
ˇ°À
[bﬂrd->
tomove
][
QUEENSIDE
])

3561 
bﬂrd
->
ˇ°À
[bﬂrd->
tomove
][
QUEENSIDE
] = 0;

3562 
bﬂrd
->
hash
 ^
zobri°_ˇ°À
[bﬂrd->
tomove
][
QUEENSIDE
];

3565 i‡(
	`MOV_PIECE
(
move
Ë=
ROOK
)

3567 i‡((
bﬂrd
->
ˇ°À
[bﬂrd->
tomove
][
KINGSIDE
]) &&

3568 (
	`COL
(
	`MOV_SRC
(
move
)Ë=
COL_H
))

3570 
bﬂrd
->
ˇ°À
[bﬂrd->
tomove
][
KINGSIDE
] = 0;

3571 
bﬂrd
->
hash
 ^
zobri°_ˇ°À
[bﬂrd->
tomove
][
KINGSIDE
];

3573 i‡((
bﬂrd
->
ˇ°À
[bﬂrd->
tomove
][
QUEENSIDE
]) &&

3574 (
	`COL
(
	`MOV_SRC
(
move
)Ë=
COL_A
))

3576 
bﬂrd
->
ˇ°À
[bﬂrd->
tomove
][
QUEENSIDE
] = 0;

3577 
bﬂrd
->
hash
 ^
zobri°_ˇ°À
[bﬂrd->
tomove
][
QUEENSIDE
];

3583 
bﬂrd
->
tomove
 = 
	`OTHERCOLOR
(board->tomove);

3584 
bﬂrd
->
hash
 ^
zobri°_tomove
;

3587 
bﬂrd
->
ªps
 = 0;

3588 
i
 = 1; i <
bﬂrd
->
hÆfmoves
; i++)

3590 i‡(
bﬂrd
->
hi°‹y
[bﬂrd->
moves
 - 
i
].
hash
 == board->hash)

3592 
bﬂrd
->
ªps
 = bﬂrd->
hi°‹y
[bﬂrd->
moves
 - 
i
].reps+1;

3598 
	`bﬂrd_ªgíî©ëhª©íed
(
bﬂrd
);

3600 
	}
}

3609 
	$bﬂrd_undomove
(
bﬂrd_t
 *
bﬂrd
, 
move_t
 
move
)

3611 
squ¨e_t
 
rook§c
, 
rookde°
, 
ïˇ±uª
;

3614 
bﬂrd
->
tomove
 = 
	`OTHERCOLOR
(board->tomove);

3615 
bﬂrd
->
hash
 ^
zobri°_tomove
;

3618 i‡(
move
 == 0)

3620 
bﬂrd
->
moves
--;

3621 
bﬂrd
->
hÆfmoves
--;

3622 
bﬂrd
->
hash
 ^
zobri°_ï
[bﬂrd->
ï
];

3623 
bﬂrd
->
ï
 = bﬂrd->
hi°‹y
[bﬂrd->
moves
].ep;

3624 
bﬂrd
->
hash
 ^
zobri°_ï
[bﬂrd->
ï
];

3625 
bﬂrd
->
ªps
 = bﬂrd->
hi°‹y
[bﬂrd->
moves
].reps;

3631 
	`bﬂrd_toggÀpõ˚
(
bﬂrd
, 
	`MOV_SRC
(
move
), bﬂrd->
tomove
, 
	`MOV_PIECE
(move));

3632 i‡(
	`MOV_PROM
(
move
))

3634 
	`bﬂrd_toggÀpõ˚
(
bﬂrd
, 
	`MOV_DEST
(
move
), bﬂrd->
tomove
,

3635 
	`MOV_PROMPC
(
move
));

3637 
bﬂrd
->
m©îül
[bﬂrd->
tomove
] -=

3638 (
evÆ_põ˚vÆue
[
	`MOV_PROMPC
(
move
)] -

3639 
evÆ_põ˚vÆue
[
PAWN
]);

3643 
	`bﬂrd_toggÀpõ˚
(
bﬂrd
, 
	`MOV_DEST
(
move
), bﬂrd->
tomove
,

3644 
	`MOV_PIECE
(
move
));

3647 i‡(
	`MOV_CASTLE
(
move
))

3650 i‡(
	`COL
(
	`MOV_DEST
(
move
)Ë=
COL_G
)

3654 
rook§c
 = 
	`SQUARE
(
COL_H
,
	`HOMEROW
(
bﬂrd
->
tomove
));

3655 
rookde°
 = 
	`SQUARE
(
COL_F
,
	`HOMEROW
(
bﬂrd
->
tomove
));

3659 
rook§c
 = 
	`SQUARE
(
COL_A
,
	`HOMEROW
(
bﬂrd
->
tomove
));

3660 
rookde°
 = 
	`SQUARE
(
COL_D
,
	`HOMEROW
(
bﬂrd
->
tomove
));

3663 
	`bﬂrd_toggÀpõ˚
(
bﬂrd
, 
rook§c
, bﬂrd->
tomove
, 
ROOK
);

3664 
	`bﬂrd_toggÀpõ˚
(
bﬂrd
, 
rookde°
, bﬂrd->
tomove
, 
ROOK
);

3666 
bﬂrd
->
hasˇ°Àd
[bﬂrd->
tomove
] = 0;

3669 i‡(
	`MOV_CAPT
(
move
))

3672 i‡(
	`MOV_EP
(
move
))

3674 
ïˇ±uª
 = (
bﬂrd
->
tomove
 =
WHITE
) ?

3675 (
	`MOV_DEST
(
move
) - 8) :

3676 (
	`MOV_DEST
(
move
) + 8);

3677 
	`bﬂrd_toggÀpõ˚
(
bﬂrd
, 
ïˇ±uª
,

3678 
	`OTHERCOLOR
(
bﬂrd
->
tomove
), 
PAWN
);

3679 
bﬂrd
->
m©îül
[
	`OTHERCOLOR
(bﬂrd->
tomove
)] +=

3680 
evÆ_põ˚vÆue
[
PAWN
];

3685 
	`bﬂrd_toggÀpõ˚
(
bﬂrd
, 
	`MOV_DEST
(
move
),

3686 
	`OTHERCOLOR
(
bﬂrd
->
tomove
),

3687 
	`MOV_CAPTPC
(
move
));

3688 
bﬂrd
->
m©îül
[
	`OTHERCOLOR
(bﬂrd->
tomove
)] +=

3689 
evÆ_põ˚vÆue
[
	`MOV_CAPTPC
(
move
)];

3694 
bﬂrd
->
moves
--;

3697 
bﬂrd
->
©èckedby
[
WHITE
] = bﬂrd->
hi°‹y
[bﬂrd->
moves
].attackedby[WHITE];

3698 
bﬂrd
->
©èckedby
[
BLACK
] = bﬂrd->
hi°‹y
[bﬂrd->
moves
].attackedby[BLACK];

3701 i‡(
bﬂrd
->
ˇ°À
[
WHITE
][
QUEENSIDE
]Ë{ bﬂrd->
hash
 ^
zobri°_ˇ°À
[WHITE][QUEENSIDE]; }

3702 i‡(
bﬂrd
->
ˇ°À
[
WHITE
][
KINGSIDE
]Ë{ bﬂrd->
hash
 ^
zobri°_ˇ°À
[WHITE][KINGSIDE]; }

3703 i‡(
bﬂrd
->
ˇ°À
[
BLACK
][
QUEENSIDE
]Ë{ bﬂrd->
hash
 ^
zobri°_ˇ°À
[BLACK][QUEENSIDE]; }

3704 i‡(
bﬂrd
->
ˇ°À
[
BLACK
][
KINGSIDE
]Ë{ bﬂrd->
hash
 ^
zobri°_ˇ°À
[BLACK][KINGSIDE]; }

3706 
bﬂrd
->
ˇ°À
[
WHITE
][
QUEENSIDE
] = bﬂrd->
hi°‹y
[bﬂrd->
moves
].castle[WHITE][QUEENSIDE];

3707 
bﬂrd
->
ˇ°À
[
WHITE
][
KINGSIDE
] = bﬂrd->
hi°‹y
[bﬂrd->
moves
].castle[WHITE][KINGSIDE];

3708 
bﬂrd
->
ˇ°À
[
BLACK
][
QUEENSIDE
] = bﬂrd->
hi°‹y
[bﬂrd->
moves
].castle[BLACK][QUEENSIDE];

3709 
bﬂrd
->
ˇ°À
[
BLACK
][
KINGSIDE
] = bﬂrd->
hi°‹y
[bﬂrd->
moves
].castle[BLACK][KINGSIDE];

3711 i‡(
bﬂrd
->
ˇ°À
[
WHITE
][
QUEENSIDE
]Ë{ bﬂrd->
hash
 ^
zobri°_ˇ°À
[WHITE][QUEENSIDE]; }

3712 i‡(
bﬂrd
->
ˇ°À
[
WHITE
][
KINGSIDE
]Ë{ bﬂrd->
hash
 ^
zobri°_ˇ°À
[WHITE][KINGSIDE]; }

3713 i‡(
bﬂrd
->
ˇ°À
[
BLACK
][
QUEENSIDE
]Ë{ bﬂrd->
hash
 ^
zobri°_ˇ°À
[BLACK][QUEENSIDE]; }

3714 i‡(
bﬂrd
->
ˇ°À
[
BLACK
][
KINGSIDE
]Ë{ bﬂrd->
hash
 ^
zobri°_ˇ°À
[BLACK][KINGSIDE]; }

3717 
bﬂrd
->
hash
 ^
zobri°_ï
[bﬂrd->
ï
];

3718 
bﬂrd
->
ï
 = bﬂrd->
hi°‹y
[bﬂrd->
moves
].ep;

3719 
bﬂrd
->
hash
 ^
zobri°_ï
[bﬂrd->
ï
];

3722 
bﬂrd
->
hÆfmoves
 = bﬂrd->
hi°‹y
[bﬂrd->
moves
].halfmoves;

3725 
bﬂrd
->
ªps
 = bﬂrd->
hi°‹y
[bﬂrd->
moves
].reps;

3728 
	`as£π
(
bﬂrd
->
hash
 =bﬂrd->
hi°‹y
[bﬂrd->
moves
].hash);

3729 
	`as£π
(
move
 =
bﬂrd
->
hi°‹y
[bﬂrd->
moves
].move);

3731 
	}
}

3739 
	$bﬂrd_toggÀpõ˚
(
bﬂrd_t
 *
bﬂrd
, 
squ¨e_t
 
squ¨e
,

3740 
cﬁ‹
, 
põ˚_t
 
põ˚
)

3743 
	`as£π
(!(
bﬂrd
->
occupõd
 & 
	`BB_SQUARE
(
squ¨e
) &

3744 ~
bﬂrd
->
pos
[
cﬁ‹
][
põ˚
]));

3746 
bﬂrd
->
pos
[
cﬁ‹
][
põ˚
] ^
	`BB_SQUARE
(
squ¨e
);

3749 
bﬂrd
->
põ˚sofcﬁ‹
[
cﬁ‹
] ^
	`BB_SQUARE
(
squ¨e
);

3752 
bﬂrd
->
occupõd
 ^
	`BB_SQUARE
(
squ¨e
);

3753 
bﬂrd
->
occupõd90
 ^
	`BB_SQUARE
(
	`ROT90SQUAREINDEX
(
squ¨e
));

3754 
bﬂrd
->
occupõd45
 ^
	`BB_SQUARE
(
	`ROT45SQUAREINDEX
(
squ¨e
));

3755 
bﬂrd
->
occupõd315
 ^
	`BB_SQUARE
(
	`ROT315SQUAREINDEX
(
squ¨e
));

3758 
bﬂrd
->
hash
 ^
zobri°_põ˚
[
cﬁ‹
][
põ˚
][
squ¨e
];

3759 
	}
}

3766 
bôbﬂrd_t
 
	mkey
;

3767 
bôbﬂrd_t
 
	mwhôe
;

3768 
bôbﬂrd_t
 
	mbœck
;

3769 } 
	tªgí_íåy_t
;

3771 #i‚de‡
REGEN_NUM_BUCKETS


3772 
	#REGEN_NUM_BUCKETS
 (32 * 1024 * 1024 / (
ªgí_íåy_t
))

3774 
ªgí_íåy_t
 
ªgí_¨øy
[
REGEN_NUM_BUCKETS
];

	)

3776 
	$ªgí_add
(
bôbﬂrd_t
 
key
, bôbﬂrd_à
whôe
, bôbﬂrd_à
bœck
)

3778 
buckë
 = 
key
 % 
REGEN_NUM_BUCKETS
;

3779 
ªgí_¨øy
[
buckë
].
key
 = key;

3780 
ªgí_¨øy
[
buckë
].
whôe
 = white;

3781 
ªgí_¨øy
[
buckë
].
bœck
 = black;

3782 
	}
}

3784 
	$ªgí_gë
(
bôbﬂrd_t
 
key
, bôbﬂrd_à*
whôe
, bôbﬂrd_à*
bœck
)

3786 
buckë
 = 
key
 % 
REGEN_NUM_BUCKETS
;

3787 i‡(
ªgí_¨øy
[
buckë
].
key
 == key)

3789 *
whôe
 = 
ªgí_¨øy
[
buckë
].white;

3790 *
bœck
 = 
ªgí_¨øy
[
buckë
].black;

3794 
	}
}

3796 
	gªgí_hôs
 = 0;

3797 
	gªgí_mis£s
 = 0;

3803 
	$bﬂrd_ªgíî©ëhª©íed
(
bﬂrd_t
 *
bﬂrd
)

3805 
bôbﬂrd_t
 
mask
;

3806 
bôbﬂrd_t
 
posôi⁄
;

3807 
põ˚_t
 
põ˚
;

3808 
squ¨e_t
 
squ¨e
;

3811 i‡(
	`ªgí_gë
(
bﬂrd
->
hash
,

3812 &
bﬂrd
->
©èckedby
[
WHITE
], &bﬂrd->©èckedby[
BLACK
]))

3814 
ªgí_hôs
++;

3821 
mask
 = 
	`BB
(0x0);

3823 
mask
 |
	`bﬂrd_∑w«âacks
(
bﬂrd
->
pos
[
WHITE
][
PAWN
], WHITE);

3825 
posôi⁄
 = 
bﬂrd
->
pos
[
WHITE
][
KNIGHT
];

3826 
posôi⁄
)

3828 
squ¨e
 = 
	`BITSCAN
(
posôi⁄
);

3829 
posôi⁄
 ^
	`BB_SQUARE
(
squ¨e
);

3830 
mask
 |
knighèâacks
[
squ¨e
];

3832 
posôi⁄
 = 
bﬂrd
->
pos
[
WHITE
][
KING
];

3833 
posôi⁄
)

3835 
squ¨e
 = 
	`BITSCAN
(
posôi⁄
);

3836 
posôi⁄
 ^
	`BB_SQUARE
(
squ¨e
);

3837 
mask
 |
kög©ècks
[
squ¨e
];

3840 
põ˚
 = 2;Öiece < 5;Öiece++)

3842 
posôi⁄
 = 
bﬂrd
->
pos
[
WHITE
][
põ˚
];

3844 
posôi⁄
)

3847 
squ¨e
 = 
	`BITSCAN
(
posôi⁄
);

3848 
posôi⁄
 ^
	`BB_SQUARE
(
squ¨e
);

3850 
mask
 |
	`bﬂrd_©ècks‰om
(
bﬂrd
, 
squ¨e
, 
põ˚
, 
WHITE
);

3853 
bﬂrd
->
©èckedby
[
WHITE
] = 
mask
;

3857 
mask
 = 
	`BB
(0x0);

3859 
mask
 |
	`bﬂrd_∑w«âacks
(
bﬂrd
->
pos
[
BLACK
][
PAWN
], BLACK);

3861 
posôi⁄
 = 
bﬂrd
->
pos
[
BLACK
][
KNIGHT
];

3862 
posôi⁄
)

3864 
squ¨e
 = 
	`BITSCAN
(
posôi⁄
);

3865 
posôi⁄
 ^
	`BB_SQUARE
(
squ¨e
);

3866 
mask
 |
knighèâacks
[
squ¨e
];

3868 
posôi⁄
 = 
bﬂrd
->
pos
[
BLACK
][
KING
];

3869 
posôi⁄
)

3871 
squ¨e
 = 
	`BITSCAN
(
posôi⁄
);

3872 
posôi⁄
 ^
	`BB_SQUARE
(
squ¨e
);

3873 
mask
 |
kög©ècks
[
squ¨e
];

3876 
põ˚
 = 2;Öiece < 5;Öiece++)

3878 
posôi⁄
 = 
bﬂrd
->
pos
[
BLACK
][
põ˚
];

3880 
posôi⁄
)

3883 
squ¨e
 = 
	`BITSCAN
(
posôi⁄
);

3884 
posôi⁄
 ^
	`BB_SQUARE
(
squ¨e
);

3886 
mask
 |
	`bﬂrd_©ècks‰om
(
bﬂrd
, 
squ¨e
, 
põ˚
, 
BLACK
);

3889 
bﬂrd
->
©èckedby
[
BLACK
] = 
mask
;

3892 
	`ªgí_add
(
bﬂrd
->
hash
, bﬂrd->
©èckedby
[
WHITE
], bﬂrd->©èckedby[
BLACK
]);

3893 
ªgí_mis£s
++;

3896 
	}
}

3902 
bôbﬂrd_t
 
	$bﬂrd_∑w«âacks
(
bôbﬂrd_t
 
∑wns
, 
cﬁ‹
)

3905 i‡(
cﬁ‹
 =
WHITE
)

3907  ((
∑wns
 & ~
BB_FILEA
Ë<< 7Ë| (’awn†& ~
BB_FILEH
) << 9);

3911  ((
∑wns
 & ~
BB_FILEA
Ë>> 9Ë| (’awn†& ~
BB_FILEH
) >> 7);

3913 
	}
}

3918 
	$bﬂrd_thªefﬁd_døw
(
bﬂrd_t
 *
bﬂrd
)

3920  
bﬂrd
->
ªps
 >= 2;

3921 
	}
}

3928 
move_t
 
move_checksuicide
(
bﬂrd_t
 *, move_t, **);

3937 
move_t
 
	$move_‰om°rög
(*
°r
)

3939 
size_t
 
Àngth
 = 
	`°æí
(
°r
);

3940 
move_t
 
move
 = 0;

3943 i‡(
Àngth
 < 4 ||Üength > 5 ||

3944 !(
°r
[0] >= 'a' && str[0] <= 'h') ||

3945 !(
°r
[1] >= '1' && str[1] <= '8') ||

3946 !(
°r
[2] >= 'a' && str[2] <= 'h') ||

3947 !(
°r
[3] >= '1' && str[3] <= '8') ||

3948 (
Àngth
 == 5 &&

3949 !(
°r
[4] == 'N' || str[4] == 'B' ||

3950 
°r
[4] == 'R' || str[4] == 'Q' ||

3951 
°r
[4] == 'n' || str[4] == 'b' ||

3952 
°r
[4] == 'r' || str[4] == 'q')))

3954  (
move_t
)0;

3958 
move
 |
	`SQUARE
((
°r
[0] - 'a'), (°r[1] - '1')Ë<< 
MOV_INDEX_SRC
;

3959 
move
 |
	`SQUARE
((
°r
[2] - 'a'), (°r[3] - '1')Ë<< 
MOV_INDEX_DEST
;

3962 i‡(
Àngth
 == 5)

3964 
move
 |1 << 
MOV_INDEX_PROM
;

3965 
°r
[4])

3969 
move
 |
KNIGHT
 << 
MOV_INDEX_PROMPC
;

3973 
move
 |
BISHOP
 << 
MOV_INDEX_PROMPC
;

3977 
move
 |
ROOK
 << 
MOV_INDEX_PROMPC
;

3980 
move
 |
QUEEN
 << 
MOV_INDEX_PROMPC
;

3984  
move
;

3985 
	}
}

3995 
move_t
 
	$move_i¶egÆ
(
bﬂrd_t
 *
bﬂrd
, *
°r
, **
îrmsg
)

3997 
move_t
 
move
;

3998 
squ¨e_t
 
§c
, 
de°
;

3999 
põ˚_t
 
põ˚
;

4000 
bôbﬂrd_t
 
moves
, 
˛órsqu¨es
;

4003 
move
 = 
	`move_‰om°rög
(
°r
);

4004 
§c
 = 
	`MOV_SRC
(
move
);

4005 
de°
 = 
	`MOV_DEST
(
move
);

4008 i‡(
§c
 =
de°
)

4010 *
îrmsg
 = "!!! Motion isÑequired forá move.";

4014 i‡(!(
	`BB_SQUARE
(
§c
Ë& 
bﬂrd
->
põ˚sofcﬁ‹
[bﬂrd->
tomove
]))

4016 *
îrmsg
 = "!!! You don't haveáÖieceÅhere.";

4021 
põ˚
 = 
	`bﬂrd_põ˚©squ¨e
(
bﬂrd
, 
§c
, 
NULL
);

4022 
moves
 = 
	`bﬂrd_©ècks‰om
(
bﬂrd
, 
§c
, 
põ˚
, bﬂrd->
tomove
) &

4023 (~(
bﬂrd
->
põ˚sofcﬁ‹
[bﬂrd->
tomove
]));

4024 
move
 |
põ˚
 << 
MOV_INDEX_PIECE
;

4027 i‡(
põ˚
 =
PAWN
)

4030 
moves
 &
bﬂrd
->
põ˚sofcﬁ‹
[
	`OTHERCOLOR
(bﬂrd->
tomove
)];

4033 i‡((!!(
	`MOV_PROM
(
move
))) ^

4034 (!!(
	`ROW
(
de°
Ë=
	`HOMEROW
(
	`OTHERCOLOR
(
bﬂrd
->
tomove
)))))

4036 i‡(!!(
	`MOV_PROM
(
move
))) {

4037 *
îrmsg
 = "!!! Pawns don'tÖromoteÜikeÅhat.";

4039 *
îrmsg
 = "!!! Promote into what? (N/B/R/Q)";

4044 i‡(
	`BB_SQUARE
(
de°
Ë& 
moves
)

4046 
move
 |1 << 
MOV_INDEX_CAPT
;

4047 
move
 |
	`bﬂrd_põ˚©squ¨e
(
bﬂrd
, 
de°
, 
NULL
Ë<< 
MOV_INDEX_CAPTPC
;

4048  
	`move_checksuicide
(
bﬂrd
, 
move
, 
îrmsg
);

4051 i‡(
bﬂrd
->
ï
 && 
de°
 == board->ep)

4053 
move
 |(0x1 << 
MOV_INDEX_EP
) |

4054 (0x1 << 
MOV_INDEX_CAPT
) |

4055 (
PAWN
 << 
MOV_INDEX_CAPTPC
);

4056  
	`move_checksuicide
(
bﬂrd
, 
move
, 
îrmsg
);

4059 
˛órsqu¨es
 = ~
bﬂrd
->
occupõd
;

4062 i‡(
∑wnmoves
[
bﬂrd
->
tomove
][
§c
] & 
˛órsqu¨es
)

4066 i‡(
	`BB_SQUARE
(
de°
Ë=
∑wnmoves
[
bﬂrd
->
tomove
][
§c
])

4068  
	`move_checksuicide
(
bﬂrd
, 
move
, 
îrmsg
);

4071 i‡(((
bﬂrd
->
tomove
 =
WHITE
) &&

4072 (
∑wnmoves
[
bﬂrd
->
tomove
][
§c
+8] & 
˛órsqu¨es
) &&

4073 (
	`BB_SQUARE
(
de°
Ë=
∑wnmoves
[
bﬂrd
->
tomove
][
§c
+8])) ||

4074 ((
bﬂrd
->
tomove
 =
BLACK
) &&

4075 (
∑wnmoves
[
bﬂrd
->
tomove
][
§c
-8] & 
˛órsqu¨es
) &&

4076 (
	`BB_SQUARE
(
de°
Ë=
∑wnmoves
[
bﬂrd
->
tomove
][
§c
-8])))

4078  
	`move_checksuicide
(
bﬂrd
, 
move
, 
îrmsg
);

4081 *
îrmsg
 = "!!! Pawns can't moveÜikeÅhat.";

4085 i‡(
	`MOV_PROM
(
move
))

4087 *
îrmsg
 = "!!! You can'tÖromoteÇon-pawns!";

4092 i‡(
põ˚
 =
KING
)

4095 i‡(
bﬂrd
->
ˇ°À
[bﬂrd->
tomove
][
QUEENSIDE
] &&

4096 (
§c
 =
	`SQUARE
(
COL_E
,
	`HOMEROW
(
bﬂrd
->
tomove
))) &&

4097 (
de°
 =
	`SQUARE
(
COL_C
,
	`HOMEROW
(
bﬂrd
->
tomove
))))

4100 i‡(
ˇ°À_˛órsqu¨es
[
bﬂrd
->
tomove
][
QUEENSIDE
] & bﬂrd->
occupõd
) {

4101 *
îrmsg
 = "!!! Castling squaresáre blocked.";

4103 } i‡(
	`bﬂrd_squ¨eßª©ècked
(
bﬂrd
, 
ˇ°À_ß„squ¨es
[bﬂrd->
tomove
][
QUEENSIDE
], 
	`OTHERCOLOR
(board->tomove))) {

4104 *
îrmsg
 = "!!! Can't castleÅhrough check.";

4108 
move
 |0x1 << 
MOV_INDEX_CASTLE
;

4109  
move
;

4112 i‡(
bﬂrd
->
ˇ°À
[bﬂrd->
tomove
][
KINGSIDE
] &&

4113 (
§c
 =
	`SQUARE
(
COL_E
,
	`HOMEROW
(
bﬂrd
->
tomove
))) &&

4114 (
de°
 =
	`SQUARE
(
COL_G
,
	`HOMEROW
(
bﬂrd
->
tomove
))))

4117 i‡(
ˇ°À_˛órsqu¨es
[
bﬂrd
->
tomove
][
KINGSIDE
] & bﬂrd->
occupõd
) {

4118 *
îrmsg
 = "!!! Castling squaresáre blocked.";

4120 } i‡(
	`bﬂrd_squ¨eßª©ècked
(
bﬂrd
, 
ˇ°À_ß„squ¨es
[bﬂrd->
tomove
][
KINGSIDE
], 
	`OTHERCOLOR
(board->tomove))) {

4121 *
îrmsg
 = "!!! Can't castleÅhrough check.";

4125 
move
 |0x1 << 
MOV_INDEX_CASTLE
;

4126  
move
;

4130 i‡(
	`BB_SQUARE
(
de°
Ë& 
moves
)

4133 i‡(
	`BB_SQUARE
(
de°
Ë& 
bﬂrd
->
põ˚sofcﬁ‹
[
	`OTHERCOLOR
(bﬂrd->
tomove
)])

4135 
move
 |1 << 
MOV_INDEX_CAPT
;

4136 
move
 |
	`bﬂrd_põ˚©squ¨e
(
bﬂrd
, 
de°
, 
NULL
Ë<< 
MOV_INDEX_CAPTPC
;

4138 i‡(
	`bﬂrd_squ¨eißâacked
(
bﬂrd
, 
de°
, 
	`OTHERCOLOR
(bﬂrd->
tomove
)))

4140 *
îrmsg
 = "!!! Can't move king into check.";

4143  
move
;

4145 *
îrmsg
 = "!!! Kings can't moveÜikeÅhat.";

4152 i‡(
	`BB_SQUARE
(
de°
Ë& 
moves
)

4155 i‡(
	`BB_SQUARE
(
de°
Ë& 
bﬂrd
->
põ˚sofcﬁ‹
[
	`OTHERCOLOR
(bﬂrd->
tomove
)])

4157 
move
 |1 << 
MOV_INDEX_CAPT
;

4158 
move
 |
	`bﬂrd_põ˚©squ¨e
(
bﬂrd
, 
de°
, 
NULL
Ë<< 
MOV_INDEX_CAPTPC
;

4160  
	`move_checksuicide
(
bﬂrd
, 
move
, 
îrmsg
);

4162 *
îrmsg
 =

4163 
põ˚
 =
QUEEN
 ? "!!! Queens can't moveÜikeÅhat." :

4164 
põ˚
 =
ROOK
 ? "!!! Rooks can't moveÜikeÅhat." :

4165 
põ˚
 =
BISHOP
 ? "!!! Bishops can't moveÜikeÅhat." :

4169 
	}
}

4176 
move_t
 
	$move_checksuicide
(
bﬂrd_t
 *
bﬂrd
, 
move_t
 
move
, **
îrmsg
)

4178 
	`bﬂrd_≠∂ymove
(
bﬂrd
, 
move
);

4179 i‡(
	`bﬂrd_cﬁ‹öcheck
(
bﬂrd
, 
	`OTHERCOLOR
(bﬂrd->
tomove
)))

4181 
	`bﬂrd_undomove
(
bﬂrd
, 
move
);

4182 *
îrmsg
 = "!!! That wouldÖut you in check.";

4185 
	`bﬂrd_undomove
(
bﬂrd
, 
move
);

4186  
move
;

4187 
	}
}

4194 *
	$move_to°rög
(
move_t
 
m
)

4196 *
°rög
;

4198 
°rög
 = 
	`mÆloc
(6);

4199 
°rög
[0] = 0;

4200 
	`°rˇt
(
°rög
, 
squ¨íame
[
	`MOV_SRC
(
m
)]);

4201 
	`°rˇt
(
°rög
, 
squ¨íame
[
	`MOV_DEST
(
m
)]);

4202 i‡(
	`MOV_PROM
(
m
))

4205 
	`°rˇt
(
°rög
, 
põ˚«me
[
WHITE
][
	`MOV_PROMPC
(
m
)]);

4207  
°rög
;

4208 
	}
}

4214 
	#BOOK_MOVE_LENGTH
 4

	)

4217 c⁄° *
	gbook
[] = {

4631 
	$book_ønge
(*
löe
, *
°¨ç
, *
ídp
)

4633 
°¨t
, 
íd
;

4634 i‡(
	`ARRAY_SIZE
(
book
) == 0)  0;

4636 
°¨t
 = 0; sèπ < 
	`ARRAY_SIZE
(
book
); start++) {

4637 
ªsu…
 = 
	`°∫cmp
(
book
[
°¨t
], 
löe
, 
	`°æí
(line));

4638 i‡(
ªsu…
 < 0)

4640 i‡(
ªsu…
 > 0)

4643 
íd
 = 
°¨t
 + 1;Énd < 
	`ARRAY_SIZE
(
book
);Énd++) {

4644 
ªsu…
 = 
	`°∫cmp
(
book
[
íd
], 
löe
, 
	`°æí
(line));

4645 i‡(
ªsu…
 > 0)

4648 
	`as£π
(
ªsu…
 == 0 && "opening bookÇot sorted :(");

4651 *
°¨ç
 = 
°¨t
;

4652 *
ídp
 = 
íd
;

4656 
	}
}

4658 
	gbook_íabÀd
 = 1;

4664 
move_t
 
	$book_move
(*
löe
, 
bﬂrd_t
 *
bﬂrd
)

4666 
°¨t
, 
íd
;

4667 i‡(!
book_íabÀd
)  0;

4668 i‡(
	`book_ønge
(
löe
, &
°¨t
, &
íd
)) {

4669 
book_move_°r
[
BOOK_MOVE_LENGTH
+1];

4670 
move_t
 
book_move
;

4671 
move_ödex
;

4672 
ønd_öôed
 = 0;

4673 *
îrmsg
;

4674 i‡(!
ønd_öôed
) {

4675 
	`sgíønd
(()
	`gë_ticks
());

4676 
ønd_öôed
 = 1;

4678 
	`as£π
(
íd
 - 
°¨t
 > 0);

4679 
move_ödex
 = (
	`gíønd
(Ë% (
íd
-
°¨t
)) + start;

4680 
	`°∫˝y
(
book_move_°r
, &
book
[
move_ödex
][
	`°æí
(
löe
)],

4681 
BOOK_MOVE_LENGTH
);

4682 
book_move_°r
[
BOOK_MOVE_LENGTH
] = 0;

4683 
book_move
 = 
	`move_i¶egÆ
(
bﬂrd
, 
book_move_°r
, &
îrmsg
);

4684 i‡(!
book_move
) {

4685 
	`£t_curs‹_pos
(0,0);

4686 
	`¥ötf
("BUG:ÖleaseÉmail bblum@cs.cmu.eduÅhe following: \n");

4687 
	`¥ötf
("Löe: \"%s\"\n", 
löe
);

4688 
	`¥ötf
("Aâem±ed bookÜöe: \"%s\"\n", 
book
[
move_ödex
]);

4689 
	`¥ötf
("Aâem±ed move: \"%s\"\n", 
book_move_°r
);

4690 
	`as£π
(0 && "IllegalÜine in opening book?");

4692  
book_move
;

4696 
	}
}

4702 
	#ENGINE_REPEATED_BUCKETS
 127

	)

4710 
ígöe_t
 *
	$ígöe_öô
(
£¨ch_‚
 
£¨ch
)

4712 
ígöe_t
 *
e
 = 
	`mÆloc
((engine_t));

4713 
e
->
bﬂrd
 = 
	`bﬂrd_öô
();

4714 
e
->
£¨ch
 = search;

4715 
e
->
löe
[0] = '\0';

4716 
e
->
löe_moves
 = 0;

4717 
e
->
öbook
 = 1;

4718  
e
;

4719 
	}
}

4721 
	#SEARCHTIME_DEFAULT
 5

	)

4722 
	#SEARCHTIME_MAX
 60

	)

4723 
	g£¨chtime
 = 
SEARCHTIME_DEFAULT
;

4725 
outbuf_size
;

4726 
ãxt_loud
;

4727 
outbuf
[];

4728 
ouçut
();

4733 *
	$ígöe_gíî©emove
(
ígöe_t
 *
e
)

4735 i‡(
e
->
öbook
)

4737 
move_t
 
move
 = 
	`book_move
(
e
->
löe
,É->
bﬂrd
);

4738 i‡(
move
)

4742 *
°r
 = 
	`move_to°rög
(
move
);

4743 i‡(
ãxt_loud
) {

4744 
	`¢¥ötf
(
outbuf
, 
outbuf_size
,

4745 "My move: %†(‰om o≥nög book)", 
°r
);

4746 
	`ouçut
();

4748  
°r
;

4754 
e
->
öbook
 = 0;

4758  
	`move_to°rög
(
e
->
	`£¨ch
”->
bﬂrd
, 
£¨chtime
, 
NULL
, NULL));

4759 
	}
}

4765 
	$ígöe_≠∂ymove
(
ígöe_t
 *
e
, *
°r
, **
îrmsg
)

4769 
move_t
 
move
 = 
	`move_i¶egÆ
(
e
->
bﬂrd
, 
°r
, 
îrmsg
);

4770 i‡(
move
 == 0) {

4774 i‡(
	`°æí
(
e
->
löe
Ë< 
BOOK_LINE_MAX_LENGTH
-6) {

4775 
	`°rˇt
(
e
->
löe
, 
°r
);

4776 
	`°rˇt
(
e
->
löe
, " ");

4777 
	`as£π
(
e
->
löe_moves
 =e->
bﬂrd
->
moves
);

4778 
e
->
löe_moves
++;

4781 
	`bﬂrd_≠∂ymove
(
e
->
bﬂrd
, 
move
);

4784 
	}
}

4786 
	$ígöe_undomove
(
ígöe_t
 *
e
)

4788 
	`as£π
(
e
->
bﬂrd
->
moves
 > 0);

4789 i‡(
e
->
löe_moves
 =e->
bﬂrd
->
moves
) {

4790 
i
 = 
	`°æí
(
e
->
löe
)-1;

4791 
	`as£π
(
i
 > 0);

4792 
	`as£π
(
e
->
löe
[
i
] == ' ');

4793 i‡(
e
->
löe_moves
 == 1) {

4794 
e
->
löe
[0] = 0;

4796 
i
--; i > 0 && 
e
->
löe
[i] != ' '; i--) { ; }

4797 
	`as£π
(
i
 > 0);

4798 
e
->
löe
[
i
+1] = 0;

4800 
e
->
löe_moves
--;

4802 
e
->
öbook
 = 1;

4803 
	`bﬂrd_undomove
(
e
->
bﬂrd
,É->bﬂrd->
hi°‹y
[e->bﬂrd->
moves
-1].
move
);

4804 
	}
}

4806 
	$ígöe_de°roy
(
ígöe_t
 *
e
)

4808 i‡(
e
 =
NULL
)

4812 
	`bﬂrd_de°roy
(
e
->
bﬂrd
);

4813 
	`‰ì
(
e
);

4815 
	}
}

4822 
	#EVAL_LIM_ENDGAME
 1600

	)

4824 
	#EVAL_LIM_ENDGAME2
 2000

	)

4826 
	#EVAL_CASTLE_BONUS
 20

	)

4828 
öt16_t
 
	gevÆ_põ˚vÆue
[6] = { 100, 300, 300, 500, 900, 0 };

4829 
öt16_t
 
	gevÆ_põ˚vÆue_ídgame
[6] = { 125, 300, 300, 550, 1200, 0 };

4838 
öt16_t
 
	gevÆ_squ¨evÆue
[2][6][64] = {

4982 
öt16_t
 
	gevÆ_squ¨evÆue_ídgame
[2][6][64] = {

5127 
öt16_t
 
evÆ_ídgame
(
bﬂrd_t
 *);

5131 
	#EVAL_BLOCKED_PAWN
 -25

	)

5133 
	#BB_C2D4
 (
	`BB_SQUARE
(
C2
Ë| BB_SQUARE(
D4
))

	)

5134 
	#BB_C2D4E4
 (
BB_C2D4
 | 
	`BB_SQUARE
(
E4
))

	)

5135 
	#BB_C7D5
 (
	`BB_SQUARE
(
C7
Ë| BB_SQUARE(
D5
))

	)

5136 
	#BB_C7D5E5
 (
BB_C7D5
 | 
	`BB_SQUARE
(
E5
))

	)

5138 
	#EVAL_BISHOP_PAIR
 20

	)

5139 
	#EVAL_KNIGHT_PAIR
 -20

	)

5141 
	#EVAL_ROOK_OPENFILE
 10

	)

5142 
	#EVAL_ROOK_OPENFILE_MULTIPLIER
 3

	)

5145 
	#EVAL_ROOK_RANK7_MULTIPLIER
 12

	)

5148 
	#EVAL_OUTPOST_BONUS
 32

	)

5154 
öt16_t
 
	g∑wncovî_ønk2
[4] = { -80, -40, 0, 5 };

5155 
öt16_t
 
	g∑wncovî_ønk3
[4] = { 0, 5, 20, 40 };

5157 
	#EVAL_KINGFILEOPEN
 -35

	)

5159 
	#EVAL_ADJACENTFILEOPEN
 -15

	)

5163 
	#EVAL_TROPISM_MAX
 192

	)

5166 
	gå›ism_ri˚
[15] = { 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5};

5169 
	gå›ism_põ˚sˇÀ
[6] = { 3, 2, 2, 1, 0, 0 };

5171 
öt16_t
 
	$å›ism
(
squ¨e_t
 
a
, squ¨e_à
b
, 
põ˚_t
 
põ˚
)

5173 
öt16_t
 
rowdi°
, 
cﬁdi°
;

5175 
rowdi°
 = 
	`ROW
(
a
Ë- ROW(
b
);

5176 i‡(
rowdi°
 < 0) {Ñowdist = -rowdist; }

5177 
cﬁdi°
 = 
	`COL
(
a
Ë- COL(
b
);

5178 i‡(
cﬁdi°
 < 0) { coldist = -coldist; }

5182  (
EVAL_TROPISM_MAX
 >> 
å›ism_ri˚
[
rowdi°
 + 
cﬁdi°
]) >>

5183 
å›ism_põ˚sˇÀ
[
põ˚
];

5184 
	}
}

5186 
	$evÆ_i£ndgame
(
bﬂrd_t
 *
bﬂrd
)

5188 i‡(
bﬂrd
->
pos
[
WHITE
][
QUEEN
] | bﬂrd->pos[
BLACK
][QUEEN])

5190  (
bﬂrd
->
m©îül
[
WHITE
] <
EVAL_LIM_ENDGAME
) ||

5191 (
bﬂrd
->
m©îül
[
BLACK
] <
EVAL_LIM_ENDGAME
);

5193  (
bﬂrd
->
m©îül
[
WHITE
] <
EVAL_LIM_ENDGAME2
) ||

5194 (
bﬂrd
->
m©îül
[
BLACK
] <
EVAL_LIM_ENDGAME2
);

5195 
	}
}

5200 
öt16_t
 
	$evÆ
(
bﬂrd_t
 *
bﬂrd
)

5202 
põ˚
, 
squ¨e
;

5203 
bôbﬂrd_t
 
põ˚pos
;

5205 
öt16_t
 
sc‹e_whôe
, 
sc‹e_bœck
;

5208 
öt16_t
 
kß„ty_whôe
, 
kß„ty_bœck
;

5209 
squ¨e_t
 
kögsq_whôe
, 
kögsq_bœck
;

5211 
num_põ˚s
;

5213 
bôbﬂrd_t
 
hﬁes_whôe
, 
hﬁes_bœck
;

5216 i‡(
	`evÆ_i£ndgame
(
bﬂrd
))

5218  
	`evÆ_ídgame
(
bﬂrd
);

5222 
sc‹e_whôe
 = 0; 
sc‹e_bœck
 = 0;

5223 
kß„ty_whôe
 = 0; 
kß„ty_bœck
 = 0;

5224 
kögsq_whôe
 = 
	`BITSCAN
(
bﬂrd
->
pos
[
WHITE
][
KING
]);

5225 
kögsq_bœck
 = 
	`BITSCAN
(
bﬂrd
->
pos
[
BLACK
][
KING
]);

5234 
põ˚
 = 1;Öiece < 5;Öiece++)

5236 
põ˚pos
 = 
bﬂrd
->
pos
[
WHITE
][
põ˚
];

5237 
põ˚pos
)

5239 
squ¨e
 = 
	`BITSCAN
(
põ˚pos
);

5240 
põ˚pos
 ^
	`BB_SQUARE
(
squ¨e
);

5241 
sc‹e_whôe
 +
evÆ_squ¨evÆue
[
WHITE
][
põ˚
][
squ¨e
];

5244 
kß„ty_bœck
 -
	`å›ism
(
squ¨e
, 
kögsq_bœck
, 
põ˚
);

5246 i‡(
põ˚
 =
ROOK
)

5249 i‡(!(
bﬂrd
->
pos
[
WHITE
][
PAWN
] & 
	`BB_FILE
(
	`COL
(
squ¨e
))))

5251 
sc‹e_whôe
 +
EVAL_ROOK_OPENFILE
;

5254 
sc‹e_whôe
 +
EVAL_ROOK_OPENFILE_MULTIPLIER
 * 
	`POPCOUNT
(
cﬁ©ècks
[(
bﬂrd
->
occupõd90
 >> (8 * 
	`COL
(
squ¨e
))Ë& 0xFF][
	`ROW
(square)]);

5259 
sc‹e_whôe
 +
evÆ_squ¨evÆue
[
WHITE
][
KING
][
kögsq_whôe
];

5264 
põ˚
 = 1;Öiece < 5;Öiece++)

5266 
põ˚pos
 = 
bﬂrd
->
pos
[
BLACK
][
põ˚
];

5267 
põ˚pos
)

5269 
squ¨e
 = 
	`BITSCAN
(
põ˚pos
);

5270 
põ˚pos
 ^
	`BB_SQUARE
(
squ¨e
);

5271 
sc‹e_bœck
 +
evÆ_squ¨evÆue
[
BLACK
][
põ˚
][
squ¨e
];

5273 
kß„ty_whôe
 -
	`å›ism
(
squ¨e
, 
kögsq_whôe
, 
põ˚
);

5276 i‡(
põ˚
 =
ROOK
)

5279 i‡(!(
bﬂrd
->
pos
[
BLACK
][
PAWN
] & 
	`BB_FILE
(
	`COL
(
squ¨e
))))

5281 
sc‹e_bœck
 +
EVAL_ROOK_OPENFILE
;

5284 
sc‹e_bœck
 +
EVAL_ROOK_OPENFILE_MULTIPLIER
 * 
	`POPCOUNT
(
cﬁ©ècks
[(
bﬂrd
->
occupõd90
 >> (8 * 
	`COL
(
squ¨e
))Ë& 0xFF][
	`ROW
(square)]);

5289 
sc‹e_bœck
 +
evÆ_squ¨evÆue
[
BLACK
][
KING
][
kögsq_whôe
];

5295 i‡(
	`POPCOUNT
(
bﬂrd
->
pos
[
WHITE
][
BISHOP
]Ë> 1Ë{ 
sc‹e_whôe
 +
EVAL_BISHOP_PAIR
; }

5296 i‡(
	`POPCOUNT
(
bﬂrd
->
pos
[
WHITE
][
KNIGHT
]Ë> 1Ë{ 
sc‹e_whôe
 +
EVAL_KNIGHT_PAIR
; }

5297 i‡(
	`POPCOUNT
(
bﬂrd
->
pos
[
BLACK
][
BISHOP
]Ë> 1Ë{ 
sc‹e_bœck
 +
EVAL_BISHOP_PAIR
; }

5298 i‡(
	`POPCOUNT
(
bﬂrd
->
pos
[
BLACK
][
KNIGHT
]Ë> 1Ë{ 
sc‹e_bœck
 +
EVAL_KNIGHT_PAIR
; }

5300 
sc‹e_whôe
 +
	`evÆ_∑wn°ru˘uª
(
bﬂrd
, 
WHITE
, &
hﬁes_whôe
);

5301 
sc‹e_bœck
 +
	`evÆ_∑wn°ru˘uª
(
bﬂrd
, 
BLACK
, &
hﬁes_bœck
);

5306 
hﬁes_bœck
 &
	`bﬂrd_∑w«âacks
(
bﬂrd
->
pos
[
WHITE
][
PAWN
], WHITE) &

5307 (
bﬂrd
->
pos
[
WHITE
][
KNIGHT
] | bﬂrd->pos[WHITE][
BISHOP
]) &

5308 ~(
BB_FILEA
 | 
BB_FILEH
);

5309 
sc‹e_whôe
 +
EVAL_OUTPOST_BONUS
 * 
	`POPCOUNT
(
hﬁes_bœck
);

5311 
hﬁes_whôe
 &
	`bﬂrd_∑w«âacks
(
bﬂrd
->
pos
[
BLACK
][
PAWN
], BLACK) &

5312 (
bﬂrd
->
pos
[
BLACK
][
KNIGHT
] | bﬂrd->pos[BLACK][
BISHOP
]) &

5313 ~(
BB_FILEA
 | 
BB_FILEH
);

5314 
sc‹e_bœck
 +
EVAL_OUTPOST_BONUS
 * 
	`POPCOUNT
(
hﬁes_whôe
);

5316 i‡(((
bﬂrd
->
põ˚sofcﬁ‹
[
WHITE
] ^ bﬂrd->
pos
[WHITE][
PAWN
]Ë& 
	`BB_SQUARE
(
D3
)) &&

5317 (
bﬂrd
->
pos
[
WHITE
][
PAWN
] & 
	`BB_SQUARE
(
D2
)))

5319 
sc‹e_whôe
 +
EVAL_BLOCKED_PAWN
;

5321 i‡(((
bﬂrd
->
põ˚sofcﬁ‹
[
WHITE
] ^ bﬂrd->
pos
[WHITE][
PAWN
]Ë& 
	`BB_SQUARE
(
E3
)) &&

5322 (
bﬂrd
->
pos
[
WHITE
][
PAWN
] & 
	`BB_SQUARE
(
E2
)))

5324 
sc‹e_whôe
 +
EVAL_BLOCKED_PAWN
;

5326 i‡((
bﬂrd
->
pos
[
WHITE
][
KNIGHT
] & 
	`BB_SQUARE
(
C3
)) &&

5327 !((
bﬂrd
->
pos
[
WHITE
][
PAWN
] ^ 
BB_C2D4
Ë& 
BB_C2D4E4
))

5329 
sc‹e_whôe
 +
EVAL_BLOCKED_PAWN
;

5332 i‡(((
bﬂrd
->
põ˚sofcﬁ‹
[
BLACK
] ^ bﬂrd->
pos
[BLACK][
PAWN
]Ë& 
	`BB_SQUARE
(
D6
)) &&

5333 (
bﬂrd
->
pos
[
BLACK
][
PAWN
] & 
	`BB_SQUARE
(
D7
)))

5335 
sc‹e_bœck
 +
EVAL_BLOCKED_PAWN
;

5337 i‡(((
bﬂrd
->
põ˚sofcﬁ‹
[
BLACK
] ^ bﬂrd->
pos
[BLACK][
PAWN
]Ë& 
	`BB_SQUARE
(
E6
)) &&

5338 (
bﬂrd
->
pos
[
BLACK
][
PAWN
] & 
	`BB_SQUARE
(
E7
)))

5340 
sc‹e_bœck
 +
EVAL_BLOCKED_PAWN
;

5342 i‡((
bﬂrd
->
pos
[
BLACK
][
KNIGHT
] & 
	`BB_SQUARE
(
C6
)) &&

5343 !((
bﬂrd
->
pos
[
BLACK
][
PAWN
] ^ 
BB_C7D5
Ë& 
BB_C7D5E5
))

5345 
sc‹e_bœck
 +
EVAL_BLOCKED_PAWN
;

5348 
sc‹e_whôe
 +
EVAL_ROOK_RANK7_MULTIPLIER
 <<

5349 
	`POPCOUNT
((
bﬂrd
->
pos
[
WHITE
][
ROOK
] | bﬂrd->pos[WHITE][
QUEEN
]) &

5350 
BB_RANK7
);

5351 
sc‹e_bœck
 +
EVAL_ROOK_RANK7_MULTIPLIER
 <<

5352 
	`POPCOUNT
((
bﬂrd
->
pos
[
BLACK
][
ROOK
] | bﬂrd->pos[BLACK][
QUEEN
]) &

5353 
BB_RANK2
);

5359 i‡(
bﬂrd
->
hasˇ°Àd
[
WHITE
])

5361 
kß„ty_whôe
 +
EVAL_CASTLE_BONUS
;

5363 
num_põ˚s
 = 
	`POPCOUNT
(
kög©ècks
[
kögsq_whôe
] &

5364 
bﬂrd
->
pos
[
WHITE
][
PAWN
] & 
BB_RANK2
);

5365 
kß„ty_whôe
 +
∑wncovî_ønk2
[
num_põ˚s
];

5367 
num_põ˚s
 = 
	`POPCOUNT
(
kög©ècks
[
kögsq_whôe
 + 8] &

5368 
bﬂrd
->
pos
[
WHITE
][
PAWN
] & 
BB_RANK3
);

5369 
kß„ty_whôe
 +
∑wncovî_ønk3
[
num_põ˚s
];

5372 i‡(!(
bﬂrd
->
pos
[
WHITE
][
PAWN
] & 
	`BB_FILE
(
	`COL
(
kögsq_whôe
))))

5374 
kß„ty_whôe
 +
EVAL_KINGFILEOPEN
;

5376 
	`COL
(
kögsq_whôe
))

5378 
COL_A
:

5379 
COL_E
:

5380 
COL_F
:

5381 
COL_G
:

5382 i‡(!(
bﬂrd
->
pos
[
WHITE
][
PAWN
] & 
	`BB_FILE
(
	`COL
(
kögsq_whôe
) + 1)))

5384 
kß„ty_whôe
 +
EVAL_ADJACENTFILEOPEN
;

5387 
COL_H
:

5388 
COL_D
:

5389 
COL_C
:

5390 
COL_B
:

5391 i‡(!(
bﬂrd
->
pos
[
WHITE
][
PAWN
] & 
	`BB_FILE
(
	`COL
(
kögsq_whôe
) - 1)))

5393 
kß„ty_whôe
 +
EVAL_ADJACENTFILEOPEN
;

5399 
sc‹e_whôe
 +
kß„ty_whôe
 * 
bﬂrd
->
m©îül
[
BLACK
] / 3100;

5404 i‡(
bﬂrd
->
hasˇ°Àd
[
BLACK
])

5406 
kß„ty_bœck
 +
EVAL_CASTLE_BONUS
;

5408 
num_põ˚s
 = 
	`POPCOUNT
(
kög©ècks
[
kögsq_bœck
] &

5409 
bﬂrd
->
pos
[
BLACK
][
PAWN
] & 
BB_RANK7
);

5410 
kß„ty_bœck
 +
∑wncovî_ønk2
[
num_põ˚s
];

5412 
num_põ˚s
 = 
	`POPCOUNT
(
kög©ècks
[
kögsq_bœck
 - 8] &

5413 
bﬂrd
->
pos
[
BLACK
][
PAWN
] & 
BB_RANK6
);

5414 
kß„ty_bœck
 +
∑wncovî_ønk3
[
num_põ˚s
];

5417 i‡(!(
bﬂrd
->
pos
[
BLACK
][
PAWN
] & 
	`BB_FILE
(
	`COL
(
kögsq_bœck
))))

5419 
kß„ty_bœck
 +
EVAL_KINGFILEOPEN
;

5421 
	`COL
(
kögsq_bœck
))

5423 
COL_A
:

5424 
COL_E
:

5425 
COL_F
:

5426 
COL_G
:

5427 i‡(!(
bﬂrd
->
pos
[
BLACK
][
PAWN
] & 
	`BB_FILE
(
	`COL
(
kögsq_bœck
) + 1)))

5429 
kß„ty_bœck
 +
EVAL_ADJACENTFILEOPEN
;

5432 
COL_H
:

5433 
COL_D
:

5434 
COL_C
:

5435 
COL_B
:

5436 i‡(!(
bﬂrd
->
pos
[
BLACK
][
PAWN
] & 
	`BB_FILE
(
	`COL
(
kögsq_bœck
) - 1)))

5438 
kß„ty_bœck
 +
EVAL_ADJACENTFILEOPEN
;

5444 
sc‹e_bœck
 +
kß„ty_bœck
 * 
bﬂrd
->
m©îül
[
WHITE
] / 3100;

5448 i‡(
bﬂrd
->
tomove
 =
WHITE
)

5450  (
sc‹e_whôe
 + 
bﬂrd
->
m©îül
[
WHITE
]) -

5451 (
sc‹e_bœck
 + 
bﬂrd
->
m©îül
[
BLACK
]);

5455  (
sc‹e_bœck
 + 
bﬂrd
->
m©îül
[
BLACK
]) -

5456 (
sc‹e_whôe
 + 
bﬂrd
->
m©îül
[
WHITE
]);

5458 
	}
}

5463 
öt16_t
 
	$evÆ_ídgame
(
bﬂrd_t
 *
bﬂrd
)

5465 
põ˚
, 
squ¨e
;

5466 
bôbﬂrd_t
 
põ˚pos
;

5468 
öt16_t
 
sc‹e_whôe
 = 0, 
sc‹e_bœck
 = 0;

5469 
öt16_t
 
dif„ªn˚
 = 
bﬂrd
->
m©îül
[
WHITE
] -

5470 
bﬂrd
->
m©îül
[
BLACK
];

5477 i‡(!(
bﬂrd
->
pos
[
WHITE
][
PAWN
] | bﬂrd->pos[
BLACK
][PAWN]))

5480 i‡(
dif„ªn˚
 < 0) { difference = -difference; }

5484 i‡(
dif„ªn˚
 < 400)

5490 i‡(
dif„ªn˚
 == 600)

5493 i‡((
bﬂrd
->
m©îül
[
BLACK
] == 0) &&

5494 (
bﬂrd
->
põ˚sofcﬁ‹
[
WHITE
] ==

5495 (
bﬂrd
->
pos
[
WHITE
][
KING
] |

5496 
bﬂrd
->
pos
[
WHITE
][
KNIGHT
])))

5501 i‡((
bﬂrd
->
m©îül
[
WHITE
] == 0) &&

5502 (
bﬂrd
->
põ˚sofcﬁ‹
[
BLACK
] ==

5503 (
bﬂrd
->
pos
[
BLACK
][
KING
] |

5504 
bﬂrd
->
pos
[
BLACK
][
KNIGHT
])))

5512 i‡(
dif„ªn˚
 == 400)

5515 i‡((
bﬂrd
->
m©îül
[
BLACK
] == 0) &&

5516 (
bﬂrd
->
pos
[
WHITE
][
BISHOP
] !
	`BB
(0x0)) &&

5517 (
bﬂrd
->
pos
[
WHITE
][
PAWN
] & (
COL_A
 | 
COL_H
)))

5519 
squ¨e_t
 
∑wnsqu¨e
 = 
	`BITSCAN
(
bﬂrd
->
pos
[
WHITE
][
PAWN
]);

5520 
squ¨e_t
 
bish›squ¨e
 = 
	`BITSCAN
(
bﬂrd
->
pos
[
WHITE
][
BISHOP
]);

5521 
squ¨e_t
 
¥omŸi⁄squ¨e
 = 
	`SQUARE
(
	`COL
(
∑wnsqu¨e
),
RANK_8
);

5524 i‡((
	`PARITY
(
bish›squ¨e
Ë!PARITY(
¥omŸi⁄squ¨e
)) &&

5525 (
kög©ècks
[
	`BITSCAN
(
bﬂrd
->
pos
[
BLACK
][
KING
])] &

5526 
	`BB_SQUARE
(
¥omŸi⁄squ¨e
)))

5532 i‡((
bﬂrd
->
m©îül
[
WHITE
] == 0) &&

5533 (
bﬂrd
->
pos
[
BLACK
][
BISHOP
] !
	`BB
(0x0)) &&

5534 (
bﬂrd
->
pos
[
BLACK
][
PAWN
] & (
COL_A
 | 
COL_H
)))

5536 
squ¨e_t
 
∑wnsqu¨e
 = 
	`BITSCAN
(
bﬂrd
->
pos
[
BLACK
][
PAWN
]);

5537 
squ¨e_t
 
bish›squ¨e
 = 
	`BITSCAN
(
bﬂrd
->
pos
[
BLACK
][
BISHOP
]);

5538 
squ¨e_t
 
¥omŸi⁄squ¨e
 = 
	`SQUARE
(
	`COL
(
∑wnsqu¨e
),
RANK_1
);

5541 i‡((
	`PARITY
(
bish›squ¨e
Ë!PARITY(
¥omŸi⁄squ¨e
)) &&

5542 (
kög©ècks
[
	`BITSCAN
(
bﬂrd
->
pos
[
WHITE
][
KING
])] &

5543 
	`BB_SQUARE
(
¥omŸi⁄squ¨e
)))

5554 i‡(
dif„ªn˚
 == 100)

5557 i‡(
bﬂrd
->
m©îül
[
BLACK
] == 0)

5559 
squ¨e_t
 
whôekög
 = 
	`BITSCAN
(
bﬂrd
->
pos
[
WHITE
][
KING
]);

5560 
squ¨e_t
 
bœckkög
 = 
	`BITSCAN
(
bﬂrd
->
pos
[
BLACK
][
KING
]);

5561 
squ¨e_t
 
whôïawn
 = 
	`BITSCAN
(
bﬂrd
->
pos
[
WHITE
][
PAWN
]);

5562 
∑wncﬁ
 = 
	`COL
(
whôïawn
);

5564 i‡(
∑wncﬁ
 =
COL_A
 ||Öawncﬁ =
COL_H
)

5568 i‡((
	`COL
(
bœckkög
Ë=
∑wncﬁ
) &&

5569 (
bœckkög
 > 
whôïawn
))

5576 i‡(
	`COL
(
whôekög
Ë=
∑wncﬁ
)

5578 i‡(
∑wncﬁ
 =
COL_A
)

5580 i‡(
bœckkög
 - 
whôekög
 == 2)

5587 i‡(
whôekög
 - 
bœckkög
 == 2)

5594 i‡((
bœckkög
 - 
whôekög
 == 16) &&

5595 (
	`ROW
(
bœckkög
Ë!
RANK_8
))

5597 i‡(
whôïawn
 - 
whôekög
 == 8)

5601 i‡((
whôekög
 - 
whôïawn
 == 8) &&

5602 (
bﬂrd
->
tomove
 =
WHITE
))

5609 i‡(
bﬂrd
->
m©îül
[
WHITE
] == 0)

5611 
squ¨e_t
 
whôekög
 = 
	`BITSCAN
(
bﬂrd
->
pos
[
WHITE
][
KING
]);

5612 
squ¨e_t
 
bœckkög
 = 
	`BITSCAN
(
bﬂrd
->
pos
[
BLACK
][
KING
]);

5613 
squ¨e_t
 
bœck∑wn
 = 
	`BITSCAN
(
bﬂrd
->
pos
[
BLACK
][
PAWN
]);

5614 
∑wncﬁ
 = 
	`COL
(
bœck∑wn
);

5616 i‡(
∑wncﬁ
 =
COL_A
 ||Öawncﬁ =
COL_H
)

5620 i‡((
	`COL
(
whôekög
Ë=
∑wncﬁ
) &&

5621 (
whôekög
 < 
bœck∑wn
))

5628 i‡(
	`COL
(
bœckkög
Ë=
∑wncﬁ
)

5630 i‡(
∑wncﬁ
 =
COL_A
)

5632 i‡(
whôekög
 - 
bœckkög
 == 2)

5639 i‡(
bœckkög
 - 
whôekög
== 2)

5646 i‡((
bœckkög
 - 
whôekög
 == 16) &&

5647 (
	`ROW
(
whôekög
Ë!
RANK_1
))

5649 i‡(
bœckkög
 - 
bœck∑wn
 == 8)

5653 i‡((
bœck∑wn
 - 
bœckkög
 == 8) &&

5654 (
bﬂrd
->
tomove
 =
BLACK
))

5663 
põ˚
 = 0;Öiece < 6;Öiece++)

5665 
põ˚pos
 = 
bﬂrd
->
pos
[
WHITE
][
põ˚
];

5666 
põ˚pos
)

5668 
squ¨e
 = 
	`BITSCAN
(
põ˚pos
);

5669 
põ˚pos
 ^
	`BB_SQUARE
(
squ¨e
);

5670 
sc‹e_whôe
 +
evÆ_põ˚vÆue_ídgame
[
põ˚
] +

5671 
evÆ_squ¨evÆue_ídgame
[
WHITE
][
põ˚
][
squ¨e
];

5674 
põ˚
 = 0;Öiece < 6;Öiece++)

5676 
põ˚pos
 = 
bﬂrd
->
pos
[
BLACK
][
põ˚
];

5677 
põ˚pos
)

5679 
squ¨e
 = 
	`BITSCAN
(
põ˚pos
);

5680 
põ˚pos
 ^
	`BB_SQUARE
(
squ¨e
);

5681 
sc‹e_bœck
 +
evÆ_põ˚vÆue_ídgame
[
põ˚
] +

5682 
evÆ_squ¨evÆue_ídgame
[
BLACK
][
põ˚
][
squ¨e
];

5688 i‡(
bﬂrd
->
tomove
 =
WHITE
)

5690  
sc‹e_whôe
 - 
sc‹e_bœck
;

5694  
sc‹e_bœck
 - 
sc‹e_whôe
;

5696 
	}
}

5701 
öt16_t
 
	$evÆ_œzy
(
bﬂrd_t
 *
bﬂrd
)

5703  
bﬂrd
->
m©îül
[bﬂrd->
tomove
] -

5704 
bﬂrd
->
m©îül
[
	`OTHERCOLOR
(bﬂrd->
tomove
)];

5705 
	}
}

5711 
öt16_t
 
evÆ_squ¨evÆue
[2][6][64];

5715 
uöt8_t
 
	gmovñi°_m©îül
[] = { 1, 3, 3, 5, 9, 12 };

5718 
movñi°_födödex
(
uöt64_t
[2], 
uöt32_t
);

5723 
	$movñi°_add
(
movñi°_t
 *
ml
, 
uöt64_t
 
©èckedby
[2], 
uöt32_t
 
m
)

5725 
	`movñi°_addtohód
(
ml
, 
m
, 
	`movñi°_födödex
(
©èckedby
, m));

5726 
	}
}

5731 
	$movñi°_födödex
(
uöt64_t
 
©èckedby
[2], 
uöt32_t
 
m
)

5733 
öt16_t
 
m©îülgaö
;

5735 
tomove
 = 
	`MOV_COLOR
(
m
);

5737 i‡(
	`MOV_PROM
(
m
))

5739 i‡(
	`MOV_PROMPC
(
m
Ë=
QUEEN
)

5742  
MOVELIST_INDEX_PROM_QUEEN
 + 
	`MOV_CAPT
(
m
);

5744  
MOVELIST_INDEX_PROM_MINOR
;

5746 i‡(
	`MOV_CASTLE
(
m
))

5749  
MOVELIST_INDEX_CASTLE
 + (
	`COL
(
	`MOV_DEST
(
m
)Ë=
COL_G
);

5751 i‡(
	`MOV_CAPT
(
m
))

5753 
m©îülgaö
 = 
movñi°_m©îül
[
	`MOV_CAPTPC
(
m
)];

5756 i‡(
©èckedby
[
	`OTHERCOLOR
(
tomove
)] & 
	`BB_SQUARE
(
	`MOV_DEST
(
m
)))

5761 
m©îülgaö
 -
movñi°_m©îül
[
	`MOV_PIECE
(
m
)];

5763 i‡(
m©îülgaö
 == 0)

5765  
MOVELIST_INDEX_NEUTRAL
 + 
	`MOV_PIECE
(
m
);

5770 i‡(
m©îülgaö
 < 0)

5772  
MOVELIST_INDEX_MAT_LOSS
 + 
m©îülgaö
;

5777  
MOVELIST_INDEX_MAT_GAIN
 + 
m©îülgaö
;

5782 i‡(
©èckedby
[
	`OTHERCOLOR
(
tomove
)] & 
	`BB_SQUARE
(
	`MOV_DEST
(
m
)))

5787 
	`as£π
(
	`MOV_PIECE
(
m
Ë!
KING
);

5789 i‡(
©èckedby
[
tomove
] & 
	`BB_SQUARE
(
	`MOV_DEST
(
m
)))

5794 i‡(
	`MOV_PIECE
(
m
Ë!
PAWN
)

5798  
MOVELIST_INDEX_MAT_LOSS
 + 2 -

5799 
movñi°_m©îül
[
	`MOV_PIECE
(
m
)];

5807  
MOVELIST_INDEX_MAT_LOSS
 -

5808 
movñi°_m©îül
[
	`MOV_PIECE
(
m
)];

5814 i‡((
©èckedby
[
	`OTHERCOLOR
(
tomove
)] & ~(attackedby[tomove])) &

5815 
	`BB_SQUARE
(
	`MOV_SRC
(
m
)))

5817  
MOVELIST_INDEX_MAT_GAIN
 +

5818 
movñi°_m©îül
[
	`MOV_PIECE
(
m
)];

5821  
MOVELIST_INDEX_REGULAR
 +

5822 
evÆ_squ¨evÆue
[
tomove
][
	`MOV_PIECE
(
m
)][
	`MOV_DEST
(m)] -

5823 
evÆ_squ¨evÆue
[
tomove
][
	`MOV_PIECE
(
m
)][
	`MOV_SRC
(m)];

5824 
	}
}

5826 
	$movñi°_addtohód
(
movñi°_t
 *
mÕ
, 
uöt32_t
 
m
, 
ödex
)

5828 
movñi°_ö√r_t
 *
ml
 = *
mÕ
;

5830 
	`as£π
(
ödex
 < 
MOVELIST_NUM_BUCKETS
);

5832 
	`as£π
(
ml
->
subli°_cou¡
[
ödex
] < 
MOVELIST_SUBLIST_LENGTH
);

5833 
ml
->
¨øy
[
ödex
][ml->
subli°_cou¡
[ödex]] = 
m
;

5834 
ml
->
subli°_cou¡
[
ödex
]++;

5837 i‡(
ödex
 > 
ml
->
max
)

5839 
ml
->
max
 = 
ödex
;

5842 
	}
}

5844 
	$movñi°_i£m±y
(
movñi°_t
 *
mÕ
)

5846 
movñi°_ö√r_t
 *
ml
 = *
mÕ
;

5847  (
ml
->
subli°_cou¡
[ml->
max
] == 0);

5848 
	}
}

5851 
uöt32_t
 
	$movñi°_ªmove_max
(
movñi°_t
 *
mÕ
)

5853 
movñi°_ö√r_t
 *
ml
 = *
mÕ
;

5854 
uöt32_t
 
ªtu∫vÆ
 = 
ml
->
¨øy
[ml->
max
][--ml->
subli°_cou¡
[ml->max]];

5856 
	`movñi°_i£m±y
(
mÕ
))

5859 i‡(
ml
->
max
 == 0)

5863 
ml
->
max
--;

5865  
ªtu∫vÆ
;

5866 
	}
}

5873 
öt16_t
 
evÆ_squ¨evÆue
[2][6][64];

5875 
	sps_íåy_t
 {

5876 
bôbﬂrd_t
 
	mkey
;

5877 
bôbﬂrd_t
 
	mhﬁes
;

5878 
öt16_t
 
	mvÆue
;

5879 } 
	tps_íåy_t
;

5882 #i‚de‡
PS_NUM_BUCKETS


5883 
	#PS_NUM_BUCKETS
 (32 * 1024 * 1024 / (
ps_íåy_t
))

5885 
ps_íåy_t
 
ps_¨øy
[
PS_NUM_BUCKETS
];

	)

5887 
	$ps_add
(
bôbﬂrd_t
 
key
, bôbﬂrd_à
hﬁes
, 
öt16_t
 
vÆue
)

5889 
buckë
;

5892 
buckë
 = 
key
 % 
PS_NUM_BUCKETS
;

5894 
ps_¨øy
[
buckë
].
key
 = key;

5895 
ps_¨øy
[
buckë
].
hﬁes
 = holes;

5896 
ps_¨øy
[
buckë
].
vÆue
 = value;

5899 
	}
}

5904 
	#INT16_MIN
 (-(32767)-1)

	)

5905 
	#PAWNSTRUCTURE_LOOKUP_FAIL
 
INT16_MIN


	)

5906 
öt16_t
 
	$ps_gë
(
bôbﬂrd_t
 
key
, bôbﬂrd_à*
hﬁes
)

5908 
buckë
 = 
key
 % 
PS_NUM_BUCKETS
;

5909 i‡(
ps_¨øy
[
buckë
].
key
 == key)

5911 *
hﬁes
 = 
ps_¨øy
[
buckë
].holes;

5912  
ps_¨øy
[
buckë
].
vÆue
;

5914  
PAWNSTRUCTURE_LOOKUP_FAIL
;

5915 
	}
}

5918 #i‚de‡
PS_CHAIN_BONUS


5919 
	#PS_CHAIN_BONUS
 2

	)

5923 #i‚de‡
PS_DOUBLED_PENALTY


5924 
	#PS_DOUBLED_PENALTY
 8

	)

5928 #i‚de‡
PS_ISOLATED_PENALTY


5929 
	#PS_ISOLATED_PENALTY
 16

	)

5932 #i‚de‡
PS_BACKWARD_PENALTY


5933 
	#PS_BACKWARD_PENALTY
 8

	)

5937 
öt16_t
 
	g∑wn°ru˘uª_∑s£d_b⁄us
[2][8] = {

5947 
öt16_t
 
	$evÆ_∑wn°ru˘uª
(
bﬂrd_t
 *
bﬂrd
, 
cﬁ‹
, 
bôbﬂrd_t
 *
h
)

5950 
öt16_t
 
vÆue
;

5953 
öt16_t
 
unhashabÀ_b⁄us
 = 0;

5955 
squ¨e_t
 
squ¨e
;

5956 
bôbﬂrd_t
 
∑wns
, 
pos
, 
‰õnds
, 
evîybodyñ£
, 
behödmask
, 
hﬁes
;

5958 
∑wns
 = 
bﬂrd
->
pos
[
cﬁ‹
][
PAWN
];

5963 i‡((
vÆue
 = 
	`ps_gë
(
∑wns
, 
h
)Ë!
PAWNSTRUCTURE_LOOKUP_FAIL
)

5965 
∑wns
)

5967 
squ¨e
 = 
	`BITSCAN
(
∑wns
);

5968 
∑wns
 ^
	`BB_SQUARE
(
squ¨e
);

5969 i‡(
	`bﬂrd_∑w≈as£d
(
bﬂrd
, 
squ¨e
, 
cﬁ‹
))

5971 
unhashabÀ_b⁄us
 +
∑wn°ru˘uª_∑s£d_b⁄us
[
cﬁ‹
][
	`ROW
(
squ¨e
)];

5974  
vÆue
 + 
unhashabÀ_b⁄us
;

5979 
hﬁes
 = ~
	`BB_SQUARE
(0x0);

5981 
pos
 = 
∑wns
;

5982 
pos
)

5985 
squ¨e
 = 
	`BITSCAN
(
pos
);

5986 
pos
 ^
	`BB_SQUARE
(
squ¨e
);

5988 
vÆue
 +
evÆ_squ¨evÆue
[
cﬁ‹
][
PAWN
][
squ¨e
];

5991 i‡(
	`bﬂrd_∑w≈as£d
(
bﬂrd
, 
squ¨e
, 
cﬁ‹
))

5993 
unhashabÀ_b⁄us
 +
∑wn°ru˘uª_∑s£d_b⁄us
[
cﬁ‹
][
	`ROW
(
squ¨e
)];

5996 
evîybodyñ£
 = 
∑wns
 ^ 
	`BB_SQUARE
(
squ¨e
);

5999 
‰õnds
 = 
evîybodyñ£
 & 
∑w«âacks
[
cﬁ‹
][
squ¨e
];

6000 
vÆue
 +
PS_CHAIN_BONUS
 * 
	`POPCOUNT
(
‰õnds
);

6003 
‰õnds
 = 
evîybodyñ£
 & 
	`BB_FILE
(
	`COL
(
squ¨e
));

6004 
vÆue
 -
PS_DOUBLED_PENALTY
 * 
	`POPCOUNT
(
‰õnds
);

6007 
‰õnds
 = 
evîybodyñ£
 & 
bb_adja˚¡cﬁs
[
	`COL
(
squ¨e
)];

6009 i‡(
cﬁ‹
 =
WHITE
)

6011 
behödmask
 = (
	`BB_SQUARE
(
squ¨e
) ^ (BB_SQUARE(square) - 1)) |

6012 
	`BB_RANK
(
	`ROW
(
squ¨e
));

6016 
behödmask
 = (
	`BB_SQUARE
(
squ¨e
) ^ (-BB_SQUARE(square))) |

6017 
	`BB_RANK
(
	`ROW
(
squ¨e
));

6019 i‡(!(
‰õnds
 & 
behödmask
))

6021 
vÆue
 -
PS_BACKWARD_PENALTY
;

6023 i‡(!
‰õnds
)

6025 
vÆue
 -
PS_ISOLATED_PENALTY
;

6030 
hﬁes
 ^(
bb_∑s£d∑wnmask
[
cﬁ‹
][
squ¨e
] & ~
	`BB_FILE
(
	`COL
(square)));

6032 
	`ps_add
(
∑wns
, 
hﬁes
, 
vÆue
);

6033 *
h
 = 
hﬁes
;

6034  
vÆue
 + 
unhashabÀ_b⁄us
;

6035 
	}
}

6044 
	$p›˙t
(
uöt64_t
 
x
)

6046 
cou¡
 = 0;

6047 
x
)

6049 
cou¡
++;

6050 
x
 &= x - 1;

6052  
cou¡
;

6053 
	}
}

6058 
	$p›˙t2
(
uöt64_t
 
x
)

6060 
x
 -= (x >> 1) & 0x5555555555555555ull;

6061 
x
 = (x & 0x3333333333333333ull) + ((x >> 2) & 0x3333333333333333ull);

6062 
x
 = (x + (x >> 4)) & 0x0f0f0f0f0f0f0f0full;

6063 
x
 += x >> 8;

6064 
x
 += x >> 16;

6065 
x
 += x >> 32;

6066  
x
 & 0x7f;

6067 
	}
}

6072 
	$p›˙t3
(
uöt64_t
 
x
) {

6073 
x
 -= (x >> 1) & 0x5555555555555555ull;

6074 
x
 = (x & 0x3333333333333333ull) + ((x >> 2) & 0x3333333333333333ull);

6075 
x
 = (x + (x >> 4)) & 0x0f0f0f0f0f0f0f0full;

6076  (
x
 * 0x0101010101010101ull)>>56;

6077 
	}
}

6083 vﬁ©ûê
timeup
;

6084 
œzy
, 
n⁄œzy
;

6086 #i‚de‡
QUIESCENT_MAX_DEPTH


6088 
	#QUIESCENT_MAX_DEPTH
 8

	)

6091 
öt16_t
 
qÆphabëa
(
bﬂrd_t
 *, i¡16_t, i¡16_t, 
uöt8_t
);

6097 
öt16_t
 
	$quõs˚
(
bﬂrd_t
 *
bﬂrd
, 
öt16_t
 
Æpha
, i¡16_à
bëa
)

6099  
	`qÆphabëa
(
bﬂrd
, 
Æpha
, 
bëa
, 
QUIESCENT_MAX_DEPTH
);

6100 
	}
}

6108 
öt16_t
 
	$qÆphabëa
(
bﬂrd_t
 *
bﬂrd
, 
öt16_t
 
Æpha
, i¡16_à
bëa
,

6109 
uöt8_t
 
dïth
)

6111 
movñi°_t
 
moves
;

6112 
move_t
 
curmove
;

6114 
cﬁ‹
;

6121 
öt16_t
 
a
;

6124 
öt16_t
 
°™d_∑t
;

6126 i‡(
timeup
)

6134 
°™d_∑t
 = 
	`evÆ_œzy
(
bﬂrd
);

6136 i‡((
°™d_∑t
 > (
Æpha
 - 
EVAL_LAZY_THRESHHOLD
)) &&

6137 (
°™d_∑t
 < (
bëa
 + 
EVAL_LAZY_THRESHHOLD
)))

6139 
°™d_∑t
 = 
	`evÆ
(
bﬂrd
);

6140 
n⁄œzy
++;

6142 { 
œzy
++; }

6147 i‡(
dïth
 == 0)

6149  
°™d_∑t
;

6156 i‡(
°™d_∑t
 > 
Æpha
)

6158 i‡(
°™d_∑t
 >
bëa
)

6160  
°™d_∑t
;

6162 
Æpha
 = 
°™d_∑t
;

6164 
cﬁ‹
 = 
bﬂrd
->
tomove
;

6167 
	`bﬂrd_gíî©eˇ±uªs
(
bﬂrd
, &
moves
);

6168 !
	`movñi°_i£m±y
(&
moves
))

6170 i‡(
timeup
)

6174 
curmove
 = 
	`movñi°_ªmove_max
(&
moves
);

6176 
	`bﬂrd_≠∂ymove
(
bﬂrd
, 
curmove
);

6178 i‡(
	`bﬂrd_cﬁ‹öcheck
(
bﬂrd
, 
cﬁ‹
))

6180 
	`bﬂrd_undomove
(
bﬂrd
, 
curmove
);

6183 
a
 = -
	`qÆphabëa
(
bﬂrd
, -
bëa
, -
Æpha
, 
dïth
-1);

6184 
	`bﬂrd_undomove
(
bﬂrd
, 
curmove
);

6186 i‡(
a
 > 
Æpha
)

6188 
Æpha
 = 
a
;

6190 i‡(
bëa
 <
Æpha
)

6195 
	`movñi°_de°roy
(&
moves
);

6197  
Æpha
;

6198 
	}
}

6204 
uöt32_t


6205 
	$ønd32
()

6207 
	`ønd_öô
();

6208  
	`gíønd
();

6209 
	}
}

6211 
	gønd_öôãd
 = 0;

6213 
	$ønd_öô
()

6215 i‡(
ønd_öôãd
)

6219 
	`sgíønd
(
	`gë_ticks
());

6220 
ønd_öôãd
 = 1;

6221 
	}
}

6223 
uöt64_t
 
	$ønd64
()

6225  ((
uöt64_t
)
	`ønd32
()) | (((uint64_t)rand32()) << 32);

6226 
	}
}

6234 
	#SEARCHER_INFINITY
 32767

	)

6235 
	#SEARCHER_MATE
 16383

	)

6239 
	#SEARCHER_DRAW_SCORE
 0

	)

6240 
	#VALUE_ISDRAW
(
v
Ë((vË=
SEARCHER_DRAW_SCORE
)

	)

6242 
move_t
 
Æphabëa
(
bﬂrd_t
 *, 
öt16_t
, i¡16_t, 
uöt8_t
, uint8_t, move_t, uint8_t, uint8_t, );

6244 
	gå™•osôi⁄_hôs
, 
	gå™•osôi⁄_mis£s
;

6245 
ªgí_hôs
, 
ªgí_mis£s
;

6247 
	gnodes
;

6248 
öt16_t
 
	gœ°vÆ
;

6251 
outbuf_size
;

6252 
ãxt_loud
;

6253 
outbuf
[];

6254 
ouçut
();

6257 
uöt8_t
 
	gcur_£¨chög_dïth
;

6260 vﬁ©ûê
	gtimeup
;

6262 
	#SEARCHER_MIN_DEPTH
 2

	)

6263 
	#SEARCHER_MAX_DEPTH
 64

	)

6265 
	g£¨chî_max_dïth
 = 
SEARCHER_MAX_DEPTH
-1;

6267 
	#VALUE_ISMATE
(
v
Ë(((vË>
SEARCHER_MATE
 - 
SEARCHER_MAX_DEPTH
Ë|| ((vË<-(SEARCHER_MATE - SEARCHER_MAX_DEPTH)))

	)

6271 
	#SEARCHER_ASPIRATION_1
 50

	)

6272 
	#SEARCHER_ASPIRATION_2
 200

	)

6294 
	#SEARCHER_USE_KILLERS


	)

6295 #ifde‡
SEARCHER_USE_KILLERS


6296 
	#SEARCHER_NUM_KILLERS
 3

	)

6297 
move_t
 
	gkûÀrs
[
SEARCHER_MAX_DEPTH
][
SEARCHER_NUM_KILLERS
];

6303 #ifde‡
SEARCHER_FUTILITY_PRUNING


6304 
öt16_t
 
	gfutûôy_m¨gö
[3] = { 0xbeef, 250, 450 };

6307 
	gœzy
, 
	gn⁄œzy
;

6311 
	#PV
 0

	)

6312 
	#CUT
 1

	)

6313 
	#ALL
 2

	)

6314 
	gchûdnodëy≥
[3][2] = {

6317 { 
PV
, 
CUT
 },

6318 { 
ALL
, 
CUT
 },

6319 { 
CUT
, CUT }

6323 
	#NULLMOVE_R
(
d
Ë(((dË> 6Ë? 3 : 2)

	)

6327 
uöt8_t
 
	glmr_movecou¡
[3] = { 16, 8, 8 };

6329 
	#GUESS_KERNEL_HZ
 100

6330 

	)

6331 *
	$sigÆrm_thªad
(*
¨g
)

6333 
	`¶ìp
(()
¨g
 * 
GUESS_KERNEL_HZ
);

6334 
timeup
 = 1;

6336 
	}
}

6342 
move_t
 
	$gëbe°move
(
bﬂrd_t
 *
bﬂrd
, 
time
, *
node˙t
, 
öt16_t
 *
ÆphavÆ
)

6344 
move_t
 
ªsu…
, 
¥evªsu…
;

6345 
öt16_t
 
¥evÆpha
;

6346 
öt16_t
 
wödow_low
, 
wödow_high
;

6347 *
move°r
;

6348 
ªt
;

6349 *
°©u•
;

6354 
nodes
 = 0;

6355 
timeup
 = 0;

6357 
å™•osôi⁄_hôs
 = 0; 
å™•osôi⁄_mis£s
 = 0;

6358 
ªgí_hôs
 = 0; 
ªgí_mis£s
 = 0;

6360 
œzy
 = 0; 
n⁄œzy
 = 0;

6362 #ifde‡
SEARCHER_USE_KILLERS


6364 
	`mem£t
(
kûÀrs
, 0, (killers));

6369 
	`¢¥ötf
(
outbuf
, 
outbuf_size
, "Thinking (for %d %s)...",

6370 
time
,Åime == 1 ? "sec" : "secs");

6371 
	`ouçut
();

6373 
cur_£¨chög_dïth
 = 
SEARCHER_MIN_DEPTH
;

6374 
ªsu…
 = 
	`Æphabëa
(
bﬂrd
, -
SEARCHER_INFINITY
, SEARCHER_INFINITY,

6375 
cur_£¨chög_dïth
, 0, 0, 0, 0, 
PV
);

6376 
¥evªsu…
 = 
ªsu…
;

6377 
¥evÆpha
 = 
œ°vÆ
;

6380 
ªt
 = 
	`thr_¸óã
(
sigÆrm_thªad
, (*)
time
);

6381 
	`as£π
(
ªt
 > 0 && "FailedÅo createÅimerÅhread");

6383 !
timeup
 && 
cur_£¨chög_dïth
 < 
£¨chî_max_dïth
)

6387 
¥evªsu…
 = 
ªsu…
;

6388 
¥evÆpha
 = 
œ°vÆ
;

6399 
move°r
 = 
	`move_to°rög
(
ªsu…
);

6400 i‡(
ãxt_loud
) {

6401 
	`¢¥ötf
(
outbuf
, 
outbuf_size
, "[depth %d] best %s score %d",

6402 
cur_£¨chög_dïth
, 
move°r
, 
œ°vÆ
);

6403 
	`ouçut
();

6405 i‡(
	`VALUE_ISMATE
(
œ°vÆ
Ë&& 
ãxt_loud
)

6407 
	`¢¥ötf
(
outbuf
, 
outbuf_size
, "%s mates in %d",

6408 ((
œ°vÆ
 > 0) ?

6409 ((
bﬂrd
->
tomove
 =
WHITE
) ? "White" : "Black")

6411 ((
bﬂrd
->
tomove
 =
WHITE
) ? "Black" : "White")),

6412 ((
œ°vÆ
 > 0) ?

6413 ((
SEARCHER_MATE
 - 
œ°vÆ
 + 1) / 2)

6415 ((
SEARCHER_MATE
 + 
œ°vÆ
 + 1) / 2)));

6416 
	`ouçut
();

6418 
	`‰ì
(
move°r
);

6419 
cur_£¨chög_dïth
++;

6420 
nodes
 = 0;

6422 
wödow_low
 = 
¥evÆpha
 - 
SEARCHER_ASPIRATION_1
;

6423 
wödow_high
 = 
¥evÆpha
 + 
SEARCHER_ASPIRATION_1
;

6424 
ªsu…
 = 
	`Æphabëa
(
bﬂrd
, 
wödow_low
, 
wödow_high
,

6425 
cur_£¨chög_dïth
, 0, 0, 0, 0, 
PV
);

6426 i‡(
timeup
) ;

6428 i‡(
œ°vÆ
 <
wödow_low
 ||Üa°vÆ >
wödow_high
)

6431 
wödow_low
 = 
¥evÆpha
 - 
SEARCHER_ASPIRATION_2
;

6432 
wödow_high
 = 
¥evÆpha
 + 
SEARCHER_ASPIRATION_2
;

6434 
ªsu…
 = 
	`Æphabëa
(
bﬂrd
, 
wödow_low
, 
wödow_high
,

6435 
cur_£¨chög_dïth
, 0, 0, 0, 0, 
PV
);

6437 i‡(
timeup
) ;

6439 i‡(
œ°vÆ
 <
wödow_low
 ||Üa°vÆ >
wödow_high
)

6442 
wödow_low
 = -
SEARCHER_INFINITY
;

6443 
wödow_high
 = 
SEARCHER_INFINITY
;

6445 
ªsu…
 = 
	`Æphabëa
(
bﬂrd
, 
wödow_low
, 
wödow_high
,

6446 
cur_£¨chög_dïth
, 0, 0, 0, 0, 
PV
);

6453 
move°r
 = 
	`move_to°rög
(
¥evªsu…
);

6454 i‡(
ãxt_loud
) {

6455 i‡(
timeup
) {

6456 
	`¢¥ötf
(
outbuf
, 
outbuf_size
, "[depth %d] (timeout, %dÇodes)",

6457 
cur_£¨chög_dïth
, 
nodes
);

6459 
	`¢¥ötf
(
outbuf
, 
outbuf_size
, "[depth %d] best %s score %d",

6460 
cur_£¨chög_dïth
, 
move°r
, 
œ°vÆ
);

6462 
	`ouçut
();

6464 
	`¢¥ötf
(
outbuf
, 
outbuf_size
, "My move: %s", 
move°r
);

6465 
	`ouçut
();

6466 
	`‰ì
(
move°r
);

6467 #ifde‡
SEARCHER_USE_KILLERS


6469 
	`mem£t
(
kûÀrs
, 0, (killers));

6471 i‡(
node˙t
 !
NULL
)

6473 *
node˙t
 = 
nodes
;

6475 i‡(
ÆphavÆ
 !
NULL
)

6477 *
ÆphavÆ
 = 
¥evÆpha
;

6480 
	`thr_joö
(
ªt
, &
°©u•
);

6481 
	`as£π
(
°©u•
 == (*)0x15410FA1L);

6482  
¥evªsu…
;

6483 
	}
}

6498 
move_t
 
	$Æphabëa
(
bﬂrd_t
 *
bﬂrd
, 
öt16_t
 
Æpha
, i¡16_à
bëa
,

6499 
uöt8_t
 
dïth
, uöt8_à
∂y
, 
move_t
 
¥evmove
,

6500 
uöt8_t
 
num_checks
, uöt8_à
nuŒ_exãnded
,

6501 
nodëy≥
)

6503 
movñi°_t
 
moves
;

6504 
move_t
 
curmove
, 
ªtu∫move
;

6506 
cﬁ‹
;

6509 
chûdªn_£¨ched
;

6512 
å™s_d©a_t
 
å™s_d©a
;

6513 
å™s_Êag
;

6515 
move_t
 
be°move
;

6517 
kûÀr_ödex
;

6519 
nodes
++;

6520 i‡(
timeup
)

6531 i‡(
bﬂrd
->
hÆfmoves
 >100 || 
	`bﬂrd_thªefﬁd_døw
(board))

6535 
œ°vÆ
 = 
SEARCHER_DRAW_SCORE
;

6541 
å™s_d©a
 = 
	`å™s_gë
(
bﬂrd
->
hash
);

6542 i‡(
	`å™s_d©a_vÆid
(
å™s_d©a
))

6544 i‡(
	`TRANS_SEARCHDEPTH
(
å™s_d©a
Ë>
dïth
 &&

6545 
	`TRANS_REPS
(
å™s_d©a
Ë>
bﬂrd
->
ªps
)

6547 
öt16_t
 
°‹edvÆ
 = 
	`TRANS_VALUE
(
å™s_d©a
);

6550 i‡(
	`TRANS_FLAG
(
å™s_d©a
Ë=
TRANS_FLAG_EXACT
)

6552 
å™•osôi⁄_hôs
++;

6553 
œ°vÆ
 = 
°‹edvÆ
;

6554  
	`TRANS_MOVE
(
å™s_d©a
);

6558 i‡(
dïth
 !
cur_£¨chög_dïth
)

6561 i‡(
	`TRANS_FLAG
(
å™s_d©a
Ë=
TRANS_FLAG_BETA
)

6564 i‡(
°‹edvÆ
 >
bëa
)

6566 
å™•osôi⁄_hôs
++;

6567 
œ°vÆ
 = 
°‹edvÆ
;

6571 i‡(
°‹edvÆ
 > 
Æpha
)

6573 
Æpha
 = 
°‹edvÆ
;

6577 i‡(
	`TRANS_FLAG
(
å™s_d©a
) ==

6578 
TRANS_FLAG_ALPHA
)

6581 i‡(
°‹edvÆ
 <
Æpha
)

6583 
å™•osôi⁄_hôs
++;

6584 
œ°vÆ
 = 
°‹edvÆ
;

6588 i‡(
°‹edvÆ
 < 
bëa
)

6590 
bëa
 = 
°‹edvÆ
;

6598 
be°move
 = 
	`TRANS_MOVE
(
å™s_d©a
);

6602 
be°move
 = (
move_t
)0;

6603 
å™•osôi⁄_mis£s
++;

6609 i‡(
dïth
 == 0)

6611 
œ°vÆ
 = 
	`quõs˚
(
bﬂrd
, 
Æpha
, 
bëa
);

6614 i‡(
timeup
)

6620 i‡(!
	`å™s_d©a_vÆid
(
å™s_d©a
))

6622 
	`å™s_add
(
bﬂrd
->
hash
, (
move_t
)0, bﬂrd->
ªps
, 
œ°vÆ
,

6623 (
bﬂrd
->
moves
 - 
cur_£¨chög_dïth
),

6624 
bﬂrd
->
moves
, 0, 
TRANS_FLAG_EXACT
);

6628 #ifde‡
SEARCHER_FUTILITY_PRUNING


6630 i‡(
dïth
 < 3)

6634 i‡(!(
	`bﬂrd_öcheck
(
bﬂrd
Ë|| 
	`MOV_CAPT
(
¥evmove
)))

6636 
öt16_t
 
sc‹e
 = 
	`evÆ_œzy
(
bﬂrd
);

6638 i‡((
sc‹e
 + 
futûôy_m¨gö
[
dïth
] < 
Æpha
) ||

6639 (
sc‹e
 - 
futûôy_m¨gö
[
dïth
] > 
bëa
))

6641 
œ°vÆ
 = 
	`quõs˚
(
bﬂrd
, 
Æpha
, 
bëa
);

6657 i‡((
nodëy≥
 !
PV
Ë&& (
dïth
 > 3Ë&& !
	`evÆ_i£ndgame
(
bﬂrd
) &&

6658 (
	`evÆ_œzy
(
bﬂrd
Ë>
bëa
Ë&& !
	`bﬂrd_öcheck
(board))

6661 
	`bﬂrd_≠∂ymove
(
bﬂrd
, 0);

6662 
	`Æphabëa
(
bﬂrd
, -
bëa
, -bëa+1, 
dïth
 - 
	`NULLMOVE_R
(depth) - 1,

6663 
∂y
+1, 0, 
num_checks
, 
nuŒ_exãnded
, 
ALL
);

6664 
	`bﬂrd_undomove
(
bﬂrd
, 0);

6667 i‡(-
œ°vÆ
 >
bëa
)

6669 
œ°vÆ
 = -lastval;

6674 i‡(
	`VALUE_ISMATE
(
œ°vÆ
Ë&& !
nuŒ_exãnded
)

6676 
dïth
++;

6677 
nuŒ_exãnded
 = 1;

6684 
cﬁ‹
 = 
bﬂrd
->
tomove
;

6685 
chûdªn_£¨ched
 = 0;

6686 
ªtu∫move
 = 0;

6687 
å™s_Êag
 = 
TRANS_FLAG_ALPHA
;

6689 i‡(
be°move
)

6691 
	`bﬂrd_≠∂ymove
(
bﬂrd
, 
be°move
);

6693 
	`as£π
(!
	`bﬂrd_cﬁ‹öcheck
(
bﬂrd
, 
cﬁ‹
));

6695 i‡(
	`bﬂrd_öcheck
(
bﬂrd
))

6698 i‡(
num_checks
)

6700 
	`Æphabëa
(
bﬂrd
, -
bëa
, -
Æpha
, 
dïth
, 
∂y
+1,

6701 
be°move
, 
num_checks
+1, 
nuŒ_exãnded
,

6702 
chûdnodëy≥
[
nodëy≥
][!!
chûdªn_£¨ched
]);

6706 
	`Æphabëa
(
bﬂrd
, -
bëa
, -
Æpha
, 
dïth
-1, 
∂y
+1,

6707 
be°move
, 
num_checks
+1, 
nuŒ_exãnded
,

6708 
chûdnodëy≥
[
nodëy≥
][!!
chûdªn_£¨ched
]);

6713 
	`Æphabëa
(
bﬂrd
, -
bëa
, -
Æpha
, 
dïth
-1, 
∂y
+1,

6714 
be°move
, 
num_checks
, 
nuŒ_exãnded
,

6715 
chûdnodëy≥
[
nodëy≥
][!!
chûdªn_£¨ched
]);

6717 
	`bﬂrd_undomove
(
bﬂrd
, 
be°move
);

6718 
chûdªn_£¨ched
++;

6720 i‡(-
œ°vÆ
 > 
Æpha
)

6722 
Æpha
 = -
œ°vÆ
;

6723 
ªtu∫move
 = 
be°move
;

6724 
å™s_Êag
 = 
TRANS_FLAG_EXACT
;

6726 i‡(
Æpha
 >
bëa
)

6728 
å™s_Êag
 = 
TRANS_FLAG_BETA
;

6729 
Æphabëa_a·î_ôî©i⁄
;

6732 #ifde‡
SEARCHER_USE_KILLERS


6734 
kûÀr_ödex
 = 0; kûÀr_ödex < 
SEARCHER_NUM_KILLERS
; killer_index++)

6736 
move_t
 
kûÀr
 = 
kûÀrs
[
∂y
][
kûÀr_ödex
];

6737 
põ˚_t
 
kûÀΩõ˚
;

6738 
squ¨e_t
 
kûÀr§c
, 
kûÀrde°
;

6740 i‡(
kûÀr
 =0 || 
timeup
)

6744 
kûÀΩõ˚
 = 
	`MOV_PIECE
(
kûÀr
);

6745 
kûÀr§c
 = 
	`MOV_SRC
(
kûÀr
);

6746 
kûÀrde°
 = 
	`MOV_DEST
(
kûÀr
);

6753 i‡((!(
	`BB_SQUARE
(
kûÀr§c
Ë& 
bﬂrd
->
pos
[
cﬁ‹
][
kûÀΩõ˚
])) ||

6754 (
	`BB_SQUARE
(
kûÀrde°
Ë& 
bﬂrd
->
occupõd
) ||

6755 (
	`PIECE_SLIDES
(
kûÀΩõ˚
) &&

6756 !(
	`BB_SQUARE
(
kûÀrde°
) &

6757 
	`bﬂrd_©ècks‰om
(
bﬂrd
, 
kûÀr§c
, 
kûÀΩõ˚
, 
cﬁ‹
))))

6762 i‡(
kûÀΩõ˚
 =
PAWN
)

6765 i‡(!(
	`BB_SQUARE
(
kûÀrde°
) &

6766 
	`bﬂrd_∑w≈ushes‰om
(
bﬂrd
, 
kûÀr§c
, 
cﬁ‹
)))

6774 i‡(!(
	`BB_SQUARE
(
kûÀrde°
) &

6775 
	`bﬂrd_©ècks‰om
(
bﬂrd
, 
kûÀr§c
, 
kûÀΩõ˚
,

6776 
cﬁ‹
)))

6782 
	`bﬂrd_≠∂ymove
(
bﬂrd
, 
kûÀr
);

6784 i‡(
	`bﬂrd_cﬁ‹öcheck
(
bﬂrd
, 
cﬁ‹
))

6786 
	`bﬂrd_undomove
(
bﬂrd
, 
kûÀr
);

6790 i‡(
	`bﬂrd_öcheck
(
bﬂrd
))

6793 i‡(
num_checks
)

6795 
	`Æphabëa
(
bﬂrd
, -
bëa
, -
Æpha
, 
dïth
, 
∂y
+1,

6796 
kûÀr
, 
num_checks
+1, 
nuŒ_exãnded
,

6797 
chûdnodëy≥
[
nodëy≥
][!!
chûdªn_£¨ched
]);

6801 
	`Æphabëa
(
bﬂrd
, -
bëa
, -
Æpha
, 
dïth
-1, 
∂y
+1,

6802 
kûÀr
, 
num_checks
+1, 
nuŒ_exãnded
,

6803 
chûdnodëy≥
[
nodëy≥
][!!
chûdªn_£¨ched
]);

6808 
	`Æphabëa
(
bﬂrd
, -
bëa
, -
Æpha
, 
dïth
-1, 
∂y
+1,

6809 
kûÀr
, 
num_checks
, 
nuŒ_exãnded
,

6810 
chûdnodëy≥
[
nodëy≥
][!!
chûdªn_£¨ched
]);

6812 
	`bﬂrd_undomove
(
bﬂrd
, 
kûÀr
);

6813 
chûdªn_£¨ched
++;

6815 i‡(-
œ°vÆ
 > 
Æpha
)

6817 
Æpha
 = -
œ°vÆ
;

6818 
ªtu∫move
 = 
kûÀr
;

6819 
å™s_Êag
 = 
TRANS_FLAG_EXACT
;

6821 i‡(
Æpha
 >
bëa
)

6823 
å™s_Êag
 = 
TRANS_FLAG_BETA
;

6824 
Æphabëa_a·î_ôî©i⁄
;

6829 
	`bﬂrd_gíî©emoves
(
bﬂrd
, &
moves
);

6830 !
	`movñi°_i£m±y
(&
moves
))

6832 i‡(
timeup
)

6836 
curmove
 = 
	`movñi°_ªmove_max
(&
moves
);

6838 
	`bﬂrd_≠∂ymove
(
bﬂrd
, 
curmove
);

6840 i‡(
	`bﬂrd_cﬁ‹öcheck
(
bﬂrd
, 
cﬁ‹
))

6842 
	`bﬂrd_undomove
(
bﬂrd
, 
curmove
);

6846 i‡(
	`bﬂrd_öcheck
(
bﬂrd
))

6849 i‡(
num_checks
)

6851 
	`Æphabëa
(
bﬂrd
, -
bëa
, -
Æpha
, 
dïth
, 
∂y
+1,

6852 
curmove
, 
num_checks
+1, 
nuŒ_exãnded
,

6853 
chûdnodëy≥
[
nodëy≥
][!!
chûdªn_£¨ched
]);

6857 
	`Æphabëa
(
bﬂrd
, -
bëa
, -
Æpha
, 
dïth
-1, 
∂y
+1,

6858 
curmove
, 
num_checks
+1, 
nuŒ_exãnded
,

6859 
chûdnodëy≥
[
nodëy≥
][!!
chûdªn_£¨ched
]);

6876 i‡(
chûdªn_£¨ched
 > 
lmr_movecou¡
[
nodëy≥
] && 
dïth
 > 3 &&

6877 !
	`MOV_CAPT
(
curmove
Ë&& !MOV_CAPT(
¥evmove
))

6879 
	`Æphabëa
(
bﬂrd
, -
bëa
, -
Æpha
, 
dïth
-2, 
∂y
+1,

6880 
curmove
, 
num_checks
, 
nuŒ_exãnded
,

6881 
chûdnodëy≥
[
nodëy≥
][1]);

6883 i‡(-
œ°vÆ
 > 
Æpha
)

6885 
	`Æphabëa
(
bﬂrd
, -
bëa
, -
Æpha
, 
dïth
-1, 
∂y
+1,

6886 
curmove
, 
num_checks
, 
nuŒ_exãnded
,

6887 
chûdnodëy≥
[
nodëy≥
][1]);

6892 
	`Æphabëa
(
bﬂrd
, -
bëa
, -
Æpha
, 
dïth
-1, 
∂y
+1,

6893 
curmove
, 
num_checks
, 
nuŒ_exãnded
,

6894 
chûdnodëy≥
[
nodëy≥
][!!
chûdªn_£¨ched
]);

6896 
	`bﬂrd_undomove
(
bﬂrd
, 
curmove
);

6897 
chûdªn_£¨ched
++;

6899 i‡(-
œ°vÆ
 > 
Æpha
)

6901 
Æpha
 = -
œ°vÆ
;

6902 
ªtu∫move
 = 
curmove
;

6904 
å™s_Êag
 = 
TRANS_FLAG_EXACT
;

6906 i‡(
bëa
 <
Æpha
)

6909 
å™s_Êag
 = 
TRANS_FLAG_BETA
;

6910 #ifde‡
SEARCHER_USE_KILLERS


6912 i‡(!(
	`MOV_CAPT
(
curmove
)Ë&& !(
	`MOV_CASTLE
(curmove)))

6918 
kûÀr_ödex
 = 0;

6919 (
kûÀrs
[
∂y
][
kûÀr_ödex
] != 0) &&

6920 (
kûÀr_ödex
 < 
SEARCHER_NUM_KILLERS
-1))

6924 
kûÀr_ödex
++;

6926 
kûÀrs
[
∂y
][
kûÀr_ödex
] = 
curmove
;

6932 
	`movñi°_de°roy
(&
moves
);

6936 
Æphabëa_a·î_ôî©i⁄
:

6939 i‡(
timeup
)

6943 #ifde‡
SEARCHER_USE_KILLERS


6945 
	`mem£t
(
kûÀrs
[
∂y
+1], 0, (
SEARCHER_NUM_KILLERS
 * (
move_t
)));

6948 i‡(
chûdªn_£¨ched
)

6952 
œ°vÆ
 = 
Æpha
;

6955 i‡(!
	`VALUE_ISMATE
(
Æpha
Ë&& !
	`VALUE_ISDRAW
(alpha))

6958 
	`å™s_add
(
bﬂrd
->
hash
, 
ªtu∫move
, bﬂrd->
ªps
, 
Æpha
,

6959 (
bﬂrd
->
moves
 + 
dïth
 - 
cur_£¨chög_dïth
),

6960 
bﬂrd
->
moves
, 
dïth
, 
å™s_Êag
);

6966 i‡(
	`bﬂrd_öcheck
(
bﬂrd
))

6968 
œ°vÆ
 = -1 * (
SEARCHER_MATE
 - 
∂y
);

6972 
œ°vÆ
 = 0;

6981  
ªtu∫move
;

6982 
	}
}

6988 
	så™s_íåy_t
 {

6989 
uöt64_t
 
	mkey
;

6990 
å™s_d©a_t
 
	mvÆue
;

6991 } 
	tå™s_íåy_t
;

7001 #i‚de‡
TRANS_NUM_BUCKETS


7002 
	#TRANS_NUM_BUCKETS
 ((128 * 1024 * 1024)/(
å™s_íåy_t
))

7004 
å™s_íåy_t
 
¨øy
[
TRANS_NUM_BUCKETS
];

	)

7009 
å™s_d©a_t
 
	$å™s_d©a
(
move_t
 
move
, 
uöt8_t
 
ªps
, 
öt16_t
 
vÆue
,

7010 
uöt8_t
 
gamedïth
, uöt8_à
£¨chdïth
,

7011 
uöt8_t
 
Êag
)

7013 
å™s_d©a_t
 
foo
;

7014 
	`as£π
(
£¨chdïth
 < 64);

7015 
foo
.
move
 = movê| (
ªps
 << 
MOV_INDEX_UNUSED
);

7016 
foo
.
vÆue
 = value;

7017 
foo
.
gamedïth
 = gamedepth;

7018 
foo
.
Êags
 = ((
£¨chdïth
 & 0x3fË<< 
TRANS_INDEX_SEARCHDEPTH
) |

7019 ((
Êag
 & 0x3Ë<< 
TRANS_INDEX_FLAG
);

7020  
foo
;

7021 
	}
}

7038 
	$å™s_add
(
zobri°_t
 
key
, 
move_t
 
move
, 
uöt8_t
 
ªps
, 
öt16_t
 
vÆue
,

7039 
uöt8_t
 
roŸdïth
, uöt8_à
gamedïth
,

7040 
uöt8_t
 
£¨chdïth
, uöt8_à
Êag
)

7042 
buckë
;

7043 
å™s_d©a_t
 
ﬁd
;

7046 
buckë
 = 
key
 % 
TRANS_NUM_BUCKETS
;

7049 
ﬁd
 = 
¨øy
[
buckë
].
vÆue
;

7052 i‡((
roŸdïth
 >
	`TRANS_GAMEDEPTH
(
ﬁd
)) ||

7053 (
Êag
 > 
	`TRANS_FLAG
(
ﬁd
)) ||

7054 ((
Êag
 =
	`TRANS_FLAG
(
ﬁd
)) &&

7055 (
£¨chdïth
 > 
	`TRANS_SEARCHDEPTH
(
ﬁd
))))

7058 
¨øy
[
buckë
].
key
 = key;

7059 
¨øy
[
buckë
].
vÆue
 = 
	`å™s_d©a
(
move
, 
ªps
, vÆue, 
gamedïth
,

7060 
£¨chdïth
, 
Êag
);

7063 
	}
}

7069 
å™s_d©a_t
 
	gfoo
 = { (
uöt8_t
)(-1), (uint8_t)(-1),

7070 (
öt16_t
)(-1), (
uöt32_t
)(-1) };

7071 
å™s_d©a_t
 
	$å™s_gë
(
zobri°_t
 
key
)

7073 
buckë
 = 
key
 % 
TRANS_NUM_BUCKETS
;

7074 i‡(
¨øy
[
buckë
].
key
 == key)

7076  
¨øy
[
buckë
].
vÆue
;

7078  
foo
;

7079 
	}
}

7085 
	$å™s_d©a_vÆid
(
å™s_d©a_t
 
foo
)

7087  (
foo
.
Êags
 !(
uöt8_t
)(-1));

7088 
	}
}

7096 *
	gbﬂrd_°rs
[] = {

7117 *
	gbﬂrd_°rs_Êù≥d
[] = {

7138 
	#BOARD_ROW
 3

7139 
	#BOARD_COL
 4

7140 
	#BOARD_ROW_SCALE
 2

	)

7141 
	#BOARD_COL_SCALE
 4

	)

7143 
	#BOARD_COLOR
 (
FGND_BRWN
 | 
BGND_BLACK
)

	)

7144 
	#WHITE_COLOR
 (
FGND_WHITE
 | 
BGND_BLACK
)

	)

7145 
	#BLACK_COLOR
 (
FGND_RED
 | 
BGND_BLACK
)

7146 

	)

7147 
	gÊù≥d
 = 0;

7148 
	gxyzzy
 = 0;

7150 
	$£t_ãxt_cﬁ‹
(
cﬁ‹
) {

7151 
low
 = 
cﬁ‹
 & 0xf;

7152 
high
 = 
cﬁ‹
 & ~0xf;

7153 i‡(
low
 =
FGND_BLACK
) {

7154 
	`£t_ãrm_cﬁ‹
(
cﬁ‹
);

7156 
low
 = (low + 
xyzzy
) & 0xf;

7157 i‡(
low
 =
FGND_BLACK
)Üow++;

7158 
	`£t_ãrm_cﬁ‹
(
low
 | 
high
);

7160 
	}
}

7162 
	$døw_põ˚s
(
bﬂrd_t
 *
bﬂrd
, 
cﬁ‹
) {

7163 
squ¨e
;

7164 
bôbﬂrd_t
 
pos
;

7165 
põ˚
 = 
PAWN
;

7166 
põ˚
 <
KING
) {

7167 
pos
 = 
bﬂrd
->pos[
cﬁ‹
][
põ˚
];

7168 
pos
) {

7169 
row_off£t
, 
cﬁ_off£t
;

7170 
squ¨e
 = 
	`BITSCAN
(
pos
);

7171 i‡(
Êù≥d
) {

7172 
row_off£t
 = 
BOARD_ROW_SCALE
*(1 + 
	`ROW
(
squ¨e
));

7173 
cﬁ_off£t
 = 
BOARD_COL_SCALE
*(8 - 
	`COL
(
squ¨e
));

7175 
row_off£t
 = 
BOARD_ROW_SCALE
*(8 - 
	`ROW
(
squ¨e
));

7176 
cﬁ_off£t
 = 
BOARD_COL_SCALE
*(1 + 
	`COL
(
squ¨e
));

7178 
	`£t_curs‹_pos
(
BOARD_ROW
 + 
row_off£t
, 
BOARD_COL
 + 
cﬁ_off£t
);

7179 
	`¥öt
(1, 
põ˚«me
[
cﬁ‹
][
põ˚
]);

7180 
pos
 &
	`BB_ALLEXCEPT
(
squ¨e
);

7182 
põ˚
++;

7184 
	}
}

7190 
	$døw_bﬂrd
(
bﬂrd_t
 *
bﬂrd
) {

7191 
i
;

7192 
	`£t_ãxt_cﬁ‹
(
BOARD_COLOR
);

7193 i‡(
Êù≥d
) {

7194 
i
 = 0; i < 
	`ARRAY_SIZE
(
bﬂrd_°rs_Êù≥d
); i++) {

7195 
	`£t_curs‹_pos
(
BOARD_ROW
+
i
, 
BOARD_COL
);

7196 
	`¥öt
(
	`°æí
(
bﬂrd_°rs_Êù≥d
[
i
]), board_strs_flipped[i]);

7199 
i
 = 0; i < 
	`ARRAY_SIZE
(
bﬂrd_°rs
); i++) {

7200 
	`£t_curs‹_pos
(
BOARD_ROW
+
i
, 
BOARD_COL
);

7201 
	`¥öt
(
	`°æí
(
bﬂrd_°rs
[
i
]), board_strs[i]);

7204 
	`£t_ãxt_cﬁ‹
(
WHITE_COLOR
);

7205 
	`døw_põ˚s
(
bﬂrd
, 
WHITE
);

7206 
	`£t_ãxt_cﬁ‹
(
BLACK_COLOR
);

7207 
	`døw_põ˚s
(
bﬂrd
, 
BLACK
);

7208 
	}
}

7210 
	e∂ayî_mode
 {

7211 
	mbŸ_bœck
 = 0,

7212 
	mbŸ_whôe
 = 1,

7213 
	mhum™
 = 2,

7215 *
	g∂ayî_°rs
[] = {

7220 
	#PLAYERSTR_ROW
 1

	)

7221 
	#PLAYERSTR_COL
 14

	)

7222 
	#PLAYERSTR_COLOR
 (
FGND_BBLUE
 | 
BGND_BLACK
)

	)

7224 
∂ayî_mode
 
	g∂ayî_mode
 = 
bŸ_bœck
;

7226 
	$døw_∂ayî_°r
() {

7227 
	`£t_ãxt_cﬁ‹
(
PLAYERSTR_COLOR
);

7228 
	`£t_curs‹_pos
(
PLAYERSTR_ROW
, 
PLAYERSTR_COL
);

7229 
	`as£π
(
∂ayî_mode
 < 
	`ARRAY_SIZE
(
∂ayî_°rs
));

7230 
	`¥öt
(
	`°æí
(
∂ayî_°rs
[
∂ayî_mode
]),

7231 
∂ayî_°rs
[
∂ayî_mode
]);

7232 
	}
}

7234 
	#STATUS_WHITEMOVE
 " [whôêtÿmove] "

	)

7235 
	#STATUS_BLACKMOVE
 " [bœckÅÿmove] "

	)

7236 
	#STATUS_WHITEMATE
 " [0-1 whôêcheckm©ed] "

	)

7237 
	#STATUS_BLACKMATE
 " [1-0 bœck checkm©ed] "

	)

7238 
	#STATUS_WHITERESIGN
 " [0-1 whôêªsigns] "

	)

7239 
	#STATUS_BLACKRESIGN
 " [1-0 bœckÑesigns] "

	)

7240 
	#STATUS_DRAW3MOVE
 " [1/2-1/2 gamêdøw¿by 3-fﬁdÑïëôi⁄] "

	)

7241 
	#STATUS_DRAW50MOVE
 " [1/2-1/2 gamêdøw¿by 50 movêruÀ] "

	)

7242 
	#STATUS_DRAWSTALE
 " [1/2-1/2 gamêdøw¿by sèÀm©e] "

	)

7243 
	#STATUS_DRAWNOMATE
 "[1/2-1/2Çeôhî sidêha†m©ög m©îül]"

	)

7245 
	#STATUS_ROW
 23

	)

7246 
	#STATUS_COL
 1

	)

7247 
	#STATUS_COLOR
 (
FGND_BBLUE
 | 
BGND_BLACK
)

	)

7249 *
	g°©us_°r
 = 
STATUS_WHITEMOVE
;

7252 
	$døw_°©us_°r
() {

7253 
	`as£π
(
	`°æí
(
°©us_°r
Ë=°æí(
STATUS_WHITEMOVE
));

7254 
	`£t_ãxt_cﬁ‹
(
STATUS_COLOR
);

7255 
	`£t_curs‹_pos
(
STATUS_ROW
, 
STATUS_COL
);

7256 
	`¥öt
(
	`°æí
(
°©us_°r
), status_str);

7257 
	}
}

7261 *
	ghñ±ext
[] = {

7283 *
	g¸edôãxt
[] = {

7292 
	#CONSOLE_HEIGHT
 25

	)

7293 
	#CONSOLE_WIDTH
 80

	)

7296 
	#TEXT_WIDTH
 34

7297 
	#TEXT_HEIGHT
 (
CONSOLE_HEIGHT
-2)

	)

7298 
	#TEXT_ROW
 0

7299 
	#TEXT_COL
 (
CONSOLE_WIDTH
-
TEXT_WIDTH
)

	)

7300 
	gãxtc⁄sﬁe
[
TEXT_HEIGHT
][
TEXT_WIDTH
];

7301 
	#PROMPT
 "> "

	)

7302 
	#TEXT_COLOR
 (
FGND_GREEN
 | 
BGND_BLACK
)

	)

7303 
	#PROMPT_COLOR
 (
FGND_BGRN
 | 
BGND_BLACK
)

	)

7305 
	$öô_c⁄sﬁe
() {

7306 
i
, 
j
;

7307 
i
 = 0; i < 
TEXT_HEIGHT
; i++Ë{ 
j
 = 0; j < 
TEXT_WIDTH
; j++) {

7308 
ãxtc⁄sﬁe
[
i
][
j
] = ' ';

7310 
	}
}

7314 
	$¥öt_löe
(c⁄° *
buf
, 
Àn
) {

7315 i‡(
Àn
 > 
TEXT_WIDTH
)Üen = TEXT_WIDTH;

7317 
i
;

7318 
i
 = 1; i < 
TEXT_HEIGHT
; i++) {

7319 
	`°∫˝y
(
ãxtc⁄sﬁe
[
i
-1],Åextc⁄sﬁe[i], 
TEXT_WIDTH
);

7322 
	`°∫˝y
(
ãxtc⁄sﬁe
[
TEXT_HEIGHT
-1], 
buf
, 
Àn
);

7324 
i
 = 
Àn
; i < 
TEXT_WIDTH
; i++) {

7325 
ãxtc⁄sﬁe
[
TEXT_HEIGHT
-1][
i
] = ' ';

7327 
	}
}

7330 
	$døw_c⁄sﬁe
() {

7331 
i
;

7332 
	`£t_ãxt_cﬁ‹
(
TEXT_COLOR
);

7333 
i
 = 0; i < 
TEXT_HEIGHT
; i++) {

7334 
	`£t_curs‹_pos
(
TEXT_ROW
 + 
i
, 
TEXT_COL
);

7335 
	`¥öt
(
TEXT_WIDTH
, 
ãxtc⁄sﬁe
[
i
]);

7337 
	}
}

7338 
	$døw_¥om±
() {

7339 
buf
[
TEXT_WIDTH
+1];

7340 
	`£t_ãxt_cﬁ‹
(
PROMPT_COLOR
);

7341 
	`£t_curs‹_pos
(
TEXT_ROW
 + 
TEXT_HEIGHT
, 
TEXT_COL
);

7342 
	`as£π
(
	`°æí
(
PROMPT
Ë< 
TEXT_WIDTH
);

7343 
	`¢¥ötf
(
buf
, 
TEXT_WIDTH
, "%s%*s", 
PROMPT
, TEXT_WIDTH-
	`°æí
(PROMPT), " ");

7344 
buf
[
TEXT_WIDTH
-1] = 0;

7345 
	`¥öt
(
TEXT_WIDTH
, 
buf
);

7346 
	`£t_curs‹_pos
(
TEXT_ROW
 + 
TEXT_HEIGHT
, 
TEXT_COL
 + 
	`°æí
(
PROMPT
));

7347 
	}
}

7351 
	goutbuf_size
 = 
TEXT_WIDTH
;

7352 
	goutbuf
[
TEXT_WIDTH
];

7353 
	$ouçut
(Ë{ 
	`¥öt_löe
(
outbuf
, 
TEXT_WIDTH
); 
	`døw_c⁄sﬁe
(); 
	}
}

7357 
	gãxt_loud
 = 1;

7359 
	$hñp
() {

7360 
i
;

7361 
i
 = 0; i < 
	`ARRAY_SIZE
(
hñ±ext
); i++) {

7362 
	`¥öt_löe
(
hñ±ext
[
i
], 
	`°æí
(helptext[i]));

7364 
	}
}

7365 
	$¸edôs
() {

7366 
i
;

7367 
i
 = 0; i < 
	`ARRAY_SIZE
(
¸edôãxt
); i++) {

7368 
	`¥öt_löe
(
¸edôãxt
[
i
], 
	`°æí
(credittext[i]));

7370 
	}
}

7372 
	$ªdøw
(
bﬂrd_t
 *
bﬂrd
) {

7374 
i
;

7375 
•a˚s
[
CONSOLE_WIDTH
+1];

7376 
	`¢¥ötf
(
•a˚s
, 
CONSOLE_WIDTH
, "%*s", CONSOLE_WIDTH, " ");

7377 
•a˚s
[
CONSOLE_WIDTH
-1] = 0;

7378 
	`£t_ãxt_cﬁ‹
(
FGND_BLACK
 | 
BGND_BLACK
);

7379 
i
 = 0; i < 
CONSOLE_HEIGHT
; i++) {

7380 
	`£t_curs‹_pos
(
i
, 0);

7381 
	`¥öt
(
CONSOLE_WIDTH
, 
•a˚s
);

7384 
	`døw_bﬂrd
(
bﬂrd
);

7385 
	`døw_∂ayî_°r
();

7386 
	`døw_°©us_°r
();

7387 
	`døw_c⁄sﬁe
();

7388 
	`døw_¥om±
();

7389 
	}
}

7391 
ígöe_t
 *
	ge
;

7392 
	ggameovî
 = 0;

7394 
	$checkgameovî
() {

7395 
m©ëy≥
;

7396 i‡(
e
->
bﬂrd
->
hÆfmoves
 >= 100) {

7397 
°©us_°r
 = 
STATUS_DRAW50MOVE
;

7399 } i‡(
	`bﬂrd_thªefﬁd_døw
(
e
->
bﬂrd
)) {

7400 
°©us_°r
 = 
STATUS_DRAW3MOVE
;

7404 
m©ëy≥
 = 
	`bﬂrd_m©ed
(
e
->
bﬂrd
);

7406 i‡(
m©ëy≥
 =
BOARD_CHECKMATED
) {

7407 
°©us_°r
 = 
e
->
bﬂrd
->
tomove
 =
WHITE
 ? 
STATUS_WHITEMATE


7408 : 
STATUS_BLACKMATE
;

7410 } i‡(
m©ëy≥
 =
BOARD_STALEMATED
) {

7411 
°©us_°r
 = 
STATUS_DRAWSTALE
;

7413 } i‡((
e
->
bﬂrd
->
m©îül
[
BLACK
] == 0 &&

7414 
e
->
bﬂrd
->
m©îül
[
WHITE
] == 0) ||

7415 (
e
->
bﬂrd
->
m©îül
[
BLACK
] == 0 &&

7416 ((
e
->
bﬂrd
->
m©îül
[
WHITE
] =
evÆ_põ˚vÆue
[
BISHOP
] &&

7417 
e
->
bﬂrd
->
pos
[
WHITE
][
BISHOP
] !
	`BB
(0x0)) ||

7418 (
e
->
bﬂrd
->
m©îül
[
WHITE
] =
evÆ_põ˚vÆue
[
KNIGHT
] &&

7419 
e
->
bﬂrd
->
pos
[
WHITE
][
KNIGHT
] !
	`BB
(0x0)))) ||

7420 (
e
->
bﬂrd
->
m©îül
[
WHITE
] == 0 &&

7421 ((
e
->
bﬂrd
->
m©îül
[
BLACK
] =
evÆ_põ˚vÆue
[
BISHOP
] &&

7422 
e
->
bﬂrd
->
pos
[
BLACK
][
BISHOP
] !
	`BB
(0x0)) ||

7423 (
e
->
bﬂrd
->
m©îül
[
BLACK
] =
evÆ_põ˚vÆue
[
KNIGHT
] &&

7424 
e
->
bﬂrd
->
pos
[
BLACK
][
KNIGHT
] !
	`BB
(0x0))))) {

7425 
°©us_°r
 = 
STATUS_DRAWNOMATE
;

7428 
°©us_°r
 = 
e
->
bﬂrd
->
tomove
 =
WHITE
 ? 
STATUS_WHITEMOVE


7429 : 
STATUS_BLACKMOVE
;

7432 
	}
}

7434 
	$makemove
() {

7435 
	`døw_¥om±
();

7437 *
°r
 = 
	`ígöe_gíî©emove
(
e
);

7438 *
îrmsg
;

7439 
x
 = 
	`ígöe_≠∂ymove
(
e
, 
°r
, &
îrmsg
);

7440 
	`as£π
(
x
);

7441 
	`‰ì
(
°r
);

7442 
	}
}

7444 
	#INBUF_LEN
 (2*
TEXT_WIDTH
)

	)

7445 
ölöe
 
	$¥öt_°rög
(c⁄° *
s
Ë{ 
	`¥öt_löe
(s, 
	`°æí
(s)); 
	}
}

7447 
	$maö
() {

7448 
	`thr_öô
(4096);

7449 
e
 = 
	`ígöe_öô
(
gëbe°move
);

7450 
öbuf
[
INBUF_LEN
];

7451 *
nogame
 = "No game is inÖrogress.";

7452 
	`as£π
(
e
 !
NULL
);

7454 
i
;

7455 
	`öô_c⁄sﬁe
();

7456 
	`¸edôs
();

7457 
i
 = 
	`ARRAY_SIZE
(
¸edôãxt
); i < 
TEXT_HEIGHT
; i++) {

7458 
	`¥öt_löe
("", 0);

7460 
	`ªdøw
(
e
->
bﬂrd
);

7463 
ªt
, 
√ed_ªdøw
 = 0;

7464 
öbuf2
[
TEXT_WIDTH
];

7465 
	`mem£t
(
öbuf
, 0, (inbuf));

7466 
ªt
 = 
	`ªadlöe
(
INBUF_LEN
-1, 
öbuf
);

7467 
	`as£π
(
ªt
 >= 0);

7468 i‡(
öbuf
[
	`°æí
(inbuf)-1] == '\n') {

7469 
öbuf
[
	`°æí
(inbuf)-1] = '\0';

7471 i‡(
	`°æí
(
öbuf
Ë> 
TEXT_WIDTH
-°æí(
PROMPT
)) {

7472 
√ed_ªdøw
 = 1;

7473 
	`¢¥ötf
(
öbuf
 + 
TEXT_WIDTH
 - 
	`°æí
(
PROMPT
) - 3,

7477 
	`¢¥ötf
(
öbuf2
, 
TEXT_WIDTH
, "%s%s", 
PROMPT
, 
öbuf
);

7478 
	`¥öt_löe
(
öbuf2
, 
	`°æí
(inbuf2));

7480 i‡(0 =
	`°rcmp
(
öbuf
, "quit") || 0 == strcmp(inbuf, "exit")) {

7481 
	`£t_curs‹_pos
(
CONSOLE_HEIGHT
, 0);

7482 
	`ígöe_de°roy
(
e
);

7485 } i‡(0 =
	`°rcmp
(
öbuf
, "help")) {

7486 
	`hñp
();

7487 } i‡(0 =
	`°rcmp
(
öbuf
, "credit")) {

7488 
	`¸edôs
();

7489 } i‡(0 =
	`°rcmp
(
öbuf
, "loud")) {

7490 i‡(
ãxt_loud
) {

7491 
	`¥öt_°rög
("This isásÜoudás I can be!");

7493 
	`¥öt_°rög
("WillÇowÅhink outÜoud.");

7494 
ãxt_loud
 = 1;

7496 } i‡(0 =
	`°rcmp
(
öbuf
, "quiet")) {

7497 i‡(!
ãxt_loud
) {

7498 
	`¥öt_°rög
("You don'tÇeedÅoáskÅwice.");

7500 
	`¥öt_°rög
("OK, I'll keep itÅo myself.");

7501 
ãxt_loud
 = 0;

7503 } i‡(0 =
	`°rcmp
(
öbuf
, "flip")) {

7504 
Êù≥d
 = !flipped;

7505 i‡(!
√ed_ªdøw
Ë
	`døw_bﬂrd
(
e
->
bﬂrd
);

7506 } i‡(0 =
	`°rcmp
(
öbuf
, "book")) {

7507 
book_íabÀd
 = !book_enabled;

7508 i‡(
book_íabÀd
) {

7509 
	`¥öt_°rög
("Opening book on.");

7510 
e
->
öbook
 = 1;

7512 
	`¥öt_°rög
("Opening book off.");

7515 } i‡(0 =
	`°∫cmp
(
öbuf
, "punch", 5) ||

7516 0 =
	`°∫cmp
(
öbuf
, "kill", 4)) {

7517 
	`¥öt_°rög
("Keep your mind onÅhe game.");

7518 } i‡(0 =
	`°∫cmp
(
öbuf
, "hug", 3)) {

7519 
	`¥öt_°rög
("If youÅhinkÅhat'll help.");

7520 } i‡(0 =
	`°∫cmp
(
öbuf
, "look", 4) ||

7521 0 =
	`°rcmp
(
öbuf
, "north") || 0 == strcmp(inbuf, "n") ||

7522 0 =
	`°rcmp
(
öbuf
, "east") || 0 == strcmp(inbuf, "e") ||

7523 0 =
	`°rcmp
(
öbuf
, "south") || 0 == strcmp(inbuf, "s") ||

7524 0 =
	`°rcmp
(
öbuf
, "west") || 0 == strcmp(inbuf, "w")) {

7525 
	`¥öt_°rög
("This isn'tÅhat kind of game.");

7526 } i‡(0 =
	`°rcmp
(
öbuf
, "inventory")) {

7527 
	`¥öt_°rög
("Nothing. This isn't bughouse.");

7528 } i‡(0 =
	`°rcmp
(
öbuf
, "ls")) {

7529 
	`¥öt_°rög
("I'llÖretend you didn't sayÅhat.");

7530 } i‡(0 =
	`°rcmp
(
öbuf
, "xyzzy")) {

7531 
xyzzy
++;

7532 i‡(
xyzzy
 == 0x10) xyzzy = 0;

7533 
√ed_ªdøw
 = 1;

7535 } i‡(0 =
	`°rcmp
(
öbuf
, "resign")) {

7537 i‡(
gameovî
) {

7538 
	`¥öt_°rög
(
nogame
);

7540 
	`¥öt_°rög
("I'm sorry it hadÅo beÅhat way.");

7541 
gameovî
 = 1;

7542 
°©us_°r
 = 
e
->
bﬂrd
->
tomove
 =
WHITE
 ?

7543 
STATUS_WHITERESIGN
 : 
STATUS_BLACKRESIGN
;

7544 
	`døw_°©us_°r
();

7546 } i‡(0 =
	`°rcmp
(
öbuf
, "hint")) {

7547 
å™s_d©a_t
 
å™s_d©a
 = 
	`å™s_gë
(
e
->
bﬂrd
->
hash
);

7548 i‡(
gameovî
) {

7549 
	`¥öt_°rög
(
nogame
);

7550 } i‡(
	`å™s_d©a_vÆid
(
å™s_d©a
)) {

7551 *
move
 = 
	`move_to°rög
(
	`TRANS_MOVE
(
å™s_d©a
));

7552 
höt_ödex
 = 0;

7553 c⁄° *
w‹ds
[] =

7557 
	`¢¥ötf
(
öbuf2
, 
TEXT_WIDTH
,

7558 
w‹ds
[
höt_ödex
++ % 
	`ARRAY_SIZE
(words)],

7559 
move
);

7560 
	`¥öt_löe
(
öbuf2
, 
	`°æí
(inbuf2));

7561 
	`‰ì
(
move
);

7563 
	`¥öt_°rög
("You're on your own here.");

7565 } i‡(0 =
	`°rcmp
(
öbuf
, "new")) {

7566 
gameovî
 = 0;

7567 
Êù≥d
 = 0;

7568 
∂ayî_mode
 = 
bŸ_bœck
;

7569 
°©us_°r
 = 
STATUS_WHITEMOVE
;

7570 
	`ígöe_de°roy
(
e
);

7571 
e
 = 
	`ígöe_öô
(
gëbe°move
);

7572 
	`as£π
(
e
 !
NULL
);

7573 
√ed_ªdøw
 = 1;

7574 } i‡(0 =
	`°rcmp
(
öbuf
, "human")) {

7575 i‡(
gameovî
) {

7576 
	`¥öt_°rög
(
nogame
);

7578 
∂ayî_mode
 = 
hum™
;

7579 i‡(!
√ed_ªdøw
Ë
	`døw_∂ayî_°r
();

7581 } i‡(0 =
	`°∫cmp
(
öbuf
, "depth", 5)) {

7583 *
ídp
;

7584 
n
 = 
	`°πﬁ
(&
öbuf
[6], &
ídp
, 0);

7585 
	`as£π
(
£¨chî_max_dïth
 < 
SEARCHER_MAX_DEPTH
);

7586 
	`as£π
(
£¨chî_max_dïth
 >
SEARCHER_MIN_DEPTH
);

7587 i‡(
öbuf
[5] !' ' || 
ídp
 == &inbuf[6]) {

7588 
	`¥öt_°rög
("Use \"depth N\"ÅoÜimit max depth.");

7589 
	`¢¥ötf
(
öbuf2
, 
TEXT_WIDTH
, "Currently %u (0 =ÇoÜimit)",

7590 
£¨chî_max_dïth
 =
SEARCHER_MAX_DEPTH
-1 ?

7591 0 : 
£¨chî_max_dïth
);

7592 
	`¥öt_°rög
(
öbuf2
);

7594 i‡(
n
 >
SEARCHER_MAX_DEPTH
 ||Ç == 0)

7595 
n
 = 
SEARCHER_MAX_DEPTH
-1;

7596 i‡(
n
 < 
SEARCHER_MIN_DEPTH
)

7597 
n
 = 
SEARCHER_MIN_DEPTH
;

7598 
£¨chî_max_dïth
 = 
n
;

7599 
	`¥öt_°rög
("OK.");

7601 } i‡(0 =
	`°∫cmp
(
öbuf
, "time", 4)) {

7603 *
ídp
;

7604 
n
 = 
	`°πﬁ
(&
öbuf
[5], &
ídp
, 0);

7605 
	`as£π
(
£¨chtime
 >= 1);

7606 
	`as£π
(
£¨chtime
 <
SEARCHTIME_MAX
);

7607 i‡(
öbuf
[4] !' ' || 
ídp
 == &inbuf[5]) {

7608 
	`¥öt_°rög
("Use \"time N\"ÅoÜimit searchÅime.");

7609 
	`¢¥ötf
(
öbuf2
, 
TEXT_WIDTH
, "Currently %u (max %u)",

7610 
£¨chtime
, 
SEARCHTIME_MAX
);

7611 
	`¥öt_°rög
(
öbuf2
);

7613 i‡(
n
 > 
SEARCHTIME_MAX
 ||Ç == 0)

7614 
n
 = 
SEARCHTIME_DEFAULT
;

7615 
£¨chtime
 = 
n
;

7616 
	`¥öt_°rög
("OK.");

7618 } i‡(0 =
	`°rcmp
(
öbuf
, "undo")) {

7619 c⁄° *
w‹ds1
[] =

7624 
undo_ödex
 = 0;

7625 c⁄° *
w‹ds2
[] =

7632 
undo_ödex2
 = 0;

7633 i‡(
e
->
bﬂrd
->
moves
 == 0) {

7634 
	`¥öt_°rög
(
gameovî
 ?

7636 
w‹ds1
[
undo_ödex
++ % 
	`ARRAY_SIZE
(words1)]);

7638 
	`ígöe_undomove
(
e
);

7639 i‡(
∂ayî_mode
 =
bŸ_whôe
)

7640 
∂ayî_mode
 = 
bŸ_bœck
;

7641 i‡(
∂ayî_mode
 =
bŸ_bœck
)

7642 
∂ayî_mode
 = 
bŸ_whôe
;

7643 
Êù≥d
 = !flipped;

7644 
gameovî
 = 
	`checkgameovî
();

7645 
	`as£π
(!
gameovî
 && "Game overáfter undo??");

7646 i‡(!
√ed_ªdøw
Ë
	`døw_∂ayî_°r
();

7647 i‡(!
√ed_ªdøw
Ë
	`døw_bﬂrd
(
e
->
bﬂrd
);

7648 i‡(!
√ed_ªdøw
Ë
	`døw_°©us_°r
();

7649 
	`¥öt_°rög
(
w‹ds2
[
undo_ödex2
++ %

7650 
	`ARRAY_SIZE
(
w‹ds2
)]);

7653 } i‡(0 =
	`°rcmp
(
öbuf
, "go")) {

7654 i‡(
gameovî
) {

7655 
	`¥öt_°rög
(
nogame
);

7657 
∂ayî_mode
 = 
e
->
bﬂrd
->
tomove
 =
WHITE
 ?

7658 
bŸ_whôe
 : 
bŸ_bœck
;

7659 
Êù≥d
 = !flipped;

7660 i‡(!
√ed_ªdøw
Ë
	`døw_∂ayî_°r
();

7661 i‡(!
√ed_ªdøw
Ë
	`døw_bﬂrd
(
e
->
bﬂrd
);

7662 
	`makemove
();

7663 i‡(!
√ed_ªdøw
Ë
	`døw_bﬂrd
(
e
->
bﬂrd
);

7664 
gameovî
 = 
	`checkgameovî
();

7665 i‡(!
√ed_ªdøw
Ë
	`døw_°©us_°r
();

7667 } i‡(!!
	`move_‰om°rög
(
öbuf
)) {

7668 *
îrmsg
 = 
NULL
;

7669 i‡(
gameovî
) {

7670 
	`¥öt_°rög
(
nogame
);

7671 } i‡(
	`ígöe_≠∂ymove
(
e
, 
öbuf
, &
îrmsg
)) {

7672 i‡((
gameovî
 = 
	`checkgameovî
())) {

7673 
	`¥öt_°rög
("Good game!");

7674 } i‡(
∂ayî_mode
 !
hum™
) {

7676 i‡(!
√ed_ªdøw
Ë
	`døw_°©us_°r
();

7677 i‡(!
√ed_ªdøw
Ë
	`døw_bﬂrd
(
e
->
bﬂrd
);

7678 
	`makemove
();

7679 i‡(!
√ed_ªdøw
Ë
	`døw_bﬂrd
(
e
->
bﬂrd
);

7680 i‡((
gameovî
 = 
	`checkgameovî
())) {

7681 
	`¥öt_°rög
("Good game!");

7684 
Êù≥d
 = !flipped;

7685 i‡(!
√ed_ªdøw
Ë
	`døw_bﬂrd
(
e
->
bﬂrd
);

7687 i‡(!
√ed_ªdøw
Ë
	`døw_°©us_°r
();

7689 
	`as£π
(
îrmsg
 !
NULL
);

7690 
	`¥öt_°rög
(
îrmsg
);

7694 
	`¥öt_°rög
(
	`°æí
(
öbuf
) ? "I didn't understandÅhat." :

7698 i‡(
√ed_ªdøw
) {

7699 
	`ªdøw
(
e
->
bﬂrd
);

7701 
	`døw_c⁄sﬁe
();

7702 
	`døw_¥om±
();

7705 
	`as£π
(0);

7707 
	}
}

	@410user/progs/cat.c

4 
	~<sysˇŒ.h
>

5 
	~<°dlib.h
>

6 
	~<°dio.h
>

8 
	#BUFSIZE
 87

9 

	)

10 
	$maö
(
¨gc
, **
¨gv
)

12 
buf
[
BUFSIZE
];

13 
i
;

14 
i
 = 1; i < 
¨gc
; i++) {

15 *
fûe
 = 
¨gv
[
i
];

16 
off£t
 = 0;

17 
amt_ªad
;

18 (
amt_ªad
 = 
	`ªadfûe
(
fûe
, 
buf
, 
BUFSIZE
, 
off£t
)) > 0) {

19 
	`¥öt
(
amt_ªad
, 
buf
);

20 
off£t
 +
amt_ªad
;

22 i‡(
amt_ªad
 < 0) {

23 
	`¥ötf
("errorÑeading from file %sát offset %d\n",

24 
fûe
, 
off£t
);

30 
	}
}

	@410user/progs/cvar_test.c

42 
	~<thªad.h
>

43 
	~<°dio.h
>

44 
	~<°ddef.h
>

45 
	~<sysˇŒ.h
>

46 
	~<simics.h
>

47 
	~<°dlib.h
>

48 
	~<muãx.h
>

49 
	~<c⁄d.h
>

50 
	~<thrgΩ.h
>

52 
	#STACK_SIZE
 4096

	)

53 
	#NR_MANIACS
 10

	)

55 
muãx_t
 
	gbig_globÆ_muãx
;

56 
	gd⁄e
 = 0;

57 
	g˛ónup
=0;

58 
c⁄d_t
 
	ga
;

59 
c⁄d_t
 
	gb
;

60 
c⁄d_t
 
	gc
;

62 * 
	$¶ì≥r_thªad
(* 
¨g
)

64 
	`muãx_lock
(&
big_globÆ_muãx
);

66 
	`c⁄d_waô
(&
c
, &
big_globÆ_muãx
);

68 i‡(!
d⁄e
) {

69 
	`Õrötf
("It'sÅooÉarlyÅo be up :(");

70 
	`exô
(1);

73 
	`Õrötf
("Good Morning!");

74 
	`thr_exô
(
NULL
);

75  
NULL
;

76 
	}
}

78 *
	$m™üc
(*
¨g
)

80 
tid
 = 
	`thr_gëid
();

82 
	`muãx_lock
(&
big_globÆ_muãx
);

84 
	`Õrötf
("%d sÀïög! o¿A", 
tid
);

85 
	`c⁄d_waô
(&
a
, &
big_globÆ_muãx
);

87 
	`Õrötf
("%d wokí u∞⁄ A!", 
tid
);

89 
	`c⁄d_sig«l
(&
b
);

91 
	`Õrötf
("%d sÀïög! o¿B", 
tid
);

92 
	`c⁄d_waô
(&
b
, &
big_globÆ_muãx
);

94 
	`Õrötf
("%d wokí u∞⁄ B!", 
tid
);

96 
	`c⁄d_brﬂdˇ°
(&
a
);

98 
	`Õrötf
("%d sÀïög! o¿A", 
tid
);

99 
	`c⁄d_waô
(&
a
, &
big_globÆ_muãx
);

101 
	`Õrötf
("%d wokí u∞⁄ A!", 
tid
);

103 
	`muãx_u∆ock
(&
big_globÆ_muãx
);

106  
NULL
;

107 
	}
}

109 *
	$ö°ig©‹
(*
¨g
)

111 !
˛ónup
) {

112 
	`¶ìp
(5);

113 
	`Õrötf
("instigator broadcasting on A");

114 
	`c⁄d_sig«l
(&
a
);

115 
	`Õrötf
("instigator broadcasting on B");

116 
	`c⁄d_sig«l
(&
b
);

119 
	`thr_exô
(
NULL
);

120  
NULL
;

121 
	}
}

124 
	$maö
–
¨gc
, *
¨gv
[] )

126 
¶ì≥r_tid
;

127 
ö°ig©‹_tid
;

128 
i
;

129 
thrgΩ_group_t
 
m™üc_gΩ
;

131 
	`thr_öô
(
STACK_SIZE
);

133 
	`muãx_öô
(&
big_globÆ_muãx
);

134 
	`c⁄d_öô
(&
a
);

135 
	`c⁄d_öô
(&
b
);

136 
	`c⁄d_öô
(&
c
);

137 
	`thrgΩ_öô_group
(&
m™üc_gΩ
);

140 i‡((
¶ì≥r_tid
=
	`thr_¸óã
(
¶ì≥r_thªad
, 
NULL
)) < 0) {

141 
	`Õrötf
("Error inÅhread Creation!");

142 
	`exô
(1);

145 
	`thr_yõld
(
¶ì≥r_tid
);

147 
i
=0;i<
NR_MANIACS
;++i) {

148 i‡(
	`thrgΩ_¸óã
(&
m™üc_gΩ
, 
m™üc
, 
NULL
) < 0) {

149 
	`Õrötf
("Error inÅhread Creation!");

150 
	`exô
(1);

153 
	`thr_yõld
(-1);

156 i‡((
ö°ig©‹_tid
=
	`thr_¸óã
(
ö°ig©‹
, 
NULL
)) < 0) {

157 
	`Õrötf
("Error inÅhread Creation!");

158 
	`exô
(1);

160 
	`thr_yõld
(
ö°ig©‹_tid
);

163 
i
=0;i<
NR_MANIACS
; ++i)

164 
	`thrgΩ_joö
(&
m™üc_gΩ
, 
NULL
);

166 
d⁄e
=1;

167 
	`c⁄d_sig«l
(&
c
);

169 
	`thr_joö
(
¶ì≥r_tid
, 
NULL
);

170 
˛ónup
=1;

171 
	`thr_joö
(
ö°ig©‹_tid
, 
NULL
);

173 
	`thr_exô
(
NULL
);

176 
	}
}

	@410user/progs/cyclone.c

20 
	~<thªad.h
>

21 
	~<°dlib.h
>

22 
	~<sysˇŒ.h
>

23 
	~<simics.h
>

24 
	~<°dio.h
>

26 
	~"410_ã°s.h
"

27 
DEF_TEST_NAME
("cyclone:");

29 
	#STACK_SIZE
 4096

	)

30 
	#MAX_MISBEHAVE
 64

	)

32 
	gthªad_exôed
 = 0;

33 
	gthr_exô_ªtu∫
 = 0;

35 * 
thªad1
(* 
tokí
);

44 
	$maö
(
¨gc
, *
¨gv
[])

46 
•awn_tid
;

47 
°©us
;

48 
i
;

50 
REPORT_LOCAL_INIT
;

52 
REPORT_START_CMPLT
;

54 
	`REPORT_ON_ERR
(
	`thr_öô
(
STACK_SIZE
));

56 
i
 = 0; i < 
MAX_MISBEHAVE
; i++) {

57 
thªad_exôed
 = 0;

58 
thr_exô_ªtu∫
 = 0;

60 
	`Õrötf
("%s%°ryög modê%d",
TEST_PFX
,
ã°_«me
,
i
);

61 
	`misbehave
(
i
);

63 
	`REPORT_FAILOUT_ON_ERR
((
•awn_tid
 = 
	`thr_¸óã
(
thªad1
, (*)
i
)));

65 
	`REPORT_FAILOUT_ON_ERR
(
	`thr_joö
(
•awn_tid
, (**)&
°©us
));

67 if(
thªad_exôed
 == 0) {

68 
	`REPORT_MISC
("Thread joined beforeÉxited");

69 
REPORT_END_FAIL
;

73 if(
°©us
 !
i
) {

74 
	`REPORT_ERR
("wr⁄gÅokíÑëu∫edá†°©us: ",
°©us
);

75 
REPORT_END_FAIL
;

79 if(
thr_exô_ªtu∫
) {

80 
	`REPORT_MISC
("ERR:Åhr_exit()Ñeturned.");

85 
REPORT_END_SUCCESS
;

88 
	}
}

96 * 
	$thªad1
(* 
tokí
)

98 
thªad_exôed
 = 1;

99 
	`thr_exô
(
tokí
);

100 
thr_exô_ªtu∫
 = 1;

102  
tokí
;

103 
	}
}

	@410user/progs/excellent.c

14 
	~<°dlib.h
>

15 
	~<°ddef.h
>

16 
	~<°dio.h
>

18 
	~<sysˇŒ.h
>

19 
	~<thªad.h
>

20 
	~<ã°.h
>

22 *
	$w‹kî
(* 
öput
)

24 i‡((
	`gëtid
() % 3) == 0) {

25 
	`¥ötf
("***********************************************************************\n");

26 
	`¥ötf
("* I believe ourádventureÅhroughÅime hasÅakená most seriousÅurn. *\n");

27 
	`¥ötf
("***********************************************************************\n");

28 
	`ûÀgÆ
();

30  
öput
;

31 
	}
}

34 
	$maö
(
¨gc
, *
¨gv
[])

36 
tid
, 
îr‹
, 
™swî
=69;

37 *
t°©us
;

39 i‡(
	`thr_öô
(65536) < 0)

40 
	`∑nic
("BOGUS:Åhr_init() failed!");

42 i‡((
tid
 = 
	`thr_¸óã
(
w‹kî
, (*)
™swî
)) < 0)

43 
	`∑nic
("HEINOUS:Åhr_create() failed!");

45 i‡((
îr‹
 = 
	`thr_joö
(
tid
, &
t°©us
)) != 0)

46 
	`∑nic
("MOST NON-TRIUMPHANT:Åhr_join() failed!");

48 i‡(()
t°©us
 !
™swî
)

49 
	`∑nic
("BOGUS!!");

51 
	`¥ötf
("*******************************\n");

52 
	`¥ötf
("* BeÉxcellentÅoÉach other. *\n");

53 
	`¥ötf
("*******************************\n");

55 
	}
}

	@410user/progs/getpid_test1.c

11 
	~<sysˇŒ.h
>

12 
	~<°dlib.h
>

13 
	~<simics.h
>

14 
	~"410_ã°s.h
"

15 
	~<ªp‹t.h
>

17 
DEF_TEST_NAME
("getpid_test1:");

20 
	$maö
() {

21 
pid
;

23 
	`ªp‹t_°¨t
(
START_CMPLT
);

24 
pid
 = 
	`gëtid
();

25 
	`Õrötf
("%†myÖid is: %d", 
ã°_«me
, 
pid
);

27 if(
pid
 =
	`gëtid
()) {

28 
	`ªp‹t_íd
(
END_SUCCESS
);

30 
	`ªp‹t_íd
(
END_FAIL
);

33 
	`exô
(0);

34 
	}
}

	@410user/progs/halt_test.c

10 
	~<sysˇŒ.h
>

11 
	~<°dlib.h
>

12 
	~<°dio.h
>

13 
	~<simics.h
>

14 
	~"410_ã°s.h
"

16 
DEF_TEST_NAME
("halt_test:");

18 
	$maö
()

20 
REPORT_START_ABORT
;

22 
	`hÆt
();

24 
REPORT_END_FAIL
;

25 
	`exô
(-1);

26 
	}
}

	@410user/progs/idle.c

10 
	$maö
()

14 
	}
}

	@410user/progs/init.c

10 
	~<sysˇŒ.h
>

11 
	~<°dio.h
>

13 
	$maö
()

15 
pid
, 
exô°©us
;

16 
shñl
[] = "shell";

17 * 
¨gs
[] = {
shñl
, 0};

20 
pid
 = 
	`f‹k
();

21 i‡(!
pid
)

22 
	`exec
(
shñl
, 
¨gs
);

24 
pid
 !
	`waô
(&
exô°©us
));

26 
	`¥ötf
("Shñ»exôed wôh sètu†%d; sèπög iàback up...", 
exô°©us
);

28 
	}
}

	@410user/progs/join_specific_test.c

26 
	~<°dlib.h
>

27 
	~<°ddef.h
>

28 
	~<sysˇŒ.h
>

29 
	~<simics.h
>

30 
	~<thªad.h
>

31 
	~<°dio.h
>

32 
	~<°rög.h
>

34 
	#°ackSize
 4096

	)

36 
	#SUCCESS
 0

	)

40 
	smyArgs
{

41 
	mcookõ
;

42 } 
	tmyArgs
;

44 *
	$ba£Func
 (* 
¨gs
)

46 
myArgs
 *
¨gsö
 = (myArg†*)
¨gs
;

48 
	`yõld
(-1);

49 
	`¥öt
 (1, &(
¨gsö
->
cookõ
));

51  
¨gs
;

52 
	}
}

54 
	$maö
(
¨gc
, **
¨gv
)

56 
îr‹
;

57 
tids
[30];

58 
i
;

59 
myArgs
 *
curArg
;

60 *
myOuçut
="Hello, world!\n";

62 
	`thr_öô
(
°ackSize
);

64 
i
=0; i<
	`°æí
(
myOuçut
); i++)

66 
curArg
=
	`mÆloc
((
myArgs
));

68 
curArg
->
cookõ
=
myOuçut
[
i
];

70 
tids
[
i
]=
	`thr_¸óã
(
ba£Func
, (*)
curArg
);

73 
i
=
	`°æí
(
myOuçut
)-1; i>=0; i--)

75 if((
îr‹
 = 
	`thr_joö
(
tids
[
i
], (**)&
curArg
)Ë!=
SUCCESS
)

77 
	`Õrötf
("Thr_joöÉº‹ %d\n",
îr‹
);

80 if(
curArg
 !
NULL
)

82 
	`‰ì
(
curArg
);

88 
	}
}

	@410user/progs/juggle.c

9 
	~<°dio.h
>

10 
	~<ønd.h
>

11 
	~<sysˇŒ.h
>

12 
	~<simics.h
>

13 
	~<thªad.h
>

14 
	~<°dlib.h
>

15 
	~<muãx.h
>

18 
	#SLEEP_MAX
 5

	)

22 
	#PRINT


	)

25 
	#COUNT_THREADS


	)

28 
	gn_throws
;

30 #ifde‡
COUNT_THREADS


34 
	#PRINT_LEVEL
 5

	)

37 
	gth_cou¡
 = 0;

40 
muãx_t
 
	gcou¡_muãx
;

44 
	$öc_cou¡
()

46 
	`muãx_lock
(&
cou¡_muãx
);

47 
th_cou¡
++;

48 
	`muãx_u∆ock
(&
cou¡_muãx
);

50 
	}
}

56 
	$¥öt_cou¡
(
n
)

58 
my_cou¡
;

60 i‡(
n
 >
PRINT_LEVEL
) {

64 
	`muãx_lock
(&
cou¡_muãx
);

65 
my_cou¡
 = 
th_cou¡
;

66 
	`muãx_u∆ock
(&
cou¡_muãx
);

67 
	`Õrötf
("Thªad cou¡ = %d\n", 
my_cou¡
);

69 
	}
}

73 
	#öc_cou¡
(Ë;

	)

74 
	#¥öt_cou¡
(
n
Ë;

	)

87 *
	$juggÀ
(* 
n_void°¨
)

89 
sub1
, 
sub2
;

90 
throws
;

91 
sub°©
;

92 
ªt
;

93 
n
 = ()
n_void°¨
;

95 
	`öc_cou¡
();

96 
	`¥öt_cou¡
(
n
);

98 i‡(
n
 > 0) {

99 
throws
 = 0;Åhrow†< 
n_throws
;Åhrows++) {

102 
sub1
 = 
	`thr_¸óã
(
juggÀ
, (*)(
n
 - 1));

104 i‡(
sub1
 < 0) {

105 
	`Õrötf
("Lev %d failedÅo create firstÅhread w/Érr %d\n",

106 
n
, 
sub1
);

109 
sub2
 = 
	`thr_¸óã
(
juggÀ
, (*)(
n
 - 1));

111 i‡(
sub2
 < 0) {

112 
	`Õrötf
("Lev %d failedÅo create secondÅhread w/Érr %d\n",

113 
n
, 
sub2
);

117 i‡((
ªt
 = 
	`thr_joö
(
sub1
, (*)&
sub°©
))

118 !0 || 
sub°©
 !(
n
 - 1)) {

119 
	`Õrötf
("Lev %d faûedÅÿjoö fú°Åhªad c‹ª˘ly:\n\t", 
n
);

120 
	`Õrötf
("join(%d),Ñet = %d, %d ?= %d\n",

121 
sub1
, 
ªt
, (
n
 - 1), 
sub°©
);

124 i‡((
ªt
 = 
	`thr_joö
(
sub2
, (*)&
sub°©
))

125 !0 || 
sub°©
 !(
n
 - 1)) {

126 
	`Õrötf
("Lev %d faûedÅÿjoö sec⁄dÅhªad c‹ª˘ly:\n\t", 
n
);

127 
	`Õrötf
("join(%d),Ñet = %d, %d ?= %d\n",

128 
sub2
, 
ªt
, (
n
 - 1), 
sub°©
);

132 #ifde‡
PRINT


134 
	`putch¨
(()
n
 + '0');

137 
	`¥öt_cou¡
(
n
);

140 
	`¶ìp
(
	`gíønd
(Ë% 
SLEEP_MAX
);

142  (*)
n
;

143 
	}
}

149 
	$¥öt_ußge
(*
¥og_«me
)

151 
	`¥ötf
("USAGE: %s <num_levels> <num_throws> <rep> <misbehave_num + 1>\n",

152 
¥og_«me
);

153 
	}
}

155 
	$maö
(
¨gc
, **
¨gv
)

157 
n_Àvñs
;

158 
ªt
;

159 
i
, 
ªp
;

160 
misbehave_num
;

162 i‡(
¨gc
 != 5) {

163 
	`¥ötf
("WrongÇumber ofárgs.\n\n");

164 
	`¥öt_ußge
(
¨gv
[0]);

168 
n_Àvñs
 = 
	`©oi
(
¨gv
[1]);

169 
n_throws
 = 
	`©oi
(
¨gv
[2]);

170 
ªp
 = 
	`©oi
(
¨gv
[3]);

171 
misbehave_num
 = 
	`©oi
(
¨gv
[4]) - 1;

173 i‡(
n_Àvñs
 < 0) {

174 
	`¥ötf
("Levels must beÇon-negative.\n\n");

175 
	`¥öt_ußge
(
¨gv
[0]);

179 i‡(
n_throws
 < 0) {

180 
	`¥ötf
("Throws must beÇon-negative.\n\n");

181 
	`¥öt_ußge
(
¨gv
[0]);

185 i‡(
	`thr_öô
(4096) != 0) {

186 
	`¥ötf
("Init failed. Something's busted.\n\n");

190 
	`¥ötf
("MISBEHAVE: %d\n\n", 
misbehave_num
);

191 
	`misbehave
(
misbehave_num
);

193 i‡(
	`muãx_öô
(&
cou¡_muãx
) != 0) {

194 
	`¥ötf
("Mutex init of count_mutex failed. Go fix your mutexes.\n\n");

199 
i
 = 0; 
ªp
 == 0 || i <Ñep; i++) {

200 
	`¥ötf
("Hîêwêgo! Rïëôi⁄ %d\n", 
i
+1);

202 i‡((
ªt
 = ()
	`juggÀ
((*)
n_Àvñs
)) !=Ç_levels) {

203 
	`¥ötf
("Root juggleÅhreadÑeturned wrong value: %d should've been: %d\n",

204 
ªt
, 
n_Àvñs
);

207 
	`¥ötf
("\n\nSuccess. All ballsáccounted for.\n");

209 #ifde‡
COUNT_THREADS


210 
	`Õrötf
("Cª©edánd de°royed %dÅhªad†sÿÁr.\n", 
th_cou¡
);

215 
	}
}

	@410user/progs/largetest.c

23 
	~<sysˇŒ.h
>

24 
	~<simics.h
>

25 
	~<muãx.h
>

26 
	~<°dio.h
>

27 
	~<thªad.h
>

28 
	~<£m.h
>

29 
	~<as£π.h
>

30 
	~<thrgΩ.h
>

32 * 
	$wtf
(* 
wh©
) {

33 
id
 = 
	`thr_gëid
();

34 
	`¥ötf
("hò‰om %d\n",
id
);

36 
	`thr_yõld
(()
wh©
);

37 
	`thr_yõld
(-1);

39 if((
id
 % 8) == 0) {

40 
tid
;

41 
tid
 = 
	`thr_¸óã
(
wtf
, (*)
id
);

43 i‡(
tid
 >= 0) {

44 
°©us
;

45 
	`thr_joö
(
tid
, (**)&
°©us
);

47 
	`Õrötf
("%d joined with %d whichÉxited with status %d\n",

48 
id
,
tid
,
°©us
);

49 
	`as£π
(
tid
 =
°©us
);

52 (Ë
	`thr_¸óã
(
wtf
, (*)
wh©
);

54  (*)
id
;

55 
	}
}

57 
	$maö
()

59 
°©us
;

60 
cou¡
 = 0;

62 
	`thr_öô
(
PAGE_SIZE
);

63 
id
 = 
	`thr_gëid
();

65 
thrgΩ_group_t
 
tg
;

67 
	`thrgΩ_öô_group
(&
tg
);

70 if(++
cou¡
 % 5) {

71 
	`thrgΩ_¸óã
(&
tg
, 
wtf
, (*)
id
);

73 
	`¶ìp
(1);

74 
	`Õrötf
("-----------main isÅryingÅo join-------------------\n");

75 
	`thrgΩ_joö
(&
tg
, (**)&
°©us
);

76 
	`Õrötf
("%d joined withá worker whichÉxited with status %d\n",

77 
id
,
°©us
);

80 
	`thr_exô
((*)-1);

83 
	}
}

	@410user/progs/mandelbrot.c

9 
	~<as£π.h
>

10 
	~<°dio.h
>

11 
	~<°ddef.h
>

12 
	~<sysˇŒ.h
>

13 
	~<simics.h
>

14 
	~"ønd.h
"

16 
	~"thªad.h
"

17 
	~"c⁄d.h
"

18 
	~"muãx.h
"

19 
	~"thrgΩ.h
"

23 #i‚de‡
HAVE_GETCHAR


24 
	#gëch¨
 
°©ic_gëch¨


	)

25 
	$gëch¨
()

27 
buf
[2];

28 
	`ªadlöe
(2, 
buf
);

30  
buf
[0];

31 
	}
}

34 
	#CONSOLE_WIDTH
 80

	)

35 
	#CONSOLE_HEIGHT
 25

	)

37 
	#FRACTIONAL_BITS
 24

	)

39 
	#FIXEDPOINT_TWO
 0x02000000

	)

41 
	#FIXEDPOINT_FOUR
 0x04000000

	)

44 
	#YIELD_FACTOR
 8

	)

46 
	#MAX_TRAPS
 30

	)

52 c⁄° 
	gcﬁ_èbÀ
[] = {

138 c⁄° 
	grow_èbÀ
[] = {

167 
	sm™dñbrŸ_°©e
 {

168 
muãx_t
 
	m˚Œ_muãx
;

169 
	mcou¡
;

170 
	mcﬁ‹
;

171 
	må≠_num
;

173 
	må≠≥d_thªads
;

174 
	mexôög
;

175 } 
	tm™dñbrŸ_°©e_t
;

178 
muãx_t
 
	gc⁄sﬁe_lock
;

180 
c⁄d_t
 
	gå≠s
[
MAX_TRAPS
];

183 
	gexôög
 = 0;

185 
	gwakeup_thªshﬁd
 = 1;

190 
m™dñbrŸ_°©e_t
 
	g°©e
[
CONSOLE_HEIGHT
 - 1][
CONSOLE_WIDTH
];

199 
	$fixed_mu…
(
a
, 
b
)

201  ()(((()
a
Ë* (()
b
)Ë>> 
FRACTIONAL_BITS
);

202 
	}
}

212 
	$m™dñbrŸ_ˇlc
(
row
, 
cﬁ
)

214 
i
;

216 
imag_co‹d_öô
 = 
row_èbÀ
[
row
];

217 
ªÆ_co‹d_öô
 = 
cﬁ_èbÀ
[
cﬁ
];

218 
imag_co‹d
 = 
imag_co‹d_öô
;

219 
ªÆ_co‹d
 = 
ªÆ_co‹d_öô
;

221 
i
 = 0;

222 
i
 < 14 && 
	`fixed_mu…
(
ªÆ_co‹d
,Ñól_co‹dË+ fixed_mu…(
imag_co‹d
, imag_co‹dË< 
FIXEDPOINT_FOUR
;

223 
i
++) {

225 
tmp_imag_co‹d
 = 
	`fixed_mu…
(
FIXEDPOINT_TWO
,

226 
	`fixed_mu…
(
ªÆ_co‹d
, 
imag_co‹d
)) +

227 
imag_co‹d_öô
;

228 
ªÆ_co‹d
 = 
	`fixed_mu…
(real_coord,Ñeal_coord) -

229 
	`fixed_mu…
(
imag_co‹d
, imag_coord) +

230 
ªÆ_co‹d_öô
;

231 
imag_co‹d
 = 
tmp_imag_co‹d
;

234  
i
;

235 
	}
}

245 
	$¥o˚ss_pixñ
(
row
, 
cﬁ
)

247 
	`muãx_lock
(&
°©e
[
row
][
cﬁ
].
˚Œ_muãx
);

249 i‡(
°©e
[
row
][
cﬁ
].
exôög
) {

250 
	`muãx_u∆ock
(&
°©e
[
row
][
cﬁ
].
˚Œ_muãx
);

254 i‡(
°©e
[
row
][
cﬁ
].
cou¡
 < 0) {

255 
°©e
[
row
][
cﬁ
].
cﬁ‹
 = 
	`m™dñbrŸ_ˇlc
(row, col);

258 i‡(
°©e
[
row
][
cﬁ
].
å≠≥d_thªads
 >
wakeup_thªshﬁd
) {

259 
	`c⁄d_brﬂdˇ°
(&
å≠s
[
°©e
[
row
][
cﬁ
].
å≠_num
]);

260 } i‡(
°©e
[
row
][
cﬁ
].
å≠_num
 >= 0) {

261 
°©e
[
row
][
cﬁ
].
å≠≥d_thªads
++;

263 
	`muãx_lock
(&
c⁄sﬁe_lock
);

264 
	`£t_curs‹_pos
(
row
, 
cﬁ
);

265 
	`£t_ãrm_cﬁ‹
((15 - 
°©e
[
row
][
cﬁ
].
cﬁ‹
Ë| 
BGND_RED
);

266 
	`¥ötf
("%c", '0' + 
°©e
[
row
][
cﬁ
].
å≠≥d_thªads
 % 10);

267 
	`muãx_u∆ock
(&
c⁄sﬁe_lock
);

269 
	`c⁄d_waô
(&
å≠s
[
°©e
[
row
][
cﬁ
].
å≠_num
],

270 &
°©e
[
row
][
cﬁ
].
˚Œ_muãx
);

272 
°©e
[
row
][
cﬁ
].
å≠≥d_thªads
--;

275 
°©e
[
row
][
cﬁ
].
cou¡
++;

277 
	`muãx_lock
(&
c⁄sﬁe_lock
);

278 
	`£t_curs‹_pos
(
row
, 
cﬁ
);

279 
	`£t_ãrm_cﬁ‹
((15 - 
°©e
[
row
][
cﬁ
].
cﬁ‹
Ë| 
BGND_BLACK
);

280 
	`¥ötf
("%c", 'a' + 
°©e
[
row
][
cﬁ
].
cou¡
 % 26);

281 
	`muãx_u∆ock
(&
c⁄sﬁe_lock
);

283 
	`muãx_u∆ock
(&
°©e
[
row
][
cﬁ
].
˚Œ_muãx
);

284 
	}
}

291 *
	$w™dîî_maö
(*
¨g
)

293 
row
, 
cﬁ
;

295 
row
 = 
	`gíønd
(Ë% (
CONSOLE_HEIGHT
 - 1);

296 
cﬁ
 = 
	`gíønd
(Ë% 
CONSOLE_WIDTH
;

298 !
exôög
) {

300 
	`¥o˚ss_pixñ
(
row
, 
cﬁ
);

302 
row
 = 
	`gíønd
(Ë% (
CONSOLE_HEIGHT
 - 1);

303 
cﬁ
 = 
	`gíønd
(Ë% 
CONSOLE_WIDTH
;

305 i‡(
	`gíønd
(Ë% 
YIELD_FACTOR
 == 0) {

306 
	`yõld
(-1);

309 
	`muãx_lock
(&
c⁄sﬁe_lock
);

310 
	`£t_curs‹_pos
(
row
, 
cﬁ
);

311 
	`£t_ãrm_cﬁ‹
(
FGND_BLACK
 | 
BGND_BLUE
);

312 
	`¥ötf
("%c", '+');

313 
	`muãx_u∆ock
(&
c⁄sﬁe_lock
);

315 i‡(
	`gíønd
(Ë% 
YIELD_FACTOR
 == 0) {

316 
	`yõld
(-1);

321  
NULL
;

322 
	}
}

327 
	$ußge
() {

328 
	`¥ötf
("mandelbrot [num_threads] [num_traps] [wakeup_threshold]\n\n");

329 
	`¥ötf
("num_å≠†mu° bê<%d\n", 
MAX_TRAPS
);

330 
	`¥ötf
("ifÇum_traps * (wakeup_threshold - 1) >=Çum_threads "

332 
	}
}

340 
	$maö
(
¨gc
, *
¨gv
[])

342 
thrgΩ_group_t
 
thªad_group
;

343 
num_thªads
 = 15;

344 
num_å≠s
 = 8;

345 *
°©us
;

347 
i
;

348 
row
, 
cﬁ
;

349 
c
;

351 i‡(
¨gc
 >= 2) {

352 i‡(
	`ssˇnf
(
¨gv
[1], "%d", &
num_thªads
) < 1 ||Çum_threads <= 0) {

353 
	`ußge
();

357 i‡(
¨gc
 >= 3) {

358 i‡(
	`ssˇnf
(
¨gv
[2], "%d", &
num_å≠s
) < 1 ||Çum_traps < 0 ||

359 
num_å≠s
 > 
MAX_TRAPS
) {

360 
	`ußge
();

364 i‡(
¨gc
 >= 4) {

365 i‡(
	`ssˇnf
(
¨gv
[3], "%d", &
wakeup_thªshﬁd
) < 1) {

366 
	`ußge
();

371 
	`sgíønd
(
	`gë_ticks
() | 15410);

373 
	`Õrötf
("InitializingÅhreadÜibrary...\n");

374 
	`thr_öô
(
PAGE_SIZE
 * 10);

376 
	`Õrötf
("Initializing consoleÜock...\n");

377 
	`as£π
(
	`muãx_öô
(&
c⁄sﬁe_lock
) >= 0);

379 
	`Õrötf
("Initializing state...\n");

380 
row
 = 0;Ñow < 
CONSOLE_HEIGHT
 - 1;Ñow++) {

381 
cﬁ
 = 0; cﬁ < 
CONSOLE_WIDTH
; col++) {

382 
	`as£π
(
	`muãx_öô
(&
°©e
[
row
][
cﬁ
].
˚Œ_muãx
) >= 0);

383 
°©e
[
row
][
cﬁ
].
cou¡
 = -1;

384 
°©e
[
row
][
cﬁ
].
å≠_num
 = -1;

385 
°©e
[
row
][
cﬁ
].
å≠≥d_thªads
 = 0;

386 
°©e
[
row
][
cﬁ
].
exôög
 = 0;

390 
	`Õrötf
("InitializingÅraps...\n");

392 
i
 = 0; i < 
num_å≠s
; i++) {

393 
	`as£π
(
	`c⁄d_öô
(&
å≠s
[
i
]) >= 0);

394 
°©e
[
	`gíønd
(Ë% (
CONSOLE_HEIGHT
 - 1)][gíønd(Ë% 
CONSOLE_WIDTH
].
å≠_num
 = 
i
;

397 
	`Õrötf
("Clearing console...\n");

398 
i
 = 0; i < 
CONSOLE_HEIGHT
; i++) {

399 
	`¥ötf
("\n");

402 
	`Õrötf
("InitializingÅhread group...\n");

403 
	`as£π
(
	`thrgΩ_öô_group
(&
thªad_group
) >= 0);

405 
	`Õrötf
("Creating wandererÅhreads...\n");

406 
i
 = 0; i < 
num_thªads
; i++) {

407 
	`thrgΩ_¸óã
(&
thªad_group
, &
w™dîî_maö
, 
NULL
);

410 
	`Õrötf
("WaitingÅoÉxit...\n");

411 (
c
 = 
	`gëch¨
()) != 'q') {

412 
	`Õrötf
("gŸ %c!\n", 
c
);

416 
exôög
 = 1;

418 
row
 = 0;Ñow < 
CONSOLE_HEIGHT
 - 1;Ñow++) {

419 
cﬁ
 = 0; cﬁ < 
CONSOLE_WIDTH
; col++) {

420 
	`muãx_lock
(&
°©e
[
row
][
cﬁ
].
˚Œ_muãx
);

421 
°©e
[
row
][
cﬁ
].
exôög
 = 1;

422 
	`muãx_u∆ock
(&
°©e
[
row
][
cﬁ
].
˚Œ_muãx
);

426 
i
 = 0; i < 
num_å≠s
; i++) {

427 
	`c⁄d_brﬂdˇ°
(&
å≠s
[
i
]);

430 
	`Õrötf
("Joining with wandererÅhreads...\n");

431 
i
 = 0; i < 
num_thªads
; i++) {

432 
	`thrgΩ_joö
(&
thªad_group
, &
°©us
);

435 
	`Õrötf
("DestroyingÅhread group...\n");

436 
	`thrgΩ_de°roy_group
(&
thªad_group
);

438 
row
 = 0;Ñow < 
CONSOLE_HEIGHT
 - 1;Ñow++) {

439 
cﬁ
 = 0; cﬁ < 
CONSOLE_WIDTH
; col++) {

440 
	`muãx_de°roy
(&
°©e
[
row
][
cﬁ
].
˚Œ_muãx
);

444 
i
 = 0; i < 
num_å≠s
; i++) {

445 
	`c⁄d_de°roy
(&
å≠s
[
i
]);

448 
	`muãx_de°roy
(&
c⁄sﬁe_lock
);

450 
	`£t_curs‹_pos
(
CONSOLE_HEIGHT
 - 1, 0);

451 
	`£t_ãrm_cﬁ‹
(
FGND_CYAN
 | 
BGND_BLACK
);

453 
	`thr_exô
(
NULL
);

455 
	}
}

	@410user/progs/misbehave.c

10 
	~<sysˇŒ.h
>

11 
	~<ã°.h
>

12 
	~<°rög.h
>

13 
	~<°dlib.h
>

14 
	~<°dio.h
>

17 
	$maö
–
¨gc
, *
¨gv
[] )

19 
misbehave_vÆ
;

20 if–
¨gc
 == 1 ) {

21 
	`¥ötf
("usage: misbehave <mode>");

22 
	`exô
( -1 );

24 
misbehave_vÆ
 = 
	`©oi
(
¨gv
[1]);

26 
	`assuªdly_misbehave
(
misbehave_vÆ
);

29 
	}
}

	@410user/progs/misbehave_wrap.c

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<°rög.h
>

16 
	~<sysˇŒ.h
>

17 
	~<°dlib.h
>

18 
	~<°ddef.h
>

19 
	~<simics.h
>

21 
	#¥ötf
–
x
 ... ) \

22 dÿ{ 
	`£t_ãrm_cﬁ‹
(0x1F); 
	`¥ötf
(
x
); së_ãrm_cﬁ‹(0x03); } 0)

	)

28 
	#MISBEHAVE_MAX
 64

	)

30 
	$maö
(
¨gc
, **
¨gv
)

32 
ex≥˘rv
 = 0, 
i
;

34 i‡–
¨gc
 < 3 )

36 
	`¥ötf
("Ußge: %†<ex≥˘Ñv> <¥ogøm> <¥og_¨gs>\n", 
¨gv
[0]);

40 
	`¥ötf
(">>> misbehave_wrapárgument vector: \n");

41  
i
 = 0; i < 
¨gc
; i++ )

43 
	`¥ötf
(" '%s'\n", 
¨gv
[
i
]);

47 
ex≥˘rv
 = 
	`©oi
–
¨gv
[1] );

53 **
«rgv
 = 
	`_mÆloc
((*Ë* (
¨gc
 - 1));

54  
i
 = 0; i < 
¨gc
 - 2; i++ )

56 
«rgv
[
i
] = 
	`_mÆloc
(
	`°æí
(
¨gv
[i+2])+1);

57 
	`°r˝y
(
«rgv
[
i
], 
¨gv
[i+2]);

59 
«rgv
[
¨gc
 - 2] = 
NULL
;

61 
	`¥ötf
(">>> Misbehavêwø∞executög : '%s'\n", 
«rgv
[0]);

62 
	`¥ötf
(">>> Withárgument vector: \n");

63  
i
 = 0; 
«rgv
[i] !
NULL
; i++ )

65 
	`¥ötf
(" '%s'\n", 
«rgv
[
i
]);

68  
i
 = 0; i < 
MISBEHAVE_MAX
 + 1; i++ )

70 
	`¥ötf
(">>> Misbehavêwø∞ôî©i⁄ %d\n", 
i
);

71 i‡–
i
 =
MISBEHAVE_MAX
 )

73 
	`misbehave
(-1);

77 
	`misbehave
(
i
);

80 
pid
 = 
	`f‹k
();

82 i‡–
pid
 < 0 )

84 
	`¥ötf
("FORK faûuª (åyá spo⁄?): %d\n", 
pid
);

87 i‡–
pid
 == 0 )

89 
ev
;

90 i‡––
ev
 = 
	`exec
 (
«rgv
[0],Çargv) ) < 0 )

92 
	`¥ötf
("EXEC faûuª (NX Fótuª?): %d\n", 
ev
);

93  ~
ex≥˘rv
;

98 
°©us
, 
wpid
;

99 i‡–(
wpid
 = 
	`waô
 ( &
°©us
 ) ) < 0 )

101 
	`¥ötf
("WAIT faûuª (gÿö°ód?): %d\n", 
wpid
);

104 i‡–
pid
 !
wpid
 )

106 
	`¥ötf
("WAITÑeturned wrongÖid (kernel confused?): %d != %d\n",

107 
pid
, 
wpid
);

110 i‡–
°©us
 !
ex≥˘rv
 )

112 
	`¥ötf
("Vi˘imÖrogømÑëu∫ed u√x≥˘ed vÆue: %d\n", 
°©us
);

117 
	`¥ötf
(">>> Success\n");

123 
	}
}

	@410user/progs/multitest.c

15 
	~<sysˇŒ.h
>

16 
	~<simics.h
>

17 
	~<muãx.h
>

18 
	~<°dio.h
>

19 
	~<thªad.h
>

20 
	~<£m.h
>

22 
	#TESTS
 3

	)

24 
	$maö
()

26 
i
;

27 
cou¡
 = 0;

28 * 
ã°s
[] = {"agility_drill", "cvar_test", "cyclone",

31 * 
ad
[] = {"agility_drill",(*)0};

32 * 
˘
[] = {"cvar_test",(*)0};

33 * 
c
[] = {"cyclone",(*)0};

34 * 
j°
[] = {"join_specific_test",(*)0};

35 * 
ãj
[] = {"thr_exit_join",(*)0};

37 ** 
¨gsvec
[] = { 
ad
,
˘
,
c
,
j°
,
ãj
};

40 
	`Õrötf
("-----------------Iãøti⁄: %d-----------------------\n",
cou¡
++);

41 
i
=0;i<
TESTS
;i++) {

42 
	`¶ìp
(5);

43 
	`misbehave
(-1);

44 
tid
 = 
	`f‹k
();

46 if(
tid
 == 0) {

47 
	`¥ötf
("execög %s\n",
ã°s
[
i
]);

48 
	`exec
(
ã°s
[
i
],
¨gsvec
[i]);

49 
	`¥ötf
("ã° %†couldÇŸÉxec\n",
ã°s
[
i
]);

56 
	}
}

	@410user/progs/nibbles.c

9 
	~<°dlib.h
>

10 
	~<°dio.h
>

11 
	~<sysˇŒ.h
>

12 
	~<sysˇŒ_öt.h
>

13 
	~<ønd.h
>

14 
	~<as£π.h
>

16 
	#SLEEP_TICKS
 75

	)

18 
	#SNAKE_COLOR
 0x60

	)

19 
	#SNAKE_CHAR
 " "

	)

21 
	#APPLE_COLOR
 0x4

	)

22 
	#APPLE_CHAR
 "@"

	)

24 
	#BORDER_COLOR
 0x30

	)

25 
	#BORDER_CHAR
 ' '

	)

27 
	#BLANK_COLOR
 0x0

	)

28 
	#TEXT_COLOR
 0x2

	)

31 
	#MAX_POS_WIDTH
 128

	)

34 
	#SNAKE_MAX_LENGTH
 100

	)

37 
	#SNAKE_MIN_LENGTH
 10

	)

39 
	#SNAKE_UP
 'w'

	)

40 
	#SNAKE_DOWN
 's'

	)

41 
	#SNAKE_LEFT
 'a'

	)

42 
	#SNAKE_RIGHT
 'd'

	)

44 
	#SNAKE_START_ROW
 10

	)

45 
	#SNAKE_START_COL
 10

	)

46 
	#SNAKE_START_DIR
 
SNAKE_RIGHT


	)

48 
	#APPLE_MIN_WAIT
 20

	)

49 
	#APPLE_MAX_WAIT
 40

	)

51 
	#APPLE_MAX_NUM
 10

	)

52 
	#APPLE_SCORE
 10

	)

56 
	mÀngth
;

57 
	m°¨t
;

58 
	m•Ÿ
[
SNAKE_MAX_LENGTH
][2];

59 
	mdúe˘i⁄
;

60 } 
	t¢ake_t
;

64 
	mx
;

65 
	my
;

66 
	mvÆid
;

67 } 
	t≠∂e_t
;

73 
	g¶ìp_ticks
 = 
SLEEP_TICKS
;

76 
	gc⁄_width
;

79 
	gc⁄_height
;

82 
	gsc‹e
;

85 vﬁ©ûê
	gœ°_key
;

87 
•awn_key_gøbbî
();

90 
	$¥öt_dúe˘i⁄s
()

92 
	`¥ötf
("MoveÅhe snake usingÅhe controlsÜisted below.\n");

93 
	`¥ötf
("EatÅheápplesÅo getÖoints, but don't hitÅhe\n");

94 
	`¥ötf
("wall orÜetÅhe snake bite himself.\n");

95 
	`¥ötf
("UP - w\n");

96 
	`¥ötf
("DOWN - s\n");

97 
	`¥ötf
("LEFT -á\n");

98 
	`¥ötf
("RIGHT - d\n");

99 
	`¥ötf
("\n\n");

100 
	}
};

103 
	$døw_b‹dî
()

105 
i
;

106 
buf
[
MAX_POS_WIDTH
];

108 
i
 = 0; i < 
c⁄_width
; i++) {

109 
buf
[
i
] = 
BORDER_CHAR
;

112 
	`£t_ãrm_cﬁ‹
(
BLANK_COLOR
);

113 
	`£t_curs‹_pos
(
c⁄_height
-1,0);

114 
	`¥öt
(
c⁄_width
, 
buf
);

116 
	`£t_ãrm_cﬁ‹
(
BORDER_COLOR
);

117 
	`£t_curs‹_pos
(0,0);

118 
	`¥öt
(
c⁄_width
, 
buf
);

120 
i
 = 1; i < 
c⁄_height
 - 2; i++) {

121 
	`£t_ãrm_cﬁ‹
(
BLANK_COLOR
);

122 
	`£t_curs‹_pos
(
i
,0);

123 
	`¥öt
(
c⁄_width
, 
buf
);

125 
	`£t_ãrm_cﬁ‹
(
BORDER_COLOR
);

126 
	`£t_curs‹_pos
(
i
, 0);

127 
	`¥öt
(1, 
buf
);

129 
	`£t_curs‹_pos
(
i
, 
c⁄_width
-1);

130 
	`¥öt
(1, 
buf
);

133 
	`£t_curs‹_pos
(
c⁄_height
 - 2,0);

134 
	`¥öt
(
c⁄_width
, 
buf
);

136 
sc‹e
 = 0;

137 
	`£t_curs‹_pos
(
c⁄_height
 - 1, 0);

138 
	`£t_ãrm_cﬁ‹
(
TEXT_COLOR
);

139 
	`¥ötf
("sc‹e: %d", 
sc‹e
);

140 
	}
}

143 
	$öô_¢ake
(
¢ake_t
 *
¢ake
) {

144 
i
;

146 
¢ake
->
Àngth
 = 
SNAKE_MIN_LENGTH
;

147 
¢ake
->
°¨t
 = 
SNAKE_MIN_LENGTH
 - 1;

149 
i
 = 0; i < 
SNAKE_MIN_LENGTH
; i++) {

150 
¢ake
->
•Ÿ
[
i
][0] = 
SNAKE_START_COL
;

151 
¢ake
->
•Ÿ
[
i
][1] = 
SNAKE_START_ROW
;

154 
¢ake
->
dúe˘i⁄
 = 
SNAKE_START_DIR
;

155 
	}
}

161 
	$¢ake_diß°î
(
¢ake_t
 *
¢ake
)

163 
i
, 
°›
;

164 
¢ake_x
 = 
¢ake
->
•Ÿ
[¢ake->
°¨t
][0];

165 
¢ake_y
 = 
¢ake
->
•Ÿ
[¢ake->
°¨t
][1];

168 i‡(
¢ake_x
 <= 0 ||

169 
¢ake_x
 >
c⁄_width
 - 1 ||

170 
¢ake_y
 <= 0 ||

171 
¢ake_y
 >
c⁄_height
 - 2)

175 
°›
 = (
¢ake
->
°¨t
 - s«ke->
Àngth
 + 
SNAKE_MAX_LENGTH
) % SNAKE_MAX_LENGTH;

177 
i
 = (
¢ake
->
°¨t
 - 1 + 
SNAKE_MAX_LENGTH
) % SNAKE_MAX_LENGTH;

178 
i
 !
°›
;

179 
i
 = (i-1 + 
SNAKE_MAX_LENGTH
) % SNAKE_MAX_LENGTH)

180 i‡(
¢ake
->
•Ÿ
[
i
][0] =
¢ake_x
 &&

181 
¢ake
->
•Ÿ
[
i
][1] =
¢ake_y
)

185 
	}
}

188 
	$move_¢ake
(
¢ake_t
 *
¢ake
, 
≠∂e_t
 *
≠∂es
)

190 
ﬁd_x
, 
ﬁd_y
;

191 
√w_x
, 
√w_y
;

192 
ªmove_x
, 
ªmove_y
;

194 
i
;

197 
ﬁd_x
 = 
¢ake
->
•Ÿ
[¢ake->
°¨t
][0];

198 
ﬁd_y
 = 
¢ake
->
•Ÿ
[¢ake->
°¨t
][1];

200 
¢ake
->
°¨t
 = (¢ake->°¨à+ 1Ë% 
SNAKE_MAX_LENGTH
;

203 
ªmove_x
 = 
¢ake
->
•Ÿ
[(¢ake->
°¨t
 -

204 
¢ake
->
Àngth
 +

205 
SNAKE_MAX_LENGTH
) %

206 
SNAKE_MAX_LENGTH
][0];

207 
ªmove_y
 = 
¢ake
->
•Ÿ
[(¢ake->
°¨t
 -

208 
¢ake
->
Àngth
 +

209 
SNAKE_MAX_LENGTH
) %

210 
SNAKE_MAX_LENGTH
][1];

213 
¢ake
->
dúe˘i⁄
) {

214 
SNAKE_UP
:

215 
√w_x
 = 
ﬁd_x
;

216 
√w_y
 = 
ﬁd_y
 - 1;

219 
SNAKE_DOWN
:

220 
√w_x
 = 
ﬁd_x
;

221 
√w_y
 = 
ﬁd_y
 + 1;

224 
SNAKE_LEFT
:

225 
√w_x
 = 
ﬁd_x
 - 1;

226 
√w_y
 = 
ﬁd_y
;

229 
SNAKE_RIGHT
:

230 
√w_x
 = 
ﬁd_x
 + 1;

231 
√w_y
 = 
ﬁd_y
;

235 
	`∑nic
("ImpossibÀ dúe˘i⁄ %d", 
¢ake
->
dúe˘i⁄
);

240 
¢ake
->
•Ÿ
[¢ake->
°¨t
][0] = 
√w_x
;

241 
¢ake
->
•Ÿ
[¢ake->
°¨t
][1] = 
√w_y
;

244 i‡(!
	`£t_curs‹_pos
(
ªmove_y
, 
ªmove_x
)) {

245 
	`£t_ãrm_cﬁ‹
(
BLANK_COLOR
);

246 
	`¥öt
(1, " ");

250 i‡(!
	`£t_curs‹_pos
(
√w_y
, 
√w_x
)) {

251 
	`£t_ãrm_cﬁ‹
(
SNAKE_COLOR
);

252 
	`¥öt
(1, 
SNAKE_CHAR
);

256 
i
 = 0; i < 
APPLE_MAX_NUM
; i++)

257 i‡(
≠∂es
[
i
].
vÆid
 == 1 &&

258 
≠∂es
[
i
].
x
 =
√w_x
 &&

259 
≠∂es
[
i
].
y
 =
√w_y
) {

260 
sc‹e
 +
APPLE_SCORE
;

261 
≠∂es
[
i
].
vÆid
 = 0;

262 
¢ake
->
Àngth
++;

263 i‡(
¢ake
->
Àngth
 > 
SNAKE_MAX_LENGTH
)

264 
¢ake
->
Àngth
 = 
SNAKE_MAX_LENGTH
;

266 
	}
}

269 
	$√w_≠∂e
(
¢ake_t
 *
¢ake
, 
≠∂e_t
 *
≠∂e
)

271 
•Ÿ
;

272 
x
,
y
;

275 
•Ÿ
 = 0; spŸ < 
APPLE_MAX_NUM
; spot++)

276 i‡(!
≠∂e
[
•Ÿ
].
vÆid
) ;

278 i‡(
•Ÿ
 =
APPLE_MAX_NUM
) ;

281 
x
 = 
	`gíønd
(Ë/ (()(-1Ë/ (
c⁄_width
 - 2)) + 1;

282 
y
 = 
	`gíønd
(Ë/ (()(-1Ë/ (
c⁄_height
 - 3)) + 1;

285 
≠∂e
[
•Ÿ
].
vÆid
 = 1;

286 
≠∂e
[
•Ÿ
].
x
 = x;

287 
≠∂e
[
•Ÿ
].
y
 = y;

290 
	`£t_ãrm_cﬁ‹
(
APPLE_COLOR
);

291 
	`£t_curs‹_pos
(
y
, 
x
);

292 
	`¥öt
(1, 
APPLE_CHAR
);

293 
	}
}

296 
	$∂ay_game
(
¢ake_t
 *
¢ake
)

298 
√xt_≠∂e
 = 0;

299 
i
;

302 
≠∂e_t
 
≠∂es
[
APPLE_MAX_NUM
];

304 
i
 = 0; i < 
APPLE_MAX_NUM
; i++)

305 
≠∂es
[
i
].
vÆid
 = 0;

309 
œ°_key
) {

310 
SNAKE_UP
:

311 i‡(
¢ake
->
dúe˘i⁄
 !
SNAKE_DOWN
)

312 
¢ake
->
dúe˘i⁄
 = 
SNAKE_UP
;

315 
SNAKE_DOWN
:

316 i‡(
¢ake
->
dúe˘i⁄
 !
SNAKE_UP
)

317 
¢ake
->
dúe˘i⁄
 = 
SNAKE_DOWN
;

320 
SNAKE_LEFT
:

321 i‡(
¢ake
->
dúe˘i⁄
 !
SNAKE_RIGHT
)

322 
¢ake
->
dúe˘i⁄
 = 
SNAKE_LEFT
;

325 
SNAKE_RIGHT
:

326 i‡(
¢ake
->
dúe˘i⁄
 !
SNAKE_LEFT
)

327 
¢ake
->
dúe˘i⁄
 = 
SNAKE_RIGHT
;

335 i‡(
√xt_≠∂e
 == 0) {

336 
	`√w_≠∂e
(
¢ake
, 
≠∂es
);

337 
√xt_≠∂e
 = 
	`gíønd
() /

338 ((()-1Ë/ (
APPLE_MAX_WAIT
 - 
APPLE_MIN_WAIT
))

339 + 
APPLE_MIN_WAIT
;

343 
	`move_¢ake
(
¢ake
, 
≠∂es
);

346 
	`£t_curs‹_pos
(
c⁄_height
 - 1, 7);

347 
	`£t_ãrm_cﬁ‹
(
TEXT_COLOR
);

348 
	`¥ötf
("%d", 
sc‹e
);

351 
	`¶ìp
(
¶ìp_ticks
);

352 
√xt_≠∂e
--;

355 !
	`¢ake_diß°î
(
¢ake
));

356 
	}
}

359 
	$nibbÀs
()

362 
agaö
;

363 
¢ake_t
 
¢ake
;

367 
	`døw_b‹dî
();

368 
	`öô_¢ake
(&
¢ake
);

369 
œ°_key
 = -1;

372 
	`∂ay_game
(&
¢ake
);

375 
	`£t_ãrm_cﬁ‹
(
TEXT_COLOR
);

376 
	`£t_curs‹_pos
(
c⁄_height
 / 2, (
c⁄_width
 - 11) / 2);

378 
œ°_key
 = -1;

379 
	`¥öt
(11, "Playágain?");

381 (
agaö
 = 
œ°_key
) != 'y' &&

382 
agaö
 != 'Y' &&

383 
agaö
 != 'n' &&

384 
agaö
 != 'N');

386 } 
agaö
 == 'y' ||ágain == 'Y');

388 
	`èsk_v™ish
(0);

389 
	}
}

391 
	$maö
(
¨gc
, *
¨gv
[])

393 
ønd_£ed
, 
chûd_tid
;

395 i‡(
¨gc
 > 1) {

396 
¶ìp_ticks
 = 
	`©oi
(
¨gv
[1]);

400 
c⁄_width
 = 0; !
	`£t_curs‹_pos
(0, con_width); con_width++);

403 
c⁄_height
 = 0; !
	`£t_curs‹_pos
(con_height, 0); con_height++);

406 
chûd_tid
 = 
	`•awn_key_gøbbî
();

409 
	`¥öt_dúe˘i⁄s
();

412 
	`¥ötf
("Pressány keyÅo beginÇibbles\n");

413 
ønd_£ed
 = 0; 
œ°_key
 == -1;Ñand_seed++)

414 
	`¶ìp
(1);

415 
	`sgíønd
(
ønd_£ed
);

418 
	`nibbÀs
();

421 
	}
}

439 
	$foob¨
() {

440 
	`asm
(".global spawn_key_grabber\n"

453 :: "i" (
THREAD_FORK_INT
)

454 , "i" (
GETCHAR_INT
));

455 
	}
}

	@410user/progs/paraguay.c

14 
	~<sysˇŒ.h
>

15 
	~<°dlib.h
>

16 
	~<thªad.h
>

17 
	~<muãx.h
>

18 
	~<c⁄d.h
>

19 
	~"410_ã°s.h
"

20 
	~<ªp‹t.h
>

21 
	~<ã°.h
>

23 
DEF_TEST_NAME
("paraguay:");

25 
	#MISBEHAVE_MAX
 64

	)

27 
	#STACK_SIZE
 4096

	)

29 
	#ERR
 
REPORT_FAILOUT_ON_ERR


	)

31 
muãx_t
 
	glock1
, 
	glock2
;

32 
c⁄d_t
 
	gcv¨1
, 
	gcv¨2
;

34 
	g¶ït1
 = 0;

35 
	gsig«Àd1
 = 0;

36 
	g¶ït2
 = 0;

37 
	gsig«Àd2
 = 0;

39 *
	$thªad1
(*
dummy
)

41 
Áûed
 = 0;

44 
	`muãx_lock
(&
lock1
);

45 
¶ït1
 = 1;

46 
	`ªp‹t_misc
("thread1 sleeping on cvar1");

47 
	`c⁄d_waô
(&
cv¨1
, &
lock1
);

48 i‡(!
sig«Àd1
) {

49 
Áûed
 = 1;

50 
	`ªp‹t_misc
("woke up from cvar1 withoutá signal!");

51 
	`ªp‹t_íd
(
END_FAIL
);

53 
	`muãx_u∆ock
(&
lock1
);

56 
	`muãx_lock
(&
lock2
);

57 
¶ït2
 = 1;

58 
	`ªp‹t_misc
("thread1 sleeping on cvar2");

59 
	`c⁄d_waô
(&
cv¨2
, &
lock2
);

60 i‡(!
sig«Àd2
) {

61 
Áûed
 = 1;

62 
	`ªp‹t_misc
("woke up from cvar2 withoutá signal!");

63 
	`ªp‹t_íd
(
END_FAIL
);

65 
	`muãx_u∆ock
(&
lock2
);

67 i‡(!
Áûed
) {

68 
	`ªp‹t_íd
(
END_SUCCESS
);

71  
NULL
;

72 
	}
}

75 
	$maö
()

77 
	`ªp‹t_°¨t
(
START_CMPLT
);

79 
	`assuªdly_misbehave
((
	`ønd
(Ë% 521Ë% 
MISBEHAVE_MAX
);

81 
	`ERR
(
	`thr_öô
(
STACK_SIZE
));

82 
	`ERR
(
	`muãx_öô
(&
lock1
));

83 
	`ERR
(
	`muãx_öô
(&
lock2
));

84 
	`ERR
(
	`c⁄d_öô
(&
cv¨1
));

85 
	`ERR
(
	`c⁄d_öô
(&
cv¨2
));

87 
	`ERR
(
	`thr_¸óã
(
thªad1
, 
NULL
));

88 
	`ªp‹t_misc
("thread1 created");

91 
	`muãx_lock
(&
lock1
);

92 !
¶ït1
) {

93 
	`muãx_u∆ock
(&
lock1
);

94 
	`thr_yõld
(-1);

95 
	`muãx_lock
(&
lock1
);

98 
sig«Àd1
 = 1;

99 
	`muãx_u∆ock
(&
lock1
);

103 
	`c⁄d_sig«l
(&
cv¨1
);

104 
	`ªp‹t_misc
("cvar1 signaled");

106 
	`¶ìp
(10);

110 
	`muãx_lock
(&
lock2
);

111 !
¶ït2
) {

112 
	`muãx_u∆ock
(&
lock2
);

113 
	`thr_yõld
(-1);

114 
	`muãx_lock
(&
lock2
);

117 
sig«Àd2
 = 1;

118 
	`muãx_u∆ock
(&
lock2
);

122 
	`c⁄d_sig«l
(&
cv¨2
);

123 
	`ªp‹t_misc
("cvar2 signaled");

128 
	}
}

	@410user/progs/racer.c

32 
	~<thªad.h
>

33 
	~<sysˇŒ.h
>

34 
	~<simics.h
>

35 
	~<°dio.h
>

36 
	~<£m.h
>

37 
	~<muãx.h
>

38 
	~<°dlib.h
>

40 
	#STACK_SIZE
 4096

	)

41 
	#MAX_MISBEHAVE
 64

	)

44 
muãx_t
 
	glock_¥öt
;

47 
	gthªads
 = 24;

48 
	grun
 = 5;

49 
	g£ms
 = 12;

50 
£m_t
 
	g£m
;

51 
	g∑u£
 = 0;

52 
	gbad_¶ìp
 = 50;

54 
	gÆphabë
[] = "abcdefghijklmnopqrstuvwxyz";

55 
	gem±y
[81];

56 
muãx_t
 
	glock_ru¬ög
;

57 
	gru¬ög
 = 0;

59 
	gcﬁ‹
 = 0;

61 
	#ex≥˘
(
exp
) \

63 
îr
 = 
exp
; \

64 if(
îr
 < 0) \

65 
	`Õrötf
("%s:%u:Ñeturned %d", \

66 
__FILE__
, 
__LINE__
, 
îr
); \

67 }

	)

69 *
	$ø˚
(*
¨g
)

71 
îr
;

72 
cﬁ
 = -1;

73 
i
;

74 
row
 = ()
¨g
;

76 
	`muãx_lock
(&
lock_¥öt
);

77 
cﬁ‹
 +
	`gë_ticks
();

78 
	`£t_ãrm_cﬁ‹
(
cﬁ‹
);

79 
	`ex≥˘
(
	`£t_curs‹_pos
(
row
, 0));

80 
	`¥ötf
("%s", &
em±y
[0]);

81 
	`muãx_u∆ock
(&
lock_¥öt
);

85 
	`£m_waô
(&
£m
);

87 
	`muãx_lock
(&
lock_ru¬ög
);

88 
r
 = ++
ru¬ög
;

89 
	`muãx_u∆ock
(&
lock_ru¬ög
);

90 if(
r
 > 
£ms
)

91 
	`Õrötf
("BAD! I havê%d > %dÅhªad†ru¬ög", 
r
, 
£ms
);

93 
	`muãx_lock
(&
lock_¥öt
);

94 
	`ex≥˘
(
	`£t_curs‹_pos
(24, 77));

95 
	`¥ötf
("%.2d", 
ru¬ög
);

96 
	`muãx_u∆ock
(&
lock_¥öt
);

98 
i
 = 0; i < 
run
; i++)

100 
cﬁ
++;

101 if(80 =
cﬁ
)

103 
	`muãx_lock
(&
lock_¥öt
);

104 
cﬁ‹
 +
	`gë_ticks
();

105 
	`£t_ãrm_cﬁ‹
(
cﬁ‹
);

106 
	`ex≥˘
(
	`£t_curs‹_pos
(
row
, 0));

107 
	`¥ötf
("%s", &
em±y
[0]);

108 
	`muãx_u∆ock
(&
lock_¥öt
);

109 
cﬁ
 = 0;

112 
	`muãx_lock
(&
lock_¥öt
);

113 
cﬁ‹
 +
	`gë_ticks
();

114 
	`£t_ãrm_cﬁ‹
(
cﬁ‹
);

115 
	`ex≥˘
(
	`£t_curs‹_pos
(
row
, 
cﬁ
));

116 
	`¥ötf
("%c", 
Æphabë
[
i
]);

117 
	`muãx_u∆ock
(&
lock_¥öt
);

119 if(
∑u£
)

120 
	`ex≥˘
(
	`¶ìp
(
∑u£
));

121 
	`thr_yõld
(-1);

124 
	`muãx_lock
(&
lock_ru¬ög
);

125 
ru¬ög
--;

126 
	`muãx_u∆ock
(&
lock_ru¬ög
);

128 
	`£m_sig«l
(&
£m
);

130 
	}
}

132 *
	$bad
(*
¨g
)

136 
îr
;

137 
i
 = ()
¨g
;

139 
i
=-1; i<
MAX_MISBEHAVE
; i++)

141 
	`Õrötf
("ˇŒög misbehave(%d)", 
i
);

143 
	`muãx_lock
(&
lock_¥öt
);

144 
	`ex≥˘
(
	`£t_curs‹_pos
(24, 73));

145 
	`¥ötf
("% .2d", 
i
);

146 
	`muãx_u∆ock
(&
lock_¥öt
);

148 
	`misbehave
(
i
);

149 
	`¶ìp
(
bad_¶ìp
);

152  
¨g
;

153 
	}
}

155 
	$maö
–
¨gc
, *
¨gv
[] )

157 
i
, 
îr
;

159 
¨gc
) {

161 
i
 = 
	`©oi
(
¨gv
[5]);

162 if(
i
 >= 0)

163 
bad_¶ìp
 = 
i
;

165 
i
 = 
	`©oi
(
¨gv
[4]);

166 if(
i
 >= 0)

167 
∑u£
 = 
i
;

169 
i
 = 
	`©oi
(
¨gv
[3]);

170 if(
i
 > 0)

171 
£ms
 = 
i
;

173 
i
 = 
	`©oi
(
¨gv
[2]);

174 if(
i
 <= 26 && i > 0)

175 
run
 = 
i
;

177 
i
 = 
	`©oi
(
¨gv
[1]);

178 if(
i
 > 1 || i <= 24)

179 
thªads
 = 
i
;

184 
	`ex≥˘
(
	`thr_öô
(
STACK_SIZE
));

185 
	`ex≥˘
(
	`muãx_öô
(&
lock_¥öt
));

186 
	`ex≥˘
(
	`muãx_öô
(&
lock_ru¬ög
));

187 
	`ex≥˘
(
	`£m_öô
(&
£m
, 
£ms
));

189 
i
=0; i<80; i++)

190 
em±y
[
i
] = ' ';

191 
em±y
[80] = '\0';

193 
	`ex≥˘
(
	`thr_¸óã
(
bad
, (*)
i
) >= 0);

195 
i
=0; i<
thªads
; i++)

196 
	`ex≥˘
(
	`thr_¸óã
(
ø˚
, (*)
i
) >= 0);

198 
	`gëch¨
();

199 
	`ex≥˘
(
	`£t_curs‹_pos
(24,0));

201 
	`èsk_v™ish
(0);

202 
	}
}

	@410user/progs/rwlock_downgrade_read_test.c

6 
	~<thªad.h
>

7 
	~<muãx.h
>

8 
	~<c⁄d.h
>

9 
	~<rwlock.h
>

10 
	~<sysˇŒ.h
>

11 
	~<°dlib.h
>

12 
	~<°dio.h
>

13 
	~"410_ã°s.h
"

14 
	~<ã°.h
>

15 
DEF_TEST_NAME
("rwlock_downgrade_read_test:");

17 
	#NAME_OF_TEST
 "rwlock_downgøde_ªad_ã°"

	)

18 
	#STACK_SIZE
 4096

	)

20 
	gªad_cou¡
 = 0;

21 
muãx_t
 
	gªad_cou¡_lock
;

23 
rwlock_t
 
	glock
;

25 
	g∑ss
 = -1;

27 
	$g
()

29 
	`REPORT_MISC
("IncrementingÑead_count");

30 
	`muãx_lock
(&
ªad_cou¡_lock
);

31 
ªad_cou¡
++;

32 i‡(
ªad_cou¡
 == 2) {

33 
∑ss
 = 0;

35 
	`muãx_u∆ock
(&
ªad_cou¡_lock
);

36 
	}
}

38 *
	$f
(*
¨g
)

40 
	`REPORT_MISC
("all mimsy wereÅheÑeaderÅhreads");

41 
	`rwlock_lock
(&
lock
, 
RWLOCK_READ
);

42 
	`g
();

44 
	}
}

46 
	$maö
()

48 
tid1
;

50 
REPORT_LOCAL_INIT
;

51 
REPORT_START_CMPLT
;

53 
	`thr_öô
(
STACK_SIZE
);

55 
	`REPORT_ON_ERR
(
	`rwlock_öô
(&
lock
));

56 
	`REPORT_ON_ERR
(
	`muãx_öô
(&
ªad_cou¡_lock
));

57 
	`rwlock_lock
(&
lock
, 
RWLOCK_WRITE
);

59 i‡((
tid1
 = 
	`thr_¸óã
(
f
, 
NULL
)) < 0) {

60 
	`REPORT_MISC
("Failed create");

61 
REPORT_END_FAIL
;

64 
	`rwlock_downgøde
(&
lock
);

65 
	`REPORT_MISC
("andÅhe momeÑaths downgrade");

67 
	`g
();

71 i‡(
	`thr_joö
(
tid1
, 
NULL
) < 0) {

72 
	`REPORT_MISC
("Failed join");

73 
REPORT_END_FAIL
;

77 i‡(
∑ss
 == 0)

78 
REPORT_END_SUCCESS
;

80 
REPORT_END_FAIL
;

82  
∑ss
;

83 
	}
}

	@410user/progs/shell.c

12 
	#mÆloc
 
_mÆloc


	)

13 
	#ˇŒoc
 
_ˇŒoc


	)

14 
	#ªÆloc
 
_ªÆloc


	)

15 
	#‰ì
 
_‰ì


	)

18 
	~<°rög.h
>

19 
	~<sysˇŒ.h
>

20 
	~<°dlib.h
>

21 
	~<°dio.h
>

22 
	~<°dlib.h
>

24 
	~<simics.h
>

27 
	#MAX_LENGTH
 1024

	)

31 
	g¥om±
[] = "[410-shell]$ ";

32 
	g°¨tmsg
[] = "Starting shell...\n";

33 
	gexômsg
[] = "Exiting shell...\n";

34 
	gf‹kîrmsg
[] = "Shell: Cannot forkÖrocess.\n";

35 
	gwaôÁûed
[] = "wait() failed\n";

36 
	gföished
[] = "Process finished\n";

37 
	gtoo_l⁄g
[] = "That string isÅooÜong.\n";

38 
	gnuŒ_check
[] = "I'veÜostÇullÅermination!\n";

39 
	gnŸhög
[] = "ReadlineÑeturnedÇothing!\n";

41 
quicks‹t
–** 
buf
, 
°¨t
, 
íd
 );

42 
∑πôi⁄
–** 
buf
, 
°¨t
, 
íd
 );

43 
¥öt_ls
( );

44 
my°iˇl_ªadlöe
–
Àn
, *
buf
 );

45 
c⁄sﬁe_height
();

48 #i‚de‡
HAVE_GETCHAR


49 
	#gëch¨
 
°©ic_gëch¨


	)

50 
	$gëch¨
()

52 
buf
[2];

53 
	`my°iˇl_ªadlöe
(2, 
buf
);

55  
buf
[0];

56 
	}
}

63 
	$maö
–
¨gc
, *
¨gv
[] )

65 
buf
[
MAX_LENGTH
];

66 * 
cmd_¨gv
[
MAX_LENGTH
];

67 
£∑øt‹s
[4];

68 
n
;

69 
pid
;

70 
ªs
;

71 
j
;

72 
ªt
;

74 
£∑øt‹s
[0] = ' ';

75 
£∑øt‹s
[1] = '\t';

76 
£∑øt‹s
[2] = '\n';

77 
£∑øt‹s
[3] = '\0';

79 
	`¥öt
–
	`°æí
–
°¨tmsg
 ), startmsg );

83 
	`bzîo
–
buf
, 
MAX_LENGTH
 );

84 
	`¥öt
–
	`°æí
(
¥om±
),Örompt );

85 
n
 = 
	`my°iˇl_ªadlöe
–
MAX_LENGTH
 - 1, 
buf
 );

86 i‡(
n
 == 0) {

88 
	`¥öt
–
	`°æí
(
nŸhög
),Çothing );

90 } if–
n
 >
MAX_LENGTH
 ) {

92 
	`¥öt
–
	`°æí
(
too_l⁄g
),Åoo_long);

93 
	`exô
(-1);

94 } if(
buf
[
MAX_LENGTH
 - 1] != '\0') {

96 
	`¥öt
–
	`°æí
(
nuŒ_check
),Çull_check );

97 
	`exô
(-1);

100 
buf
[
n
] = '\0';

101 
j
 = 0;

102 if–!(
cmd_¨gv
[
j
++] = 
	`°πok
(
buf
, 
£∑øt‹s
)) ) {

105 if–(
	`°rcmp
–
cmd_¨gv
[0], "exit" ) == 0) ) {

106 
	`¥öt
–
	`°æí
–
exômsg
 ),Éxitmsg );

107 
	`exô
(0);

109 if–(
	`°rcmp
–
cmd_¨gv
[0], "ls" ) == 0 ) ) {

110 
	`¥öt_ls
();

114  (
cmd_¨gv
[
j
++] = 
	`°πok
(
NULL
, 
£∑øt‹s
)) );

116 
pid
 = 
	`f‹k
();

117 if–
pid
 < 0 ) {

118 
	`¥öt
––
f‹kîrmsg
 ), forkerrmsg );

121 if–
pid
 == 0 ) {

122 
	`exec
–
cmd_¨gv
[0], cmd_argv );

123 
	`exô
(-1);

126 if–(
ªt
 = 
	`waô
–&
ªs
 )) < 0 ) {

127 
	`¥ötf
("\nshñl: waô o¿¥˚s†%d faûed!\n", 
pid
);

130 
	`¥ötf
("\nshñl:Öro˚s†%d föished wôhÉxô sètu†%d\n", 
ªt
, 
ªs
);

134 
	}
}

137 
	$ls
(
size
, *
buf
)

139 
i
;

140 
num_fûes
 = 0;

141 
amt_ªad
;

143 
amt_ªad
 = 
	`ªadfûe
(".", 
buf
, 
size
, 0);

144 i‡(
amt_ªad
 < 0) ámt_read;

148 i‡(
amt_ªad
 =
size
)  -1;

152 
i
 = 0; i < 
amt_ªad
 - 1; i++) {

153 i‡(
buf
[
i
] == '\0') {

154 
num_fûes
++;

158  
num_fûes
;

159 
	}
}

162 
	$¥öt_ls
( )

164 * 
buf
;

165 * 
buÂå
;

166 ** 
«mes
;

167 
ödex
 = 0;

168 
size
 = 4096;

169 
num_íåõs
;

170 
Àn
;

173 
buf
 = (*)
	`mÆloc
((Ë* 
size
);

174 
	`¥ötf
("ListingÅhe userÅests\n");

175  (
num_íåõs
 = 
	`ls
–
size
, 
buf
 )) < 0 ) {

176 
size
 *= 2;

177 
buf
 = (*)
	`ªÆloc
(buf, (Ë* 
size
);

180 
«mes
 = (**)
	`ˇŒoc
(
num_íåõs
, (*));

183 
buÂå
 = 
buf
;

184  (
Àn
 = 
	`°æí
–
buÂå
 )) > 0 ) {

185 
«mes
[
ödex
++] = 
buÂå
;

186 
buÂå
 +
Àn
 + 1;

192 
	`quicks‹t
–
«mes
, 0, 
num_íåõs
 - 1 );

194  
ödex
 = 0; index < 
num_íåõs
; index++ ) {

195 i‡–
ödex
 !0 && index % (
	`c⁄sﬁe_height
() - 2) == 0 ) {

196 
	`¥ötf
("Hitá keyÅo continue\n");

197 
	`gëch¨
();

199 
	`¥ötf
("%s\n", 
«mes
[
ödex
]);

202 
	`‰ì
(
buf
);

203 
	`‰ì
(
«mes
);

204 
buf
 = 
NULL
;

205 
«mes
 = 
NULL
;

206 
	}
}

209 
	$quicks‹t
–** 
buf
, 
°¨t
, 
íd
 )

211 
pivŸ_loˇti⁄
;

213 i‡–
°¨t
 < 
íd
 ) {

214 
pivŸ_loˇti⁄
 = 
	`∑πôi⁄
–
buf
, 
°¨t
, 
íd
 );

215 
	`quicks‹t
–
buf
, 
°¨t
, 
pivŸ_loˇti⁄
-1 );

216 
	`quicks‹t
–
buf
, 
pivŸ_loˇti⁄
+1, 
íd
 );

218 
	}
}

220 
	$∑πôi⁄
–** 
buf
, 
°¨t
, 
íd
 )

222 * 
pivŸ
 = 
buf
[
íd
];

223 * 
ãmp
;

224 
i
, 
j
;

226 
i
 = 
°¨t
 - 1;

227  
j
 = 
°¨t
; j <
íd
 - 1; j++ ) {

228 i‡–
	`°rcmp
–
buf
[
j
], 
pivŸ
 ) <= 0 ) {

229 
i
 = i+1;

230 
ãmp
 = 
buf
[
i
];

231 
buf
[
i
] = buf[
j
];

232 
buf
[
j
] = 
ãmp
;

235 
ãmp
 = 
buf
[
i
+1];

236 
buf
[
i
+1] = buf[
íd
];

237 
buf
[
íd
] = 
ãmp
;

239  
i
+1;

240 
	}
}

242 
	$my°iˇl_ªadlöe
(
Àn
, *
buf
) {

243 i‡(
Àn
 <= 0) {  0; }

245 
buf
[0] = '\0';

247 
	`sim_ˇŒ
(0x04108005, 
buf
, 
Àn
);

249  (
buf
[0] ? 
	`°æí
(bufË: 
	`ªadlöe
(
Àn
, buf));

250 
	}
}

252 
	$c⁄sﬁe_height
() {

253 
c⁄sﬁe_height
 = -1;

255 i‡(
c⁄sﬁe_height
 == -1) {

257 
cur°¨åow
, 
cur°¨tcﬁ
;

258 
	`gë_curs‹_pos
(&
cur°¨åow
, &
cur°¨tcﬁ
);

259 
c⁄sﬁe_height
 = 0;

260  
	`£t_curs‹_pos
(
c⁄sﬁe_height
, 0) == 0 ) {

261 
c⁄sﬁe_height
++;

263 
	`£t_curs‹_pos
–
cur°¨åow
, 
cur°¨tcﬁ
 );

267  
c⁄sﬁe_height
;

268 
	}
}

	@410user/progs/stack_test1.c

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<sysˇŒ.h
>

16 
	~"410_ã°s.h
"

17 
	~<ªp‹t.h
>

19 
DEF_TEST_NAME
("stack_test1:");

21 
	#SIZE
 (65536)

	)

24 
	$touch_me_babe
(*
¨r
, 
size_t
 
Àn
)

26 
size_t
 
i
;

27 
i
 = 0; i < 
Àn
; i++) {

28 
¨r
[
i
] = i;

30 
	}
}

32 
	$do_ã°
()

34 
ˇ
[
SIZE
];

35 
	`touch_me_babe
(
ˇ
, (ca));

36 
	}
}

38 
	$maö
()

41 
	`ªp‹t_°¨t
(
START_CMPLT
);

43 
	`do_ã°
();

44 
	`ªp‹t_misc
("stackállocation successful");

45 
	`ªp‹t_íd
(
END_SUCCESS
);

46 
	`exô
(42);

47 
	}
}

	@410user/progs/startle.c

10 
	~<thªad.h
>

11 
	~<sysˇŒ.h
>

12 
	~<simics.h
>

13 
	~<°dio.h
>

15 *
chûd
(*
∑øm
);

17 
	#STACK_SIZE
 3072

	)

19 
	#NTHREADS
 30

	)

20 
	#SOMETIMES
 4

	)

22 
	gktids
[
NTHREADS
];

26 
	$maö
(
¨gc
, *
¨gv
[])

28 
t
, 
d⁄e
 = 0;

30 
	`thr_öô
(
STACK_SIZE
);

32 
t
 = 0;Å < 
NTHREADS
; ++t) {

33 (Ë
	`thr_¸óã
(
chûd
, (*)
t
);

34 i‡(
t
 % 
SOMETIMES
 == 0)

35 
	`yõld
(-1);

38 !
d⁄e
) {

39 
ƒegi°îed
, 
¶Ÿ
;

41 
ƒegi°îed
 = 0, 
¶Ÿ
 = 0; slŸ < 
NTHREADS
; ++slot)

42 i‡(
ktids
[
¶Ÿ
] != 0)

43 ++
ƒegi°îed
;

45 i‡(
ƒegi°îed
 =
NTHREADS
)

46 
d⁄e
 = 1;

48 
	`¶ìp
(1);

51 
	`¥ötf
("Suc˚ss!\n"); 
	`Õrötf
("Success!\n");

53 
	`èsk_v™ish
(0);

54 
	}
}

58 
	$chûd
(*
∑øm
)

60 
¶Ÿ
 = (Ë
∑øm
;

62 
ktids
[
¶Ÿ
] = 
	`gëtid
();

65 
	`yõld
(-1);

66 
	`¶ìp
(10);

68 
	}
}

	@410user/progs/switzerland.c

10 
	~<°dio.h
>

11 
	~<thªad.h
>

12 
	~<°dlib.h
>

13 
	~<sysˇŒ.h
>

14 
	~"410_ã°s.h
"

15 
	~<ªp‹t.h
>

17 
DEF_TEST_NAME
("switzerland:");

19 
	#SIZE
 (65536)

	)

21 
	#NEUTRAL_ZONE
 (15410)

	)

22 
	#CHEESE
 (8192)

	)

24 
	$övade
(*
¨r
, 
size_t
 
Àn
)

26 
size_t
 
i
;

27 
i
 = 0; i < 
Àn
; i++) {

28 
¨r
[
i
] = i;

30 
	}
}

32 
	$do_ã°
()

34 
ˇ
[
SIZE
];

35 
	`övade
(
ˇ
 + 
NEUTRAL_ZONE
, 
CHEESE
);

37 i‡(
	`thr_öô
(2 * 
SIZE
) < 0) {

38 
	`ªp‹t_misc
("thr_init() failed?");

39 
	`ªp‹t_íd
(
END_FAIL
);

40 
	`exô
(-1);

43 
	`övade
(
ˇ
,  (ca));

44 
	}
}

46 
	$maö
()

49 
	`ªp‹t_°¨t
(
START_CMPLT
);

51 
	`do_ã°
();

52 
	`ªp‹t_misc
("stackállocation successful");

53 
	`ªp‹t_íd
(
END_SUCCESS
);

54 
	`exô
(42);

55 
	}
}

	@410user/progs/thr_exit_join.c

1 
	~<°dio.h
>

2 
	~<thªad.h
>

3 
	~<sysˇŒ.h
>

6 
	$waôî
(*
p
)

8 
°©us
;

10 
	`thr_joö
(()
p
, (**)&
°©us
);

11 
	`¥ötf
("Thªad %dÉxôed '%c'\n", (Ë
p
, ()
°©us
);

13 
	`thr_exô
((*) 0);

17 
	}
}

19 
	$maö
()

21 
	`thr_öô
(16 * 
PAGE_SIZE
);

23 (Ë
	`thr_¸óã
(
waôî
, (*Ë
	`thr_gëid
());

25 
	`¶ìp
(10);

27 
	`thr_exô
((*)'!');

31 
	}
}

	@410user/progs/wild_test1.c

11 
	~<sysˇŒ.h
>

12 
	~<°dlib.h
>

13 
	~<°dio.h
>

14 
	~<simics.h
>

16 
	~"410_ã°s.h
"

17 
DEF_TEST_NAME
("wild_test1:");

20 
	$maö
(
¨gc
, *
¨gv
[])

22 *
wûd
 = (*)0x31337000;

24 
REPORT_START_ABORT
;

27 *
wûd
 = 0x2badd00d;

29 
REPORT_END_FAIL
;

31 
	`exô
( -1 );

32 
	}
}

	@spec/common_kern.h

1 #i‚de‡
_SPEC_COMMON_KERN_H_


2 
	#_SPEC_COMMON_KERN_H_


	)

15 
machöe_phys_‰ames
();

17 
	~<boŸ/mu…iboŸ.h
>

34 
kî√l_maö
(
mböfo_t
 *
mböfo
, 
¨gc
, **
¨gv
, **
ívp
);

42 
	#USER_MEM_START
 0x01000000

	)

	@spec/compiler.h

6 #i‚de‡
_SPEC_COMPILER_H


7 
	#_SPEC_COMPILER_H


	)

10 #i‚de‡
NORETURN


11 
	#NORETURN
 
	`__©åibuã__
((
n‹ëu∫
))

	)

14 
	#MUST_CHECK
 
	`__©åibuã__
((
w¨n_unu£d_ªsu…
))

	)

20 
	#STATIC_ZERO_ASSERT
(
c⁄dôi⁄
Ë((°ru˘ { :-!(c⁄dôi⁄); }))

	)

21 
	#STATIC_NULL_ASSERT
(
c⁄dôi⁄
Ë((*)
	`STATIC_ZERO_ASSERT
(c⁄dôi⁄))

	)

24 
	#STATIC_ASSERT
(
c⁄dôi⁄
Ë(()
	`STATIC_ZERO_ASSERT
(c⁄dôi⁄))

	)

	@spec/contracts.h

8 
	~<as£π.h
>

16 #unde‡
ASSERT


17 #unde‡
REQUIRES


18 #unde‡
ENSURES


20 #ifde‡
DEBUG


22 
	#ASSERT
(
COND
Ë
	`as£π
(COND)

	)

23 
	#REQUIRES
(
COND
Ë
	`as£π
(COND)

	)

24 
	#ENSURES
(
COND
Ë
	`as£π
(COND)

	)

28 
	#ASSERT
(
COND
Ë(()0)

	)

29 
	#REQUIRES
(
COND
Ë(()0)

	)

30 
	#ENSURES
(
COND
Ë(()0)

	)

	@spec/limits.h

6 #i‚de‡
LIMITS_H


7 
	#LIMITS_H


	)

9 
	#CHAR_BIT
 8

	)

11 
	#SCHAR_MIN
 (-128)

	)

12 
	#SCHAR_MAX
 127

	)

14 
	#UCHAR_MAX
 255

	)

16 
	#SHRT_MIN
 (-32768)

	)

17 
	#SHRT_MAX
 32767

	)

19 
	#USHRT_MAX
 65535

	)

21 
	#INT_MIN
 ((sig√d )0x80000000)

	)

22 
	#INT_MAX
 ((sig√d )0x7fffffff)

	)

24 
	#UINT_MAX
 (()0xffffffff)

	)

26 
	#LONG_MIN
 ((sig√d )0x80000000L)

	)

27 
	#LONG_MAX
 ((sig√d )0x7FFFFFFFL)

	)

29 
	#ULONG_MAX
 (()0xFFFFFFFFL)

	)

31 
	#LLONG_MIN
 ((sig√d )0x8000000000000000LL)

	)

32 
	#LLONG_MAX
 ((sig√d )0x7FFFFFFFFFFFFFFFLL)

	)

34 
	#ULLONG_MAX
 (()0xFFFFFFFFFFFFFFFFLL)

	)

	@spec/syscall.h

9 #i‚de‡
_SYSCALL_H


10 
	#_SYSCALL_H


	)

12 
	#NORETURN
 
	`__©åibuã__
((
__n‹ëu∫__
))

	)

14 
	#PAGE_SIZE
 0x0001000

	)

17 
f‹k
();

18 
exec
(*
exe˙ame
, *
¨gvec
[]);

19 
£t_°©us
(
°©us
);

20 
	$v™ish
(Ë
NORETURN
;

21 
	`waô
(*
°©us_±r
);

22 
	$èsk_v™ish
(
°©us
Ë
NORETURN
;

25 
	`gëtid
();

26 
	`yõld
(
pid
);

27 
	`descheduÀ
(*
Êag
);

28 
	`make_ru¬abÀ
(
pid
);

29 
	`gë_ticks
();

30 
	`¶ìp
(
ticks
);

33 
	`√w_∑ges
(* 
addr
, 
Àn
);

34 
	`ªmove_∑ges
(* 
addr
);

37 
	`gëch¨
();

38 
	`ªadlöe
(
size
, *
buf
);

39 
	`¥öt
(
size
, *
buf
);

40 
	`£t_ãrm_cﬁ‹
(
cﬁ‹
);

41 
	`£t_curs‹_pos
(
row
, 
cﬁ
);

42 
	`gë_curs‹_pos
(*
row
, *
cﬁ
);

45 
	#FGND_BLACK
 0x0

	)

46 
	#FGND_BLUE
 0x1

	)

47 
	#FGND_GREEN
 0x2

	)

48 
	#FGND_CYAN
 0x3

	)

49 
	#FGND_RED
 0x4

	)

50 
	#FGND_MAG
 0x5

	)

51 
	#FGND_BRWN
 0x6

	)

52 
	#FGND_LGRAY
 0x7

	)

53 
	#FGND_DGRAY
 0x8

	)

54 
	#FGND_BBLUE
 0x9

	)

55 
	#FGND_BGRN
 0xA

	)

56 
	#FGND_BCYAN
 0xB

	)

57 
	#FGND_PINK
 0xC

	)

58 
	#FGND_BMAG
 0xD

	)

59 
	#FGND_YLLW
 0xE

	)

60 
	#FGND_WHITE
 0xF

	)

62 
	#BGND_BLACK
 0x00

	)

63 
	#BGND_BLUE
 0x10

	)

64 
	#BGND_GREEN
 0x20

	)

65 
	#BGND_CYAN
 0x30

	)

66 
	#BGND_RED
 0x40

	)

67 
	#BGND_MAG
 0x50

	)

68 
	#BGND_BRWN
 0x60

	)

69 
	#BGND_LGRAY
 0x70

	)

72 
	`hÆt
();

73 
	`ªadfûe
(*
fûíame
, *
buf
, 
cou¡
, 
off£t
);

76 
	`misbehave
(
mode
);

79 
	~<uªg.h
>

80 (*
	tswexn_h™dÀr_t
)(*
	t¨g
, 
	tuªg_t
 *
	tuªg
);

81 
	`swexn
(*
e•3
, 
swexn_h™dÀr_t
 
eù
, *
¨g
, 
uªg_t
 *
√wuªg
);

	@spec/syscall_int.h

12 #i‚de‡
_SYSCALL_INT_H


13 
	#_SYSCALL_INT_H


	)

15 
	#SYSCALL_INT
 0x40

	)

16 
	#FORK_INT
 0x41

	)

17 
	#EXEC_INT
 0x42

	)

19 
	#WAIT_INT
 0x44

	)

20 
	#YIELD_INT
 0x45

	)

21 
	#DESCHEDULE_INT
 0x46

	)

22 
	#MAKE_RUNNABLE_INT
 0x47

	)

23 
	#GETTID_INT
 0x48

	)

24 
	#NEW_PAGES_INT
 0x49

	)

25 
	#REMOVE_PAGES_INT
 0x4A

	)

26 
	#SLEEP_INT
 0x4B

	)

27 
	#GETCHAR_INT
 0x4C

	)

28 
	#READLINE_INT
 0x4D

	)

29 
	#PRINT_INT
 0x4E

	)

30 
	#SET_TERM_COLOR_INT
 0x4F

	)

31 
	#SET_CURSOR_POS_INT
 0x50

	)

32 
	#GET_CURSOR_POS_INT
 0x51

	)

33 
	#THREAD_FORK_INT
 0x52

	)

34 
	#GET_TICKS_INT
 0x53

	)

35 
	#MISBEHAVE_INT
 0x54

	)

36 
	#HALT_INT
 0x55

	)

38 
	#TASK_VANISH_INT
 0x57

	)

39 
	#SET_STATUS_INT
 0x59

	)

40 
	#VANISH_INT
 0x60

	)

42 
	#READFILE_INT
 0x62

	)

44 
	#SWEXN_INT
 0x74

	)

50 
	#SYSCALL_RESERVED_START
 0x80

	)

51 
	#SYSCALL_RESERVED_0
 0x80

	)

52 
	#SYSCALL_RESERVED_1
 0x81

	)

53 
	#SYSCALL_RESERVED_2
 0x82

	)

54 
	#SYSCALL_RESERVED_3
 0x83

	)

55 
	#SYSCALL_RESERVED_4
 0x84

	)

56 
	#SYSCALL_RESERVED_5
 0x85

	)

57 
	#SYSCALL_RESERVED_6
 0x86

	)

58 
	#SYSCALL_RESERVED_7
 0x87

	)

59 
	#SYSCALL_RESERVED_8
 0x88

	)

60 
	#SYSCALL_RESERVED_9
 0x89

	)

61 
	#SYSCALL_RESERVED_10
 0x8A

	)

62 
	#SYSCALL_RESERVED_11
 0x8B

	)

63 
	#SYSCALL_RESERVED_12
 0x8C

	)

64 
	#SYSCALL_RESERVED_13
 0x8D

	)

65 
	#SYSCALL_RESERVED_14
 0x8E

	)

66 
	#SYSCALL_RESERVED_15
 0x8F

	)

67 
	#SYSCALL_RESERVED_END
 0x8F

	)

	@spec/ureg.h

1 #i‚de‡
_UREG_H_


2 
	#_UREG_H_


	)

5 
	#SWEXN_CAUSE_DIVIDE
 0x00

	)

6 
	#SWEXN_CAUSE_DEBUG
 0x01

	)

7 
	#SWEXN_CAUSE_BREAKPOINT
 0x03

	)

8 
	#SWEXN_CAUSE_OVERFLOW
 0x04

	)

9 
	#SWEXN_CAUSE_BOUNDCHECK
 0x05

	)

10 
	#SWEXN_CAUSE_OPCODE
 0x06

	)

11 
	#SWEXN_CAUSE_NOFPU
 0x07

	)

12 
	#SWEXN_CAUSE_SEGFAULT
 0x0B

	)

13 
	#SWEXN_CAUSE_STACKFAULT
 0x0C

	)

14 
	#SWEXN_CAUSE_PROTFAULT
 0x0D

	)

15 
	#SWEXN_CAUSE_PAGEFAULT
 0x0E

	)

16 
	#SWEXN_CAUSE_FPUFAULT
 0x10

	)

17 
	#SWEXN_CAUSE_ALIGNFAULT
 0x11

	)

18 
	#SWEXN_CAUSE_SIMDFAULT
 0x13

	)

20 #i‚de‡
ASSEMBLER


22 
	suªg_t
 {

23 
	mˇu£
;

24 
	m¸2
;

26 
	mds
;

27 
	mes
;

28 
	mfs
;

29 
	mgs
;

31 
	medi
;

32 
	mesi
;

33 
	mebp
;

34 
	mzîo
;

35 
	mebx
;

36 
	medx
;

37 
	mecx
;

38 
	móx
;

40 
	mîr‹_code
;

41 
	meù
;

42 
	mcs
;

43 
	meÊags
;

44 
	me•
;

45 
	mss
;

46 } 
	tuªg_t
;

	@user/autostack.c

1 
	~<simics.h
>

2 
	~"thªad_comm⁄.h
"

10 
	$ö°Æl_auto°ack
(*
°ack_high
, *
°ack_low
)

15 
	`Õrötf
("[DBG_%s], P¨íà°ack, high: %p,Üo: %p\n", 
__FUNCTION__
, 
°ack_high
, 
°ack_low
);

16 
	`thr_£t_maö_°ackH
(
°ack_high
);

17 
	`thr_£t_maö_°ackL
(
°ack_low
);

20 
	}
}

	@user/inc/common.h

1 #i‚de‡
_COMMON_H_


2 
	#_COMMON_H_


	)

8 
	#SUCCESS
 0

	)

9 
	#ERROR
 -1

	)

11 
	#WSIZE
 4

	)

	@user/inc/cond_type.h

5 #i‚de‡
_COND_TYPE_H


6 
	#_COND_TYPE_H


	)

9 
	sc⁄d
 {

11 
muãx_t
 
	mmp
;

12 
	möôd
;

13 
node
 *
	mhód
;

15 } 
	tc⁄d_t
;

	@user/inc/mutex_type.h

5 #i‚de‡
_MUTEX_TYPE_H


6 
	#_MUTEX_TYPE_H


	)

9 
	smuãx
 {

10 
	möôd
;

11 
	mlock
;

13 
	mcou¡
;

14 } 
	tmuãx_t
;

	@user/inc/rwlock_type.h

5 #i‚de‡
_RWLOCK_TYPE_H


6 
	#_RWLOCK_TYPE_H


	)

9 
	srwlock
 {

11 
	möôd
 ;

13 
	mmode
 ;

14 
muãx_t
 
	mmp
;

16 
c⁄d_t
 
	mªad
, 
	mwrôe
;

17 
	mcou¡_ªadîs
, 
	mcou¡_wrôîs
, 
	mcou¡_ªad_queue
, 
	mcou¡_wrôe_queue
;

18 } 
	trwlock_t
;

	@user/inc/sem_type.h

5 #i‚de‡
_SEM_TYPE_H


6 
	#_SEM_TYPE_H


	)

9 
	s£m
 {

10 
muãx_t
 
	mmp
;

11 
	mcou¡
;

12 
	möôd
;

13 
node
* 
	mhód
;

14 } 
	t£m_t
;

	@user/inc/skip_list_common.h

1 #i‚de‡
_SKIP_LIST_COMMON_H_


2 
	#_SKIP_LIST_COMMON_H_


	)

4 
	~<°döt.h
>

6 
	sskù_li°_globÆ_s
 {

8 *
	mhód
;

9 
uöt32_t
 
	mcuº_num_buckës
;

10 
uöt32_t
 
	mmax_num_buckës
;

11 
uöt32_t
 
	mmax_num_nodes
;

13 } 
	tskù_li°_globÆ_t
;

24 
	#SLIST_GLB_GET_C_NUM_BKT
(
_glb_
Ë((_glb_)->
cuº_num_buckës
)

	)

25 
	#SLIST_GLB_GET_M_NUM_BKT
(
_glb_
Ë((_glb_)->
max_num_buckës
)

	)

26 
	#SLIST_GLB_GET_M_NUM_NODES
(
_glb_
Ë((_glb_)->
max_num_nodes
)

	)

27 
	#SLIST_GLB_GET_HEAD
(
_glb_
Ë((_glb_)->
hód
)

	)

29 
	#SLIST_GLB_SET_C_NUM_BKT
(
_glb_
, 
_vÆ_
Ë(((_glb_)->
cuº_num_backës
) \

30 
_vÆ_
)

	)

32 
	#SLIST_GLB_SET_M_NUM_BKT
(
_glb_
, 
_vÆ_
Ë(((_glb_)->
max_num_buckës
) = \

33 
_vÆ_
)

	)

35 
	#SLIST_GLB_SET_M_NUM_NODES
(
_glb_
, 
_vÆ_
Ë(((_glb_)->
max_num_nodes
) = \

36 
_vÆ_
)

	)

37 
	#SLIST_GLB_SET_HEAD
(
_glb_
, 
_vÆ_
Ë(((_glb_)->
hód
Ë_vÆ_)

	)

39 
	#SLIST_GLB_INC_C_NUM_BKT
(
_glb_
Ë(((_glb_)->
cuº_num_buckës
) \

40 (
SLIST_GLB_GET_C_NUM_BKT
 \

41 (
_glb_
Ë+ 1))

	)

42 
	#SLIST_GLB_DEC_C_NUM_BKT
(
_glb_
Ë(((_glb_)->
cuº_num_buckës
) \

43 (
SLIST_GLB_GET_C_NUM_BKT
 \

44 (
_glb_
Ë- 1))

	)

49 
skù_li°_dbg_dump_Æl
(
skù_li°_globÆ_t
 *
skù_li°_glb
);

51 
skù_li°_globÆ_t
 * 
skù_li°_öô
(skù_li°_globÆ_à*
skù_li°_glb
,

52 
uöt32_t
 
max_num_buckës
,

53 
uöt32_t
 
max_num_node
);

55 
skù_li°_ö£π
(
skù_li°_globÆ_t
 *
skù_li°_glb
, 
uöt32_t
 
buckë_ödex
,

56 
uöt32_t
 
node_ödex_lo
, uöt32_à
node_ödex_hi
,

57 *
d©a
);

59 
skù_li°_ªmove
(
skù_li°_globÆ_t
 *
skù_li°_glb
, 
uöt32_t
 
buckë_ödex
,

60 
uöt32_t
 
node_ödex
);

62 * 
skù_li°_föd
(
skù_li°_globÆ_t
 *
skù_li°_glb
, 
uöt32_t
 
buckë_ödex
,

63 
uöt32_t
 
node_ödex
);

	@user/inc/thread_common.h

1 #i‚de‡
_THREAD_COMMON_H_


2 
	#_THREAD_COMMON_H_


	)

7 
ölöe
 
thr_£t_maö_°ackH
(*
öput
);

8 
ölöe
 
thr_£t_maö_°ackL
(*
öput
);

9 
ölöe
 * 
thr_gë_maö_°ackH
();

10 
ölöe
 * 
thr_gë_maö_°ackL
();

	@user/inc/util.h

1 #i‚de‡
_UTIL_H_


2 
	#_UTIL_H_


	)

4 
	#SUCCESS
 0

	)

5 
	#ERROR
 -1

	)

10 * 
utû_gë_e•
();

11 * 
utû_gë_ebp
();

12 
utû_gë_msb
(*
num
);

	@user/libsyscall/syscall.c

23 
	~<sysˇŒ.h
>

26 
	$f‹k
()

29 
	}
}

34 
	$exec
(*
exe˙ame
, *
¨gvec
[])

37 
	}
}

41 
	$£t_°©us
(
°©us
)

44 
	}
}

48 vﬁ©ûê
	g∂aˇã_the_compûî
;

49 
	$v™ish
()

51 
bœckhﬁe
 = 867-5309;

53 
bœckhﬁe
 ^= blackhole;

54 
bœckhﬁe
 /= blackhole;

55 *(*Ë
bœckhﬁe
 = blackhole;

57 ++
∂aˇã_the_compûî
;

58 
	}
}

62 
	$waô
(*
°©us_±r
)

65 
	}
}

69 
	$yõld
(
pid
)

72 
	}
}

75 
	$descheduÀ
(*
Êag
)

78 
	}
}

82 
	$make_ru¬abÀ
(
pid
)

85 
	}
}

89 
	$gëtid
()

92 
	}
}

96 
	$¶ìp
(
ticks
)

99 
	}
}

103 
	$swexn
(*
e•3
, 
swexn_h™dÀr_t
 
eù
, *
¨g
, 
uªg_t
 *
√wuªg
)

106 
	}
}

110 
	$gëch¨
()

113 
	}
}

116 
	$ªadlöe
(
size
, *
buf
)

119 
	}
}

123 
	$¥öt
(
size
, *
buf
)

126 
	}
}

130 
	$£t_ãrm_cﬁ‹
(
cﬁ‹
)

133 
	}
}

137 
	$gë_curs‹_pos
(*
row
, *
cﬁ
)

140 
	}
}

144 
	$£t_curs‹_pos
(
row
, 
cﬁ
)

147 
	}
}

151 
	$hÆt
()

155 
	}
}

160 
	$ªadfûe
(*
fûíame
, *
buf
, 
cou¡
, 
off£t
)

163 
	}
}

167 
	$èsk_v™ish
(
°©us
)

169 
°©us
 ^= status;

170 
°©us
 /= status;

173 
	}
}

177 
	$√w_∑ges
(* 
addr
, 
Àn
)

180 
	}
}

185 
	$ªmove_∑ges
(* 
addr
)

188 
	}
}

192 
	$gë_ticks
()

195 
	}
}

199 
	$misbehave
(
mode
)

202 
	}
}

	@user/libthread/cond.c

12 
	~<simics.h
>

13 
	~<sysˇŒ.h
>

14 
	~<sysˇŒ_öt.h
>

15 
	~<thr_öã∫Æs.h
>

16 
	~<°dlib.h
>

17 
	~<°dio.h
>

18 
	~<°rög.h
>

19 
	~"comm⁄.h
"

20 
	~"thªad_comm⁄.h
"

21 
	~"utû.h
"

22 
	~<muãx_ty≥.h
>

23 
	~"muãx_öã∫Æs.h
"

24 
	~<thªad.h
>

25 
	~<c⁄d.h
>

33 
	$push
 (
node
 ** 
hódªf
, node* 
√w_thªad
)

35 
node
 *
q
 = *
hódªf
 ;

38 i‡–
q
 =
NULL
 ) {

40 *
hódªf
 = 
√w_thªad
;

41 
q
 = *
hódªf
;

42 
	`Õrötf
("%d----", 
q
->
tid
);

46 
q
 -> 
√xt
 !
NULL
)

47 
q
 = q -> 
√xt
 ;

49 
q
 -> 
√xt
 = 
√w_thªad
 ;

53 
	}
}

56 
node
 *

57 
	$p›
 (
node
 **
hódªf
)

59 
node
 *
q
 = *
hódªf
 ;

61 i‡(
q
) {

64 *
hódªf
 = 
q
 -> 
√xt
 ;

68 *
hódªf
 = 
NULL
;

71  (
q
);

72 
	}
}

75 
	$c⁄d_öô
–
c⁄d_t
 *
cv
 )

78 i‡–
cv
 -> 
öôd
 == 1 )

82 if(
	`muãx_öô
–&
cv
 -> 
mp
 ))

86 
cv
 -> 
öôd
 = 1;

89 
cv
 -> 
hód
 = 
NULL
;

92 
	}
}

95 
	$c⁄d_de°roy
–
c⁄d_t
 *
cv
 )

98 i‡–
cv
 -> 
öôd
 == 0 )

102 i‡–
cv
 -> 
hód
 !
NULL
 )

106 
	`muãx_de°roy
–&
cv
 -> 
mp
 );

108 
cv
 -> 
öôd
 = 0;

109 
	}
}

112 
	$c⁄d_waô
 (
c⁄d_t
 *
cv
, 
muãx_t
 *
mp
)

114 
node
 * 
√w_thªad
 = 
NULL
;

115 
ªje˘
 = 0;

116 
rc
 = 0;

118 i‡(!
cv
) {

122 
	`Õrötf
("[DBG_%s], ERROR: i≈uàcv NULL\n", 
__FUNCTION__
);

126 
√w_thªad
 = 
	`mÆloc
((
node
));

127 i‡(!
√w_thªad
) {

132 
	`Õrötf
("[DBG_%s], mÆlo¯Áûed \n", 
__FUNCTION__
);

136 
	`mem£t
(
√w_thªad
, 0, (
node
));

138 
√w_thªad
 -> 
tid
 = 
	`gëtid
();

139 
√w_thªad
 -> 
√xt
 = 
NULL
;

140 
√w_thªad
->
ªje˘
 = &reject;

142 
	`¥ötf
("[DBG_%s], E¡î \n", 
__FUNCTION__
);

144 
	`muãx_lock
(&(
cv
 -> 
mp
));

146 
	`push
 (&(
cv
 -> 
hód
), 
√w_thªad
);

148 
	`muãx_u∆ock
(
mp
);

150 
	`muãx_u∆ock
–&(
cv
 -> 
mp
 ));

151 
	`¥ötf
("[DBG_%s], Bef‹êdescheduÀ,Ñeje˘: %d\n", 
__FUNCTION__
, 
ªje˘
);

153 
rc
 = 
	`descheduÀ
(&
ªje˘
);

155 
	`¥ötf
("[DBG_%s], A·î descheduÀ,Ñc: %d \n", 
__FUNCTION__
, 
rc
);

157 
	`muãx_lock
(
mp
);

158 
	}
}

165 
	$c⁄d_sig«l
(
c⁄d_t
 *
cv
 )

167 
tid
;

168 
rc
 = 
SUCCESS
;

169 
node
 *nodê
NULL
;

171 i‡(!
cv
) {

179 i‡(
cv
 -> 
hód
 =
NULL
 ) {

188 
	`muãx_lock
–&(
cv
->
mp
));

190 
node
 = 
	`p›
–&(
cv
 -> 
hód
 ));

192 i‡(!
node
) {

196 
	`muãx_u∆ock
(&(
cv
->
mp
));

200 
tid
 = 
node
->tid;

206 *(
node
->
ªje˘
) = 1;

208 
	`‰ì
(
node
);

210 i‡(
tid
 < 0) {

215 
	`muãx_u∆ock
–&
cv
 -> 
mp
 );

218 
	`¥ötf
("[DBG_%s], Bef‹êmake_ru¬abÀ \n", 
__FUNCTION__
);

221 
rc
 = 
	`make_ru¬abÀ
(
tid
);

223 i‡(
rc
 !
SUCCESS
) {

228 
	`Õrötf
("[DBG_%s], make_runnable failed forÅid: %d \n",

229 
__FUNCTION__
, 
tid
);

232 
	`muãx_u∆ock
(&
cv
 -> 
mp
 );

235 
	}
}

241 
	$c⁄d_brﬂdˇ°
–
c⁄d_t
 *
cv
 )

243 
tid
 = -1;

244 
node
 *nodê
NULL
;

245 
rc
 = 
SUCCESS
;

247 i‡–
cv
 -> 
hód
 =
NULL
 )

250 
	`muãx_lock
–&
cv
 -> 
mp
 ) ;

254 
node
 = 
	`p›
(&(
cv
 -> 
hód
 ));

256 i‡(!
node
) {

264 
tid
 = 
node
->tid;

270 *(
node
->
ªje˘
) = 1;

272 
	`‰ì
(
node
);

274 if–
tid
 < 0 ) {

282 
	`¥ötf
("[DBG_%s], Bef‹êmake_ru¬abÀ \n", 
__FUNCTION__
);

284 
rc
 = 
	`make_ru¬abÀ
–
tid
 );

285 i‡(
rc
 !
SUCCESS
) {

290 
	`Õrötf
("[DBG_%s], make_runnable failed forÅid: %d \n",

291 
__FUNCTION__
, 
tid
);

295 
	`muãx_u∆ock
–&
cv
 -> 
mp
 );

296 
	}
}

	@user/libthread/malloc.c

8 
	~<°dlib.h
>

9 
	~<ty≥s.h
>

10 
	~<°ddef.h
>

11 
	~<simics.h
>

13 *
	$mÆloc
(
size_t
 
__size
)

15 *
±r
 = 
NULL
;

17 
±r
 = 
	`_mÆloc
(
__size
);

19  (
±r
);

20 
	}
}

22 *
	$ˇŒoc
(
size_t
 
__√…
, size_à
__ñtsize
)

24 *
±r
 = 
NULL
;

26 
±r
 = 
	`_ˇŒoc
(
__√…
, 
__ñtsize
);

28  (
±r
);

29 
	}
}

31 *
	$ªÆloc
(*
__buf
, 
size_t
 
__√w_size
)

33 *
±r
 = 
NULL
;

35 
±r
 = 
	`_ªÆloc
(
__buf
, 
__√w_size
);

37  (
±r
);

38 
	}
}

40 
	$‰ì
(*
__buf
)

42 
	`_‰ì
(
__buf
);

44 
	}
}

	@user/libthread/mutex.c

12 
	~<simics.h
>

13 
	~<sysˇŒ.h
>

14 
	~<sysˇŒ_öt.h
>

15 
	~<thr_öã∫Æs.h
>

16 
	~<°dlib.h
>

17 
	~<°rög.h
>

18 
	~"comm⁄.h
"

19 
	~"thªad_comm⁄.h
"

20 
	~"utû.h
"

21 
	~<muãx_ty≥.h
>

22 
	~"muãx_öã∫Æs.h
"

23 
	~<muãx.h
>

31 
	$muãx_öô
–
muãx_t
 *
mp
 )

33 
rc
 = 
SUCCESS
;

35 i‡–
mp
 =
NULL
) {

37 
rc
 = 
ERROR
;

38  (
rc
);

44 
mp
 -> 
öôd
 = 1;

49 
mp
 -> 
lock
 = 1;

51 
mp
 -> 
cou¡
 = 0;

53  (
rc
);

54 
	}
}

62 
	$muãx_de°roy
–
muãx_t
 *
mp
 )

64 i‡–
mp
 =
NULL
 || (!(mp->
öôd
)))

72 if–
mp
 -> 
cou¡
 == 0 ) {

73 
mp
 -> 
öôd
 = 0;

74 
mp
 -> 
lock
 = 1;

77 
	}
}

83 
	$muãx_lock
–
muãx_t
 *
mp
 )

85 i‡(
mp
 =
NULL
 || !m∞-> 
öôd
) {

99 
	`xchg
–&
mp
 -> 
lock
, 0) == 0) {

101 
	`yõld
 ( -1 );

109 
	}
}

116 
	$muãx_u∆ock
–
muãx_t
 *
mp
 )

118 i‡(
mp
 =
NULL
 || !m∞-> 
öôd
)

122 
	`xchg
(&(
mp
->
lock
), 1);

125 
	}
}

	@user/libthread/mutex_internals.h

2 #i‚de‡
_MUTEX_INTERNALS_H


3 
	#_MUTEX_INTERNALS_H


	)

4 
	snode
 {

8 
	mtid
;

13 
	mwaôög
;

14 
node
 *
	m√xt
;

20 *
	mªje˘
;

23 
xchg
(*
lock
, 
vÆue
);

28 
push
 ( 
node
 ** 
hódªf
, node* 
√w_thªad
 );

31 
node
 * 
p›
 ( nodê**
hódªf
 );

	@user/libthread/panic.c

22 
	~<°dio.h
>

23 
	~<°d¨g.h
>

24 
	~<°dlib.h
>

25 
	~<simics.h
>

31 
	$∑nic
(c⁄° *
fmt
, ...)

33 
va_li°
 
vl
;

35 
	`va_°¨t
(
vl
, 
fmt
);

36 
	`v¥ötf
(
fmt
, 
vl
);

37 
	`va_íd
(
vl
);

39 
	`¥ötf
("\n");

41 vﬁ©ûê
side_ef„˘
 = 0;

44 
	`¥ötf
("When in danger or in doubt,Ñun in circles, screamánd shout.\n");

45 
	`Õrötf
("When in danger or in doubt,Ñun in circles, screamánd shout.");

46 ++
side_ef„˘
;

48 
	}
}

	@user/libthread/rwlock.c

12 
	~<simics.h
>

13 
	~<sysˇŒ.h
>

14 
	~<sysˇŒ_öt.h
>

15 
	~<thr_öã∫Æs.h
>

16 
	~<°dlib.h
>

17 
	~<°rög.h
>

18 
	~"comm⁄.h
"

19 
	~"thªad_comm⁄.h
"

20 
	~"utû.h
"

21 
	~<muãx_ty≥.h
>

22 
	~"muãx_öã∫Æs.h
"

23 
	~<thªad.h
>

24 
	~<c⁄d.h
>

25 
	~<£m.h
>

26 
	~<rwlock.h
>

29 
	$rwlock_öô
–
rwlock_t
 *
rwlock
 )

31 if–
rwlock
 -> 
öôd
 != 0)

33 
rwlock
 -> 
öôd
 = 1;

34 
rwlock
 -> 
cou¡_ªadîs
 = 0 ;

35 
rwlock
 -> 
cou¡_wrôîs
 = 0 ;

36 
rwlock
 -> 
cou¡_ªad_queue
 = 0 ;

37 
rwlock
 -> 
cou¡_wrôe_queue
 = 0 ;

38 
	`muãx_öô
–&
rwlock
 -> 
mp
);

39 
	`c⁄d_öô
–&
rwlock
 -> 
ªad
);

40 
	`c⁄d_öô
–&
rwlock
-> 
wrôe
);

41 
rwlock
 -> 
mode
 = -1 ;

43 
	}
}

45 
	$rwlock_de°roy
–
rwlock_t
 *
rwlock
 )

47 if–
rwlock
 -> 
öôd
 != 1)

49 
rwlock
 -> 
öôd
 = 0;

50 
	`muãx_de°roy
–&
rwlock
 -> 
mp
 );

51 
	`c⁄d_de°roy
–&
rwlock
 -> 
ªad
 );

52 
	`c⁄d_de°roy
–&
rwlock
 -> 
wrôe
 );

53 
	}
}

58 
	$rwlock_lock
–
rwlock_t
 *
rwlock
, 
ty≥
 )

60 if–
ty≥
 =
RWLOCK_WRITE
 ) {

61 
	`muãx_lock
–&
rwlock
 -> 
mp
 );

62 if–
rwlock
 -> 
cou¡_ªadîs
 +Ñwlock -> 
cou¡_wrôîs
 > 0 ){

63 
rwlock
 -> 
cou¡_wrôe_queue
++;

64  
rwlock
 -> 
cou¡_ªadîs
 +Ñwlock -> 
cou¡_wrôîs
 > 0 )

65 
	`c⁄d_waô
–&
rwlock
 -> 
wrôe
, &rwlock -> 
mp
 );

66 
rwlock
 -> 
cou¡_wrôe_queue
--;

68 
rwlock
 -> 
cou¡_wrôîs
 = 1;

69 
rwlock
 -> 
mode
 = 1;

70 
	`muãx_u∆ock
–&
rwlock
 -> 
mp
 );

71 } i‡–
ty≥
 =
RWLOCK_READ
 ) {

72 
	`muãx_lock
–&
rwlock
 -> 
mp
 );

73 if–
rwlock
 -> 
cou¡_wrôîs
 +Ñwlock -> 
cou¡_wrôe_queue
 > 0 ){

74 
rwlock
 -> 
cou¡_ªad_queue
++;

76  
rwlock
 -> 
cou¡_wrôîs
 +Ñwlock -> 
cou¡_wrôe_queue
 > 0 )

77 
	`c⁄d_waô
–&
rwlock
 -> 
ªad
, &rwlock -> 
mp
 );

78 
rwlock
 -> 
cou¡_ªad_queue
--;

80 
rwlock
 -> 
cou¡_ªadîs
++;

81 
rwlock
 -> 
mode
 = 0;

82 
	`muãx_u∆ock
–&
rwlock
 -> 
mp
 );

86 
	}
}

88 
	$rwlock_u∆ock
–
rwlock_t
 *
rwlock
 )

90 if–
rwlock
 -> 
mode
 == 1) {

92 
	`muãx_lock
–&
rwlock
 -> 
mp
);

93 
rwlock
 -> 
cou¡_wrôîs
 = 0;

94 if–
rwlock
 -> 
cou¡_wrôîs
 > 0 ) {

95 
	`c⁄d_sig«l
–&
rwlock
 -> 
wrôe
) ;

96 } if–
rwlock
 -> 
cou¡_ªad_queue
 > 0 ){

97 
	`c⁄d_brﬂdˇ°
–&
rwlock
 -> 
ªad
 ) ;

99 
rwlock
 -> 
mode
 = -1 ;

100 
	`muãx_u∆ock
–&
rwlock
 -> 
mp
 );

101 } if–
rwlock
 -> 
mode
 == 0 ) {

103 
	`muãx_lock
–&
rwlock
 -> 
mp
 );

104 
rwlock
 -> 
cou¡_ªadîs
++;

106 if–
rwlock
 -> 
cou¡_ªadîs
 =0 &&Ñwlock -> 
cou¡_wrôe_queue
 > 0 ){

107 
	`c⁄d_sig«l
–&
rwlock
 -> 
wrôe
 ) ;

109 
	`muãx_u∆ock
–&
rwlock
 -> 
mp
 );

114 
	}
}

121 
	$rwlock_downgøde
–
rwlock_t
 *
rwlock
)

124 if–
rwlock
 -> 
mode
 == 1) {

125 
rwlock
 -> 
mode
 = 0;

126 
rwlock
 -> 
cou¡_ªadîs
++ ;

127 
rwlock
 -> 
cou¡_wrôîs
 = 0 ;

130 
	}
}

	@user/libthread/sem.c

12 
	~<simics.h
>

13 
	~<sysˇŒ.h
>

14 
	~<sysˇŒ_öt.h
>

15 
	~<thr_öã∫Æs.h
>

16 
	~<°dlib.h
>

17 
	~<°rög.h
>

18 
	~"comm⁄.h
"

19 
	~"thªad_comm⁄.h
"

20 
	~"utû.h
"

21 
	~<muãx_ty≥.h
>

22 
	~"muãx_öã∫Æs.h
"

23 
	~<thªad.h
>

24 
	~<c⁄d.h
>

25 
	~<£m.h
>

28 
	$£m_öô
–
£m_t
 *
£m
, 
cou¡
 )

31 i‡–
£m
 -> 
öôd
 == 1 )

35 if–
	`muãx_öô
–&
£m
 -> 
mp
 ) )

40 
£m
 -> 
öôd
 = 1;

42 
£m
 -> 
cou¡
 = count;

45 
£m
 -> 
hód
 = 
NULL
;

48 
	}
}

54 
	$£m_waô
–
£m_t
 *
£m
 )

56 
node
 
√w_thªad
;

57 
ªje˘
 = 0 ;

59 
√w_thªad
.
tid
 = 
	`thr_gëid
();

60 
√w_thªad
.
√xt
 = 
NULL
;

64 
	`muãx_lock
–&
£m
 -> 
mp
 );

65 
£m
 -> 
cou¡
 --;

66 if–
£m
 -> 
cou¡
 >= 0){

67 
	`muãx_u∆ock
–&
£m
 -> 
mp
 );

72 
	`push
 ( &
£m
 -> 
hód
, &
√w_thªad
);

73 
	`descheduÀ
–&
ªje˘
 );

74 
	`muãx_u∆ock
–&
£m
 -> 
mp
 );

75 
	}
}

77 
	$£m_sig«l
–
£m_t
 *
£m
 )

79 
tid
;

80 
node
 *node;

82 if–
£m
 -> 
hód
 =
NULL
 )

86 
	`muãx_lock
–&
£m
 -> 
mp
 ) ;

88 
£m
 -> 
cou¡
++;

89 if–
£m
 -> 
cou¡
 >= 0){

90 
	`muãx_u∆ock
–&
£m
 -> 
mp
 );

95 
node
 = 
	`p›
–&
£m
 -> 
hód
 );

97 i‡(!
node
)

100 
tid
 = 
node
->tid;

102 if–
tid
 < 0 ) {

104 
	`muãx_u∆ock
–&
£m
 -> 
mp
 );

109  
	`make_ru¬abÀ
–
tid
 ) < 0 )

110 
	`yõld
(
tid
);

112 
	`muãx_u∆ock
–&
£m
 -> 
mp
 );

113 
	}
}

116 
	$£m_de°roy
–
£m_t
 *
£m
 )

120 i‡–
£m
 -> 
öôd
 == 0 )

124 i‡–
£m
 -> 
hód
 !
NULL
 )

128 
	`muãx_de°roy
–&
£m
 -> 
mp
 );

129 
£m
 -> 
öôd
 = 0;

130 
	}
}

	@user/libthread/skip_list.c

1 
	~<°dio.h
>

2 
	~<mÆloc.h
>

3 
	~<simics.h
>

4 
	~<skù_li°_öt.h
>

5 
	~"skù_li°_comm⁄.h
"

6 
	~"utû.h
"

8 
skù_li°_globÆ_t
 *

9 
	$skù_li°_öô
(
skù_li°_globÆ_t
 *
skù_li°_globÆ
,

10 
uöt32_t
 
max_num_buckës
,

11 
uöt32_t
 
max_num_node
)

13 i‡(!
skù_li°_globÆ
) {

14 
	`Õrötf
("[DBG_%s], InvÆid i≈uà\n", 
__FUNCTION__
);

17 
	`SLIST_GLB_SET_M_NUM_BKT
((
skù_li°_globÆ
), 
max_num_buckës
);

18 
	`SLIST_GLB_SET_M_NUM_NODES
((
skù_li°_globÆ
), 
max_num_node
);

25  (
skù_li°_globÆ
);

26 
	}
}

29 
	$skù_li°_ö£π
(
skù_li°_globÆ_t
 *
skù_li°_glb
,

30 
uöt32_t
 
buckë_ödex
, uöt32_à
node_ödex_lo
,

31 
uöt32_t
 
node_ödex_hi
, *
d©a
)

33 
rc
 = 
SUCCESS
;

34 
skù_li°_buckë_t
 *
li°_buckë
 = 
NULL
;

35 
skù_li°_node_t
 *
li°_node
 = 
NULL
;

37 i‡((!
d©a
Ë|| (!
skù_li°_glb
)) {

42 
	`Õrötf
("[DBG_%s], Recvd invalid input, skip_list_glb: %p, "

43 "d©a: %∞\n", 
__FUNCTION__
, 
skù_li°_glb
, 
d©a
);

45 
rc
 = 
ERROR
;

46  (
rc
);

49 
li°_buckë
 = 
	`skù_li°_gë_buckë
(
skù_li°_glb
, 
buckë_ödex
);

50 i‡(!
li°_buckë
) {

55 
li°_buckë
 = 
	`ˇŒoc
(1, (
skù_li°_buckë_t
));

56 
	`SLIST_BKT_SET_KEY
(
li°_buckë
, 
buckë_ödex
);

61 
rc
 = 
	`skù_li°_ö£π_buckë
(
skù_li°_glb
, 
li°_buckë
);

64 
li°_node
 = 
	`ˇŒoc
(1, (
skù_li°_node_t
));

65 
	`SLIST_NODE_SET_KEYL
(
li°_node
, 
node_ödex_lo
);

66 
	`SLIST_NODE_SET_KEYH
(
li°_node
, 
node_ödex_hi
);

67 
	`SLIST_NODE_SET_DATA
(
li°_node
, 
d©a
);

72 
rc
 = 
	`skù_li°_ö£π_node
(
li°_buckë
, 
li°_node
);

74 i‡(
rc
 !
SUCCESS
) {

79 i‡(!(
	`SLIST_BKT_GET_NNODES
(
li°_buckë
))) {

84 
	`skù_li°_ªmove_buckë
(
skù_li°_glb
, &
li°_buckë
);

87 
	`‰ì
(
li°_node
);

88 
li°_node
 = 
NULL
;

91  (
rc
);

92 
	}
}

95 
	$skù_li°_ªmove
(
skù_li°_globÆ_t
 *
skù_li°_glb
,

96 
uöt32_t
 
buckë_ödex
, uöt32_à
node_ödex
)

98 
skù_li°_buckë_t
 *
li°_buckë
 = 
NULL
;

100 i‡((!
skù_li°_glb
)) {

105 
	`Õrötf
("[DBG_%s], Recvd invalid input, skip_list_glb: %p \n",

106 
__FUNCTION__
, 
skù_li°_glb
);

111 
li°_buckë
 = 
	`skù_li°_gë_buckë
(
skù_li°_glb
, 
buckë_ödex
);

112 i‡(!
li°_buckë
) {

118 
	`Õrötf
("[DBG_%s], BuckëÇŸÖª£¡ \n", 
__FUNCTION__
);

122 
	`skù_li°_ªmove_node
(
li°_buckë
, 
node_ödex
);

124 i‡(!(
	`SLIST_BKT_GET_NNODES
(
li°_buckë
))) {

129 
	`skù_li°_ªmove_buckë
(
skù_li°_glb
, &
li°_buckë
);

133 
	}
}

136 
	$skù_li°_föd
(
skù_li°_globÆ_t
 *
skù_li°_glb
,

137 
uöt32_t
 
buckë_ödex
, uöt32_à
node_ödex
)

139 *
ªt_d©a
 = 
NULL
;

140 
skù_li°_buckë_t
 *
£¨ch_buckë
 = 
NULL
;

141 
skù_li°_node_t
 *
£¨ch_node
 = 
NULL
;

143 i‡(!(
skù_li°_glb
)) {

148 
	`Õrötf
("[DBG_%s],Üi°_glb NULL \n", 
__FUNCTION__
);

149  (
NULL
);

152 
£¨ch_buckë
 = 
	`skù_li°_gë_buckë
(
skù_li°_glb
, 
buckë_ödex
);

153 i‡(!
£¨ch_buckë
) {

157 
	`Õrötf
("[DBG_%s], Buckë NULL \n", 
__FUNCTION__
);

158  (
NULL
);

161 
£¨ch_node
 = 
	`skù_li°_gë_node
(
£¨ch_buckë
, 
node_ödex
);

162 i‡(!
£¨ch_node
) {

166 
	`Õrötf
("[DBG_%s], NodêNULL \n", 
__FUNCTION__
);

167  (
NULL
);

170 
ªt_d©a
 = 
	`SLIST_NODE_GET_DATA
(
£¨ch_node
);

172  (
ªt_d©a
);

173 
	}
}

175 
skù_li°_buckë_t
*

176 
	$skù_li°_gë_buckë
(
skù_li°_globÆ_t
 *
skù_li°_glb
,

177 
uöt32_t
 
öput_key
)

179 
skù_li°_buckë_t
 *
buckë
 = 
NULL
;

180 
skù_li°_buckë_t
 *
ªt_buckë
 = 
NULL
;

181 
uöt32_t
 
buckë_key
 = 0;

183 i‡(!(
skù_li°_glb
)) {

188 
	`Õrötf
("[DBG_%s],Üi°_glb NULL \n", 
__FUNCTION__
);

189  (
NULL
);

192 
buckë
 = 
	`SLIST_GLB_GET_HEAD
(
skù_li°_glb
);

193 i‡(!
buckë
) {

198  (
NULL
);

201 
buckë
) {

203 
buckë_key
 = 
	`SLIST_BKT_GET_KEY
(
buckë
);

205 i‡(
buckë_key
 =
öput_key
) {

210 
ªt_buckë
 = 
buckë
;

214 i‡(
buckë_key
 < 
öput_key
) {

219 
ªt_buckë
 = 
NULL
;

223 
buckë
 = 
	`SLIST_BKT_GET_NEXT
(bucket);

226  (
ªt_buckë
);

227 
	}
}

229 
skù_li°_node_t
*

230 
	$skù_li°_gë_node
(
skù_li°_buckë_t
 *
öput_buckë
,

231 
uöt32_t
 
öput_key
)

233 
skù_li°_node_t
 *
node
 = 
NULL
;

234 
skù_li°_node_t
 *
ªt_node
 = 
NULL
;

235 
uöt32_t
 
node_key_lo
 = 0;

236 
uöt32_t
 
node_key_hi
 = 0;

238 i‡(!(
öput_buckë
)) {

243 
	`Õrötf
("[DBG_%s], i≈uàbuckë NULL \n", 
__FUNCTION__
);

244  (
NULL
);

247 
node
 = 
	`SLIST_BKT_GET_HEAD
(
öput_buckë
);

248 i‡(!
node
) {

253  (
NULL
);

256 
node
) {

258 
node_key_lo
 = 
	`SLIST_NODE_GET_KEYL
(
node
);

259 
node_key_hi
 = 
	`SLIST_NODE_GET_KEYH
(
node
);

262 i‡((
öput_key
 >
node_key_lo
Ë&& (öput_key <
node_key_hi
)) {

267 
ªt_node
 = 
node
;

271 i‡(
node_key_hi
 < 
öput_key
) {

276 
ªt_node
 = 
NULL
;

280 
node
 = 
	`SLIST_NODE_GET_NEXT
(node);

283  (
ªt_node
);

284 
	}
}

287 
	$skù_li°_ö£π_buckë
(
skù_li°_globÆ_t
 *
skù_li°_glb
,

288 
skù_li°_buckë_t
* 
li°_buckë
)

290 
rc
 = 
SUCCESS
;

291 
skù_li°_buckë_t
* 
hód
 = 
NULL
;

292 
skù_li°_buckë_t
* 
buckë_ôî
 = 
NULL
;

293 
skù_li°_buckë_t
* 
¥ev_buckë
 = 
NULL
;

294 
uöt32_t
 
öput_key
 = 0;

296 i‡((!
skù_li°_glb
Ë|| (!
li°_buckë
)) {

301 
	`Õrötf
("[DBG_%s], Invalid inputs, skip_list_glb: %p,"

302 "Üi°_buckë: %∞\n", 
__FUNCTION__
,

303 
skù_li°_glb
, 
li°_buckë
);

305 
rc
 = 
ERROR
;

307  (
rc
);

311 
öput_key
 = 
	`SLIST_BKT_GET_KEY
(
li°_buckë
);

313 
hód
 = 
	`SLIST_GLB_GET_HEAD
(
skù_li°_glb
);

315 i‡(!
hód
) {

320 
	`SLIST_GLB_SET_HEAD
(
skù_li°_glb
, 
li°_buckë
);

321 
	`SLIST_GLB_INC_C_NUM_BKT
(
skù_li°_glb
);

329 
buckë_ôî
 = 
hód
;

333 i‡(!
buckë_ôî
)

336 i‡(
	`SLIST_BKT_GET_KEY
(
buckë_ôî
Ë=
öput_key
) {

342 
	`Õrötf
("[DBG_%s], duplicate key: %lu\n",

343 
__FUNCTION__
, 
öput_key
);

345 
rc
 = 
ERROR
;

346  (
rc
);

348 } i‡(
	`SLIST_BKT_GET_KEY
(
buckë_ôî
Ë> 
öput_key
) {

354 
¥ev_buckë
 = 
buckë_ôî
;

355 
buckë_ôî
 = buckë_ôî->
√xt
;

371 
	`SLIST_GLB_INC_C_NUM_BKT
(
skù_li°_glb
);

372 
li°_buckë
->
√xt
 = 
buckë_ôî
;

373 
li°_buckë
->
¥ev
 = 
¥ev_buckë
;

375 i‡(
¥ev_buckë
) {

377 
¥ev_buckë
->
√xt
 = 
li°_buckë
;

381 
	`SLIST_GLB_SET_HEAD
(
skù_li°_glb
, 
li°_buckë
);

384 i‡(
buckë_ôî
)

385 
buckë_ôî
->
¥ev
 = 
li°_buckë
;

389  (
rc
);

390 
	}
}

393 
	$skù_li°_ªmove_buckë
(
skù_li°_globÆ_t
 *
skù_li°_glb
,

394 
skù_li°_buckë_t
 **
öput_buckë
)

396 
skù_li°_buckë_t
 *
buckë_ôî
 = 
NULL
;

397 
skù_li°_buckë_t
 *
¥ev_buckë
 = 
NULL
;

398 
skù_li°_buckë_t
 *
√xt_buckë
 = 
NULL
;

399 
skù_li°_buckë_t
 *
£¨ch_buckë
 = 
NULL
;

400 
uöt32_t
 
öput_key
 = 0;

402 i‡((!(*
öput_buckë
)Ë|| (!(
skù_li°_glb
))) {

408 
	`Õrötf
("[DBG_%s], Invalid inputÖaram, input_bucket: %p,"

409 " skù_li°_glb: %p\n",
__FUNCTION__
, *
öput_buckë
,

410 
skù_li°_glb
);

414 
öput_key
 = 
	`SLIST_BKT_GET_KEY
((*
öput_buckë
));

415 
buckë_ôî
 = 
	`SLIST_BKT_GET_HEAD
(
skù_li°_glb
);

417 i‡(!
buckë_ôî
) {

423 
	`Õrötf
("[DBG_%s],Çÿbuckë†¥e£¡ \n", 
__FUNCTION__
);

427 
£¨ch_buckë
 = (*(
öput_buckë
));

429 
	`SLIST_GLB_DEC_C_NUM_BKT
(
skù_li°_glb
);

431 
¥ev_buckë
 = 
	`SLIST_BKT_GET_PREV
(
£¨ch_buckë
);

432 
√xt_buckë
 = 
	`SLIST_BKT_GET_NEXT
(
£¨ch_buckë
);

434 i‡(
¥ev_buckë
) {

436 
¥ev_buckë
->
√xt
 = 
£¨ch_buckë
->next;

440 
	`SLIST_GLB_SET_HEAD
(
skù_li°_glb
, 
√xt_buckë
);

443 i‡(
√xt_buckë
) {

444 
√xt_buckë
->
¥ev
 = 
¥ev_buckë
;

447 
	`SLIST_BKT_SET_PREV
(
£¨ch_buckë
, 
NULL
);

448 
	`SLIST_BKT_SET_NEXT
(
£¨ch_buckë
, 
NULL
);

453 
	`‰ì
(
£¨ch_buckë
);

454 *
öput_buckë
 = 
NULL
;

457 
	}
}

460 
	$skù_li°_ö£π_node
(
skù_li°_buckë_t
 *
öput_buckë
,

461 
skù_li°_node_t
* 
öput_node
)

463 
rc
 = 
SUCCESS
;

464 
skù_li°_node_t
* 
hód
 = 
NULL
;

465 
skù_li°_node_t
* 
node_ôî
 = 
NULL
;

466 
skù_li°_node_t
* 
¥ev_node
 = 
NULL
;

467 
uöt32_t
 
öput_key
 = 0;

469 i‡((!
öput_buckë
Ë|| (!
öput_node
)) {

474 
	`Õrötf
("[DBG_%s], Invalid inputs, skip_list_glb: %p,"

475 "Üi°_buckë: %∞\n", 
__FUNCTION__
,

476 
öput_buckë
, 
öput_node
);

478 
rc
 = 
ERROR
;

480  (
rc
);

483 
öput_key
 = 
	`SLIST_NODE_GET_KEYL
(
öput_node
);

484 
hód
 = 
	`SLIST_BKT_GET_HEAD
(
öput_buckë
);

486 i‡(!
hód
) {

491 
	`SLIST_BKT_SET_HEAD
(
öput_buckë
, 
öput_node
);

492 
	`SLIST_BKT_INC_NNODES
(
öput_buckë
);

501 
node_ôî
 = 
hód
;

505 i‡(!
node_ôî
)

508 i‡(
	`SLIST_NODE_GET_KEYL
(
node_ôî
Ë=
öput_key
) {

514 
	`Õrötf
("[DBG_%s], duplicate key: %lu\n",

515 
__FUNCTION__
, 
öput_key
);

517 
rc
 = 
ERROR
;

518  (
rc
);

520 } i‡(
	`SLIST_NODE_GET_KEYL
(
node_ôî
Ë> 
öput_key
) {

526 
¥ev_node
 = 
node_ôî
;

527 
node_ôî
 =Çode_ôî->
√xt
;

543 
	`SLIST_BKT_INC_NNODES
(
öput_buckë
);

544 
öput_node
->
√xt
 = 
node_ôî
;

545 
öput_node
->
¥ev
 = 
¥ev_node
;

547 i‡(
¥ev_node
) {

549 
¥ev_node
->
√xt
 = 
öput_node
;

556 
	`SLIST_BKT_SET_HEAD
(
öput_buckë
, 
öput_node
);

559 i‡(
node_ôî
)

560 
node_ôî
->
¥ev
 = 
öput_node
;

563  (
rc
);

564 
	}
}

567 
	$skù_li°_ªmove_node
(
skù_li°_buckë_t
 *
öput_buckë
, 
uöt32_t
 
öput_key
)

569 
skù_li°_node_t
 *
£¨ch_node
 = 
NULL
;

570 
skù_li°_node_t
 *
node_ôî
 = 
NULL
;

571 
skù_li°_node_t
 *
¥ev_node
 = 
NULL
;

572 
skù_li°_node_t
 *
√xt_node
 = 
NULL
;

573 
uöt32_t
 
node_key_lo
 = 0;

574 
uöt32_t
 
node_key_hi
 = 0;

576 i‡(!
öput_buckë
) {

582 
	`Õrötf
("[DBG_%s], I≈uàbuckë i†NULL \n",
__FUNCTION__
);

586 
node_ôî
 = 
	`SLIST_BKT_GET_HEAD
(
öput_buckë
);

588 i‡(!
node_ôî
) {

594 
	`Õrötf
("[DBG_%s], I≈uàbuckë i†NULL \n", 
__FUNCTION__
);

603 
node_key_lo
 = 
	`SLIST_NODE_GET_KEYL
(
node_ôî
);

604 
node_key_hi
 = 
	`SLIST_NODE_GET_KEYH
(
node_ôî
);

607 i‡((
öput_key
 >
node_key_lo
Ë&& (öput_key <
node_key_hi
)) {

609 
£¨ch_node
 = 
node_ôî
;

613 i‡(
node_key_hi
 < 
öput_key
) {

621 
node_ôî
 =Çode_ôî->
√xt
;

624 i‡(
£¨ch_node
) {

629 
	`SLIST_BKT_DEC_NNODES
(
öput_buckë
);

631 
¥ev_node
 = 
	`SLIST_NODE_GET_PREV
(
£¨ch_node
);

632 
√xt_node
 = 
	`SLIST_NODE_GET_NEXT
(
£¨ch_node
);

634 i‡(
¥ev_node
) {

636 
¥ev_node
->
√xt
 = 
£¨ch_node
->next;

640 
	`SLIST_BKT_SET_HEAD
(
öput_buckë
, 
√xt_node
);

643 i‡(
√xt_node
) {

644 
√xt_node
->
¥ev
 = 
¥ev_node
;

647 
	`SLIST_NODE_SET_PREV
(
£¨ch_node
, 
NULL
);

648 
	`SLIST_NODE_SET_NEXT
(
£¨ch_node
, 
NULL
);

653 
	`‰ì
(
£¨ch_node
);

657 
	}
}

663 
	$skù_li°_dbg_dump_node
(
skù_li°_node_t
 *
öput_node
)

665 i‡(!
öput_node
)

668 
	`Õrötf
("\t\tSñf: %p\n", 
öput_node
);

669 
	`Õrötf
("\t\tNode_KeyL: %lu\n", 
	`SLIST_NODE_GET_KEYL
(
öput_node
));

670 
	`Õrötf
("\t\tNode_KeyH: %lu\n", 
	`SLIST_NODE_GET_KEYH
(
öput_node
));

672 
	`Õrötf
("\t\tNext: %p\n", 
	`SLIST_NODE_GET_NEXT
(
öput_node
));

673 
	`Õrötf
("\t\tPªv: %p\n", 
	`SLIST_NODE_GET_PREV
(
öput_node
));

676 
	}
}

679 
	$skù_li°_dbg_dump_buckë
(
skù_li°_buckë_t
 *
öput_buckë
)

681 
skù_li°_node_t
 *
node_ôî
 = 
NULL
;

683 i‡(!
öput_buckë
)

686 
	`Õrötf
("\tSñf: %p\n", 
öput_buckë
);

687 
	`Õrötf
("\tHód: %p\n", 
	`SLIST_BKT_GET_HEAD
(
öput_buckë
));

688 
	`Õrötf
("\tNext: %p\n", 
	`SLIST_BKT_GET_NEXT
(
öput_buckë
));

689 
	`Õrötf
("\tPªv: %p\n", 
	`SLIST_BKT_GET_PREV
(
öput_buckë
));

690 
	`Õrötf
("\tBuckë_key: %lu\n", 
	`SLIST_BKT_GET_KEY
(
öput_buckë
));

691 
	`Õrötf
("\tNum_nodes: %lu\n", 
	`SLIST_BKT_GET_NNODES
(
öput_buckë
));

693 
node_ôî
 = 
	`SLIST_BKT_GET_HEAD
(
öput_buckë
);

695 
node_ôî
) {

697 
	`skù_li°_dbg_dump_node
(
node_ôî
);

699 
node_ôî
 =Çode_ôî->
√xt
;

703 
	}
}

706 
	$skù_li°_dbg_dump_Æl
(
skù_li°_globÆ_t
 *
öput_globÆ
)

708 
skù_li°_buckë_t
 *
buckë_ôî
 = 
NULL
;

710 i‡(!
öput_globÆ
)

713 
	`Õrötf
("Hód: %p\n", 
	`SLIST_GLB_GET_HEAD
(
öput_globÆ
));

714 
	`Õrötf
("Cuº_num_buckës: %lu\n", 
	`SLIST_GLB_GET_C_NUM_BKT
(
öput_globÆ
));

715 
	`Õrötf
("Max_num_buckës: %lu\n", 
	`SLIST_GLB_GET_M_NUM_BKT
(
öput_globÆ
));

716 
	`Õrötf
("Max_num_nodes: %lu\n", 
	`SLIST_GLB_GET_M_NUM_NODES
(
öput_globÆ
));

718 
buckë_ôî
 = 
	`SLIST_GLB_GET_HEAD
(
öput_globÆ
);

720 
buckë_ôî
) {

722 
	`skù_li°_dbg_dump_buckë
(
buckë_ôî
);

723 
buckë_ôî
 = buckë_ôî->
√xt
;

727 
	}
}

	@user/libthread/skip_list_int.h

1 #i‚de‡
_SKIP_LIST_INT_H_


2 
	#_SKIP_LIST_INT_H_


	)

4 
	~<skù_li°_comm⁄.h
>

5 
	~<°döt.h
>

7 
	sskù_li°_node_s
 {

9 
skù_li°_node_s
 *
	m√xt
;

10 
skù_li°_node_s
 *
	m¥ev
;

11 
uöt32_t
 
	mnode_key_lo
;

12 
uöt32_t
 
	mnode_key_hi
;

13 *
	md©a
;

15 } 
	tskù_li°_node_t
;

17 
	sskù_li°_buckë_s
 {

19 
skù_li°_node_s
 *
	mhód
;

20 
skù_li°_buckë_s
 *
	m√xt
;

21 
skù_li°_buckë_s
 *
	m¥ev
;

26 
uöt32_t
 
	mbuckë_key
;

27 
uöt32_t
 
	mnum_nodes
;

28 
uöt32_t
 
	mmax_node_key
;

29 
uöt32_t
 
	mmö_node_key
;

30 
uöt32_t
 
	mde¸_Á˘‹
;

32 } 
	tskù_li°_buckë_t
;

43 
	#SLIST_BKT_GET_NEXT
(
_bkt_
Ë((_bkt_)->
√xt
)

	)

44 
	#SLIST_BKT_GET_PREV
(
_bkt_
Ë((_bkt_)->
¥ev
)

	)

45 
	#SLIST_BKT_GET_HEAD
(
_bkt_
Ë((_bkt_)->
hód
)

	)

46 
	#SLIST_BKT_GET_KEY
(
_bkt_
Ë((_bkt_)->
buckë_key
)

	)

47 
	#SLIST_BKT_GET_NNODES
(
_bkt_
Ë((_bkt_)->
num_nodes
)

	)

49 
	#SLIST_NODE_GET_NEXT
(
_node_
Ë((_node_)->
√xt
)

	)

50 
	#SLIST_NODE_GET_PREV
(
_node_
Ë((_node_)->
¥ev
)

	)

51 
	#SLIST_NODE_GET_KEYL
(
_node_
Ë((_node_)->
node_key_lo
)

	)

52 
	#SLIST_NODE_GET_KEYH
(
_node_
Ë((_node_)->
node_key_hi
)

	)

53 
	#SLIST_NODE_GET_DATA
(
_node_
Ë((_node_)->
d©a
)

	)

58 
	#SLIST_BKT_SET_NEXT
(
_bkt_
, 
_vÆ_
Ë(((_bkt_)->
√xt
 = _vÆ_))

	)

59 
	#SLIST_BKT_SET_PREV
(
_bkt_
, 
_vÆ_
Ë(((_bkt_)->
¥ev
 = _vÆ_))

	)

60 
	#SLIST_BKT_SET_KEY
(
_bkt_
, 
_vÆ_
Ë(((_bkt_)->
buckë_key
 = _vÆ_))

	)

61 
	#SLIST_BKT_SET_HEAD
(
_bkt_
, 
_vÆ_
Ë(((_bkt_)->
hód
 = _vÆ_))

	)

62 
	#SLIST_BKT_SET_NNODES
(
_bkt_
, 
_vÆ_
Ë(((_bkt_)->
num_nodes
 = _vÆ_))

	)

64 
	#SLIST_NODE_SET_NEXT
(
_node_
, 
_vÆ_
Ë(((_node_)->
√xt
 = _vÆ_))

	)

65 
	#SLIST_NODE_SET_PREV
(
_node_
, 
_vÆ_
Ë(((_node_)->
¥ev
 = _vÆ_))

	)

66 
	#SLIST_NODE_SET_KEYL
(
_node_
, 
_vÆ_
Ë(((_node_)->
node_key_lo
 = _vÆ_))

	)

67 
	#SLIST_NODE_SET_KEYH
(
_node_
, 
_vÆ_
Ë(((_node_)->
node_key_hi
 = _vÆ_))

	)

68 
	#SLIST_NODE_SET_DATA
(
_node_
, 
_vÆ_
Ë(((_node_)->
d©a
 = _vÆ_))

	)

73 
	#SLIST_BKT_INC_NNODES
(
_bkt_
Ë((_bkt_)->
num_nodes
 +1)

	)

78 
	#SLIST_BKT_DEC_NNODES
(
_bkt_
Ë((_bkt_)->
num_nodes
 -1)

	)

83 
skù_li°_buckë_t
*

84 
skù_li°_gë_buckë
(
skù_li°_globÆ_t
 *
skù_li°_glb
,

85 
uöt32_t
 
buckë_key
);

87 
skù_li°_node_t
*

88 
skù_li°_gë_node
(
skù_li°_buckë_t
 *
£¨ch_buckë
,

89 
uöt32_t
 
node_key
);

91 
skù_li°_ö£π_buckë
(
skù_li°_globÆ_t
 *
skù_li°_glb
,

92 
skù_li°_buckë_t
* 
li°_buckë
);

94 
skù_li°_ö£π_node
(
skù_li°_buckë_t
 *
ö£π_buckë
,

95 
skù_li°_node_t
* 
öput_node
);

97 
skù_li°_ªmove_node
(
skù_li°_buckë_t
 *
öput_buckë
,

98 
uöt32_t
 
öput_key
);

100 
skù_li°_ªmove_buckë
(
skù_li°_globÆ_t
 *
skù_li°_glb
,

101 
skù_li°_buckë_t
** 
li°_buckë
);

103 
skù_li°_dbg_dump_buckë
(
skù_li°_buckë_t
 *
öput_buckë
);

104 
skù_li°_dbg_dump_node
(
skù_li°_node_t
 *
öput_node
);

	@user/libthread/thr_internals.h

6 #i‚de‡
THR_INTERNALS_H


7 
	#THR_INTERNALS_H


	)

9 
	~<muãx_ty≥.h
>

10 
	~<ty≥s.h
>

11 
	~"skù_li°_comm⁄.h
"

17 
	ttid_t
;

19 
	sthªad_ªu£_°ack_s
 {

21 *
	m°ack_lo
;

22 
thªad_ªu£_°ack_s
 *
	m√xt
;

24 } 
	tthªad_ªu£_°ack_t
;

30 
	stcb_s
 {

32 *
	mtcb_°ack_hi
;

33 *
	mtcb_°ack_lo
;

34 
tid_t
 
	mtid
;

35 
tid_t
 
	mkîn_tid
;

36 *
	mfunc
;

37 *
	m¨gs
;

38 *
	mªt_d©a
;

39 
muãx_t
 
	m£lf_muãx
;

40 
tcb_s
 *
	mwaôög_tcb
;

41 *
	mªt_vÆue
;

43 } 
	ttcb_t
;

45 
	stcb_zombõ_s
 {

47 
tid_t
 
	mtid
;

48 *
	mtcb_d©a
;

49 
tcb_zombõ_s
 *
	m√xt
;

51 } 
	ttcb_zombõ_t
;

56 
	sthªad_glbl_s
 {

58 *
	mmaö_°ack_hi
;

59 *
	mmaö_°ack_lo
;

60 *
	m‰ì_°ack_hi
;

61 *
	m‰ì_°ack_lo
;

62 *
	mªsv_°ack_hi
;

63 *
	mªsv_°ack_lo
;

64 
	mt°ack_size
;

65 
thªad_ªu£_°ack_t
 *
	mªu£_°acks
;

66 
muãx_t
 
	mglb_muãx
;

67 
skù_li°_globÆ_t
 
	mskù_li°
;

68 
tcb_t
 
	mmaö_tcb
;

69 
tcb_zombõ_t
 *
	mzombõ_thªads
;

70 
uöt32_t
 
	mbuckë_key_mask
;

72 } 
	tthªad_glbl_t
;

82 
	#MAIN_STACK_EXTRA_PAGES
 2

	)

83 
	#RESV_STACK_NUM_PAGES
 1

	)

84 
	#TID_NUM_INVALID
 0

	)

89 
	#THR_SUCCESS
 0

	)

90 
	#THR_ERROR
 -1

	)

91 
	#THR_ENOMEM
 -2

	)

92 
	#THR_TCB_INS_ERR
 -3

	)

99 
	#THR_TCB_GET_STKH
(
_tcb_
Ë((_tcb_Ë? ((_tcb_)->
tcb_°ack_hi
Ë: 
NULL
)

	)

100 
	#THR_TCB_GET_STKL
(
_tcb_
Ë((_tcb_Ë? ((_tcb_)->
tcb_°ack_lo
Ë: 
NULL
)

	)

101 
	#THR_TCB_GET_TID
(
_tcb_
Ë((_tcb_Ë? ((_tcb_)->
tid
Ë: 0)

	)

102 
	#THR_TCB_GET_KTID
(
_tcb_
Ë((_tcb_Ë? ((_tcb_)->
kîn_tid
Ë: 0)

	)

103 
	#THR_TCB_GET_FUNC
(
_tcb_
Ë((_tcb_Ë? ((_tcb_)->
func
Ë: 
NULL
)

	)

104 
	#THR_TCB_GET_ARGS
(
_tcb_
Ë((_tcb_Ë? ((_tcb_)->
¨gs
Ë: 
NULL
)

	)

105 
	#THR_TCB_GET_RDATA
(
_tcb_
Ë((_tcb_Ë? ((_tcb_)->
ªt_d©a
Ë: 
NULL
)

	)

106 
	#THR_TCB_GET_MUTEX_PTR
(
_tcb_
Ë((&((_tcb_)->
£lf_muãx
)))

	)

107 
	#THR_TCB_GET_WAIT_TCB
(
_tcb_
Ë(((_tcb_)->
waôög_tcb
))

	)

108 
	#THR_TCB_GET_RET_VAL
(
_tcb_
Ë(((_tcb_)->
ªt_vÆue
))

	)

111 
	#THR_TCB_SET_STKH
(
_tcb_
, 
_vÆ_
Ë((_tcb_Ë? ((_tcb_)->
tcb_°ack_hi
) \

112 
_vÆ_
 : 
NULL
)

	)

114 
	#THR_TCB_SET_STKL
(
_tcb_
, 
_vÆ_
Ë((_tcb_Ë? ((_tcb_)->
tcb_°ack_lo
) \

115 
_vÆ_
 : 
NULL
)

	)

117 
	#THR_TCB_SET_TID
(
_tcb_
, 
_vÆ_
Ë((_tcb_Ë? ((_tcb_)->
tid
Ë_vÆ_ : 0)

	)

119 
	#THR_TCB_SET_KTID
(
_tcb_
, 
_vÆ_
Ë((_tcb_Ë? ((_tcb_)->
kîn_tid
) = \

120 
_vÆ_
 : 0)

	)

122 
	#THR_TCB_SET_FUN
(
_tcb_
, 
_vÆ_
Ë((_tcb_Ë? ((_tcb_)->
func
) = _val_ \

123 : 
NULL
)

	)

125 
	#THR_TCB_SET_ARG
(
_tcb_
, 
_vÆ_
Ë((_tcb_Ë? ((_tcb_)->
¨gs
) = _val_ \

126 : 
NULL
)

	)

128 
	#THR_TCB_SET_RDATA
(
_tcb_
, 
_vÆ_
Ë((_tcb_Ë? ((_tcb_)->
ªt_d©a
) = \

129 
_vÆ_
 : 
NULL
)

	)

131 
	#THR_TCB_SET_WAIT_TCB
(
_tcb_
, 
_vÆ_
Ë(((_tcb_)->
waôög_tcb
Ë_vÆ_)

	)

132 
	#THR_TCB_SET_RET_VAL
(
_tcb_
, 
_vÆ_
Ë(((_tcb_)->
ªt_vÆue
Ë_vÆ_)

	)

137 
	#THR_GLB_GET_FSTKH
(
_glb_
Ë((_glb_)->
‰ì_°ack_hi
)

	)

138 
	#THR_GLB_GET_FSTKL
(
_glb_
Ë((_glb_)->
‰ì_°ack_lo
)

	)

139 
	#THR_GLB_GET_RSTKH
(
_glb_
Ë((_glb_)->
ªsv_°ack_hi
)

	)

140 
	#THR_GLB_GET_RSTKL
(
_glb_
Ë((_glb_)->
ªsv_°ack_lo
)

	)

141 
	#THR_GLB_GET_TSSIZE
(
_glb_
Ë((_glb_)->
t°ack_size
)

	)

142 
	#THR_GLB_GET_RSTACK
(
_glb_
Ë((_glb_)->
ªu£_°acks
)

	)

143 
	#THR_GLB_GET_MUTEX_PTR
(
_glb_
Ë((&((_glb_)->
glb_muãx
)))

	)

144 
	#THR_GLB_GET_SKPLST_PTR
(
_glb_
Ë((&((_glb_)->
skù_li°
)))

	)

145 
	#THR_GLB_GET_MAIN_TCB_PTR
(
_glb_
Ë(&((_glb_)->
maö_tcb
))

	)

146 
	#THR_GLB_GET_BKT_KEY_MASK
(
_glb_
Ë(((_glb_)->
buckë_key_mask
))

	)

149 
	#THR_GLB_SET_FSTKH
(
_glb_
, 
_vÆ_
Ë(((_glb_)->
‰ì_°ack_hi
Ë_vÆ_)

	)

150 
	#THR_GLB_SET_FSTKL
(
_glb_
, 
_vÆ_
Ë(((_glb_)->
‰ì_°ack_lo
Ë_vÆ_)

	)

151 
	#THR_GLB_SET_RSTKH
(
_glb_
, 
_vÆ_
Ë(((_glb_)->
ªsv_°ack_hi
Ë_vÆ_)

	)

152 
	#THR_GLB_SET_RSTKL
(
_glb_
, 
_vÆ_
Ë(((_glb_)->
ªsv_°ack_lo
Ë_vÆ_)

	)

153 
	#THR_GLB_SET_TSSIZE
(
_glb_
, 
_vÆ_
Ë(((_glb_)->
t°ack_size
Ë_vÆ_)

	)

154 
	#THR_GLB_SET_RSTACK
(
_glb_
, 
_vÆ_
Ë(((_glb_)->
ªu£_°acks
Ë_vÆ_)

	)

155 
	#THR_GLB_SET_BKT_KEY_MASK
(
_glb_
, 
_vÆ_
Ë(((_glb_)->
buckë_key_mask
) \

156 
_vÆ_
)

	)

163 
thr_öt_f‹k_c_wøµî
(
tcb_t
 **
√w_tcb
);

164 
tid_t
 
thr_öt_f‹k_asm_wøµî
(*
chûd_°ack_hi
);

165 
thr_öt_exô_asm_wøµî
(
muãx_t
 *
muãx
, *
√w_°ack_hi
,

166 *
ﬁd_°ack_lo
);

167 
tcb_t
 * 
thr_öt_¸óã_tcb
(*
°ack_hi
, *
°ack_lo
,

168 * (*
func
)(*), *
¨g
);

169 
thr_öt_ö£π_tcb
(
tcb_t
 *
tcb
);

170 * 
thr_öt_Æloˇã_°ack
(
°ack_size
, *
d©a
);

171 
thr_öt_dóŒoˇã_°ack
(*
ba£
);

172 
tid_t
 
thr_öt_Æloˇã_√w_tid
(*
°ack_lo
);

173 
thr_öt_dóŒoˇã_tid
(
tid_t
 
tid
);

174 
tid_t
 
thr_öt_f‹k_asm_wøµî
(*
chûd_°ack_hi
);

175 
tcb_t
* 
thr_öt_£¨ch_tcb_by_°k
(*
°ack_lo
);

176 
tcb_t
* 
thr_öt_£¨ch_tcb_by_tid
(
tid_t
 
tid
);

177 
tcb_öt_push_zombõ_thªad
(
tcb_t
 *
tcb
, *
tcb_d©a
);

178 
tcb_zombõ_t
 * 
tcb_öt_ªm_zombõ_thªad
(
tid_t
 
tid
);

	@user/libthread/thread.c

1 
	~<°dio.h
>

2 
	~<simics.h
>

3 
	~<sysˇŒ.h
>

4 
	~<sysˇŒ_öt.h
>

5 
	~<thr_öã∫Æs.h
>

6 
	~<°dlib.h
>

7 
	~<°rög.h
>

8 
	~<ty≥s.h
>

9 
	~<ønd.h
>

10 
	~<muãx.h
>

11 
	~"comm⁄.h
"

12 
	~"thªad_comm⁄.h
"

13 
	~"utû.h
"

14 
	~"skù_li°_comm⁄.h
"

19 
thªad_glbl_t
 
	gthªad_glbl
;

22 
	$thr_öô
–
öp_size
 )

24 
rc
 = 
SUCCESS
;

25 *
maö_°ack_hi
 = 
NULL
;

26 *
maö_°ack_lo
 = 
NULL
;

27 *
‰ì_°ack_hi
 = 
NULL
;

28 *
‰ì_°ack_lo
 = 
NULL
;

29 *
ªsv_°ack_hi
 = 
NULL
;

30 *
ªsv_°ack_lo
 = 
NULL
;

31 
tcb_t
 *
maö_tcb
 = 
NULL
;

32 
muãx_t
 *
£lf_muãx
 = 
NULL
;

33 
msb_pos
 = 0;

34 
uöt32_t
 
buckë_key_mask
 = ~(0x0);

35 
ãmp
 = 0;

37 
chûd_°ack_size
 = 0;

38 
muãx_t
 *
muãx
 = 
NULL
;

39 
skù_li°_globÆ_t
 *
skù_li°
 = 
NULL
;

47 
maö_°ack_hi
 = 
	`thr_gë_maö_°ackH
();

48 
maö_°ack_lo
 = 
	`thr_gë_maö_°ackL
();

50 i‡(!(
maö_°ack_hi
Ë|| (!
maö_°ack_lo
)) {

54 
	`Õrötf
("[DBG_%s], PANIC: stack_hi: %p or stack_lo: %p "

55 "övÆid \n", 
__FUNCTION__
, 
maö_°ack_hi
, 
maö_°ack_lo
);

57 
rc
 = 
ERROR
;

58  (
rc
);

65 
maö_tcb
 = 
	`THR_GLB_GET_MAIN_TCB_PTR
(&(
thªad_glbl
));

66 
	`THR_TCB_SET_STKH
(
maö_tcb
, 
maö_°ack_hi
);

67 
	`THR_TCB_SET_STKL
(
maö_tcb
, 
maö_°ack_lo
);

69 
£lf_muãx
 = 
	`THR_TCB_GET_MUTEX_PTR
(
maö_tcb
);

70 
	`muãx_öô
(
£lf_muãx
);

72 
skù_li°
 = 
	`THR_GLB_GET_SKPLST_PTR
((&
thªad_glbl
));

79 
chûd_°ack_size
 = ((
öp_size
 / 
PAGE_SIZE
) * PAGE_SIZE) +

80 ((
öp_size
 % 
PAGE_SIZE
) ? PAGE_SIZE : 0);

82 
	`THR_GLB_SET_TSSIZE
((&
thªad_glbl
), 
chûd_°ack_size
);

84 
msb_pos
 = 
	`utû_gë_msb
((*)(
chûd_°ack_size
));

85 
ãmp
 = 
	`utû_gë_msb
((*)(~0x0));

97 
ãmp
 = ((—em∞- 
msb_pos
)/2) + msb_pos);

98 
buckë_key_mask
 = ((~0x0Ë<< (
ãmp
));

99 
	`THR_GLB_SET_BKT_KEY_MASK
((&(
thªad_glbl
)), 
buckë_key_mask
);

101 
ªsv_°ack_hi
 = 
maö_°ack_lo
 -

102 (
MAIN_STACK_EXTRA_PAGES
 * 
PAGE_SIZE
)

103 - 
WSIZE
;

104 
ªsv_°ack_lo
 = (
ªsv_°ack_hi
 - 
PAGE_SIZE
 + 
WSIZE
);

106 
	`THR_GLB_SET_RSTKH
((&
thªad_glbl
), 
ªsv_°ack_hi
);

107 
	`THR_GLB_SET_RSTKL
((&
thªad_glbl
), 
ªsv_°ack_lo
);

113 
	`√w_∑ges
(
ªsv_°ack_lo
, (
PAGE_SIZE
 * 
RESV_STACK_NUM_PAGES
));

115 
‰ì_°ack_hi
 = 
ªsv_°ack_lo
 - 
WSIZE
;

116 
‰ì_°ack_lo
 = (
‰ì_°ack_hi
 - 
chûd_°ack_size
 + 
WSIZE
);

118 
	`THR_GLB_SET_FSTKH
((&
thªad_glbl
), 
‰ì_°ack_hi
);

119 
	`THR_GLB_SET_FSTKL
((&
thªad_glbl
), 
‰ì_°ack_lo
);

121 
muãx
 = 
	`THR_GLB_GET_MUTEX_PTR
(&
thªad_glbl
);

122 
	`muãx_öô
(
muãx
);

127 
	`skù_li°_öô
(
skù_li°
, 0, 0);

129 
	`Õrötf
("[DBG_%s],Ñesv_stack_hi: %p,Ñesv_stack_lo: %p \n",

130 
__FUNCTION__
, 
ªsv_°ack_hi
, 
ªsv_°ack_lo
);

132 
	`Õrötf
("[DBG_%s], free_stack_hi: %p, free_stack_lo: %p \n",

133 
__FUNCTION__
, 
‰ì_°ack_hi
, 
‰ì_°ack_lo
);

135  (
rc
);

136 
	}
}

139 
thr_¸óã
(* (*
func
)(*), *
¨g
)

141 
	grc
 = 
SUCCESS
;

142 *
	g°ack_lo
 = 
NULL
;

143 *
	g°ack_hi
 = 
NULL
;

144 
tcb_t
 *
	g√w_tcb
 = 
NULL
;

145 
tid_t
 
	g√w_tid
 = 
TID_NUM_INVALID
;

146 
	gchûd_°ack_size
 = 0;

147 
muãx_t
 *
	gmuãx
 = 
NULL
;

149 
Õrötf
("[DBG_%s], E¡î\n", 
__FUNCTION__
);

154 i‡((!
	gfunc
)) {

158 
Õrötf
("[DBG_%s], Invalid input, func: %p\n",

159 
__FUNCTION__
, 
func
);

160 
	grc
 = 
ERROR
;

161  (
	grc
);

164 
	gchûd_°ack_size
 = 
THR_GLB_GET_TSSIZE
(&
thªad_glbl
);

166 
	gmuãx
 = 
THR_GLB_GET_MUTEX_PTR
(&
thªad_glbl
);

167 
muãx_lock
(
muãx
);

169 
	g√w_tcb
 = 
thr_öt_¸óã_tcb
(
°ack_hi
, 
°ack_lo
, 
func
, 
¨g
);

170 i‡(!
	g√w_tcb
) {

175 
muãx_u∆ock
(
muãx
);

176 
Õrötf
("[DBG_%s], sèckáŒoˇti⁄ faûed \n", 
__FUNCTION__
);

177 
	grc
 = 
ERROR
;

178  (
	grc
);

184 
	g°ack_lo
 = 
thr_öt_Æloˇã_°ack
(
chûd_°ack_size
, 
√w_tcb
);

185 i‡(!
	g°ack_lo
) {

191 
muãx_u∆ock
(
muãx
);

192 
Õrötf
("[DBG_%s], sèckáŒoˇti⁄ faûed \n", 
__FUNCTION__
);

193 
	grc
 = 
ERROR
;

194  (
	grc
);

197 
	g°ack_hi
 = (
°ack_lo
 + 
chûd_°ack_size
 - 
WSIZE
);

198 
	g√w_tid
 = 
thr_öt_Æloˇã_√w_tid
(
°ack_lo
);

203 
THR_TCB_SET_TID
(
√w_tcb
, 
√w_tid
);

204 
THR_TCB_SET_STKH
(
√w_tcb
, 
°ack_hi
);

205 
THR_TCB_SET_STKL
(
√w_tcb
, 
°ack_lo
);

207 
Õrötf
("[DBG_%s], sèck_hi: %p, sèck_lo: %p, c°ack_size: %u \n", 
__FUNCTION__
, 
°ack_hi
, 
°ack_lo
, 
chûd_°ack_size
);

212 
	grc
 = 
thr_öt_ö£π_tcb
(
√w_tcb
);

214 i‡(
	grc
 !
THR_SUCCESS
) {

220 
muãx_u∆ock
(
muãx
);

221 
Õrötf
("[DBG_%s], TCB insertion failed withÑc: %d \n",

222 
__FUNCTION__
, 
rc
);

223 
	grc
 = 
ERROR
;

224  (
	grc
);

233 
thr_öt_f‹k_c_wøµî
(&
√w_tcb
);

235 
muãx_u∆ock
(
muãx
);

237  (
	g√w_tid
);

241 
	$thr_exô
(*
°©us
)

243 *
°ack_lo
 = 
NULL
;

244 *
cuº_°ack_±r
 = 
NULL
;

245 *
ªsv_°ack_hi
 = 
NULL
;

246 
°ack_lo_mask
 = 0;

247 
tcb_t
 *
my_tcb
 = 
NULL
;

248 
tcb_t
 *
waô_tcb
 = 
NULL
;

249 
muãx_t
 *
glb_muãx
 = 
NULL
;

250 
muãx_t
 *
waô_muãx
 = 
NULL
;

252 
cuº_°ack_±r
 = 
	`utû_gë_e•
();

253 
°ack_lo_mask
 = (~(
PAGE_SIZE
 - 1));

254 
°ack_lo
 = (*)((()
cuº_°ack_±r
Ë& 
°ack_lo_mask
);

256 
	`Õrötf
("[DBG_%s], sèck_lo: %∞\n", 
__FUNCTION__
, 
°ack_lo
);

258 
glb_muãx
 = 
	`THR_GLB_GET_MUTEX_PTR
(&
thªad_glbl
);

259 
ªsv_°ack_hi
 = 
	`THR_GLB_GET_RSTKH
(&
thªad_glbl
);

261 
	`muãx_lock
(
glb_muãx
);

263 
	`Õrötf
("[DBG_%s], INSIDE THR_EXIT \n", 
__FUNCTION__
);

268 
my_tcb
 = 
	`thr_öt_£¨ch_tcb_by_°k
(
°ack_lo
);

270 i‡(!
my_tcb
) {

276 
	`Õrötf
("[DBG_%s], search based on stk: %p failed \n",

277 
__FUNCTION__
, 
°ack_lo
);

278 
	`muãx_u∆ock
(
glb_muãx
);

279 
	`v™ish
();

282 
°ack_lo
 = 
	`THR_TCB_GET_STKL
(
my_tcb
);

287 
waô_tcb
 = 
	`THR_TCB_GET_WAIT_TCB
(
my_tcb
);

289 i‡(
waô_tcb
) {

294 
waô_muãx
 = 
	`THR_TCB_GET_MUTEX_PTR
(
waô_tcb
);

299 
	`THR_TCB_SET_RET_VAL
(
waô_tcb
, 
°©us
);

300 
	`muãx_u∆ock
(
waô_muãx
);

307 
	`tcb_öt_push_zombõ_thªad
(
my_tcb
, 
°©us
);

313 
	`thr_öt_dóŒoˇã_°ack
(
°ack_lo
);

318 
	`‰ì
(
my_tcb
);

319 
my_tcb

NULL
;

324 
	`thr_öt_exô_asm_wøµî
(
glb_muãx
, 
ªsv_°ack_hi
, 
°ack_lo
);

327 
	}
}

330 
	$thr_joö
(
tid
, **
°©u•
)

332 
tcb_t
 *
thr_tcb
 = 
NULL
;

333 
tcb_t
 *
my_tcb
 = 
NULL
;

334 
muãx_t
 *
glb_muãx
 = 
NULL
;

335 
muãx_t
 *
£lf_muãx
 = 
NULL
;

336 
tid_t
 
thr_tid
 = 0;

337 *
°ack_lo
 = 
NULL
;

338 *
cuº_°ack_lo
 = 
NULL
;

339 
°ack_lo_mask
 = 0;

340 
tcb_zombõ_t
 *
zombõ_tcb
 = 
NULL
;

341 
rc
 = 
SUCCESS
;

343 
°ack_lo_mask
 = (~(
PAGE_SIZE
 - 1));

344 
cuº_°ack_lo
 = 
	`utû_gë_ebp
();

349 
cuº_°ack_lo
 = (*)(()cuº_°ack_lÿ& 
°ack_lo_mask
);

351 
glb_muãx
 = 
	`THR_GLB_GET_MUTEX_PTR
(&
thªad_glbl
);

353 i‡(!
glb_muãx
) {

357 
	`Õrötf
("[DBG_%s], Glb muãx i†NULL \n", 
__FUNCTION__
);

358 
rc
 = 
ERROR
;

359  (
rc
);

362 
	`muãx_lock
(
glb_muãx
);

364 
	`Õrötf
("[DBG_%s], INSIDE THR_JOIN \n", 
__FUNCTION__
);

369 
thr_tcb
 = 
	`thr_öt_£¨ch_tcb_by_tid
(
tid
);

371 i‡(!
thr_tcb
) {

375 
zombõ_tcb
 = 
	`tcb_öt_ªm_zombõ_thªad
(
tid
);

377 i‡(!
zombõ_tcb
) {

383 
rc
 = 
ERROR
;

391 i‡(
°©u•
) {

392 *
°©u•
 = 
zombõ_tcb
->
tcb_d©a
;

395 
	`‰ì
(
zombõ_tcb
);

396 
zombõ_tcb
 = 
NULL
;

399 
	`muãx_u∆ock
(
glb_muãx
);

400  (
rc
);

403 
°ack_lo
 = 
	`THR_TCB_GET_STKL
(
thr_tcb
);

404 
thr_tid
 = 
	`THR_TCB_GET_TID
(
thr_tcb
);

406 i‡(
thr_tid
 !
tid
) {

412 
zombõ_tcb
 = 
	`tcb_öt_ªm_zombõ_thªad
(
tid
);

413 i‡(!
zombõ_tcb
) {

419 
rc
 = 
ERROR
;

427 i‡(
°©u•
) {

428 *
°©u•
 = 
zombõ_tcb
->
tcb_d©a
;

431 
	`‰ì
(
zombõ_tcb
);

432 
zombõ_tcb
 = 
NULL
;

435 
	`muãx_u∆ock
(
glb_muãx
);

436  (
rc
);

439 
my_tcb
 = 
	`thr_öt_£¨ch_tcb_by_°k
(
cuº_°ack_lo
);

441 i‡(!
my_tcb
) {

446 
	`Õrötf
("[DBG_%s], MyÅcb NULL for stack: %p\n",

447 
__FUNCTION__
, 
cuº_°ack_lo
);

448 
	`muãx_u∆ock
(
glb_muãx
);

449 
rc
 = 
ERROR
;

450  (
rc
);

453 
£lf_muãx
 = 
	`THR_TCB_GET_MUTEX_PTR
(
my_tcb
);

455 i‡(!
£lf_muãx
) {

459 
	`Õrötf
("[DBG_%s], Sñ‡muãx i†NULL \n", 
__FUNCTION__
);

460 
rc
 = 
ERROR
;

461  (
rc
);

469 
	`muãx_lock
(
£lf_muãx
);

471 
	`THR_TCB_SET_WAIT_TCB
(
thr_tcb
, 
my_tcb
);

473 
	`muãx_u∆ock
(
glb_muãx
);

481 
	`muãx_lock
(
£lf_muãx
);

483 i‡(
°©u•
) {

487 *
°©u•
 = 
	`THR_TCB_GET_RET_VAL
(
my_tcb
);

490 
	`muãx_u∆ock
(
£lf_muãx
);

492  (
rc
);

493 
	}
}

496 
	$thr_gëid
()

498 *
cuº_°ack_±r
 = 
NULL
;

499 *
°ack_lo
 = 
NULL
;

500 
°ack_lo_mask
 = 0;

501 
muãx_t
 *
glb_muãx
 = 
NULL
;

502 
tcb_t
 *
my_tcb
 = 
NULL
;

503 
tid_t
 
ªt_tid
 = 0;

505 
glb_muãx
 = 
	`THR_GLB_GET_MUTEX_PTR
(&
thªad_glbl
);

507 i‡(!
glb_muãx
) {

511 
	`Õrötf
("[DBG_%s], Glb muãx i†NULL \n", 
__FUNCTION__
);

512  (
ªt_tid
);

515 
cuº_°ack_±r
 = 
	`utû_gë_e•
();

516 
°ack_lo_mask
 = (~(
PAGE_SIZE
 - 1));

517 
°ack_lo
 = (*)((()
cuº_°ack_±r
Ë& 
°ack_lo_mask
);

519 
	`muãx_lock
(
glb_muãx
);

521 
my_tcb
 = 
	`thr_öt_£¨ch_tcb_by_°k
(
°ack_lo
);

523 i‡(!
my_tcb
) {

528 
	`Õrötf
("[DBG_%s], my_tcb NULL for stack: %p \n",

529 
__FUNCTION__
, 
°ack_lo
);

531 
	`muãx_u∆ock
(
glb_muãx
);

532  (
ªt_tid
);

535 
ªt_tid
 = 
	`THR_TCB_GET_TID
(
my_tcb
);

537 
	`muãx_u∆ock
(
glb_muãx
);

539  (
ªt_tid
);

540 
	}
}

543 
	$thr_yõld
(
tid
)

545 
muãx_t
 *
glb_muãx
 = 
NULL
;

546 
tcb_t
 *
Ÿhî_tcb
 = 
NULL
;

547 
rc
 = 
SUCCESS
;

549 
glb_muãx
 = 
	`THR_GLB_GET_MUTEX_PTR
(&
thªad_glbl
);

551 i‡(!
glb_muãx
) {

555 
	`Õrötf
("[DBG_%s], Glb muãx i†NULL \n", 
__FUNCTION__
);

556 
rc
 = 
ERROR
;

557  (
rc
);

561 i‡(
tid
 != -1) {

563 
	`muãx_lock
(
glb_muãx
);

570 
Ÿhî_tcb
 = 
	`thr_öt_£¨ch_tcb_by_tid
(
tid
);

572 i‡(!
Ÿhî_tcb
) {

576 
	`Õrötf
("[DBG_%s], Sórch f‹Åid: %d faûed \n", 
__FUNCTION__
, 
tid
);

577 
	`muãx_u∆ock
(
glb_muãx
);

578 
rc
 = 
ERROR
;

579  (
rc
);

582 
tid
 = 
	`THR_TCB_GET_KTID
(
Ÿhî_tcb
);

583 
	`muãx_u∆ock
(
glb_muãx
);

586 
rc
 = 
	`yõld
(
tid
);

588  (
rc
);

589 
	}
}

595 
	$thr_£t_maö_°ackH
(*
öput
)

597 
thªad_glbl
.
maö_°ack_hi
 = 
öput
;

599 
	}
}

602 
	$thr_£t_maö_°ackL
(*
öput
)

604 
thªad_glbl
.
maö_°ack_lo
 = 
öput
;

606 
	}
}

609 
	$thr_gë_maö_°ackH
()

611  (
thªad_glbl
.
maö_°ack_hi
);

612 
	}
}

615 
	$thr_gë_maö_°ackL
()

617  (
thªad_glbl
.
maö_°ack_lo
);

618 
	}
}

626 
	$thr_öt_Æloˇã_°ack
(
°ack_size
, *
li°_d©a
)

628 *
°ack_±r_lo
 = 
NULL
;

629 *
°ack_±r_hi
 = 
NULL
;

630 
rc
 = 0;

631 
thªad_ªu£_°ack_t
 *
ªu£_°ack
 = 
NULL
;

632 *
√w_‰ì_°ack_lo
 = 
NULL
;

633 *
√w_‰ì_°ack_hi
 = 
NULL
;

634 
chûd_°ack_size
 = 
	`THR_GLB_GET_TSSIZE
(&
thªad_glbl
);

635 
skù_li°_globÆ_t
 *
skù_li°
 = 
NULL
;

636 
uöt32_t
 
buckë_key_ödex
 = 0;

638 
ªu£_°ack
 = 
	`THR_GLB_GET_RSTACK
(&
thªad_glbl
);

640 i‡(!
ªu£_°ack
) {

642 
°ack_±r_lo
 = 
	`THR_GLB_GET_FSTKL
(&
thªad_glbl
);

649 
√w_‰ì_°ack_hi
 = 
°ack_±r_lo
 - 
WSIZE
;

650 
√w_‰ì_°ack_lo
 = (
√w_‰ì_°ack_hi
 - 
chûd_°ack_size
 + 
WSIZE
);

652 
	`THR_GLB_SET_FSTKH
(&
thªad_glbl
, 
√w_‰ì_°ack_hi
);

653 
	`THR_GLB_SET_FSTKL
(&
thªad_glbl
, 
√w_‰ì_°ack_lo
);

666 
rc
 = 
	`√w_∑ges
(
°ack_±r_lo
, 
°ack_size
);

668 i‡(
rc
 < 0) {

672 
	`Õrötf
("[DBG_%s], Pageállocation failed withÑc: %d \n",

673 
__FUNCTION__
, 
rc
);

674 
°ack_±r_lo
 = 
NULL
;

676  (
°ack_±r_lo
);

679 
°ack_±r_hi
 = (
°ack_±r_lo
 + 
°ack_size
 - 
WSIZE
);

681 
skù_li°
 = 
	`THR_GLB_GET_SKPLST_PTR
((&
thªad_glbl
));

683 
buckë_key_ödex
 = ((
uöt32_t
)(
°ack_±r_lo
) &

684 (
	`THR_GLB_GET_BKT_KEY_MASK
(&(
thªad_glbl
))));

689 
	`Õrötf
("[DBG_%s], In£πög sèckÖå_»: %p, sèck_±r_h: %∞\n", 
__FUNCTION__
, 
°ack_±r_lo
, 
°ack_±r_hi
);

690 
	`skù_li°_ö£π
(
skù_li°
, 
buckë_key_ödex
,

691 ((
uöt32_t
)(
°ack_±r_lo
)), ((uöt32_t)(
°ack_±r_hi
)),

692 
li°_d©a
);

694  (
°ack_±r_lo
);

695 
	}
}

698 
	$thr_öt_dóŒoˇã_°ack
(*
ba£
)

700 
skù_li°_globÆ_t
 *
skù_li°
 = 
NULL
;

701 
uöt32_t
 
buckë_key_ödex
 = 0;

703 
	`Õrötf
("[DBG_%s], InsidêdóŒoˇã sèck, :%∞\n", 
__FUNCTION__
, 
ba£
);

705 i‡(!
ba£
)

708 
skù_li°
 = 
	`THR_GLB_GET_SKPLST_PTR
((&
thªad_glbl
));

714 
buckë_key_ödex
 = ((
uöt32_t
)(
ba£
) &

715 (
	`THR_GLB_GET_BKT_KEY_MASK
(&(
thªad_glbl
))));

717 
	`skù_li°_ªmove
(
skù_li°
, 
buckë_key_ödex
, ((
uöt32_t
)
ba£
));

723 
	`Õrötf
("[DBG_%s], Exô dóŒoˇã sèck \n", 
__FUNCTION__
);

726 
	}
}

729 
	$thr_öt_f‹k_c_wøµî
(
tcb_t
 **
öput_tcb
)

731 
tid_t
 
chûd_tid
 = 0;

732 *
chûd_°ack_hi
 = 
NULL
;

733 
tcb_t
 *
√w_tcb
 = *
öput_tcb
;

736 *
ãmp_•
 = 
NULL
;

737 *
ãmp_bp
 = 
NULL
;

743 * (*
func
)(*Ë
NULL
;

744 *
¨gs
 = 
NULL
;

745 *
chûd_rc
 = 
NULL
;

747 i‡(!
√w_tcb
) {

754 
chûd_°ack_hi
 = 
	`THR_TCB_GET_STKH
(
√w_tcb
);

755 
	`Õrötf
("[DBG_%s], Chûd sèck_hi: %∞\n", 
__FUNCTION__
, 
chûd_°ack_hi
);

757 
chûd_tid
 = 
	`thr_öt_f‹k_asm_wøµî
(
chûd_°ack_hi
 - 
WSIZE
);

759 i‡(
chûd_tid
) {

764 
	`THR_TCB_SET_KTID
(
√w_tcb
, 
chûd_tid
);

773 
func
 = 
	`THR_TCB_GET_FUNC
(
√w_tcb
);

774 
¨gs
 = 
	`THR_TCB_GET_ARGS
(
√w_tcb
);

779 
chûd_rc
 = (*
func
Ë(
¨gs
);

786 
	`thr_exô
(
chûd_rc
);

790 
	}
}

792 
tcb_t
 *

793 
thr_öt_¸óã_tcb
(*
°ack_hi
, *
°ack_lo
,

794 * (*
func
)(*), *
¨g
)

796 
tcb_t
 *
	g√w_tcb
 = 
NULL
;

797 
muãx_t
 *
	g£lf_muãx
 = 
NULL
;

799 
	g√w_tcb
 = 
mÆloc
((
tcb_t
));

800 
mem£t
(
√w_tcb
, 0, (
tcb_t
));

805 
THR_TCB_SET_STKH
(
√w_tcb
, 
°ack_hi
);

806 
THR_TCB_SET_STKL
(
√w_tcb
, 
°ack_lo
);

807 
THR_TCB_SET_FUN
(
√w_tcb
, 
func
);

808 
THR_TCB_SET_ARG
(
√w_tcb
, 
¨g
);

814 
	g£lf_muãx
 = 
THR_TCB_GET_MUTEX_PTR
(
√w_tcb
);

819 
muãx_öô
(
£lf_muãx
);

821  (
	g√w_tcb
);

825 
	$thr_öt_ö£π_tcb
(
tcb_t
 *
tcb
)

827 
rc
 = 
THR_SUCCESS
;

828  (
rc
);

829 
	}
}

831 
tid_t


832 
	$thr_öt_Æloˇã_√w_tid
(*
°ack_lo
)

834 
°ack_lo_mask
 = 0;

835 
ønd_num
 = 0;

836 
tid_t
 
√w_tid
 = 
TID_NUM_INVALID
;

838 
°ack_lo_mask
 = (~((
PAGE_SIZE
/2) - 1));

839 
	`Õrötf
("[DBG_%s]: sèck_lo_mask: %x\n", 
__FUNCTION__
, 
°ack_lo_mask
);

844 
√w_tid
 = (()
°ack_lo
Ë& (
°ack_lo_mask
);

845 
	`Õrötf
("[DBG_%s]: sèck_lo: %p, Gíî©edÇewÅid I : %x\n", 
__FUNCTION__
, 
°ack_lo
, 
√w_tid
);

851 
√w_tid
 = (new_tid >> 1);

852 
	`Õrötf
("[DBG_%s]: sèck_lo: %p, Gíî©edÇewÅid II : %x\n", 
__FUNCTION__
, 
°ack_lo
, 
√w_tid
);

857 
ønd_num
 = (
	`gíønd
(Ë% (
PAGE_SIZE
/2));

862 
√w_tid
 = (“ew_tid | 
ønd_num
) & (0x7fffffff));

864 
	`Õrötf
("[DBG_%s]: Gíî©edÇewÅid III : %x\n", 
__FUNCTION__
, 
√w_tid
);

866  (
√w_tid
);

867 
	}
}

871 
	$thr_öt_gë_ªu£_node
(
thªad_ªu£_°ack_t
 **
öput
)

873 *
ªt_±r
 = 
NULL
;

874 
thªad_ªu£_°ack_t
 *
ªu£_node_hód
 = *
öput
;

876 i‡(!
ªu£_node_hód
) {

882 
	`Õrötf
("[DBG_%s], ERR: function called"

883 " wôh NULL hódî\n", 
__FUNCTION__
);

885  (
NULL
);

888 
ªt_±r
 = 
ªu£_hód_node
->
°ack_lo
;

893 
	`THR_GLB_SET_RSTACK
(&
thªad_glbl
, 
ªu£_hód_node
->
hód
);

894 
	`‰ì
(*
öput
);

896  (
ªt_±r
);

897 
	}
}

900 
tcb_t
 *

901 
	$thr_öt_£¨ch_tcb_by_°k
(*
°ack_lo
)

903 
tcb_t
 *
tcb
 = 
NULL
;

904 
skù_li°_globÆ_t
 *
skù_li°
 = 
NULL
;

905 
uöt32_t
 
buckë_key_ödex
 = 0;

907 
skù_li°
 = 
	`THR_GLB_GET_SKPLST_PTR
(&(
thªad_glbl
));

909 i‡(!
skù_li°
)

910  
NULL
;

912 
	`Õrötf
("[DBG_%s], sórchög sèckÖå : %∞\n", 
__FUNCTION__
, 
°ack_lo
);

914 
buckë_key_ödex
 = ((
uöt32_t
)(
°ack_lo
) &

915 (
	`THR_GLB_GET_BKT_KEY_MASK
(&(
thªad_glbl
))));

917 
tcb
 = 
	`skù_li°_föd
(
skù_li°
, 
buckë_key_ödex
, ((
uöt32_t
)(
°ack_lo
)));

919 i‡(!
tcb
) {

921 
	`Õrötf
("[DBG_%s], sórchög sèckÖå : %∞, faûed \n", 
__FUNCTION__
, 
°ack_lo
);

922 
	`Õrötf
("[DBG_%s], sèck_hò: %∞, sèck_lo: %∞\n", 
__FUNCTION__
, 
	`thr_gë_maö_°ackH
(), 
	`thr_gë_maö_°ackL
());

927 i‡(((
uöt32_t
)
°ack_lo
 >(uöt32_t)
	`thr_gë_maö_°ackL
()) &&

928 ((
uöt32_t
)
°ack_lo
 <(uöt32_t)
	`thr_gë_maö_°ackH
())) {

930 
	`Õrötf
("[DBG_%s], It†®maöÅhªad \n", 
__FUNCTION__
);

931 
tcb
 = 
	`THR_GLB_GET_MAIN_TCB_PTR
(&
thªad_glbl
);

939  (
tcb
);

940 
	}
}

942 
tcb_t
*

943 
	$thr_öt_£¨ch_tcb_by_tid
(
tid_t
 
tid
)

945 
°ack_lo_mask
 = 0;

946 *
°ack_lo
 = 
NULL
;

947 
tcb_t
 *
ªt_tcb
 = 
NULL
;

949 
°ack_lo_mask
 = (~((
PAGE_SIZE
/2) - 1));

955 
°ack_lo
 = (*)((
tid
 & 
°ack_lo_mask
) << 1);

957 
	`Õrötf
("[DBG_%s], sèck_lo: %∞\n", 
__FUNCTION__
, 
°ack_lo
);

959 
ªt_tcb
 = 
	`thr_öt_£¨ch_tcb_by_°k
(
°ack_lo
);

961  (
ªt_tcb
);

962 
	}
}

965 
	$tcb_öt_push_zombõ_thªad
(
tcb_t
 *
tcb
, *
tcb_d©a
)

967 
tid_t
 
öput_tid
 = 0;

968 
tcb_zombõ_t
 *
tcb_zombõ_node
 = 
NULL
;

969 
tcb_zombõ_t
 *
tcb_zombõ_hód
 = 
NULL
;

971 i‡(!
tcb
) {

975 
	`Õrötf
("[DBG_%s], InvÆid i≈uà\n", 
__FUNCTION__
);

982 
öput_tid
 = 
	`THR_TCB_GET_TID
(
tcb
);

983 
tcb_zombõ_node
 = 
	`ˇŒoc
(1, (
tcb_zombõ_t
));

985 
tcb_zombõ_node
->
tid
 = 
öput_tid
;

986 
tcb_zombõ_node
->
tcb_d©a
 =Åcb_data;

987 
tcb_zombõ_node
->
√xt
 = 
NULL
;

989 
tcb_zombõ_hód
 = 
thªad_glbl
.
zombõ_thªads
;

990 
thªad_glbl
.
zombõ_thªads
 = 
tcb_zombõ_node
;

993 i‡(
tcb_zombõ_hód
) {

997 
tcb_zombõ_node
->
√xt
 = 
tcb_zombõ_hód
;

1001 
	}
}

1003 
tcb_zombõ_t
 *

1004 
	$tcb_öt_ªm_zombõ_thªad
(
tid_t
 
öput_tid
)

1007 
tcb_zombõ_t
 *
tcb_ªt_node
 = 
NULL
;

1008 
tcb_zombõ_t
 *
tcb_zombõ_hód
 = 
NULL
;

1009 
tcb_zombõ_t
 *
tcb_¥ev_node
 = 
NULL
;

1011 
tcb_zombõ_hód
 = 
thªad_glbl
.
zombõ_thªads
;

1013 
tcb_zombõ_hód
) {

1015 i‡(
tcb_zombõ_hód
->
tid
 =
öput_tid
) {

1020 
tcb_ªt_node
 = 
tcb_zombõ_hód
;

1024 
tcb_¥ev_node
 = 
tcb_zombõ_hód
;

1025 
tcb_zombõ_hód
 =Åcb_zombõ_hód->
√xt
;

1028 i‡(!
tcb_ªt_node
) {

1032 
	`Õrötf
("[DBG_%s], M©ch faûed f‹ %d \n", 
__FUNCTION__
, 
öput_tid
);

1033  (
NULL
);

1039 i‡(
tcb_¥ev_node
) {

1041 
tcb_¥ev_node
->
√xt
 = 
tcb_ªt_node
->next;

1048 
thªad_glbl
.
zombõ_thªads
 = 
tcb_ªt_node
->
√xt
;

1054 
tcb_ªt_node
->
√xt
 = 
NULL
;

1056  (
tcb_ªt_node
);

1057 
	}
}

	@user/progs/cond_test.c

1 
	~<°dio.h
>

2 
	~<thªad.h
>

3 
	~<muãx_ty≥.h
>

4 
	~<muãx.h
>

5 
	~<c⁄d.h
>

6 
	~<simics.h
>

7 
	~<sysˇŒ.h
>

9 
	#NUM_THREADS
 3

	)

10 
	#TCOUNT
 10

	)

11 
	#COUNT_LIMIT
 12

	)

13 
muãx_t
 
	gcou¡_lock
;

14 
muãx_t
 
	gmp
;

15 
c⁄d_t
 
	gcou¡_n⁄zîo
, 
	gc⁄d2
;

16 
	gcou¡
 = 0 ;

17 
	gtid1
 = 0;

18 
	gtid2
 = 0;

20 
	$de¸emít_cou¡
()

22 
	`¥ötf
("***********Thread decrement in \n");

24 
	`muãx_lock
(&
cou¡_lock
);

26 i‡(
cou¡
 == 0) {

28 
	`¥ötf
("%s: A·î sÀï \n", 
__FUNCTION__
);

30 
	`c⁄d_waô
(&
cou¡_n⁄zîo
, &
cou¡_lock
);

32 
	`¥ötf
("[DBG_%s], A·î c⁄d_waô \n", 
__FUNCTION__
);

34 
	`c⁄d_waô
(&
c⁄d2
, &
cou¡_lock
);

36 
	`¥ötf
("[DBG_%s], A·î c⁄d_waô II \n", 
__FUNCTION__
);

40 
cou¡
 = count - 1;

42 
	`muãx_u∆ock
(&
cou¡_lock
);

44 
	`¥ötf
("Thread decrement out \n");

45 
	}
}

47 
	$ö¸emít_cou¡
()

49 
	`¥ötf
("***********Thread increment in \n");

50 
	`¶ìp
(10);

52 
	`muãx_lock
(&
cou¡_lock
);

54 i‡(
cou¡
 == 0)

55 
	`c⁄d_sig«l
(&
cou¡_n⁄zîo
);

57 
cou¡
 = count + 1;

59 
	`muãx_u∆ock
(&
cou¡_lock
);

60 
	`¥ötf
("Thread increment out \n");

61 
	}
}

63 *
	$thªad1
(*
öput_¨gs
)

65 
	`¥ötf
("***********Thread 1 in \n");

66 
	`de¸emít_cou¡
();

67 
	`¥ötf
("De¸emíàcou¡ = %d\n",
cou¡
);

68 
	`¥ötf
("Thread 1 out \n");

69  (
NULL
);

70 
	}
}

73 * 
	$thªad2
(*
öput_¨gs
)

75 
	`¥ötf
("***********Thread 2 in \n");

77 
	`ö¸emít_cou¡
();

78 
	`¥ötf
("In¸emíàcou¡ = %d\n",
cou¡
);

79 
	`¥ötf
("Thread 2 out \n");

80  (
NULL
);

81 
	}
}

83 
	$maö
()

85 
rm
 = 0, 
rc
 =0 ;

86 
¨gs1
 = 1;

87 
¨gs2
 = 2;

89 
rc
 = 
	`thr_öô
(10);

91 
rm
 = 
	`muãx_öô
(&
cou¡_lock
);

93 
	`c⁄d_öô
(&
cou¡_n⁄zîo
);

94 
	`c⁄d_öô
(&
c⁄d2
);

96 
tid1
 = 
	`thr_¸óã
(
thªad1
, (*)(&(
¨gs1
)));

98 
	`Õrötf
("[APP_%s],á·îÅhr_¸óãÅid = %d\n", 
__FUNCTION__
, 
tid1
);

100 
tid2
 = 
	`thr_¸óã
(
thªad2
, (*)(&(
¨gs2
)));

103 
	}
}

	@user/progs/excellence_temp.c

1 
	~<°dlib.h
>

2 
	~<°ddef.h
>

3 
	~<°dio.h
>

5 
	~<sysˇŒ.h
>

6 
	~<thªad.h
>

7 
	~<ã°.h
>

10 *
	$w‹kî
(* 
öput
)

12 i‡((
	`gëtid
() % 3) == 0) {

13 
	`¥ötf
("***********************************************************************\n");

14 
	`¥ötf
("* I believe ourádventureÅhroughÅime hasÅakená most seriousÅurn. *\n");

15 
	`¥ötf
("***********************************************************************\n");

17  
öput
;

18 
	}
}

21 
	$maö
(
¨gc
, *
¨gv
[])

23 
tid
, 
îr‹
, 
™swî
=69;

24 *
t°©us
;

26 i‡(
	`thr_öô
(65536) < 0) {

27 
	`¥ötf
("BOGUS:Åhr_init() failed!");

30 i‡(
	`thr_öô
(65) < 0) {

31 
	`¥ötf
("BOGUS:Åhr_init() failed!");

36 i‡((
tid
 = 
	`thr_¸óã
(
w‹kî
, (*)
™swî
)) < 0) {

37 
	`¥ötf
("HEINOUS:Åhr_create() failed!");

40 i‡((
îr‹
 = 
	`thr_joö
(
tid
, &
t°©us
)) != 0) {

41 
	`¥ötf
("MOST NON-TRIUMPHANT:Åhr_join() failed!");

44 i‡(()
t°©us
 !
™swî
) {

45 
	`¥ötf
("BOGUS!!");

48 
	`¥ötf
("*******************************\n");

49 
	`¥ötf
("* BeÉxcellentÅoÉach other. *\n");

50 
	`¥ötf
("*******************************\n");

52 
	}
}

	@user/progs/mutex_test.c

1 
	~<°dio.h
>

2 
	~<thªad.h
>

3 
	~<muãx_ty≥.h
>

4 
	~<muãx.h
>

5 
	~<simics.h
>

6 
	~<sysˇŒ.h
>

10 
muãx_t
 
	gmp
 ;

13 
	$maö
()

15 
rm
 = 0;

16 
rm
 = 
	`muãx_öô
(&
mp
);

18 
	`muãx_lock
(&
mp
);

19 
	`muãx_u∆ock
(&
mp
);

20 
	`muãx_lock
(&
mp
);

23 
	}
}

	@user/progs/paraguay_temp.c

14 
	~<sysˇŒ.h
>

15 
	~<°dlib.h
>

16 
	~<thªad.h
>

17 
	~<muãx.h
>

18 
	~<c⁄d.h
>

19 
	~"410_ã°s.h
"

20 
	~<ªp‹t.h
>

21 
	~<ã°.h
>

22 
	~<°dio.h
>

24 
DEF_TEST_NAME
("paraguay:");

26 
	#MISBEHAVE_MAX
 64

	)

28 
	#STACK_SIZE
 4096

	)

30 
	#ERR
 
REPORT_FAILOUT_ON_ERR


	)

32 
muãx_t
 
	glock1
, 
	glock2
;

33 
c⁄d_t
 
	gcv¨1
, 
	gcv¨2
;

35 
	g¶ït1
 = 0;

36 
	gsig«Àd1
 = 0;

37 
	g¶ït2
 = 0;

38 
	gsig«Àd2
 = 0;

40 *
	$thªad1
(*
dummy
)

42 
Áûed
 = 0;

45 
	`muãx_lock
(&
lock1
);

46 
¶ït1
 = 1;

47 
	`ªp‹t_misc
("thread1 sleeping on cvar1");

48 
	`c⁄d_waô
(&
cv¨1
, &
lock1
);

49 i‡(!
sig«Àd1
) {

50 
Áûed
 = 1;

51 
	`ªp‹t_misc
("woke up from cvar1 withoutá signal!");

52 
	`ªp‹t_íd
(
END_FAIL
);

54 
	`muãx_u∆ock
(&
lock1
);

57 
	`muãx_lock
(&
lock2
);

58 
¶ït2
 = 1;

60 
	`¥ötf
("thread1 sleeping on cvar2\n");

61 
	`c⁄d_waô
(&
cv¨2
, &
lock2
);

62 
	`¥ötf
("thread1 sleeping on cvar2\n");

64 i‡(!
sig«Àd2
) {

65 
Áûed
 = 1;

66 
	`ªp‹t_misc
("woke up from cvar2 withoutá signal!");

67 
	`ªp‹t_íd
(
END_FAIL
);

70 
	`muãx_u∆ock
(&
lock2
);

72 i‡(!
Áûed
) {

73 
	`ªp‹t_íd
(
END_SUCCESS
);

76  
NULL
;

77 
	}
}

80 
	$maö
()

82 
	`ªp‹t_°¨t
(
START_CMPLT
);

84 
	`assuªdly_misbehave
((
	`ønd
(Ë% 521Ë% 
MISBEHAVE_MAX
);

86 
	`ERR
(
	`thr_öô
(
STACK_SIZE
));

87 
	`ERR
(
	`muãx_öô
(&
lock1
));

88 
	`ERR
(
	`muãx_öô
(&
lock2
));

89 
	`ERR
(
	`c⁄d_öô
(&
cv¨1
));

90 
	`ERR
(
	`c⁄d_öô
(&
cv¨2
));

92 
	`ERR
(
	`thr_¸óã
(
thªad1
, 
NULL
));

93 
	`ªp‹t_misc
("thread1 created");

96 
	`muãx_lock
(&
lock1
);

97 !
¶ït1
) {

98 
	`muãx_u∆ock
(&
lock1
);

99 
	`thr_yõld
(-1);

100 
	`muãx_lock
(&
lock1
);

103 
sig«Àd1
 = 1;

104 
	`muãx_u∆ock
(&
lock1
);

108 
	`¥ötf
("cvar1 B4 signaled \n");

109 
	`c⁄d_sig«l
(&
cv¨1
);

110 
	`¥ötf
("cvar1 After signaled \n");

112 
	`¶ìp
(10);

114 
	`¥ötf
("[DBG_%s], maöÅhªadá·î sÀï \n", 
__FUNCTION__
);

118 
	`muãx_lock
(&
lock2
);

120 !
¶ït2
) {

122 
	`muãx_u∆ock
(&
lock2
);

123 
	`¥ötf
("[DBG_%s], maöÅhªad bef‹êyõld \n", 
__FUNCTION__
);

124 
	`thr_yõld
(-1);

125 
	`¥ötf
("[DBG_%s], maöÅhªadá·î yõld \n", 
__FUNCTION__
);

126 
	`muãx_lock
(&
lock2
);

130 
sig«Àd2
 = 1;

131 
	`muãx_u∆ock
(&
lock2
);

135 
	`c⁄d_sig«l
(&
cv¨2
);

136 
	`ªp‹t_misc
("cvar2 signaled");

141 
	}
}

	@user/progs/sem_test.c

1 
	~<°dio.h
>

2 
	~<thªad.h
>

3 
	~<muãx_ty≥.h
>

4 
	~<muãx.h
>

5 
	~<c⁄d.h
>

6 
	~<£m.h
>

7 
	~<simics.h
>

8 
	~<sysˇŒ.h
>

10 
	#NUM_THREADS
 3

	)

11 
	#TCOUNT
 10

	)

12 
	#COUNT_LIMIT
 12

	)

14 *
doSomëhög1
();

15 *
doSomëhög2
();

16 *
doSomëhög3
();

18 
£m_t
 
	g£m
;

20 
	$maö
() {

22 
	`£m_öô
(&
£m
, 2);

23 
¨gs1
 = 1, 
rc
 =0;

24 
rc
 = 
	`thr_öô
(10);

25 
thªad1
, 
thªad2
, 
thªad3
;

27 
thªad1
 = 
	`thr_¸óã
(
doSomëhög1
, (*)(&(
¨gs1
)));

28 
thªad2
 = 
	`thr_¸óã
(
doSomëhög2
, (*)(&(
¨gs1
)));

29 
thªad3
 = 
	`thr_¸óã
(
doSomëhög3
, (*)(&(
¨gs1
)));

31 
	`thr_joö
(
thªad1
, 
NULL
);

32 
	`thr_joö
(
thªad2
, 
NULL
);

33 
	`thr_joö
(
thªad3
, 
NULL
);

36 
	}
}

38 
	$doSomëhög
(
c
) {

39 
i
, 
time
;

40 
i
 = 0; i < 3; i++) {

43 
	`£m_waô
(&
£m
);

46 
time
 = 5 ;

48 
	`¥ötf
("Thªad %¯íãr†™d sÀï†f‹ %d sec⁄ds...\n", 
c
, 
time
);

50 
	`¶ìp
(
time
);

52 
	`¥ötf
("Thªad %¯Àave†thê¸ôiˇ»£˘i⁄\n", 
c
);

55 
	`£m_sig«l
(&
£m
);

58 
	}
}

60 *
	$doSomëhög1
() {

62 
	`doSomëhög
('A');

65 
	}
}

67 *
	$doSomëhög2
() {

69 
	`doSomëhög
('B');

72 
	}
}

74 *
	$doSomëhög3
() {

76 
	`doSomëhög
('C');

79 
	}
}

	@user/progs/skip_list_test.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<skù_li°_comm⁄.h
>

4 
	~<°rög.h
>

6 
	$maö
()

8 
skù_li°_globÆ_t
 
li°_glb
;

9 
d©a
 = 10;

10 
	`mem£t
(&
li°_glb
, 0, (
skù_li°_globÆ_t
));

12 
	`skù_li°_öô
(&
li°_glb
, 5, 5);

14 
	`skù_li°_ö£π
(&
li°_glb
, 20, 20, &
d©a
);

15 
	`skù_li°_ö£π
(&
li°_glb
, 20, 30, &
d©a
);

16 
	`skù_li°_ö£π
(&
li°_glb
, 20, 10, &
d©a
);

17 
	`skù_li°_ö£π
(&
li°_glb
, 20, 5, &
d©a
);

19 
	`skù_li°_ö£π
(&
li°_glb
, 10, 20, &
d©a
);

20 
	`skù_li°_ö£π
(&
li°_glb
, 10, 30, &
d©a
);

21 
	`skù_li°_ö£π
(&
li°_glb
, 10, 10, &
d©a
);

22 
	`skù_li°_ö£π
(&
li°_glb
, 10, 5, &
d©a
);

24 
	`skù_li°_ö£π
(&
li°_glb
, 30, 20, &
d©a
);

25 
	`skù_li°_ö£π
(&
li°_glb
, 30, 30, &
d©a
);

26 
	`skù_li°_ö£π
(&
li°_glb
, 30, 10, &
d©a
);

27 
	`skù_li°_ö£π
(&
li°_glb
, 30, 5, &
d©a
);

29 
	`skù_li°_ªmove
(&
li°_glb
, 30, 30);

30 
	`skù_li°_ªmove
(&
li°_glb
, 30, 10);

31 
	`skù_li°_ªmove
(&
li°_glb
, 30, 5);

32 
	`skù_li°_ªmove
(&
li°_glb
, 30, 20);

34 
	`skù_li°_ªmove
(&
li°_glb
, 20, 30);

35 
	`skù_li°_ªmove
(&
li°_glb
, 20, 10);

36 
	`skù_li°_ªmove
(&
li°_glb
, 20, 5);

37 
	`skù_li°_ªmove
(&
li°_glb
, 20, 20);

39 
	`skù_li°_ªmove
(&
li°_glb
, 10, 30);

40 
	`skù_li°_ªmove
(&
li°_glb
, 10, 10);

41 
	`skù_li°_ªmove
(&
li°_glb
, 10, 5);

42 
	`skù_li°_ªmove
(&
li°_glb
, 10, 20);

45 
	`skù_li°_dbg_dump_Æl
(&
li°_glb
);

48 
	}
}

	@user/progs/sleep_test.c

1 
	~<°dio.h
>

2 
	~<thªad.h
>

3 
	~<muãx_ty≥.h
>

4 
	~<muãx.h
>

5 
	~<simics.h
>

6 
	~<sysˇŒ.h
>

7 
	~<°dlib.h
>

11 
muãx_t
 
	gmp
 ;

14 
	$maö
()

16 
	`¶ìp
(100);

17 
	`¥ötf
("After SLeep \n");

19 
	}
}

	@user/progs/test1.c

1 
	~<°dio.h
>

2 
	~<thªad.h
>

3 
	~<simics.h
>

4 
	~<sysˇŒ.h
>

7 
	$thªad_run
(*
öput_¨gs
)

9 
öput
 = 0;

11 
öput
 = *((*)(
öput_¨gs
));

18 
	`¶ìp
(5);

20 
	`¥ötf
("Insidêthªad_ru¿bef‹êdescheduÀ, i≈ut: %d\n", 
öput
);

21 
	`descheduÀ
(0);

22 
	`¥ötf
("Insidêthªad_ru¿a·î descheduÀ, i≈ut: %d\n", 
öput
);

24  (
NULL
);

25 
	}
}

28 
	$maö
()

30 
rc
 = 0;

31 
tid1
 = 0;

32 
tid2
 = 0;

34 
¨gs1
 = 1;

36 
	`£t_ãrm_cﬁ‹
(2);

38 
rc
 = 
	`thr_öô
(10);

40 
	`Õrötf
("[APP_%s],á·îÅhr_öôÑ¯%d,Åhªad_run: %p\n", 
__FUNCTION__
, 
rc
, 
thªad_run
);

42 
tid1
 = 
	`thr_¸óã
(
thªad_run
, (*)(&(
¨gs1
)));

44 
	`Õrötf
("[APP_%s],á·îÅhr_¸óãÅid = %d\n", 
__FUNCTION__
, 
tid1
);

52 
	`make_ru¬abÀ
(
tid1
))

53 
	`yõld
(
tid1
);

54 
	`make_ru¬abÀ
(
tid2
))

55 
	`yõld
(
tid2
);

57 
	`thr_joö
(
tid1
, 
NULL
);

59 
	`¥ötf
("Done withÅhread 1 \n");

69 
rc
 = 0;

70 *
ba£_±r
 = (*)(0xffff3ffc);

72 
rc
 = 
	`√w_∑ges
(
ba£_±r
, 4096);

74 
	`Õrötf
("Insidêmaö,á·îÇew_∑ges,Ñc: %d\n", 
rc
);

78 
	}
}

	@user/progs/test2.c

1 
	~<°dio.h
>

2 
	~<thªad.h
>

3 
	~<muãx_ty≥.h
>

4 
	~<muãx.h
>

5 
	~<simics.h
>

6 
	~<sysˇŒ.h
>

11 
muãx_t
 
	gmp
 ;

12 
	gtid1
 = 0;

13 
	gtid2
 = 0;

14 
	gtid3
 = 0;

15 
	gã°
 = 5;

16 
	gtid
 =0;

18 
	$thªad_run
(*
öput_¨gs
)

20 
öput
 = 0;

22 
öput
 = *((*)(
öput_¨gs
));

24 
	`muãx_lock
–&
mp
 );

25 
ã°
++;

26 
	`¶ìp
(5);

27 
ã°
--;

28 
	`Õrötf
("ã° = %d", 
ã°
);

29 
	`muãx_u∆ock
–&
mp
 );

33  (
NULL
);

35 
	}
}

38 
	$maö
()

40 
rc
 = 0;

41 
rm
 = 0;

42 
tid1
 = 0;

43 
tid2
 = 0;

44 
tid3
 = 0;

45 
¨gs
 = 1;

47 
rc
 = 
	`thr_öô
(10);

48 
rm
 = 
	`muãx_öô
(&
mp
);

49 
	`Õrötf
("[APP_%s],á·îÅhr_öôÑ¯%d,Åhªad_run: %p\n", 
__FUNCTION__
, 
rc
, 
thªad_run
);

51 
tid1
 = 
	`thr_¸óã
(
thªad_run
, (*)(&(
¨gs
)));

53 
	`Õrötf
("[APP_%s],á·îÅhr_¸óãÅid = %d\n", 
__FUNCTION__
, 
tid
);

54 
tid2
 = 
	`thr_¸óã
(
thªad_run
, (*)(&(
¨gs
)));

56 
tid3

	`thr_¸óã
(
thªad_run
, (*)(&(
¨gs
)));

60 
	}
}

	@user/progs/test_exit.c

1 
	~<°dio.h
>

2 
	~<thªad.h
>

3 
	~<simics.h
>

4 
	~<sysˇŒ.h
>

7 
	$thªad_run
(*
öput_¨gs
)

9 
öput
 = 0;

10 
tid
 = 
	`thr_gëid
();

12 
öput
 = *((*)(
öput_¨gs
));

15 
	`¥ötf
("Insidêthªad_run, i≈ut: %d,Åid: %d\n", 
öput
, 
tid
);

19  (
NULL
);

20 
	}
}

23 
	$maö
()

25 
rc
 = 0;

26 
tid1
 = 0;

29 
¨gs1
 = 1;

32 
rc
 = 
	`thr_öô
(8192);

34 
	`Õrötf
("[APP_%s],á·îÅhr_öôÑ¯%d,Åhªad_run: %p\n", 
__FUNCTION__
, 
rc
, 
thªad_run
);

36 
tid1
 = 
	`thr_¸óã
(
thªad_run
, (*)(&(
¨gs1
)));

38 
	`Õrötf
("[APP_%s],á·îÅhr_¸óãÅid = %d\n", 
__FUNCTION__
, 
tid1
);

52 
rc
 = 0;

53 *
ba£_±r
 = (*)(0xffff3ffc);

55 
rc
 = 
	`√w_∑ges
(
ba£_±r
, 4096);

57 
	`Õrötf
("Insidêmaö,á·îÇew_∑ges,Ñc: %d\n", 
rc
);

63 
	}
}

	@user/progs/thread_join_test.c

1 
	~<°dio.h
>

2 
	~<thªad.h
>

3 
	~<simics.h
>

4 
	~<sysˇŒ.h
>

7 
	$thªad_run2
(*
öput_¨gs
)

9 
öput
 = 0;

11 
öput
 = *((*)(
öput_¨gs
));

13 
	`¶ìp
(5);

15 
	`¥ötf
("Insidêthªad_run, i≈ut: %d\n", 
öput
);

16 
	`¥ötf
("Thread 2 waiting onÅhread 1");

18 
	`thr_joö
(
öput
, 
NULL
);

21  (
NULL
);

22 
	}
}

27 
	$thªad_run1
(*
öput_¨gs
)

29 
öput
 = 0;

31 
öput
 = *((*)(
öput_¨gs
));

33 
	`¶ìp
(5);

35 
	`¥ötf
("Insidêthªad_run, i≈ut: %d\n", 
öput
);

38  (
NULL
);

39 
	}
}

42 
	$maö
()

44 
rc
 = 0;

45 
tid1
 = 0;

46 
tid2
 = 0;

48 
¨gs1
 = 1;

51 
rc
 = 
	`thr_öô
(10);

53 
	`Õrötf
("[APP_%s],á·îÅhr_öôÑ¯%d\n", 
__FUNCTION__
, 
rc
);

55 
tid1
 = 
	`thr_¸óã
(
thªad_run1
, (*)(&(
¨gs1
)));

57 
	`Õrötf
("[APP_%s],á·îÅhr_¸óãÅid = %d\n", 
__FUNCTION__
, 
tid1
);

59 
tid2
 = 
	`thr_¸óã
(
thªad_run2
, (*)(&(
tid1
)));

61 
	`Õrötf
("[APP_%s],á·îÅhr_¸óãÅid = %d\n", 
__FUNCTION__
, 
tid2
);

63 
	`¥ötf
("Waiting onÅhread 2 \n");

65 
	`thr_joö
(
tid2
, 
NULL
);

67 
	`¥ötf
("Done withÅhread 2 \n");

69 
	`¥ötf
("Waiting onÅhread 1 \n");

71 
	`thr_joö
(
tid1
, 
NULL
);

73 
	`¥ötf
("Done withÅhread 1 \n");

76 
	}
}

	@user/progs/thread_yield_test.c

1 
	~<°dio.h
>

2 
	~<thªad.h
>

3 
	~<simics.h
>

4 
	~<sysˇŒ.h
>

7 
	$thªad_run
(*
öput_¨gs
)

9 
öput
 = 0;

11 
öput
 = *((*)(
öput_¨gs
));

13 
	`¶ìp
(5);

15 
	`¥ötf
("Insidêthªad_run, i≈ut: %d\n", 
öput
);

17 
	`thr_exô
(
NULL
);

19  (
NULL
);

20 
	}
}

22 
	$maö
()

24 
rc
 = 0;

25 
tid
 = 0;

27 
¨gs
 = 1;

30 
rc
 = 
	`thr_öô
(10);

32 
	`Õrötf
("[APP_%s],á·îÅhr_öôÑ¯%d\n", 
__FUNCTION__
, 
rc
);

34 
tid
 = 
	`thr_¸óã
(
thªad_run
, (*)(&(
¨gs
)));

36 
	`thr_yõld
(
tid
);

39 
	}
}

	@vq_challenge/variable_queue.h

25 
	#Q_NEW_HEAD
(
Q_HEAD_TYPE
, 
Q_ELEM_TYPE
Ë;

	)

43 
	#Q_NEW_LINK
(
Q_ELEM_TYPE
Ë;

	)

52 
	#Q_INIT_HEAD
(
Q_HEAD
Ë;

	)

64 
	#Q_INIT_ELEM
(
Q_ELEM
, 
LINK_NAME
Ë;

	)

82 
	#Q_INSERT_FRONT
(
Q_HEAD
, 
Q_ELEM
, 
LINK_NAME
Ë;

	)

99 
	#Q_INSERT_TAIL
(
Q_HEAD
, 
Q_ELEM
, 
LINK_NAME
Ë;

	)

111 
	#Q_GET_FRONT
(
Q_HEAD
Ë;

	)

122 
	#Q_GET_TAIL
(
Q_HEAD
Ë;

	)

138 
	#Q_GET_NEXT
(
Q_ELEM
, 
LINK_NAME
Ë;

	)

153 
	#Q_GET_PREV
(
Q_ELEM
, 
LINK_NAME
Ë;

	)

170 
	#Q_INSERT_AFTER
(
Q_HEAD
,
Q_INQ
,
Q_TOINSERT
,
LINK_NAME
);

	)

187 
	#Q_INSERT_BEFORE
(
Q_HEAD
,
Q_INQ
,
Q_TOINSERT
,
LINK_NAME
);

	)

208 
	#Q_REMOVE
(
Q_HEAD
,
Q_ELEM
,
LINK_NAME
Ë;

	)

239 
	#Q_FOREACH
(
CURRENT_ELEM
,
Q_HEAD
,
LINK_NAME
Ë;

	)

	@vq_challenge/vqtest.c

7 
	~<°dlib.h
>

8 
	~<°dio.h
>

9 
	~<as£π.h
>

11 
	~"v¨übÀ_queue.h
"

13 
	snode
 {

14 
Q_NEW_LINK
(
node
Ë
	mlök
;

15 
	md©a
;

16 } 
	tnode_t
;

18 
Q_NEW_HEAD
(
li°_t
, 
node
);

20 
	#LIST_LEN
 5

	)

22 
	$ã°_öô
() {

23 
li°_t
 
li°
;

25 
	`Q_INIT_HEAD
(&
li°
);

27 
	`as£π
(!
	`Q_GET_FRONT
(&
li°
));

28 
	`as£π
(!
	`Q_GET_TAIL
(&
li°
));

29 
	}
}

31 
	$ã°_ö£π
() {

32 
li°_t
 
li°
;

34 
	`Q_INIT_HEAD
(&
li°
);

36 
node_t
 
node
;

37 
	`Q_INIT_ELEM
(&
node
, 
lök
);

39 
node
.
d©a
 = 1;

41 
	`Q_INSERT_TAIL
(&
li°
, &
node
, 
lök
);

43 
	`as£π
(
	`Q_GET_TAIL
(&
li°
Ë=&
node
);

44 
	`as£π
(
	`Q_GET_FRONT
(&
li°
Ë=&
node
);

46 
	`as£π
(!
	`Q_GET_NEXT
(&
node
, 
lök
));

47 
	`as£π
(!
	`Q_GET_PREV
(&
node
, 
lök
));

48 
	}
}

50 
	$ã°_ªmove
() {

51 
li°_t
 
li°
;

53 
	`Q_INIT_HEAD
(&
li°
);

55 
node_t
 
node
;

56 
	`Q_INIT_ELEM
(&
node
, 
lök
);

58 
	`Q_INSERT_TAIL
(&
li°
, &
node
, 
lök
);

60 
	`as£π
(
	`Q_GET_TAIL
(&
li°
Ë=&
node
);

61 
	`as£π
(
	`Q_GET_FRONT
(&
li°
Ë=&
node
);

63 
	`as£π
(!
	`Q_GET_NEXT
(&
node
, 
lök
));

64 
	`as£π
(!
	`Q_GET_PREV
(&
node
, 
lök
));

66 
	`Q_REMOVE
(&
li°
, &
node
, 
lök
);

68 
	`as£π
(!
	`Q_GET_FRONT
(&
li°
));

69 
	`as£π
(!
	`Q_GET_TAIL
(&
li°
));

70 
	}
}

72 
	$ã°_ö£π_‰⁄ts
() {

73 
li°_t
 
li°
;

75 
	`Q_INIT_HEAD
(&
li°
);

77 
node_t
 
nodes
[
LIST_LEN
];

79 
i
;

80 
i
 = 0; i < 
LIST_LEN
; i++) {

81 
	`Q_INIT_ELEM
(&
nodes
[
i
], 
lök
);

82 
nodes
[
i
].
d©a
 = i;

83 
	`Q_INSERT_FRONT
(&
li°
, &
nodes
[
i
], 
lök
);

86 
node_t
 *
cur
 = 
	`Q_GET_FRONT
(&
li°
);

87 
i
 = 0; i < 
LIST_LEN
; i++) {

88 
	`as£π
(
cur
);

89 
	`as£π
(
cur
->
d©a
 =
LIST_LEN
 - 
i
 - 1);

90 
cur
 = 
	`Q_GET_NEXT
(cur, 
lök
);

93 
	`as£π
(!
cur
);

95 
cur
 = 
	`Q_GET_TAIL
(&
li°
);

96 
i
 = 
LIST_LEN
-1; i >= 0; i--) {

97 
	`as£π
(
cur
);

98 
	`as£π
(
cur
->
d©a
 =
LIST_LEN
 - 
i
 - 1);

99 
cur
 = 
	`Q_GET_PREV
(cur, 
lök
);

101 
	`as£π
(!
cur
);

102 
	}
}

104 
	$ã°_ö£π_èûs
() {

105 
li°_t
 
li°
;

107 
	`Q_INIT_HEAD
(&
li°
);

109 
node_t
 
nodes
[
LIST_LEN
];

111 
i
;

112 
i
 = 0; i < 
LIST_LEN
; i++) {

113 
	`Q_INIT_ELEM
(&
nodes
[
i
], 
lök
);

114 
nodes
[
i
].
d©a
 = i;

115 
	`Q_INSERT_TAIL
(&
li°
, &
nodes
[
i
], 
lök
);

118 
node_t
 *
cur
 = 
	`Q_GET_FRONT
(&
li°
);

119 
i
 = 0; i < 
LIST_LEN
; i++) {

120 
	`as£π
(
cur
);

121 
	`as£π
(
cur
->
d©a
 =
i
);

122 
node_t
 *
√xt
 = 
	`Q_GET_NEXT
(
cur
, 
lök
);

123 
	`as£π
(!
√xt
 || 
	`Q_GET_PREV
“ext, 
lök
Ë=
cur
);

124 
cur
 = 
√xt
;

127 
	`as£π
(!
cur
);

129 
cur
 = 
	`Q_GET_TAIL
(&
li°
);

130 
i
 = 
LIST_LEN
-1; i >= 0; i--) {

131 
	`as£π
(
cur
);

132 
	`as£π
(
cur
->
d©a
 =
i
);

133 
node_t
 *
¥ev
 = 
	`Q_GET_PREV
(
cur
, 
lök
);

134 
	`as£π
(!
¥ev
 || 
	`Q_GET_NEXT
’ªv, 
lök
Ë=
cur
);

135 
cur
 = 
¥ev
;

137 
	`as£π
(!
cur
);

138 
	}
}

140 
	$ã°_ªmoves
() {

141 
li°_t
 
li°
;

143 
	`Q_INIT_HEAD
(&
li°
);

145 
node_t
 
nodes
[
LIST_LEN
];

147 
i
;

148 
i
 = 0; i < 
LIST_LEN
; i++) {

149 
	`Q_INIT_ELEM
(&
nodes
[
i
], 
lök
);

150 
	`Q_INSERT_FRONT
(&
li°
, &
nodes
[
i
], 
lök
);

153 
	`as£π
(
	`Q_GET_FRONT
(&
li°
Ë=&
nodes
[
LIST_LEN
-1]);

154 
	`as£π
(
	`Q_GET_TAIL
(&
li°
Ë=&
nodes
[0]);

156 
node_t
 *
cur
 = 
	`Q_GET_FRONT
(&
li°
);

157 
cur
) {

158 
node_t
 *
√xt
 = 
	`Q_GET_NEXT
(
cur
, 
lök
);

159 
	`Q_REMOVE
(&
li°
, 
cur
, 
lök
);

160 
cur
 = 
√xt
;

161 
i
++;

163 
	}
}

165 
	$ã°_ö£π_a·î
() {

166 
li°_t
 
li°
;

168 
	`Q_INIT_HEAD
(&
li°
);

170 
node_t
 
nodes
[
LIST_LEN
];

172 
	`Q_INIT_ELEM
(&
nodes
[0], 
lök
);

173 
nodes
[0].
d©a
 = 0;

174 
	`Q_INSERT_FRONT
(&
li°
, &
nodes
[0], 
lök
);

176 
i
;

177 
i
 = 1; i < 
LIST_LEN
; i++) {

178 
	`Q_INIT_ELEM
(&
nodes
[
i
], 
lök
);

179 
	`Q_INSERT_AFTER
(&
li°
, &
nodes
[
i
-1], &nodes[i], 
lök
);

180 
nodes
[
i
].
d©a
 = i;

181 
	`as£π
(
	`Q_GET_NEXT
(&
nodes
[
i
-1], 
lök
) == &nodes[i]);

182 
	`as£π
(
	`Q_GET_PREV
(&
nodes
[
i
], 
lök
) == &nodes[i-1]);

184 
	`as£π
(
	`Q_GET_FRONT
(&
li°
Ë=&
nodes
[0]);

185 
	`as£π
(
	`Q_GET_TAIL
(&
li°
Ë=&
nodes
[
LIST_LEN
-1]);

187 
node_t
 *
cur
 = 
	`Q_GET_FRONT
(&
li°
);

188 
i
 = 0; i < 
LIST_LEN
; i++) {

189 
	`as£π
(
cur
);

190 
	`as£π
(
cur
->
d©a
 =
i
);

191 
cur
 = 
	`Q_GET_NEXT
(cur, 
lök
);

193 
	`as£π
(!
cur
);

194 
	}
}

196 
	$ã°_ö£π_bef‹e
() {

197 
li°_t
 
li°
;

199 
	`Q_INIT_HEAD
(&
li°
);

201 
node_t
 
nodes
[
LIST_LEN
];

203 
	`Q_INIT_ELEM
(&
nodes
[0], 
lök
);

204 
nodes
[0].
d©a
 = 0;

205 
	`Q_INSERT_FRONT
(&
li°
, &
nodes
[0], 
lök
);

207 
i
;

208 
i
 = 1; i < 
LIST_LEN
; i++) {

209 
	`Q_INIT_ELEM
(&
nodes
[
i
], 
lök
);

210 
	`Q_INSERT_BEFORE
(&
li°
, &
nodes
[
i
-1], &nodes[i], 
lök
);

211 
nodes
[
i
].
d©a
 = i;

212 
	`as£π
(
	`Q_GET_PREV
(&
nodes
[
i
-1], 
lök
) == &nodes[i]);

213 
	`as£π
(
	`Q_GET_NEXT
(&
nodes
[
i
], 
lök
) == &nodes[i-1]);

215 
	`as£π
(
	`Q_GET_TAIL
(&
li°
Ë=&
nodes
[0]);

216 
	`as£π
(
	`Q_GET_FRONT
(&
li°
Ë=&
nodes
[
LIST_LEN
-1]);

218 
node_t
 *
cur
 = 
	`Q_GET_FRONT
(&
li°
);

219 
i
 = 0; i < 
LIST_LEN
; i++) {

220 
	`as£π
(
cur
);

221 
	`as£π
(
cur
->
d©a
 =
LIST_LEN
 - 
i
 - 1);

222 
cur
 = 
	`Q_GET_NEXT
(cur, 
lök
);

224 
	`as£π
(!
cur
);

225 
	}
}

227 
	#RUN_TEST
(
t
) do {\

228 
	`¥ötf
("Running "#t"()...");\

229 
	`t
();\

230 
	`¥ötf
(" OK.\n");\

231 } 0)

	)

233 
	$maö
() {

234 
	`RUN_TEST
(
ã°_öô
);

235 
	`RUN_TEST
(
ã°_ö£π
);

236 
	`RUN_TEST
(
ã°_ö£π_‰⁄ts
);

237 
	`RUN_TEST
(
ã°_ö£π_èûs
);

238 
	`RUN_TEST
(
ã°_ö£π_bef‹e
);

239 
	`RUN_TEST
(
ã°_ö£π_a·î
);

240 
	`RUN_TEST
(
ã°_ªmove
);

242 
	}
}

	@/usr/include/assert.h

24 #ifdef 
_ASSERT_H


26 #unde‡
_ASSERT_H


27 #unde‡
as£π


28 #unde‡
__ASSERT_VOID_CAST


30 #ifdef 
__USE_GNU


31 #unde‡
as£π_≥º‹


36 
	#_ASSERT_H
 1

	)

37 
	~<„©uªs.h
>

39 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,95)

40 
	#__ASSERT_VOID_CAST
 
°©ic_ˇ°
<>

	)

42 
	#__ASSERT_VOID_CAST
 ()

	)

50 #ifdef 
NDEBUG


52 
	#as£π
(
ex¥
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

60 #ifdef 
__USE_GNU


61 
	#as£π_≥º‹
(
î∫um
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

66 
__BEGIN_DECLS


69 
	$__as£π_Áû
 (
__c⁄°
 *
__as£πi⁄
, __c⁄° *
__fûe
,

70 
__löe
, 
__c⁄°
 *
__fun˘i⁄
)

71 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

74 
	$__as£π_≥º‹_Áû
 (
__î∫um
, 
__c⁄°
 *
__fûe
,

75 
__löe
,

76 
__c⁄°
 *
__fun˘i⁄
)

77 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

82 
	$__as£π
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
, 
__löe
)

83 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

86 
__END_DECLS


88 
	#as£π
(
ex¥
) \

89 ((
ex¥
) \

90 ? 
	`__ASSERT_VOID_CAST
 (0) \

91 : 
	`__as£π_Áû
 (
	`__STRING
(
ex¥
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

93 #ifdef 
__USE_GNU


94 
	#as£π_≥º‹
(
î∫um
) \

95 (!(
î∫um
) \

96 ? 
	`__ASSERT_VOID_CAST
 (0) \

97 : 
	`__as£π_≥º‹_Áû
 ((
î∫um
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

105 #i‡
deföed
 
__˝lu•lus
 ? 
	`__GNUC_PREREQ
 (2, 6) : __GNUC_PREREQ (2, 4)

106 
	#__ASSERT_FUNCTION
 
__PRETTY_FUNCTION__


	)

108 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

109 
	#__ASSERT_FUNCTION
 
__func__


	)

111 
	#__ASSERT_FUNCTION
 ((
__c⁄°
 *Ë0)

	)

	@/usr/include/ctype.h

24 #i‚def 
_CTYPE_H


25 
	#_CTYPE_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

30 
	g__BEGIN_DECLS


32 #i‚de‡
_ISbô


41 
	~<ídün.h
>

42 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


43 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

45 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

50 
	m_ISuµî
 = 
_ISbô
 (0),

51 
	m_ISlowî
 = 
_ISbô
 (1),

52 
	m_ISÆpha
 = 
_ISbô
 (2),

53 
	m_ISdigô
 = 
_ISbô
 (3),

54 
	m_ISxdigô
 = 
_ISbô
 (4),

55 
	m_IS•a˚
 = 
_ISbô
 (5),

56 
	m_IS¥öt
 = 
_ISbô
 (6),

57 
	m_ISgøph
 = 
_ISbô
 (7),

58 
	m_ISbœnk
 = 
_ISbô
 (8),

59 
	m_IS˙ål
 = 
_ISbô
 (9),

60 
	m_ISpun˘
 = 
_ISbô
 (10),

61 
	m_ISÆnum
 = 
_ISbô
 (11)

81 
__c⁄°
 **
	$__˘y≥_b_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

83 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

85 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

86 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

91 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

92 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

94 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

96 
__BEGIN_NAMESPACE_STD


102 
	`__ex˘y≥
 (
iß um
);

103 
	`__ex˘y≥
 (
ißÕha
);

104 
	`__ex˘y≥
 (
is˙ål
);

105 
	`__ex˘y≥
 (
isdigô
);

106 
	`__ex˘y≥
 (
i¶owî
);

107 
	`__ex˘y≥
 (
isgøph
);

108 
	`__ex˘y≥
 (
i•röt
);

109 
	`__ex˘y≥
 (
i•un˘
);

110 
	`__ex˘y≥
 (
is•a˚
);

111 
	`__ex˘y≥
 (
isuµî
);

112 
	`__ex˘y≥
 (
isxdigô
);

116 
	$tﬁowî
 (
__c
Ë
__THROW
;

119 
	$touµî
 (
__c
Ë
__THROW
;

121 
__END_NAMESPACE_STD


125 #ifdef 
__USE_ISOC99


126 
__BEGIN_NAMESPACE_C99


128 
	`__ex˘y≥
 (
isbœnk
);

130 
__END_NAMESPACE_C99


133 #ifde‡
__USE_GNU


135 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

138 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


142 
	$ißscii
 (
__c
Ë
__THROW
;

146 
	$tﬂscii
 (
__c
Ë
__THROW
;

150 
	`__ex˘y≥
 (
_touµî
);

151 
	`__ex˘y≥
 (
_tﬁowî
);

155 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

156 (
__exãnsi⁄__
 \

157 ({ 
__ªs
; \

158 i‡( (
c
) > 1) \

160 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

162 
__c
 = (
c
); \

163 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

166 
__ªs
 = 
f
 
¨gs
; \

169 
__ªs
 = (
a
)[(Ë(
c
)]; \

170 
__ªs
; 
	}
}))

	)

172 #i‡!
deföed
 
__NO_CTYPE
 && !deföed 
__˝lu•lus


173 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

174 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

175 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

176 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

177 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

178 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

179 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

180 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

181 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

182 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

183 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

185 #ifde‡
__USE_ISOC99


186 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

189 #ifde‡
__USE_EXTERN_INLINES


190 
__exã∫_ölöe
 

191 
__NTH
 (
	$tﬁowî
 (
__c
))

193  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

194 
	}
}

196 
__exã∫_ölöe
 

197 
__NTH
 (
	$touµî
 (
__c
))

199  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

200 
	}
}

203 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


204 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

205 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

208 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


209 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

210 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

212 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

213 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

219 #ifde‡
__USE_XOPEN2K8


233 
	~<xloˇÀ.h
>

237 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

238 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

240 
	#__ex˘y≥_l
(
«me
) \

241 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

247 
__ex˘y≥_l
 (
iß um_l
);

248 
__ex˘y≥_l
 (
ißÕha_l
);

249 
__ex˘y≥_l
 (
is˙ål_l
);

250 
__ex˘y≥_l
 (
isdigô_l
);

251 
__ex˘y≥_l
 (
i¶owî_l
);

252 
__ex˘y≥_l
 (
isgøph_l
);

253 
__ex˘y≥_l
 (
i•röt_l
);

254 
__ex˘y≥_l
 (
i•un˘_l
);

255 
__ex˘y≥_l
 (
is•a˚_l
);

256 
__ex˘y≥_l
 (
isuµî_l
);

257 
__ex˘y≥_l
 (
isxdigô_l
);

259 
__ex˘y≥_l
 (
isbœnk_l
);

263 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

264 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

267 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

268 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

270 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


271 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

272 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

273 
	#__touµî_l
(
c
, 
loˇÀ
) \

274 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

275 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

276 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

280 #i‚de‡
__NO_CTYPE


281 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

282 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

283 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

284 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

285 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

286 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

287 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

288 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

289 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

290 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

291 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

293 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

295 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


296 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

297 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

300 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

301 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

302 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

303 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

304 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

305 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

306 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

307 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

308 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

309 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

310 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

312 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

314 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


315 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

316 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

323 
__END_DECLS


	@/usr/include/malloc.h

21 #i‚de‡
_MALLOC_H


22 
	#_MALLOC_H
 1

	)

24 
	~<„©uªs.h
>

25 
	~<°ddef.h
>

26 
	~<°dio.h
>

27 
	#__mÆloc_±r_t
 *

	)

30 
	#__mÆloc_size_t
 
size_t


	)

31 
	#__mÆloc_±rdiff_t
 
±rdiff_t


	)

33 #ifde‡
__GNUC__


35 
	#__MALLOC_P
(
¨gs
Ë¨g†
__THROW


	)

38 
	#__MALLOC_PMT
(
¨gs
Ë
	)
¨gs

42 
	#__MALLOC_P
(
¨gs
Ë
	)
¨gs

43 
	#__MALLOC_PMT
(
¨gs
Ë
	)
¨gs

48 
__BEGIN_DECLS


51 *
mÆloc
 
__MALLOC_P
 ((
size_t
 
__size
)Ë
__©åibuã_mÆloc__
 
__wur
;

54 *
ˇŒoc
 
__MALLOC_P
 ((
size_t
 
__nmemb
, size_à
__size
))

55 
__©åibuã_mÆloc__
 
__wur
;

62 *
ªÆloc
 
__MALLOC_P
 ((*
__±r
, 
size_t
 
__size
))

63 
__©åibuã_w¨n_unu£d_ªsu…__
;

66 
‰ì
 
__MALLOC_P
 ((*
__±r
));

69 
c‰ì
 
__MALLOC_P
 ((*
__±r
));

72 *
memÆign
 
__MALLOC_P
 ((
size_t
 
__Æignmít
, size_à
__size
))

73 
__©åibuã_mÆloc__
 
__wur
;

76 *
vÆloc
 
__MALLOC_P
 ((
size_t
 
__size
))

77 
__©åibuã_mÆloc__
 
__wur
;

81 * 
pvÆloc
 
__MALLOC_P
 ((
size_t
 
__size
))

82 
__©åibuã_mÆloc__
 
__wur
;

86 *(*
__m‹ec‹e
Ë
__MALLOC_PMT
 ((
±rdiff_t
 
__size
));

89 *
__deÁu…_m‹ec‹e
 
__MALLOC_P
 ((
±rdiff_t
 
__size
))

90 
__©åibuã_mÆloc__
;

94 
	smÆlöfo
 {

95 
	m¨ía
;

96 
	m‹dblks
;

97 
	msmblks
;

98 
	mhblks
;

99 
	mhblkhd
;

100 
	musmblks
;

101 
	mfsmblks
;

102 
	mu‹dblks
;

103 
	mf‹dblks
;

104 
	mkìpco°
;

108 
mÆlöfo
 mÆlöfÿ
__MALLOC_P
 (());

111 #i‚de‡
M_MXFAST


112 
	#M_MXFAST
 1

	)

114 #i‚de‡
M_NLBLKS


115 
	#M_NLBLKS
 2

	)

117 #i‚de‡
M_GRAIN


118 
	#M_GRAIN
 3

	)

120 #i‚de‡
M_KEEP


121 
	#M_KEEP
 4

	)

125 
	#M_TRIM_THRESHOLD
 -1

	)

126 
	#M_TOP_PAD
 -2

	)

127 
	#M_MMAP_THRESHOLD
 -3

	)

128 
	#M_MMAP_MAX
 -4

	)

129 
	#M_CHECK_ACTION
 -5

	)

130 
	#M_PERTURB
 -6

	)

131 
	#M_ARENA_TEST
 -7

	)

132 
	#M_ARENA_MAX
 -8

	)

135 
mÆl›t
 
__MALLOC_P
 ((
__∑øm
, 
__vÆ
));

139 
mÆloc_åim
 
__MALLOC_P
 ((
size_t
 
__∑d
));

143 
size_t
 
mÆloc_ußbÀ_size
 
__MALLOC_P
 ((*
__±r
));

146 
mÆloc_°©s
 
__MALLOC_P
 (());

149 
mÆloc_öfo
 (
__›ti⁄s
, 
FILE
 *
__Â
);

152 *
mÆloc_gë_°©e
 
__MALLOC_P
 (());

156 
mÆloc_£t_°©e
 
__MALLOC_P
 ((*
__±r
));

161 (*
__mÆloc_öôülize_hook
Ë
	`__MALLOC_PMT
 (());

163 (*
__‰ì_hook
Ë
	`__MALLOC_PMT
 ((*
__±r
,

164 
__c⁄°
 
__mÆloc_±r_t
));

165 *(*
__mÆloc_hook
Ë
	`__MALLOC_PMT
 ((
size_t
 
__size
,

166 
__c⁄°
 
__mÆloc_±r_t
));

167 *(*
__ªÆloc_hook
Ë
	`__MALLOC_PMT
 ((*
__±r
, 
size_t
 
__size
,

168 
__c⁄°
 
__mÆloc_±r_t
));

169 *(*
__memÆign_hook
Ë
	`__MALLOC_PMT
 ((
size_t
 
__Æignmít
,

170 
size_t
 
__size
,

171 
__c⁄°
 
__mÆloc_±r_t
));

172 (*
__a·î_m‹ec‹e_hook
Ë
	`__MALLOC_PMT
 (());

175 
__mÆloc_check_öô
 
	`__MALLOC_P
 (());

178 
__END_DECLS


	@/usr/include/stdint.h

23 #i‚de‡
_STDINT_H


24 
	#_STDINT_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/wch¨.h
>

28 
	~<bôs/w‹dsize.h
>

35 #i‚de‡
__öt8_t_deföed


36 
	#__öt8_t_deföed


	)

37 sig√d 
	töt8_t
;

38 
	töt16_t
;

39 
	töt32_t
;

40 #i‡
__WORDSIZE
 == 64

41 
	töt64_t
;

43 
__exãnsi⁄__


44 
	töt64_t
;

49 
	tuöt8_t
;

50 
	tuöt16_t
;

51 #i‚de‡
__uöt32_t_deföed


52 
	tuöt32_t
;

53 
	#__uöt32_t_deföed


	)

55 #i‡
__WORDSIZE
 == 64

56 
	tuöt64_t
;

58 
__exãnsi⁄__


59 
	tuöt64_t
;

66 sig√d 
	töt_Àa°8_t
;

67 
	töt_Àa°16_t
;

68 
	töt_Àa°32_t
;

69 #i‡
__WORDSIZE
 == 64

70 
	töt_Àa°64_t
;

72 
__exãnsi⁄__


73 
	töt_Àa°64_t
;

77 
	tuöt_Àa°8_t
;

78 
	tuöt_Àa°16_t
;

79 
	tuöt_Àa°32_t
;

80 #i‡
__WORDSIZE
 == 64

81 
	tuöt_Àa°64_t
;

83 
__exãnsi⁄__


84 
	tuöt_Àa°64_t
;

91 sig√d 
	töt_Á°8_t
;

92 #i‡
__WORDSIZE
 == 64

93 
	töt_Á°16_t
;

94 
	töt_Á°32_t
;

95 
	töt_Á°64_t
;

97 
	töt_Á°16_t
;

98 
	töt_Á°32_t
;

99 
__exãnsi⁄__


100 
	töt_Á°64_t
;

104 
	tuöt_Á°8_t
;

105 #i‡
__WORDSIZE
 == 64

106 
	tuöt_Á°16_t
;

107 
	tuöt_Á°32_t
;

108 
	tuöt_Á°64_t
;

110 
	tuöt_Á°16_t
;

111 
	tuöt_Á°32_t
;

112 
__exãnsi⁄__


113 
	tuöt_Á°64_t
;

118 #i‡
__WORDSIZE
 == 64

119 #i‚de‡
__öçå_t_deföed


120 
	töçå_t
;

121 
	#__öçå_t_deföed


	)

123 
	tuöçå_t
;

125 #i‚de‡
__öçå_t_deföed


126 
	töçå_t
;

127 
	#__öçå_t_deföed


	)

129 
	tuöçå_t
;

134 #i‡
__WORDSIZE
 == 64

135 
	tötmax_t
;

136 
	tuötmax_t
;

138 
__exãnsi⁄__


139 
	tötmax_t
;

140 
__exãnsi⁄__


141 
	tuötmax_t
;

147 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_LIMIT_MACROS


149 #i‡
__WORDSIZE
 == 64

150 
	#__INT64_C
(
c
Ë¯## 
L


	)

151 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

153 
	#__INT64_C
(
c
Ë¯## 
LL


	)

154 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

160 
	#INT8_MIN
 (-128)

	)

161 
	#INT16_MIN
 (-32767-1)

	)

162 
	#INT32_MIN
 (-2147483647-1)

	)

163 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

165 
	#INT8_MAX
 (127)

	)

166 
	#INT16_MAX
 (32767)

	)

167 
	#INT32_MAX
 (2147483647)

	)

168 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

171 
	#UINT8_MAX
 (255)

	)

172 
	#UINT16_MAX
 (65535)

	)

173 
	#UINT32_MAX
 (4294967295U)

	)

174 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

178 
	#INT_LEAST8_MIN
 (-128)

	)

179 
	#INT_LEAST16_MIN
 (-32767-1)

	)

180 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

181 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

183 
	#INT_LEAST8_MAX
 (127)

	)

184 
	#INT_LEAST16_MAX
 (32767)

	)

185 
	#INT_LEAST32_MAX
 (2147483647)

	)

186 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

189 
	#UINT_LEAST8_MAX
 (255)

	)

190 
	#UINT_LEAST16_MAX
 (65535)

	)

191 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

192 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

196 
	#INT_FAST8_MIN
 (-128)

	)

197 #i‡
__WORDSIZE
 == 64

198 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

199 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

201 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

202 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

204 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

206 
	#INT_FAST8_MAX
 (127)

	)

207 #i‡
__WORDSIZE
 == 64

208 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

209 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

211 
	#INT_FAST16_MAX
 (2147483647)

	)

212 
	#INT_FAST32_MAX
 (2147483647)

	)

214 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

217 
	#UINT_FAST8_MAX
 (255)

	)

218 #i‡
__WORDSIZE
 == 64

219 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

220 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

222 
	#UINT_FAST16_MAX
 (4294967295U)

	)

223 
	#UINT_FAST32_MAX
 (4294967295U)

	)

225 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

229 #i‡
__WORDSIZE
 == 64

230 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

231 
	#INTPTR_MAX
 (9223372036854775807L)

	)

232 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

234 
	#INTPTR_MIN
 (-2147483647-1)

	)

235 
	#INTPTR_MAX
 (2147483647)

	)

236 
	#UINTPTR_MAX
 (4294967295U)

	)

241 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

243 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

246 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

252 #i‡
__WORDSIZE
 == 64

253 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

254 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

256 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

257 
	#PTRDIFF_MAX
 (2147483647)

	)

261 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

262 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

265 #i‡
__WORDSIZE
 == 64

266 
	#SIZE_MAX
 (18446744073709551615UL)

	)

268 
	#SIZE_MAX
 (4294967295U)

	)

272 #i‚de‡
WCHAR_MIN


274 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

275 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

279 
	#WINT_MIN
 (0u)

	)

280 
	#WINT_MAX
 (4294967295u)

	)

287 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_CONSTANT_MACROS


290 
	#INT8_C
(
c
Ë
	)
c

291 
	#INT16_C
(
c
Ë
	)
c

292 
	#INT32_C
(
c
Ë
	)
c

293 #i‡
__WORDSIZE
 == 64

294 
	#INT64_C
(
c
Ë¯## 
L


	)

296 
	#INT64_C
(
c
Ë¯## 
LL


	)

300 
	#UINT8_C
(
c
Ë
	)
c

301 
	#UINT16_C
(
c
Ë
	)
c

302 
	#UINT32_C
(
c
Ë¯## 
U


	)

303 #i‡
__WORDSIZE
 == 64

304 
	#UINT64_C
(
c
Ë¯## 
UL


	)

306 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

310 #i‡
__WORDSIZE
 == 64

311 
	#INTMAX_C
(
c
Ë¯## 
L


	)

312 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

314 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

315 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/stdio.h

24 #i‚de‡
_STDIO_H


26 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


27 
	#_STDIO_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

36 
	~<bôs/ty≥s.h
>

37 
	#__√ed_FILE


	)

38 
	#__√ed___FILE


	)

42 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


45 
	g_IO_FILE
;

47 
__BEGIN_NAMESPACE_STD


49 
_IO_FILE
 
	tFILE
;

50 
	g__END_NAMESPACE_STD


51 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_SVID
 || deföed 
__USE_POSIX
 \

52 || 
deföed
 
	g__USE_BSD
 || deföed 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

53 || 
deföed
 
__USE_POSIX2


54 
	$__USING_NAMESPACE_STD
(
FILE
)

57 
	#__FILE_deföed
 1

	)

59 #unde‡
__√ed_FILE


62 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


65 
_IO_FILE
 
	t__FILE
;

67 
	#____FILE_deföed
 1

	)

69 #unde‡
__√ed___FILE


72 #ifdef 
_STDIO_H


73 
	#_STDIO_USES_IOSTREAM


	)

75 
	~<libio.h
>

77 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


78 #ifde‡
__GNUC__


79 #i‚de‡
_VA_LIST_DEFINED


80 
_G_va_li°
 
	tva_li°
;

81 
	#_VA_LIST_DEFINED


	)

84 
	~<°d¨g.h
>

88 #ifde‡
__USE_XOPEN2K8


89 #i‚de‡
__off_t_deföed


90 #i‚de‡
__USE_FILE_OFFSET64


91 
__off_t
 
	toff_t
;

93 
__off64_t
 
	toff_t
;

95 
	#__off_t_deföed


	)

97 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


98 
__off64_t
 
	toff64_t
;

99 
	#__off64_t_deföed


	)

102 #i‚de‡
__ssize_t_deföed


103 
__ssize_t
 
	tssize_t
;

104 
	#__ssize_t_deföed


	)

109 
__BEGIN_NAMESPACE_STD


110 #i‚de‡
__USE_FILE_OFFSET64


111 
_G_Âos_t
 
	tÂos_t
;

113 
_G_Âos64_t
 
	tÂos_t
;

115 
__END_NAMESPACE_STD


116 #ifde‡
__USE_LARGEFILE64


117 
_G_Âos64_t
 
	tÂos64_t
;

121 
	#_IOFBF
 0

	)

122 
	#_IOLBF
 1

	)

123 
	#_IONBF
 2

	)

127 #i‚de‡
BUFSIZ


128 
	#BUFSIZ
 
_IO_BUFSIZ


	)

134 #i‚de‡
EOF


135 
	#EOF
 (-1)

	)

141 
	#SEEK_SET
 0

	)

142 
	#SEEK_CUR
 1

	)

143 
	#SEEK_END
 2

	)

146 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


148 
	#P_tmpdú
 "/tmp"

	)

161 
	~<bôs/°dio_lim.h
>

165 
_IO_FILE
 *
°dö
;

166 
_IO_FILE
 *
°dout
;

167 
_IO_FILE
 *
°dîr
;

168 #ifde‡
__STDC__


170 
	#°dö
 
°dö


	)

171 
	#°dout
 
°dout


	)

172 
	#°dîr
 
°dîr


	)

175 
__BEGIN_NAMESPACE_STD


177 
	$ªmove
 (
__c⁄°
 *
__fûíame
Ë
__THROW
;

179 
	$ª«me
 (
__c⁄°
 *
__ﬁd
, __c⁄° *
__√w
Ë
__THROW
;

180 
__END_NAMESPACE_STD


182 #ifde‡
__USE_ATFILE


184 
	$ª«mót
 (
__ﬁdfd
, 
__c⁄°
 *
__ﬁd
, 
__√wfd
,

185 
__c⁄°
 *
__√w
Ë
__THROW
;

188 
__BEGIN_NAMESPACE_STD


193 #i‚de‡
__USE_FILE_OFFSET64


194 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

196 #ifde‡
__REDIRECT


197 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

199 
	#tmpfûe
 
tmpfûe64


	)

203 #ifde‡
__USE_LARGEFILE64


204 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

208 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

209 
__END_NAMESPACE_STD


211 #ifde‡
__USE_MISC


214 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

218 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


226 *
	$ãm≤am
 (
__c⁄°
 *
__dú
, __c⁄° *
__pfx
)

227 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

231 
__BEGIN_NAMESPACE_STD


236 
	`f˛o£
 (
FILE
 *
__°ªam
);

241 
	`fÊush
 (
FILE
 *
__°ªam
);

242 
__END_NAMESPACE_STD


244 #ifde‡
__USE_MISC


251 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

254 #ifde‡
__USE_GNU


261 
	`f˛o£Æl
 ();

265 
__BEGIN_NAMESPACE_STD


266 #i‚de‡
__USE_FILE_OFFSET64


271 
FILE
 *
	$f›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

272 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

277 
FILE
 *
	$‰e›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

278 
__c⁄°
 *
__ª°ri˘
 
__modes
,

279 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

281 #ifde‡
__REDIRECT


282 
FILE
 *
	`__REDIRECT
 (
f›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

283 
__c⁄°
 *
__ª°ri˘
 
__modes
), 
f›í64
)

284 
__wur
;

285 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

286 
__c⁄°
 *
__ª°ri˘
 
__modes
,

287 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

288 
__wur
;

290 
	#f›í
 
f›í64


	)

291 
	#‰e›í
 
‰e›í64


	)

294 
__END_NAMESPACE_STD


295 #ifde‡
__USE_LARGEFILE64


296 
FILE
 *
	$f›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

297 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

298 
FILE
 *
	$‰e›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

299 
__c⁄°
 *
__ª°ri˘
 
__modes
,

300 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

303 #ifdef 
__USE_POSIX


305 
FILE
 *
	$fd›í
 (
__fd
, 
__c⁄°
 *
__modes
Ë
__THROW
 
__wur
;

308 #ifdef 
__USE_GNU


311 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

312 
__c⁄°
 *
__ª°ri˘
 
__modes
,

313 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

316 #ifde‡
__USE_XOPEN2K8


318 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, 
__c⁄°
 *
__modes
)

319 
__THROW
 
__wur
;

324 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

328 
__BEGIN_NAMESPACE_STD


331 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

335 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

336 
__modes
, 
size_t
 
__n
Ë
__THROW
;

337 
__END_NAMESPACE_STD


339 #ifdef 
__USE_BSD


342 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

343 
size_t
 
__size
Ë
__THROW
;

346 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

350 
__BEGIN_NAMESPACE_STD


355 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

356 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

361 
	`¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

363 
	$•rötf
 (*
__ª°ri˘
 
__s
,

364 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

370 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

371 
_G_va_li°
 
__¨g
);

376 
	`v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

378 
	$v•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

379 
_G_va_li°
 
__¨g
Ë
__THROW
;

380 
__END_NAMESPACE_STD


382 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


383 
__BEGIN_NAMESPACE_C99


385 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

386 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

387 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

389 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

390 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

391 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

392 
__END_NAMESPACE_C99


395 #ifde‡
__USE_GNU


398 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__f
,

399 
_G_va_li°
 
__¨g
)

400 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

401 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

402 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

403 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

404 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

405 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

406 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

409 #ifde‡
__USE_XOPEN2K8


416 
	$vd¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
,

417 
_G_va_li°
 
__¨g
)

418 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

419 
	$d¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

420 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

424 
__BEGIN_NAMESPACE_STD


429 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

430 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

435 
	$sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

437 
	$ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

438 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

440 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

441 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

442 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

443 #ifde‡
__REDIRECT


447 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

448 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

449 
__isoc99_fsˇnf
Ë
__wur
;

450 
	`__REDIRECT
 (
sˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

451 
__isoc99_sˇnf
Ë
__wur
;

452 
	`__REDIRECT
 (
ssˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__s
,

453 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

454 
__isoc99_ssˇnf
Ë
__THROW
;

456 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

457 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

458 
	$__isoc99_sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

459 
	$__isoc99_ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

460 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

461 
	#fsˇnf
 
__isoc99_fsˇnf


	)

462 
	#sˇnf
 
__isoc99_sˇnf


	)

463 
	#ssˇnf
 
__isoc99_ssˇnf


	)

467 
__END_NAMESPACE_STD


469 #ifdef 
__USE_ISOC99


470 
__BEGIN_NAMESPACE_C99


475 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

476 
_G_va_li°
 
__¨g
)

477 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

483 
	$vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

484 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

487 
	$vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

488 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

489 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

491 #i‡!
deföed
 
__USE_GNU
 \

492 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

493 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

494 #ifde‡
__REDIRECT


498 
	`__REDIRECT
 (
vfsˇnf
,

499 (
FILE
 *
__ª°ri˘
 
__s
,

500 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

501 
__isoc99_vfsˇnf
)

502 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

503 
	`__REDIRECT
 (
vsˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

504 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

505 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

506 
	`__REDIRECT
 (
vssˇnf
,

507 (
__c⁄°
 *
__ª°ri˘
 
__s
,

508 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

509 
__isoc99_vssˇnf
)

510 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

512 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

513 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

514 
_G_va_li°
 
__¨g
Ë
__wur
;

515 
	$__isoc99_vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

516 
_G_va_li°
 
__¨g
Ë
__wur
;

517 
	$__isoc99_vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

518 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

519 
_G_va_li°
 
__¨g
Ë
__THROW
;

520 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

521 
	#vsˇnf
 
__isoc99_vsˇnf


	)

522 
	#vssˇnf
 
__isoc99_vssˇnf


	)

526 
__END_NAMESPACE_C99


530 
__BEGIN_NAMESPACE_STD


535 
	`fgëc
 (
FILE
 *
__°ªam
);

536 
	`gëc
 (
FILE
 *
__°ªam
);

542 
	`gëch¨
 ();

543 
__END_NAMESPACE_STD


547 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

549 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


554 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

555 
	`gëch¨_u∆ocked
 ();

558 #ifde‡
__USE_MISC


565 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

569 
__BEGIN_NAMESPACE_STD


577 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

578 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

584 
	`putch¨
 (
__c
);

585 
__END_NAMESPACE_STD


589 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

591 #ifde‡
__USE_MISC


598 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

601 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


606 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

607 
	`putch¨_u∆ocked
 (
__c
);

611 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 \

612 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

614 
	`gëw
 (
FILE
 *
__°ªam
);

617 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

621 
__BEGIN_NAMESPACE_STD


626 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

627 
__wur
;

634 *
	$gës
 (*
__s
Ë
__wur
;

635 
__END_NAMESPACE_STD


637 #ifde‡
__USE_GNU


644 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

645 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

649 #ifdef 
__USE_XOPEN2K8


660 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

661 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

662 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

663 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

664 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

665 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

673 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

674 
size_t
 *
__ª°ri˘
 
__n
,

675 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

679 
__BEGIN_NAMESPACE_STD


684 
	`Âuts
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

690 
	`puts
 (
__c⁄°
 *
__s
);

697 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

704 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

705 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

710 
size_t
 
	$fwrôe
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

711 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
Ë
__wur
;

712 
__END_NAMESPACE_STD


714 #ifde‡
__USE_GNU


721 
	`Âuts_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

722 
FILE
 *
__ª°ri˘
 
__°ªam
);

725 #ifde‡
__USE_MISC


732 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

733 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

734 
size_t
 
	$fwrôe_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

735 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

739 
__BEGIN_NAMESPACE_STD


744 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

749 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

754 
	`ªwöd
 (
FILE
 *
__°ªam
);

755 
__END_NAMESPACE_STD


762 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


763 #i‚de‡
__USE_FILE_OFFSET64


768 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

773 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

775 #ifde‡
__REDIRECT


776 
	`__REDIRECT
 (
f£eko
,

777 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

778 
f£eko64
);

779 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

781 
	#f£eko
 
f£eko64


	)

782 
	#·ñlo
 
·ñlo64


	)

787 
__BEGIN_NAMESPACE_STD


788 #i‚de‡
__USE_FILE_OFFSET64


793 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

798 
	`f£ços
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
);

800 #ifde‡
__REDIRECT


801 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

802 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

803 
	`__REDIRECT
 (
f£ços
,

804 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
), 
f£ços64
);

806 
	#fgëpos
 
fgëpos64


	)

807 
	#f£ços
 
f£ços64


	)

810 
__END_NAMESPACE_STD


812 #ifde‡
__USE_LARGEFILE64


813 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

814 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

815 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

816 
	`f£ços64
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos64_t
 *
__pos
);

819 
__BEGIN_NAMESPACE_STD


821 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

823 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

825 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

826 
__END_NAMESPACE_STD


828 #ifde‡
__USE_MISC


830 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

831 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

832 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

836 
__BEGIN_NAMESPACE_STD


841 
	`≥º‹
 (
__c⁄°
 *
__s
);

842 
__END_NAMESPACE_STD


848 
	~<bôs/sys_îæi°.h
>

851 #ifdef 
__USE_POSIX


853 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

856 #ifde‡
__USE_MISC


858 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

862 #i‡(
deföed
 
__USE_POSIX2
 || deföed 
__USE_SVID
 || deföed 
__USE_BSD
 || \

863 
deföed
 
__USE_MISC
)

868 
FILE
 *
	$p›í
 (
__c⁄°
 *
__comm™d
, __c⁄° *
__modes
Ë
__wur
;

874 
	`p˛o£
 (
FILE
 *
__°ªam
);

878 #ifdef 
__USE_POSIX


880 *
	$˘îmid
 (*
__s
Ë
__THROW
;

884 #ifde‡
__USE_XOPEN


886 *
	`cu£rid
 (*
__s
);

890 #ifdef 
__USE_GNU


891 
ob°ack
;

894 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

895 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

896 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

897 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

898 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

899 
_G_va_li°
 
__¨gs
)

900 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

904 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


908 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

912 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

915 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

918 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


922 
	#__√ed_gë›t


	)

923 
	~<gë›t.h
>

928 #ifde‡
__USE_EXTERN_INLINES


929 
	~<bôs/°dio.h
>

931 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


932 
	~<bôs/°dio2.h
>

934 #ifde‡
__LDBL_COMPAT


935 
	~<bôs/°dio-ldbl.h
>

938 
__END_DECLS


	@/usr/include/stdlib.h

23 #i‚def 
_STDLIB_H


25 
	~<„©uªs.h
>

28 
	#__√ed_size_t


	)

29 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


30 
	#__√ed_wch¨_t


	)

31 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	g__BEGIN_DECLS


37 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


38 
	#_STDLIB_H
 1

	)

40 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


42 
	~<bôs/waôÊags.h
>

43 
	~<bôs/waô°©us.h
>

45 #ifde‡
__USE_BSD


50 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


51 
	#__WAIT_INT
(
°©us
) \

52 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

53 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

55 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

63 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


64 
	#__WAIT_STATUS
 *

	)

65 
	#__WAIT_STATUS_DEFN
 *

	)

70 
waô
 *
	m__u±r
;

71 *
	m__ùå
;

72 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

73 
	#__WAIT_STATUS_DEFN
 *

	)

78 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

79 
	#__WAIT_STATUS
 *

	)

80 
	#__WAIT_STATUS_DEFN
 *

	)

85 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

90 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

91 #ifde‡
__WIFCONTINUED


92 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

96 
__BEGIN_NAMESPACE_STD


100 
	mquŸ
;

101 
	mªm
;

102 } 
	tdiv_t
;

105 #i‚de‡
__ldiv_t_deföed


108 
	mquŸ
;

109 
	mªm
;

110 } 
	tldiv_t
;

111 
	#__ldiv_t_deföed
 1

	)

113 
	g__END_NAMESPACE_STD


115 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


116 
__BEGIN_NAMESPACE_C99


118 
__exãnsi⁄__
 struct

120 
	mquŸ
;

121 
	mªm
;

122 } 
	tŒdiv_t
;

123 
	#__Œdiv_t_deföed
 1

	)

124 
	g__END_NAMESPACE_C99


129 
	#RAND_MAX
 2147483647

	)

134 
	#EXIT_FAILURE
 1

	)

135 
	#EXIT_SUCCESS
 0

	)

139 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

140 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

143 
__BEGIN_NAMESPACE_STD


145 
	$©of
 (
__c⁄°
 *
__≈å
)

146 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

148 
	$©oi
 (
__c⁄°
 *
__≈å
)

149 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

151 
	$©ﬁ
 (
__c⁄°
 *
__≈å
)

152 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

153 
__END_NAMESPACE_STD


155 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

156 
__BEGIN_NAMESPACE_C99


158 
__exãnsi⁄__
 
	$©ﬁl
 (
__c⁄°
 *
__≈å
)

159 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

160 
__END_NAMESPACE_C99


163 
__BEGIN_NAMESPACE_STD


165 
	$°πod
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

166 **
__ª°ri˘
 
__íd±r
)

167 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

168 
__END_NAMESPACE_STD


170 #ifdef 
__USE_ISOC99


171 
__BEGIN_NAMESPACE_C99


173 
	$°πof
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

174 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

176 
	$°πﬁd
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

177 **
__ª°ri˘
 
__íd±r
)

178 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

179 
__END_NAMESPACE_C99


182 
__BEGIN_NAMESPACE_STD


184 
	$°πﬁ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

185 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

186 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

188 
	$°πoul
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

189 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

190 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

191 
__END_NAMESPACE_STD


193 #i‡
deföed
 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_BSD


195 
__exãnsi⁄__


196 
	$°πoq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

197 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

198 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

200 
__exãnsi⁄__


201 
	$°πouq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

202 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

203 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

206 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

207 
__BEGIN_NAMESPACE_C99


209 
__exãnsi⁄__


210 
	$°πﬁl
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

211 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

212 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

214 
__exãnsi⁄__


215 
	$°πouŒ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

216 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

217 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

218 
__END_NAMESPACE_C99


222 #ifde‡
__USE_GNU


236 
	~<xloˇÀ.h
>

240 
	$°πﬁ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

241 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

242 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

244 
	$°πoul_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

245 **
__ª°ri˘
 
__íd±r
,

246 
__ba£
, 
__loˇÀ_t
 
__loc
)

247 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

249 
__exãnsi⁄__


250 
	$°πﬁl_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

251 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

252 
__loˇÀ_t
 
__loc
)

253 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

255 
__exãnsi⁄__


256 
	$°πouŒ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

257 **
__ª°ri˘
 
__íd±r
,

258 
__ba£
, 
__loˇÀ_t
 
__loc
)

259 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

261 
	$°πod_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

262 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

263 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

265 
	$°πof_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

266 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

267 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

269 
	$°πﬁd_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

270 **
__ª°ri˘
 
__íd±r
,

271 
__loˇÀ_t
 
__loc
)

272 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

276 #ifde‡
__USE_EXTERN_INLINES


277 
__BEGIN_NAMESPACE_STD


278 
__exã∫_ölöe
 

279 
	`__NTH
 (
	$©of
 (
__c⁄°
 *
__≈å
))

281  
	`°πod
 (
__≈å
, (**Ë
NULL
);

282 
	}
}

283 
__exã∫_ölöe
 

284 
__NTH
 (
	$©oi
 (
__c⁄°
 *
__≈å
))

286  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

287 
	}
}

288 
__exã∫_ölöe
 

289 
__NTH
 (
	$©ﬁ
 (
__c⁄°
 *
__≈å
))

291  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

292 
	}
}

293 
	g__END_NAMESPACE_STD


295 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


296 
__BEGIN_NAMESPACE_C99


297 
__exãnsi⁄__
 
__exã∫_ölöe
 

298 
__NTH
 (
	$©ﬁl
 (
__c⁄°
 *
__≈å
))

300  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

301 
	}
}

302 
	g__END_NAMESPACE_C99


307 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


311 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

314 
	$a64l
 (
__c⁄°
 *
__s
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

319 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_BSD


320 
	~<sys/ty≥s.h
>

327 
	$øndom
 (Ë
__THROW
;

330 
	$§™dom
 (
__£ed
Ë
__THROW
;

336 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

337 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

341 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

344 #ifde‡
__USE_MISC


349 
	søndom_d©a


351 
öt32_t
 *
Âå
;

352 
öt32_t
 *
Ωå
;

353 
öt32_t
 *
°©e
;

354 
ønd_ty≥
;

355 
ønd_deg
;

356 
ønd_£p
;

357 
öt32_t
 *
íd_±r
;

360 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

361 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

363 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

364 
__THROW
 
	`__n⁄nuŒ
 ((2));

366 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

367 
size_t
 
__°©ñí
,

368 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

369 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

371 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

372 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

373 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

378 
__BEGIN_NAMESPACE_STD


380 
	$ønd
 (Ë
__THROW
;

382 
	$§™d
 (
__£ed
Ë
__THROW
;

383 
__END_NAMESPACE_STD


385 #ifde‡
__USE_POSIX


387 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

391 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


395 
	$dønd48
 (Ë
__THROW
;

396 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

399 
	$Ã™d48
 (Ë
__THROW
;

400 
	$ƒ™d48
 (
__xsubi
[3])

401 
__THROW
 
	`__n⁄nuŒ
 ((1));

404 
	$mønd48
 (Ë
__THROW
;

405 
	$jønd48
 (
__xsubi
[3])

406 
__THROW
 
	`__n⁄nuŒ
 ((1));

409 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

410 *
	$£ed48
 (
__£ed16v
[3])

411 
__THROW
 
	`__n⁄nuŒ
 ((1));

412 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

414 #ifde‡
__USE_MISC


418 
	sdønd48_d©a


420 
__x
[3];

421 
__ﬁd_x
[3];

422 
__c
;

423 
__öô
;

424 
__a
;

428 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

429 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$î™d48_r
 (
__xsubi
[3],

431 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

432 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

435 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

436 *
__ª°ri˘
 
__ªsu…
)

437 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

438 
	$ƒ™d48_r
 (
__xsubi
[3],

439 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

444 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

445 *
__ª°ri˘
 
__ªsu…
)

446 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

447 
	$jønd48_r
 (
__xsubi
[3],

448 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

449 *
__ª°ri˘
 
__ªsu…
)

450 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

453 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

454 
__THROW
 
	`__n⁄nuŒ
 ((2));

456 
	$£ed48_r
 (
__£ed16v
[3],

457 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$lc⁄g48_r
 (
__∑øm
[7],

460 
dønd48_d©a
 *
__buf„r
)

461 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

467 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


468 
	#__mÆloc_™d_ˇŒoc_deföed


	)

469 
__BEGIN_NAMESPACE_STD


471 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

473 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

474 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

475 
__END_NAMESPACE_STD


478 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


479 
__BEGIN_NAMESPACE_STD


485 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

486 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

488 
	$‰ì
 (*
__±r
Ë
__THROW
;

489 
__END_NAMESPACE_STD


491 #ifdef 
__USE_MISC


493 
	$c‰ì
 (*
__±r
Ë
__THROW
;

496 #i‡
deföed
 
__USE_GNU
 || deföed 
__USE_BSD
 || deföed 
__USE_MISC


497 
	~<Æloˇ.h
>

500 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

501 || 
deföed
 
__USE_BSD


503 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

506 #ifde‡
__USE_XOPEN2K


508 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

509 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

512 
__BEGIN_NAMESPACE_STD


514 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

518 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

520 #ifde‡
__USE_GNU


524 #ifde‡
__˝lu•lus


525 "C++" 
	`©_quick_exô
 ((*
__func
) ())

526 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

528 
	`©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

531 
__END_NAMESPACE_STD


533 #ifdef 
__USE_MISC


536 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

537 
__THROW
 
	`__n⁄nuŒ
 ((1));

540 
__BEGIN_NAMESPACE_STD


544 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

546 #ifde‡
__USE_GNU


552 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

554 
__END_NAMESPACE_STD


556 #ifde‡
__USE_ISOC99


557 
__BEGIN_NAMESPACE_C99


560 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

561 
__END_NAMESPACE_C99


565 
__BEGIN_NAMESPACE_STD


567 *
	$gëív
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

568 
__END_NAMESPACE_STD


572 *
	$__£cuª_gëív
 (
__c⁄°
 *
__«me
)

573 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

575 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


579 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

582 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


585 
	$£ãnv
 (
__c⁄°
 *
__«me
, __c⁄° *
__vÆue
, 
__ª∂a˚
)

586 
__THROW
 
	`__n⁄nuŒ
 ((2));

589 
	$un£ãnv
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

592 #ifdef 
__USE_MISC


596 
	$˛óªnv
 (Ë
__THROW
;

600 #i‡
deföed
 
__USE_MISC
 \

601 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
)

606 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

609 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 \

610 || 
deföed
 
__USE_XOPEN2K8


619 #i‚de‡
__USE_FILE_OFFSET64


620 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

622 #ifde‡
__REDIRECT


623 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

624 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

626 
	#mk°emp
 
mk°emp64


	)

629 #ifde‡
__USE_LARGEFILE64


630 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

634 #ifde‡
__USE_MISC


641 #i‚de‡
__USE_FILE_OFFSET64


642 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

644 #ifde‡
__REDIRECT


645 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

646 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

648 
	#mk°emps
 
mk°emps64


	)

651 #ifde‡
__USE_LARGEFILE64


652 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

653 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

657 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K8


663 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

666 #ifde‡
__USE_GNU


673 #i‚de‡
__USE_FILE_OFFSET64


674 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

676 #ifde‡
__REDIRECT


677 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

678 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

680 
	#mko°emp
 
mko°emp64


	)

683 #ifde‡
__USE_LARGEFILE64


684 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

693 #i‚de‡
__USE_FILE_OFFSET64


694 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

695 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

697 #ifde‡
__REDIRECT


698 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

699 
__Êags
), 
mko°emps64
)

700 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

702 
	#mko°emps
 
mko°emps64


	)

705 #ifde‡
__USE_LARGEFILE64


706 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

707 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

712 
__BEGIN_NAMESPACE_STD


717 
	$sy°em
 (
__c⁄°
 *
__comm™d
Ë
__wur
;

718 
__END_NAMESPACE_STD


721 #ifdef 
__USE_GNU


724 *
	$ˇn⁄iˇlize_fûe_«me
 (
__c⁄°
 *
__«me
)

725 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

728 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


734 *
	$ªÆ∑th
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

735 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

740 #i‚de‡
__COMPAR_FN_T


741 
	#__COMPAR_FN_T


	)

742 (*
	t__com∑r_‚_t
Ë(
	t__c⁄°
 *, __const *);

744 #ifdef 
__USE_GNU


745 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

748 #ifde‡
__USE_GNU


749 (*
	t__com∑r_d_‚_t
Ë(
	t__c⁄°
 *, __const *, *);

752 
__BEGIN_NAMESPACE_STD


755 *
	$b£¨ch
 (
__c⁄°
 *
__key
, __c⁄° *
__ba£
,

756 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

757 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

761 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

762 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

763 #ifde‡
__USE_GNU


764 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

765 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

766 
	`__n⁄nuŒ
 ((1, 4));

771 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

772 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

773 
__END_NAMESPACE_STD


775 #ifde‡
__USE_ISOC99


776 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

777 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

781 
__BEGIN_NAMESPACE_STD


785 
div_t
 
	$div
 (
__numî
, 
__díom
)

786 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

787 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

788 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

789 
__END_NAMESPACE_STD


791 #ifde‡
__USE_ISOC99


792 
__BEGIN_NAMESPACE_C99


793 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

794 
__díom
)

795 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

796 
__END_NAMESPACE_C99


800 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

801 || 
deföed
 
__USE_SVID


808 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

809 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

814 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

815 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

820 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

821 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

824 #ifde‡
__USE_MISC


826 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

827 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

828 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

829 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

830 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

831 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

832 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

833 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

838 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

839 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

840 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

841 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

842 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

843 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

845 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

846 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

847 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

848 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

849 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

850 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

851 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

852 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

857 
__BEGIN_NAMESPACE_STD


860 
	$mbÀn
 (
__c⁄°
 *
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

863 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

864 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

867 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
 
__wur
;

871 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

872 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

874 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

875 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

876 
__THROW
;

877 
__END_NAMESPACE_STD


880 #ifde‡
__USE_SVID


885 
	$Ωm©ch
 (
__c⁄°
 *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

889 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


896 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

897 *
__c⁄°
 *
__ª°ri˘
 
__tokís
,

898 **
__ª°ri˘
 
__vÆuï
)

899 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

903 #ifde‡
__USE_XOPEN


905 
	$£tkey
 (
__c⁄°
 *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

911 #ifde‡
__USE_XOPEN2KXSI


913 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

916 #ifde‡
__USE_XOPEN


921 
	$gø¡±
 (
__fd
Ë
__THROW
;

925 
	$u∆ock±
 (
__fd
Ë
__THROW
;

930 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

933 #ifde‡
__USE_GNU


937 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

938 
__THROW
 
	`__n⁄nuŒ
 ((2));

941 
	`gë±
 ();

944 #ifde‡
__USE_BSD


948 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

949 
__THROW
 
	`__n⁄nuŒ
 ((1));

954 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


955 
	~<bôs/°dlib.h
>

957 #ifde‡
__LDBL_COMPAT


958 
	~<bôs/°dlib-ldbl.h
>

962 #unde‡
__√ed_mÆloc_™d_ˇŒoc


964 
__END_DECLS


	@/usr/include/string.h

24 #i‚def 
_STRING_H


25 
	#_STRING_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

37 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

38 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

42 
__BEGIN_NAMESPACE_STD


44 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
,

45 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

46 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

49 *
	$memmove
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
)

50 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

51 
__END_NAMESPACE_STD


56 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN


57 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

58 
__c
, 
size_t
 
__n
)

59 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

63 
__BEGIN_NAMESPACE_STD


65 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

68 
	$memcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

69 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

72 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


75 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

76 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

77 
__c⁄°
 *
	`memchr
 (__c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

78 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

80 #ifde‡
__OPTIMIZE__


81 
__exã∫_Æways_ölöe
 *

82 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


84  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

87 
__exã∫_Æways_ölöe
 
__c⁄°
 *

88 
	`memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


90  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

93 
	}
}

95 *
	$memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

96 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

98 
__END_NAMESPACE_STD


100 #ifde‡
__USE_GNU


103 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


104 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

105 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

106 "C++" 
__c⁄°
 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

107 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

109 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

110 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

114 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


115 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

116 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

117 "C++" 
__c⁄°
 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

118 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

120 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

121 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

126 
__BEGIN_NAMESPACE_STD


128 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

129 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

131 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

132 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

133 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

137 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

139 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

140 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

143 
	$°rcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

146 
	$°∫cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

147 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

150 
	$°rcﬁl
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

153 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

154 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

155 
__THROW
 
	`__n⁄nuŒ
 ((2));

156 
__END_NAMESPACE_STD


158 #ifde‡
__USE_XOPEN2K8


162 
	~<xloˇÀ.h
>

165 
	$°rcﬁl_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

166 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

168 
size_t
 
	$°rx‰m_l
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
,

169 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

172 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 \

173 || 
deföed
 
__USE_XOPEN2K8


175 *
	$°rdup
 (
__c⁄°
 *
__s
)

176 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

182 #i‡
deföed
 
__USE_XOPEN2K8


183 *
	$°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

184 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

187 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


189 
	#°rdu∑
(
s
) \

190 (
__exãnsi⁄__
 \

192 
__c⁄°
 *
__ﬁd
 = (
s
); \

193 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

194 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

195 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

196 
	}
}))

	)

199 
	#°∫du∑
(
s
, 
n
) \

200 (
__exãnsi⁄__
 \

202 
__c⁄°
 *
__ﬁd
 = (
s
); \

203 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

204 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

205 
__√w
[
__Àn
] = '\0'; \

206 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

207 }))

	)

210 
	g__BEGIN_NAMESPACE_STD


212 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


215 *
°rchr
 (*
__s
, 
__c
)

216 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

217 
__c⁄°
 *
°rchr
 (__c⁄° *
__s
, 
__c
)

218 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

220 #ifde‡
__OPTIMIZE__


221 
__exã∫_Æways_ölöe
 *

222 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


224  
__buûtö_°rchr
 (
__s
, 
__c
);

227 
__exã∫_Æways_ölöe
 
__c⁄°
 *

228 
°rchr
 (
__c⁄°
 *
__s
, 
__c
Ë
	g__THROW


230  
__buûtö_°rchr
 (
__s
, 
__c
);

235 *
	$°rchr
 (
__c⁄°
 *
__s
, 
__c
)

236 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

239 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


242 *
	`°ºchr
 (*
__s
, 
__c
)

243 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

244 
__c⁄°
 *
	`°ºchr
 (__c⁄° *
__s
, 
__c
)

245 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

247 #ifde‡
__OPTIMIZE__


248 
__exã∫_Æways_ölöe
 *

249 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


251  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

254 
__exã∫_Æways_ölöe
 
__c⁄°
 *

255 
	`°ºchr
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


257  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

260 
	}
}

262 *
	$°ºchr
 (
__c⁄°
 *
__s
, 
__c
)

263 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

265 
__END_NAMESPACE_STD


267 #ifde‡
__USE_GNU


270 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


271 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

272 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

273 "C++" 
__c⁄°
 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

274 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

276 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

277 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

281 
__BEGIN_NAMESPACE_STD


284 
size_t
 
	$°rc•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ªje˘
)

285 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

288 
size_t
 
	$°r•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

289 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

291 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


294 *
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
)

295 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

296 
__c⁄°
 *
	`°Ωbrk
 (__c⁄° *
__s
, __c⁄° *
__ac˚±
)

297 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

299 #ifde‡
__OPTIMIZE__


300 
__exã∫_Æways_ölöe
 *

301 
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
Ë
__THROW


303  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

306 
__exã∫_Æways_ölöe
 
__c⁄°
 *

307 
	`°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
Ë
__THROW


309  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

312 
	}
}

314 *
	$°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

318 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


321 *
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

322 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

323 
__c⁄°
 *
	`°r°r
 (__c⁄° *
__hay°ack
,

324 
__c⁄°
 *
__√edÀ
)

325 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

327 #ifde‡
__OPTIMIZE__


328 
__exã∫_Æways_ölöe
 *

329 
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
Ë
__THROW


331  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

334 
__exã∫_Æways_ölöe
 
__c⁄°
 *

335 
	`°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
Ë
__THROW


337  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

340 
	}
}

342 *
	$°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

343 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

348 *
	$°πok
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
)

349 
__THROW
 
	`__n⁄nuŒ
 ((2));

350 
__END_NAMESPACE_STD


354 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

355 
__c⁄°
 *
__ª°ri˘
 
__dñim
,

356 **
__ª°ri˘
 
__ßve_±r
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

358 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


359 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
,

360 **
__ª°ri˘
 
__ßve_±r
)

361 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

364 #ifde‡
__USE_GNU


366 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


367 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

368 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

369 "C++" 
__c⁄°
 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
,

370 
__c⁄°
 *
__√edÀ
)

371 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

373 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

374 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

378 #ifde‡
__USE_GNU


382 *
	$memmem
 (
__c⁄°
 *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

383 
__c⁄°
 *
__√edÀ
, 
size_t
 
__√edÀÀn
)

384 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

388 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

389 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

391 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

392 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

393 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

397 
__BEGIN_NAMESPACE_STD


399 
size_t
 
	$°æí
 (
__c⁄°
 *
__s
)

400 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

401 
__END_NAMESPACE_STD


403 #ifdef 
__USE_XOPEN2K8


406 
size_t
 
	$°∫Àn
 (
__c⁄°
 *
__°rög
, 
size_t
 
__maxÀn
)

407 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

411 
__BEGIN_NAMESPACE_STD


413 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

414 
__END_NAMESPACE_STD


415 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_MISC


423 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


426 #ifde‡
__REDIRECT_NTH


427 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

428 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

429 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

431 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

433 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

438 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

439 
__THROW
 
	`__n⁄nuŒ
 ((2));

443 #ifde‡
__USE_XOPEN2K8


445 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

451 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

453 #ifde‡
__USE_BSD


455 
	$bc›y
 (
__c⁄°
 *
__§c
, *
__de°
, 
size_t
 
__n
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

462 
	$bcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

463 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

466 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


469 *
	`ödex
 (*
__s
, 
__c
)

470 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

471 
__c⁄°
 *
	`ödex
 (__c⁄° *
__s
, 
__c
)

472 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

474 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


475 
__exã∫_Æways_ölöe
 *

476 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


478  
	`__buûtö_ödex
 (
__s
, 
__c
);

481 
__exã∫_Æways_ölöe
 
__c⁄°
 *

482 
	`ödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


484  
	`__buûtö_ödex
 (
__s
, 
__c
);

487 
	}
}

489 *
	$ödex
 (
__c⁄°
 *
__s
, 
__c
)

490 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

494 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


497 *
	`rödex
 (*
__s
, 
__c
)

498 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

499 
__c⁄°
 *
	`rödex
 (__c⁄° *
__s
, 
__c
)

500 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

502 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


503 
__exã∫_Æways_ölöe
 *

504 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


506  
	`__buûtö_rödex
 (
__s
, 
__c
);

509 
__exã∫_Æways_ölöe
 
__c⁄°
 *

510 
	`rödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


512  
	`__buûtö_rödex
 (
__s
, 
__c
);

515 
	}
}

517 *
	$rödex
 (
__c⁄°
 *
__s
, 
__c
)

518 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

523 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

527 #ifdef 
__USE_GNU


528 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

529 #ifde‡
__GNUC__


530 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

531 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

536 
	$°rˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

537 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

540 
	$°∫ˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

541 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

544 #ifdef 
__USE_GNU


547 
	$°rˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

548 
__loˇÀ_t
 
__loc
)

549 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

551 
	$°∫ˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

552 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

553 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

556 #ifdef 
__USE_BSD


559 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

560 
__c⁄°
 *
__ª°ri˘
 
__dñim
)

561 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

564 #ifdef 
__USE_XOPEN2K8


566 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

569 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

570 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

571 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

572 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

576 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

577 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

578 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

579 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

580 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

581 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 #ifdef 
__USE_GNU


586 
	$°rvîscmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

587 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

590 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

593 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

595 #i‚de‡
ba£«me


600 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


601 "C++" *
	$ba£«me
 (*
__fûíame
)

602 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

603 "C++" 
__c⁄°
 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
)

604 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

606 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

612 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

613 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

614 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


634 
	~<bôs/°rög.h
>

637 
	~<bôs/°rög2.h
>

640 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


642 
	~<bôs/°rög3.h
>

646 
__END_DECLS


	@/usr/include/syscall.h

1 
	~<sys/sysˇŒ.h
>

	@/usr/include/alloca.h

19 #i‚def 
_ALLOCA_H


20 
	#_ALLOCA_H
 1

	)

22 
	~<„©uªs.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

27 
	g__BEGIN_DECLS


30 #unde‡
Æloˇ


33 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

35 #ifdef 
__GNUC__


36 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

39 
__END_DECLS


	@/usr/include/bits/stdio-ldbl.h

20 #i‚de‡
_STDIO_H


24 
__BEGIN_NAMESPACE_STD


25 
	$__LDBL_REDIR_DECL
 (
Ârötf
)

26 
	$__LDBL_REDIR_DECL
 (
¥ötf
)

27 
	$__LDBL_REDIR_DECL
 (
•rötf
)

28 
	$__LDBL_REDIR_DECL
 (
vÂrötf
)

29 
	$__LDBL_REDIR_DECL
 (
v¥ötf
)

30 
	$__LDBL_REDIR_DECL
 (
v•rötf
)

31 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

32 && !
deföed
 
__REDIRECT
 \

33 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

34 
	$__LDBL_REDIR1_DECL
 (
fsˇnf
, 
__∆dbl___isoc99_fsˇnf
)

35 
	$__LDBL_REDIR1_DECL
 (
sˇnf
, 
__∆dbl___isoc99_sˇnf
)

36 
	$__LDBL_REDIR1_DECL
 (
ssˇnf
, 
__∆dbl___isoc99_ssˇnf
)

38 
	$__LDBL_REDIR_DECL
 (
fsˇnf
)

39 
	$__LDBL_REDIR_DECL
 (
sˇnf
)

40 
	$__LDBL_REDIR_DECL
 (
ssˇnf
)

42 
__END_NAMESPACE_STD


44 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


45 
__BEGIN_NAMESPACE_C99


46 
	$__LDBL_REDIR_DECL
 (
¢¥ötf
)

47 
	$__LDBL_REDIR_DECL
 (
v¢¥ötf
)

48 
__END_NAMESPACE_C99


51 #ifdef 
__USE_ISOC99


52 
__BEGIN_NAMESPACE_C99


53 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

54 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

55 
	$__LDBL_REDIR1_DECL
 (
vfsˇnf
, 
__∆dbl___isoc99_vfsˇnf
)

56 
	$__LDBL_REDIR1_DECL
 (
vsˇnf
, 
__∆dbl___isoc99_vsˇnf
)

57 
	$__LDBL_REDIR1_DECL
 (
vssˇnf
, 
__∆dbl___isoc99_vssˇnf
)

59 
	$__LDBL_REDIR_DECL
 (
vfsˇnf
)

60 
	$__LDBL_REDIR_DECL
 (
vssˇnf
)

61 
	$__LDBL_REDIR_DECL
 (
vsˇnf
)

63 
__END_NAMESPACE_C99


66 #ifde‡
__USE_GNU


67 
	$__LDBL_REDIR_DECL
 (
vd¥ötf
)

68 
	$__LDBL_REDIR_DECL
 (
d¥ötf
)

69 
	$__LDBL_REDIR_DECL
 (
va•rötf
)

70 
	$__LDBL_REDIR_DECL
 (
__a•rötf
)

71 
	$__LDBL_REDIR_DECL
 (
a•rötf
)

72 
	$__LDBL_REDIR_DECL
 (
ob°ack_¥ötf
)

73 
	$__LDBL_REDIR_DECL
 (
ob°ack_v¥ötf
)

76 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


77 
	$__LDBL_REDIR_DECL
 (
__•rötf_chk
)

78 
	$__LDBL_REDIR_DECL
 (
__v•rötf_chk
)

79 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


80 
	$__LDBL_REDIR_DECL
 (
__¢¥ötf_chk
)

81 
	$__LDBL_REDIR_DECL
 (
__v¢¥ötf_chk
)

83 #i‡
__USE_FORTIFY_LEVEL
 > 1

84 
	$__LDBL_REDIR_DECL
 (
__Ârötf_chk
)

85 
	$__LDBL_REDIR_DECL
 (
__¥ötf_chk
)

86 
	$__LDBL_REDIR_DECL
 (
__vÂrötf_chk
)

87 
	$__LDBL_REDIR_DECL
 (
__v¥ötf_chk
)

88 #ifde‡
__USE_GNU


89 
	$__LDBL_REDIR_DECL
 (
__a•rötf_chk
)

90 
	$__LDBL_REDIR_DECL
 (
__va•rötf_chk
)

91 
	$__LDBL_REDIR_DECL
 (
__d¥ötf_chk
)

92 
	$__LDBL_REDIR_DECL
 (
__vd¥ötf_chk
)

93 
	$__LDBL_REDIR_DECL
 (
__ob°ack_¥ötf_chk
)

94 
	$__LDBL_REDIR_DECL
 (
__ob°ack_v¥ötf_chk
)

	@/usr/include/bits/stdio.h

20 #i‚de‡
_STDIO_H


24 #i‚de‡
__exã∫_ölöe


25 
	#__STDIO_INLINE
 
ölöe


	)

27 
	#__STDIO_INLINE
 
__exã∫_ölöe


	)

31 #ifde‡
__USE_EXTERN_INLINES


34 #i‡!(
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe
)

36 
__STDIO_INLINE
 

37 
	$v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

39  
	`vÂrötf
 (
°dout
, 
__fmt
, 
__¨g
);

40 
	}
}

44 
__STDIO_INLINE
 

45 
	$gëch¨
 ()

47  
	`_IO_gëc
 (
°dö
);

48 
	}
}

51 #ifde‡
__USE_MISC


53 
__STDIO_INLINE
 

54 
	$fgëc_u∆ocked
 (
FILE
 *
__Â
)

56  
	`_IO_gëc_u∆ocked
 (
__Â
);

57 
	}
}

61 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


63 
__STDIO_INLINE
 

64 
	$gëc_u∆ocked
 (
FILE
 *
__Â
)

66  
	`_IO_gëc_u∆ocked
 (
__Â
);

67 
	}
}

70 
__STDIO_INLINE
 

71 
	$gëch¨_u∆ocked
 ()

73  
	`_IO_gëc_u∆ocked
 (
°dö
);

74 
	}
}

79 
__STDIO_INLINE
 

80 
	$putch¨
 (
__c
)

82  
	`_IO_putc
 (
__c
, 
°dout
);

83 
	}
}

86 #ifde‡
__USE_MISC


88 
__STDIO_INLINE
 

89 
	$Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

91  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

92 
	}
}

96 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


98 
__STDIO_INLINE
 

99 
	$putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

101  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

102 
	}
}

105 
__STDIO_INLINE
 

106 
	$putch¨_u∆ocked
 (
__c
)

108  
	`_IO_putc_u∆ocked
 (
__c
, 
°dout
);

109 
	}
}

113 #ifdef 
__USE_GNU


115 
__STDIO_INLINE
 
_IO_ssize_t


116 
	$gëlöe
 (**
__löïå
, 
size_t
 *
__n
, 
FILE
 *
__°ªam
)

118  
	`__gëdñim
 (
__löïå
, 
__n
, '\n', 
__°ªam
);

119 
	}
}

123 #ifde‡
__USE_MISC


125 
__STDIO_INLINE
 

126 
__NTH
 (
	$„of_u∆ocked
 (
FILE
 *
__°ªam
))

128  
	`_IO_„of_u∆ocked
 (
__°ªam
);

129 
	}
}

132 
__STDIO_INLINE
 

133 
__NTH
 (
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
))

135  
	`_IO_„º‹_u∆ocked
 (
__°ªam
);

136 
	}
}

142 #i‡
deföed
 
__USE_MISC
 && deföed 
__GNUC__
 && deföed 
__OPTIMIZE__
 \

143 && !
deföed
 
	g__˝lu•lus


145 
	#‰ód_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

146 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

147 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

148 && (
size_t
Ë(
size
) != 0) \

149 ? ({ *
__±r
 = (*Ë(
±r
); \

150 
FILE
 *
__°ªam
 = (
°ªam
); \

151 
size_t
 
__˙t
; \

152 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

153 
__˙t
 > 0; --__cnt) \

155 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
); \

156 i‡(
__c
 =
EOF
) \

158 *
__±r
++ = 
__c
; \

160 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

161 / (
size_t
Ë(
size
); }) \

162 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

163 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

165 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

166 (Ë(
n
), (
size_t
) 0) \

167 : 
	`‰ód_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

169 
	#fwrôe_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

170 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

171 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

172 && (
size_t
Ë(
size
) != 0) \

173 ? ({ c⁄° *
__±r
 = (c⁄° *Ë(
±r
); \

174 
FILE
 *
__°ªam
 = (
°ªam
); \

175 
size_t
 
__˙t
; \

176 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

177 
__˙t
 > 0; --__cnt) \

178 i‡(
	`_IO_putc_u∆ocked
 (*
__±r
++, 
__°ªam
Ë=
EOF
) \

180 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

181 / (
size_t
Ë(
size
); }) \

182 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

183 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

185 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

186 (Ë(
n
), (
size_t
) 0) \

187 : 
	`fwrôe_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

191 #unde‡
__STDIO_INLINE


	@/usr/include/bits/stdio2.h

20 #i‚de‡
_STDIO_H


24 
	$__•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

25 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

26 
	$__v•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

27 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

28 
_G_va_li°
 
__≠
Ë
__THROW
;

30 #ifde‡
__va_¨g_∑ck


31 
__exã∫_Æways_ölöe
 

32 
	`__NTH
 (
	$•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__fmt
, ...))

34  
	`__buûtö___•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

35 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

36 
	}
}

37 #ñi‡!
deföed
 
__˝lu•lus


38 
	#•rötf
(
°r
, ...) \

39 
	`__buûtö___•rötf_chk
 (
°r
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

40 
__VA_ARGS__
)

	)

43 
__exã∫_Æways_ölöe
 

44 
__NTH
 (
	$v•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__fmt
,

45 
_G_va_li°
 
__≠
))

47  
	`__buûtö___v•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

48 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

49 
	}
}

51 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


53 
	$__¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

54 
size_t
 
__¶í
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

55 ...Ë
__THROW
;

56 
	$__v¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

57 
size_t
 
__¶í
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

58 
_G_va_li°
 
__≠
Ë
__THROW
;

60 #ifde‡
__va_¨g_∑ck


61 
__exã∫_Æways_ölöe
 

62 
	`__NTH
 (
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

63 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...))

65  
	`__buûtö___¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

66 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

67 
	}
}

68 #ñi‡!
deföed
 
__˝lu•lus


69 
	#¢¥ötf
(
°r
, 
Àn
, ...) \

70 
	`__buûtö___¢¥ötf_chk
 (
°r
, 
Àn
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

71 
__VA_ARGS__
)

	)

74 
__exã∫_Æways_ölöe
 

75 
__NTH
 (
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

76 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

78  
	`__buûtö___v¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

79 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

80 
	}
}

84 #i‡
__USE_FORTIFY_LEVEL
 > 1

86 
__Ârötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

87 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

88 
__¥ötf_chk
 (
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

89 
__vÂrötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

90 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__≠
);

91 
__v¥ötf_chk
 (
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

92 
_G_va_li°
 
__≠
);

94 #ifde‡
__va_¨g_∑ck


95 
__exã∫_Æways_ölöe
 

96 
	$Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__c⁄°
 *__ª°ri˘ 
__fmt
, ...)

98  
	`__Ârötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

99 
	`__va_¨g_∑ck
 ());

100 
	}
}

102 
__exã∫_Æways_ölöe
 

103 
	$¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

105  
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

106 
	}
}

107 #ñi‡!
deföed
 
__˝lu•lus


108 
	#¥ötf
(...) \

109 
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

110 
	#Ârötf
(
°ªam
, ...) \

111 
	`__Ârötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

114 
__exã∫_Æways_ölöe
 

115 
	$v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

117 #ifde‡
__USE_EXTERN_INLINES


118  
	`__vÂrötf_chk
 (
°dout
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

120  
	`__v¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

122 
	}
}

124 
__exã∫_Æways_ölöe
 

125 
	$vÂrötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

126 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

128  
	`__vÂrötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

129 
	}
}

131 #ifde‡
__USE_GNU


133 
	$__a•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

134 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

135 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 4))Ë
__wur
;

136 
	$__va•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

137 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

138 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 0))Ë
__wur
;

139 
	$__d¥ötf_chk
 (
__fd
, 
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
,

140 ...Ë
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

141 
	$__vd¥ötf_chk
 (
__fd
, 
__Êag
,

142 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

143 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

144 
	$__ob°ack_¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

145 
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

147 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

148 
	$__ob°ack_v¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

149 
__Êag
,

150 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

151 
_G_va_li°
 
__¨gs
)

152 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

154 #ifde‡
__va_¨g_∑ck


155 
__exã∫_Æways_ölöe
 

156 
	`__NTH
 (
	$a•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__fmt
, ...))

158  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

159 
	`__va_¨g_∑ck
 ());

160 
	}
}

162 
__exã∫_Æways_ölöe
 

163 
__NTH
 (
	$__a•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__fmt
,

166  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

167 
	`__va_¨g_∑ck
 ());

168 
	}
}

170 
__exã∫_Æways_ölöe
 

171 
	$d¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

173  
	`__d¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

174 
	`__va_¨g_∑ck
 ());

175 
	}
}

177 
__exã∫_Æways_ölöe
 

178 
__NTH
 (
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

179 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...))

181  
	`__ob°ack_¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

182 
	`__va_¨g_∑ck
 ());

183 
	}
}

184 #ñi‡!
deföed
 
__˝lu•lus


185 
	#a•rötf
(
±r
, ...) \

186 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

187 
	#__a•rötf
(
±r
, ...) \

188 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

189 
	#d¥ötf
(
fd
, ...) \

190 
	`__d¥ötf_chk
 (
fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

191 
	#ob°ack_¥ötf
(
ob°ack
, ...) \

192 
	`__ob°ack_¥ötf_chk
 (
ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

195 
__exã∫_Æways_ölöe
 

196 
__NTH
 (
	$va•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__fmt
,

197 
_G_va_li°
 
__≠
))

199  
	`__va•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

200 
	}
}

202 
__exã∫_Æways_ölöe
 

203 
	$vd¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

205  
	`__vd¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

206 
	}
}

208 
__exã∫_Æways_ölöe
 

209 
__NTH
 (
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

210 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

212  
	`__ob°ack_v¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

213 
__≠
);

214 
	}
}

220 *
	$__gës_chk
 (*
__°r
, 
size_t
Ë
__wur
;

221 *
	`__REDIRECT
 (
__gës_w¨n
, (*
__°r
), 
gës
)

222 
__wur
 
	`__w¨«âr
 ("please use fgets or getline instead, gets can't "

225 
__exã∫_Æways_ölöe
 
__wur
 *

226 
	$gës
 (*
__°r
)

228 i‡(
	`__bos
 (
__°r
Ë!(
size_t
) -1)

229  
	`__gës_chk
 (
__°r
, 
	`__bos
 (__str));

230  
	`__gës_w¨n
 (
__°r
);

231 
	}
}

233 *
	$__fgës_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

234 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

235 *
	`__REDIRECT
 (
__fgës_Æüs
,

236 (*
__ª°ri˘
 
__s
, 
__n
,

237 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës
Ë
__wur
;

238 *
	`__REDIRECT
 (
__fgës_chk_w¨n
,

239 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

240 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_chk
)

241 
__wur
 
	`__w¨«âr
 ("fgets called with bigger sizeÅhanÜength "

244 
__exã∫_Æways_ölöe
 
__wur
 *

245 
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

247 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

249 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

250  
	`__fgës_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

252 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

253  
	`__fgës_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

255  
	`__fgës_Æüs
 (
__s
, 
__n
, 
__°ªam
);

256 
	}
}

258 
size_t
 
	$__‰ód_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

259 
size_t
 
__size
, size_à
__n
,

260 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

261 
size_t
 
	`__REDIRECT
 (
__‰ód_Æüs
,

262 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

263 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

264 
‰ód
Ë
__wur
;

265 
size_t
 
	`__REDIRECT
 (
__‰ód_chk_w¨n
,

266 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

267 
size_t
 
__size
, size_à
__n
,

268 
FILE
 *
__ª°ri˘
 
__°ªam
),

269 
__‰ód_chk
)

270 
__wur
 
	`__w¨«âr
 ("fread called with bigger size *ÇmembÅhanÜength "

273 
__exã∫_Æways_ölöe
 
__wur
 
size_t


274 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

275 
FILE
 *
__ª°ri˘
 
__°ªam
)

277 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

279 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

280 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

281 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

282  
	`__‰ód_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

284 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

285  
	`__‰ód_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

287  
	`__‰ód_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

288 
	}
}

290 #ifde‡
__USE_GNU


291 *
	$__fgës_u∆ocked_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
,

292 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

293 *
	`__REDIRECT
 (
__fgës_u∆ocked_Æüs
,

294 (*
__ª°ri˘
 
__s
, 
__n
,

295 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës_u∆ocked
Ë
__wur
;

296 *
	`__REDIRECT
 (
__fgës_u∆ocked_chk_w¨n
,

297 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

298 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_u∆ocked_chk
)

299 
__wur
 
	`__w¨«âr
 ("fgets_unlocked called with bigger sizeÅhanÜength "

302 
__exã∫_Æways_ölöe
 
__wur
 *

303 
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

305 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

307 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

308  
	`__fgës_u∆ocked_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

310 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

311  
	`__fgës_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

313  
	`__fgës_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

314 
	}
}

317 #ifde‡
__USE_MISC


318 #unde‡
‰ód_u∆ocked


319 
size_t
 
	$__‰ód_u∆ocked_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

320 
size_t
 
__size
, size_à
__n
,

321 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

322 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_Æüs
,

323 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

324 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

325 
‰ód_u∆ocked
Ë
__wur
;

326 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_chk_w¨n
,

327 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

328 
size_t
 
__size
, size_à
__n
,

329 
FILE
 *
__ª°ri˘
 
__°ªam
),

330 
__‰ód_u∆ocked_chk
)

331 
__wur
 
	`__w¨«âr
 ("fread_unlocked called with bigger size *ÇmembÅhan "

334 
__exã∫_Æways_ölöe
 
__wur
 
size_t


335 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

336 
FILE
 *
__ª°ri˘
 
__°ªam
)

338 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

340 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

341 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

342 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

343  
	`__‰ód_u∆ocked_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

344 
__°ªam
);

346 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

347  
	`__‰ód_u∆ocked_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

348 
__°ªam
);

351 #ifde‡
__USE_EXTERN_INLINES


352 i‡(
	`__buûtö_c⁄°™t_p
 (
__size
)

353 && 
	`__buûtö_c⁄°™t_p
 (
__n
)

354 && (
__size
 | 
__n
Ë< (((
size_t
) 1) << (8 *  (size_t) / 2))

355 && 
__size
 * 
__n
 <= 8)

357 
size_t
 
__˙t
 = 
__size
 * 
__n
;

358 *
__˝å
 = (*Ë
__±r
;

359 i‡(
__˙t
 == 0)

362 ; 
__˙t
 > 0; --__cnt)

364 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
);

365 i‡(
__c
 =
EOF
)

367 *
__˝å
++ = 
__c
;

369  (
__˝å
 - (*Ë
__±r
Ë/ 
__size
;

372  
	`__‰ód_u∆ocked_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

373 
	}
}

	@/usr/include/bits/stdio_lim.h

19 #i‡!
deföed
 
_STDIO_H
 && !deföed 
__√ed_FOPEN_MAX
 && !deföed 
__√ed_IOV_MAX


23 #ifde‡
_STDIO_H


24 
	#L_tm≤am
 20

	)

25 
	#TMP_MAX
 238328

	)

26 
	#FILENAME_MAX
 4096

	)

28 #ifde‡
__USE_POSIX


29 
	#L_˘îmid
 9

	)

30 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


31 
	#L_cu£rid
 9

	)

36 #i‡
deföed
 
__√ed_FOPEN_MAX
 || deföed 
_STDIO_H


37 #unde‡
FOPEN_MAX


38 
	#FOPEN_MAX
 16

	)

41 #i‡
deföed
 
__√ed_IOV_MAX
 && !deföed 
IOV_MAX


42 
	#IOV_MAX
 1024

	)

	@/usr/include/bits/stdlib-ldbl.h

20 #i‚de‡
_STDLIB_H


24 #ifdef 
__USE_ISOC99


25 
__BEGIN_NAMESPACE_C99


26 
	$__LDBL_REDIR1_DECL
 (
°πﬁd
, 
°πod
)

27 
__END_NAMESPACE_C99


30 #ifde‡
__USE_GNU


31 
	$__LDBL_REDIR1_DECL
 (
°πﬁd_l
, 
°πod_l
)

34 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


35 #ifde‡
__USE_MISC


36 
	$__LDBL_REDIR1_DECL
 (
qecvt
, 
ecvt
)

37 
	$__LDBL_REDIR1_DECL
 (
qfcvt
, 
fcvt
)

38 
	$__LDBL_REDIR1_DECL
 (
qgcvt
, 
gcvt
)

39 
	$__LDBL_REDIR1_DECL
 (
qecvt_r
, 
ecvt_r
)

40 
	$__LDBL_REDIR1_DECL
 (
qfcvt_r
, 
fcvt_r
)

	@/usr/include/bits/stdlib.h

20 #i‚de‡
_STDLIB_H


24 *
	$__ªÆ∑th_chk
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

25 *
__ª°ri˘
 
__ªsﬁved
,

26 
size_t
 
__ªsﬁvedÀn
Ë
__THROW
 
__wur
;

27 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_Æüs
,

28 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

29 *
__ª°ri˘
 
__ªsﬁved
), 
ªÆ∑th
Ë
__wur
;

30 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_chk_w¨n
,

31 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

32 *
__ª°ri˘
 
__ªsﬁved
,

33 
size_t
 
__ªsﬁvedÀn
), 
__ªÆ∑th_chk
Ë
__wur


34 
	`__w¨«âr
 ("secondárgument ofÑealpath must beÉither NULL orát "

37 
__exã∫_Æways_ölöe
 
__wur
 *

38 
	`__NTH
 (
	$ªÆ∑th
 (
__c⁄°
 *
__ª°ri˘
 
__«me
, *__ª°ri˘ 
__ªsﬁved
))

40 i‡(
	`__bos
 (
__ªsﬁved
Ë!(
size_t
) -1)

42 #i‡
deföed
 
_LIBC_LIMITS_H_
 && deföed 
PATH_MAX


43 i‡(
	`__bos
 (
__ªsﬁved
Ë< 
PATH_MAX
)

44  
	`__ªÆ∑th_chk_w¨n
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

46  
	`__ªÆ∑th_chk
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

49  
	`__ªÆ∑th_Æüs
 (
__«me
, 
__ªsﬁved
);

50 
	}
}

53 
	$__±¢ame_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

54 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

55 
	`__REDIRECT_NTH
 (
__±¢ame_r_Æüs
, (
__fd
, *
__buf
,

56 
size_t
 
__buÊí
), 
±¢ame_r
)

57 
	`__n⁄nuŒ
 ((2));

58 
	`__REDIRECT_NTH
 (
__±¢ame_r_chk_w¨n
,

59 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

60 
size_t
 
__ƒól
), 
__±¢ame_r_chk
)

61 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ptsname_r called with buflen biggerÅhan "

64 
__exã∫_Æways_ölöe
 

65 
	`__NTH
 (
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

67 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

69 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

70  
	`__±¢ame_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

71 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

72  
	`__±¢ame_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

74  
	`__±¢ame_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

75 
	}
}

78 
	$__w˘omb_chk
 (*
__s
, 
wch¨_t
 
__wch¨
, 
size_t
 
__buÊí
)

79 
__THROW
 
__wur
;

80 
	`__REDIRECT_NTH
 (
__w˘omb_Æüs
, (*
__s
, 
wch¨_t
 
__wch¨
),

81 
w˘omb
Ë
__wur
;

83 
__exã∫_Æways_ölöe
 
__wur
 

84 
	`__NTH
 (
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
))

89 
	#__STDLIB_MB_LEN_MAX
 16

	)

90 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__STDLIB_MB_LEN_MAX


93 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__STDLIB_MB_LEN_MAX
 > __bos (__s))

94  
	`__w˘omb_chk
 (
__s
, 
__wch¨
, 
	`__bos
 (__s));

95  
	`__w˘omb_Æüs
 (
__s
, 
__wch¨
);

96 
	}
}

99 
size_t
 
	$__mb°owcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

100 
__c⁄°
 *
__ª°ri˘
 
__§c
,

101 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

102 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_Æüs
,

103 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

104 
__c⁄°
 *
__ª°ri˘
 
__§c
,

105 
size_t
 
__Àn
), 
mb°owcs
);

106 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_chk_w¨n
,

107 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

108 
__c⁄°
 *
__ª°ri˘
 
__§c
,

109 
size_t
 
__Àn
, size_à
__d°Àn
), 
__mb°owcs_chk
)

110 
	`__w¨«âr
 ("mbstowcs called with dst buffer smallerÅhanÜen "

113 
__exã∫_Æways_ölöe
 
size_t


114 
	`__NTH
 (
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

115 
size_t
 
__Àn
))

117 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

119 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

120  
	`__mb°owcs_chk
 (
__d°
, 
__§c
, 
__Àn
,

121 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

123 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

124  
	`__mb°owcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
,

125 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

127  
	`__mb°owcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

128 
	}
}

131 
size_t
 
	$__wc°ombs_chk
 (*
__ª°ri˘
 
__d°
,

132 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

133 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

134 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_Æüs
,

135 (*
__ª°ri˘
 
__d°
,

136 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

137 
size_t
 
__Àn
), 
wc°ombs
);

138 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_chk_w¨n
,

139 (*
__ª°ri˘
 
__d°
,

140 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

141 
size_t
 
__Àn
, size_à
__d°Àn
), 
__wc°ombs_chk
)

142 
	`__w¨«âr
 ("wcstombs called with dst buffer smallerÅhanÜen");

144 
__exã∫_Æways_ölöe
 
size_t


145 
	`__NTH
 (
	$wc°ombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 *__ª°ri˘ 
__§c
,

146 
size_t
 
__Àn
))

148 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

150 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

151  
	`__wc°ombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

152 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

153  
	`__wc°ombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

155  
	`__wc°ombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

156 
	}
}

	@/usr/include/bits/string.h

20 #i‚de‡
_STRING_H


26 
	#_STRING_ARCH_u«lig√d
 1

	)

	@/usr/include/bits/string2.h

21 #i‚de‡
_STRING_H


25 #i‡!
deföed
 
__NO_STRING_INLINES
 && !deföed 
__BOUNDED_POINTERS__


42 #i‚de‡
__STRING_INLINE


43 #ifde‡
__˝lu•lus


44 
	#__STRING_INLINE
 
ölöe


	)

46 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

50 #i‡
_STRING_ARCH_u«lig√d


52 
	~<ídün.h
>

53 
	~<bôs/ty≥s.h
>

55 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


56 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

57 (((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1] << 8 \

58 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
])

	)

59 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

60 (((((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

61 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

62 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

63 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
])

	)

65 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

66 (((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
] << 8 \

67 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1])

	)

68 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

69 (((((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
] << 8 \

70 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

71 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

72 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 3])

	)

77 
	#__STRING2_COPY_TYPE
(
N
) \

78 °ru˘ { 
__¨r
[
N
]; } \

79 
	t__©åibuã__
 ((
	t__∑cked__
)Ë
	t__STRING2_COPY_ARR
##
	tN


	)

80 
	t__STRING2_COPY_TYPE
 (2);

81 
__STRING2_COPY_TYPE
 (3);

82 
__STRING2_COPY_TYPE
 (4);

83 
__STRING2_COPY_TYPE
 (5);

84 
__STRING2_COPY_TYPE
 (6);

85 
__STRING2_COPY_TYPE
 (7);

86 
__STRING2_COPY_TYPE
 (8);

87 #unde‡
__STRING2_COPY_TYPE


93 
	#__°rög2_1b±r_p
(
__x
) \

94 ((
size_t
)(c⁄° *)((
__x
Ë+ 1Ë- (size_t)(c⁄° *)(__xË=1)

	)

97 #i‡!
deföed
 
_HAVE_STRING_ARCH_mem£t


98 #i‡!
__GNUC_PREREQ
 (3, 0)

99 #i‡
_STRING_ARCH_u«lig√d


100 
	#mem£t
(
s
, 
c
, 
n
) \

101 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

102 ? ((
n
) == 1 \

103 ? 
	`__mem£t_1
 (
s
, 
c
) \

104 : 
	`__mem£t_gc
 (
s
, 
c
, 
n
)) \

105 : (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

106 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

107 : 
	`mem£t
 (
s
, 
c
, 
n
))))

	)

109 
	#__mem£t_1
(
s
, 
c
Ë({ *
__s
 = (s); \

110 *((
__uöt8_t
 *Ë
__s
Ë(__uöt8_tË
c
; __s; })

	)

112 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

113 ({ *
__s
 = (
s
); \

115 
__ui
; \

116 
__usi
; \

117 
__uc
; \

118 } *
__u
 = 
__s
; \

119 
__uöt8_t
 
__c
 = (__uöt8_tË(
c
); \

122 (Ë(
n
)) \

125 
__u
->
__ui
 = 
__c
 * 0x01010101; \

126 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

128 
__u
->
__ui
 = 
__c
 * 0x01010101; \

129 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

131 
__u
->
__ui
 = 
__c
 * 0x01010101; \

132 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

134 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

135 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

136 
__u
->
__uc
 = (Ë
__c
; \

140 
__u
->
__ui
 = 
__c
 * 0x01010101; \

141 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

143 
__u
->
__ui
 = 
__c
 * 0x01010101; \

144 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

146 
__u
->
__ui
 = 
__c
 * 0x01010101; \

147 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

149 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

153 
__u
->
__ui
 = 
__c
 * 0x01010101; \

154 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

156 
__u
->
__ui
 = 
__c
 * 0x01010101; \

157 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

159 
__u
->
__ui
 = 
__c
 * 0x01010101; \

160 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

162 
__u
->
__uc
 = (Ë
__c
; \

166 
__u
->
__ui
 = 
__c
 * 0x01010101; \

167 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

169 
__u
->
__ui
 = 
__c
 * 0x01010101; \

170 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

172 
__u
->
__ui
 = 
__c
 * 0x01010101; \

173 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

175 
__u
->
__ui
 = 
__c
 * 0x01010101; \

180 
__s
; })

	)

182 
	#mem£t
(
s
, 
c
, 
n
) \

183 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

184 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

185 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

194 #i‡
__GNUC_PREREQ
 (2, 91)

195 
	#__bzîo
(
s
, 
n
Ë
	`__buûtö_mem£t
 (s, '\0',Ç)

	)

203 #ifde‡
__USE_GNU


204 #i‡!
deföed
 
_HAVE_STRING_ARCH_memp˝y
 || deföed 
_FORCE_INLINES


205 #i‚de‡
_HAVE_STRING_ARCH_memp˝y


206 #i‡
__GNUC_PREREQ
 (3, 4)

207 
	#__memp˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_memp˝y
 (de°, src,Ç)

	)

208 #ñi‡
__GNUC_PREREQ
 (3, 0)

209 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

210 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

211 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

212 ? 
	`__buûtö_mem˝y
 (
de°
, 
§c
, 
n
) + (n) \

213 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

215 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

216 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

217 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

218 ? 
	`__memp˝y_smÆl
 (
de°
, 
	`__memp˝y_¨gs
 (
§c
), 
n
) \

219 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

223 
	#memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y
 (de°, src,Ç)

	)

226 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


227 #i‡
_STRING_ARCH_u«lig√d


228 #i‚de‡
_FORCE_INLINES


229 
	#__memp˝y_¨gs
(
§c
) \

230 ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[2], \

231 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[6], \

232 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

233 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

234 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

235 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

237 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , , , ,

238 
__uöt16_t
, __uöt16_t, 
__uöt32_t
,

239 
__uöt32_t
, 
size_t
);

240 
__STRING_INLINE
 *

241 
	$__memp˝y_smÆl
 (*
__de°1
,

242 
__§c0_1
, 
__§c2_1
, 
__§c4_1
, 
__§c6_1
,

243 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

244 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

245 
size_t
 
__§˛í
)

248 
__uöt32_t
 
__ui
;

249 
__uöt16_t
 
__usi
;

250 
__uc
;

251 
__c
;

252 } *
__u
 = 
__de°1
;

253 (Ë
__§˛í
)

256 
__u
->
__c
 = 
__§c0_1
;

257 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

260 
__u
->
__usi
 = 
__§c0_2
;

261 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

264 
__u
->
__usi
 = 
__§c0_2
;

265 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

266 
__u
->
__c
 = 
__§c2_1
;

267 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

270 
__u
->
__ui
 = 
__§c0_4
;

271 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

274 
__u
->
__ui
 = 
__§c0_4
;

275 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

276 
__u
->
__c
 = 
__§c4_1
;

277 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

280 
__u
->
__ui
 = 
__§c0_4
;

281 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

282 
__u
->
__usi
 = 
__§c4_2
;

283 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

286 
__u
->
__ui
 = 
__§c0_4
;

287 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

288 
__u
->
__usi
 = 
__§c4_2
;

289 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

290 
__u
->
__c
 = 
__§c6_1
;

291 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

294 
__u
->
__ui
 = 
__§c0_4
;

295 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

296 
__u
->
__ui
 = 
__§c4_4
;

297 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

300  (*Ë
__u
;

301 
	}
}

303 #i‚de‡
_FORCE_INLINES


304 
	#__memp˝y_¨gs
(
§c
) \

305 ((
__c⁄°
 *Ë(
§c
))[0], \

306 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

307 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1] } }), \

308 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

309 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

310 ((
__c⁄°
 *Ë(
§c
))[2] } }), \

311 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

312 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

313 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3] } }), \

314 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

315 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

316 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

317 ((
__c⁄°
 *Ë(
§c
))[4] } }), \

318 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

319 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

320 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

321 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5] } }), \

322 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

323 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

324 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

325 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

326 ((
__c⁄°
 *Ë(
§c
))[6] } }), \

327 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

328 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

329 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

330 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

331 ((
__c⁄°
 *Ë(
§c
))[6], ((__c⁄° *Ë(§c))[7] } })

	)

333 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , 
__STRING2_COPY_ARR2
,

334 
__STRING2_COPY_ARR3
,

335 
__STRING2_COPY_ARR4
,

336 
__STRING2_COPY_ARR5
,

337 
__STRING2_COPY_ARR6
,

338 
__STRING2_COPY_ARR7
,

339 
__STRING2_COPY_ARR8
, 
size_t
);

340 
__STRING_INLINE
 *

341 
	$__memp˝y_smÆl
 (*
__de°
, 
__§c1
,

342 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

343 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

344 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

345 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

348 
__c
;

349 
__STRING2_COPY_ARR2
 
__sˇ2
;

350 
__STRING2_COPY_ARR3
 
__sˇ3
;

351 
__STRING2_COPY_ARR4
 
__sˇ4
;

352 
__STRING2_COPY_ARR5
 
__sˇ5
;

353 
__STRING2_COPY_ARR6
 
__sˇ6
;

354 
__STRING2_COPY_ARR7
 
__sˇ7
;

355 
__STRING2_COPY_ARR8
 
__sˇ8
;

356 } *
__u
 = 
__de°
;

357 (Ë
__§˛í
)

360 
__u
->
__c
 = 
__§c1
;

363 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

366 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

369 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

372 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

375 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

378 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

381 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

384  
	`__exãnsi⁄__
 ((*Ë
__u
 + 
__§˛í
);

385 
	}
}

393 #i‚de‡
_HAVE_STRING_ARCH_°rchr


394 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

395 #i‡
__GNUC_PREREQ
 (3, 2)

396 
	#°rchr
(
s
, 
c
) \

397 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
Ë&& !__buûtö_c⁄°™t_∞(
s
) \

398 && (
c
) == '\0' \

399 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

400 : 
	`__buûtö_°rchr
 (
s
, 
c
)))

	)

402 
	#°rchr
(
s
, 
c
) \

403 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

404 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

405 : 
	`°rchr
 (
s
, 
c
)))

	)

411 #i‡(!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)) \

412 || 
deföed
 
	g_FORCE_INLINES


413 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)

414 
	#°r˝y
(
de°
, 
§c
) \

415 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

416 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

417 ? 
	`__°r˝y_smÆl
 (
de°
, 
	`__°r˝y_¨gs
 (
§c
), \

418 
	`°æí
 (
§c
) + 1) \

419 : (*Ë
	`mem˝y
 (
de°
, 
§c
, 
	`°æí
 (src) + 1)) \

420 : 
	`°r˝y
 (
de°
, 
§c
)))

	)

423 #i‡
_STRING_ARCH_u«lig√d


424 #i‚de‡
_FORCE_INLINES


425 
	#__°r˝y_¨gs
(
§c
) \

426 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

427 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

428 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

429 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

431 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

432 
__uöt32_t
, __uöt32_t, 
size_t
);

433 
__STRING_INLINE
 *

434 
	$__°r˝y_smÆl
 (*
__de°
,

435 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

436 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

437 
size_t
 
__§˛í
)

440 
__uöt32_t
 
__ui
;

441 
__uöt16_t
 
__usi
;

442 
__uc
;

443 } *
__u
 = (*Ë
__de°
;

444 (Ë
__§˛í
)

447 
__u
->
__uc
 = '\0';

450 
__u
->
__usi
 = 
__§c0_2
;

453 
__u
->
__usi
 = 
__§c0_2
;

454 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

455 
__u
->
__uc
 = '\0';

458 
__u
->
__ui
 = 
__§c0_4
;

461 
__u
->
__ui
 = 
__§c0_4
;

462 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

463 
__u
->
__uc
 = '\0';

466 
__u
->
__ui
 = 
__§c0_4
;

467 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

468 
__u
->
__usi
 = 
__§c4_2
;

471 
__u
->
__ui
 = 
__§c0_4
;

472 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

473 
__u
->
__usi
 = 
__§c4_2
;

474 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

475 
__u
->
__uc
 = '\0';

478 
__u
->
__ui
 = 
__§c0_4
;

479 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

480 
__u
->
__ui
 = 
__§c4_4
;

483  
__de°
;

484 
	}
}

486 #i‚de‡
_FORCE_INLINES


487 
	#__°r˝y_¨gs
(
§c
) \

488 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

489 { { ((
__c⁄°
 *Ë(
§c
))[0], '\0' } }), \

490 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

491 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

493 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

494 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

495 ((
__c⁄°
 *Ë(
§c
))[2], '\0' } }), \

496 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

497 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

498 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

500 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

501 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

502 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

503 ((
__c⁄°
 *Ë(
§c
))[4], '\0' } }), \

504 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

505 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

506 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

507 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

509 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

510 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

511 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

512 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

513 ((
__c⁄°
 *Ë(
§c
))[6], '\0' } })

	)

515 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

516 
__STRING2_COPY_ARR3
,

517 
__STRING2_COPY_ARR4
,

518 
__STRING2_COPY_ARR5
,

519 
__STRING2_COPY_ARR6
,

520 
__STRING2_COPY_ARR7
,

521 
__STRING2_COPY_ARR8
, 
size_t
);

522 
__STRING_INLINE
 *

523 
	$__°r˝y_smÆl
 (*
__de°
,

524 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

525 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

526 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

527 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

530 
__c
;

531 
__STRING2_COPY_ARR2
 
__sˇ2
;

532 
__STRING2_COPY_ARR3
 
__sˇ3
;

533 
__STRING2_COPY_ARR4
 
__sˇ4
;

534 
__STRING2_COPY_ARR5
 
__sˇ5
;

535 
__STRING2_COPY_ARR6
 
__sˇ6
;

536 
__STRING2_COPY_ARR7
 
__sˇ7
;

537 
__STRING2_COPY_ARR8
 
__sˇ8
;

538 } *
__u
 = (*Ë
__de°
;

539 (Ë
__§˛í
)

542 
__u
->
__c
 = '\0';

545 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

548 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

551 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

554 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

557 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

560 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

563 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

566  
__de°
;

567 
	}
}

573 #ifde‡
__USE_GNU


574 #i‡!
deföed
 
_HAVE_STRING_ARCH_°p˝y
 || deföed 
_FORCE_INLINES


575 #i‚de‡
_HAVE_STRING_ARCH_°p˝y


576 #i‡
__GNUC_PREREQ
 (3, 4)

577 
	#__°p˝y
(
de°
, 
§c
Ë
	`__buûtö_°p˝y
 (de°, src)

	)

578 #ñi‡
__GNUC_PREREQ
 (3, 0)

579 
	#__°p˝y
(
de°
, 
§c
) \

580 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

581 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

582 ? 
	`__buûtö_°r˝y
 (
de°
, 
§c
Ë+ 
	`°æí
 (src) \

583 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

585 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

587 
	#__°p˝y
(
de°
, 
§c
) \

588 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

589 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

590 ? 
	`__°p˝y_smÆl
 (
de°
, 
	`__°p˝y_¨gs
 (
§c
), \

591 
	`°æí
 (
§c
) + 1) \

592 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

594 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

598 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 (de°, src)

	)

601 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


602 #i‡
_STRING_ARCH_u«lig√d


603 #i‚de‡
_FORCE_INLINES


604 
	#__°p˝y_¨gs
(
§c
) \

605 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

606 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

607 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

608 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

610 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

611 
__uöt32_t
, __uöt32_t, 
size_t
);

612 
__STRING_INLINE
 *

613 
	$__°p˝y_smÆl
 (*
__de°
,

614 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

615 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

616 
size_t
 
__§˛í
)

619 
__ui
;

620 
__usi
;

621 
__uc
;

622 
__c
;

623 } *
__u
 = (*Ë
__de°
;

624 (Ë
__§˛í
)

627 
__u
->
__uc
 = '\0';

630 
__u
->
__usi
 = 
__§c0_2
;

631 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

634 
__u
->
__usi
 = 
__§c0_2
;

635 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

636 
__u
->
__uc
 = '\0';

639 
__u
->
__ui
 = 
__§c0_4
;

640 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

643 
__u
->
__ui
 = 
__§c0_4
;

644 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

645 
__u
->
__uc
 = '\0';

648 
__u
->
__ui
 = 
__§c0_4
;

649 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

650 
__u
->
__usi
 = 
__§c4_2
;

651 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

654 
__u
->
__ui
 = 
__§c0_4
;

655 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

656 
__u
->
__usi
 = 
__§c4_2
;

657 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

658 
__u
->
__uc
 = '\0';

661 
__u
->
__ui
 = 
__§c0_4
;

662 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

663 
__u
->
__ui
 = 
__§c4_4
;

664 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

667  &
__u
->
__c
;

668 
	}
}

670 #i‚de‡
_FORCE_INLINES


671 
	#__°p˝y_¨gs
(
§c
) \

672 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

673 { { ((
__c⁄°
 *Ë(
§c
))[0], '\0' } }), \

674 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

675 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

677 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

678 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

679 ((
__c⁄°
 *Ë(
§c
))[2], '\0' } }), \

680 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

681 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

682 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

684 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

685 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

686 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

687 ((
__c⁄°
 *Ë(
§c
))[4], '\0' } }), \

688 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

689 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

690 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

691 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

693 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

694 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

695 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

696 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

697 ((
__c⁄°
 *Ë(
§c
))[6], '\0' } })

	)

699 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

700 
__STRING2_COPY_ARR3
,

701 
__STRING2_COPY_ARR4
,

702 
__STRING2_COPY_ARR5
,

703 
__STRING2_COPY_ARR6
,

704 
__STRING2_COPY_ARR7
,

705 
__STRING2_COPY_ARR8
, 
size_t
);

706 
__STRING_INLINE
 *

707 
	$__°p˝y_smÆl
 (*
__de°
,

708 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

709 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

710 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

711 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

714 
__c
;

715 
__STRING2_COPY_ARR2
 
__sˇ2
;

716 
__STRING2_COPY_ARR3
 
__sˇ3
;

717 
__STRING2_COPY_ARR4
 
__sˇ4
;

718 
__STRING2_COPY_ARR5
 
__sˇ5
;

719 
__STRING2_COPY_ARR6
 
__sˇ6
;

720 
__STRING2_COPY_ARR7
 
__sˇ7
;

721 
__STRING2_COPY_ARR8
 
__sˇ8
;

722 } *
__u
 = (*Ë
__de°
;

723 (Ë
__§˛í
)

726 
__u
->
__c
 = '\0';

729 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

732 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

735 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

738 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

741 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

744 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

747 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

750  
__de°
 + 
__§˛í
 - 1;

751 
	}
}

759 #i‚de‡
_HAVE_STRING_ARCH_°∫˝y


760 #i‡
__GNUC_PREREQ
 (3, 2)

761 
	#°∫˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫˝y
 (de°, src,Ç)

	)

763 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

764 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

765 ? (
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

766 ? (*Ë
	`mem˝y
 (
de°
, 
§c
, 
n
) \

767 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)) \

768 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)))

	)

774 #i‚de‡
_HAVE_STRING_ARCH_°∫ˇt


775 #ifde‡
_USE_STRING_ARCH_°rchr


776 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

777 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

778 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

779 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

780 ? 
	`°rˇt
 (
__de°
, 
§c
) \

781 : (*((*Ë
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

782 
§c
, 
n
)Ë'\0', 
__de°
)) \

783 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
); }))

	)

784 #ñi‡
__GNUC_PREREQ
 (3, 2)

785 
	#°∫ˇt
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫ˇt
 (de°, src,Ç)

	)

787 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

788 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

789 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

790 ? 
	`°rˇt
 (
de°
, 
§c
) \

791 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)) \

792 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)))

	)

798 #i‚de‡
_HAVE_STRING_ARCH_°rcmp


799 #i‡
__GNUC_PREREQ
 (3, 2)

800 
	#°rcmp
(
s1
, 
s2
) \

801 
__exãnsi⁄__
 \

802 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

803 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

804 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

805 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

806 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

807 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

808 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

809 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

810 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

811 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

812 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

813 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

814 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

815 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

816 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

817 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

818 : 
	`__buûtö_°rcmp
 (
s1
, 
s2
)))); })

	)

820 
	#°rcmp
(
s1
, 
s2
) \

821 
__exãnsi⁄__
 \

822 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

823 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

824 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

825 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

826 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

827 ? 
	`memcmp
 ((
__c⁄°
 *Ë(
s1
), (__c⁄° *Ë(
s2
), \

828 (
__s1_Àn
 < 
__s2_Àn
 ? __s1_len : __s2_len) + 1) \

829 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

830 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

831 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

832 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s1_Àn
) \

833 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

834 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

835 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

836 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

837 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s2_Àn
) \

838 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

839 : 
	`°rcmp
 (
s1
, 
s2
)))); })

	)

842 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

843 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = \

844 (((
__c⁄°
 *Ë(__c⁄° *Ë(
s1
))[0] \

845 - ((
__c⁄°
 *Ë(__c⁄° *)(
s2
))[0]);\

846 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

848 
__ªsu…
 = (((
__c⁄°
 *) \

849 (
__c⁄°
 *Ë(
s1
))[1] \

850 - ((
__c⁄°
 *) \

851 (
__c⁄°
 *Ë(
s2
))[1]); \

852 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

854 
__ªsu…
 = \

855 (((
__c⁄°
 *) \

856 (
__c⁄°
 *Ë(
s1
))[2] \

857 - ((
__c⁄°
 *) \

858 (
__c⁄°
 *Ë(
s2
))[2]); \

859 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

860 
__ªsu…
 = \

861 (((
__c⁄°
 *) \

862 (
__c⁄°
 *Ë(
s1
))[3] \

863 - ((
__c⁄°
 *) \

864 (
__c⁄°
 *Ë(
s2
))[3]); \

867 
__ªsu…
; }))

	)

869 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

870 (
	`__exãnsi⁄__
 ({ 
__c⁄°
 *
__s2
 = \

871 (
__c⁄°
 *Ë(__c⁄° *Ë(
s2
); \

872 
__ªsu…
 = \

873 (((
__c⁄°
 *Ë(__c⁄° *Ë(
s1
))[0] \

874 - 
__s2
[0]); \

875 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

877 
__ªsu…
 = (((
__c⁄°
 *) \

878 (
__c⁄°
 *Ë(
s1
))[1] - 
__s2
[1]); \

879 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

881 
__ªsu…
 = (((
__c⁄°
 *) \

882 (
__c⁄°
 *Ë(
s1
))[2] - 
__s2
[2]);\

883 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

884 
__ªsu…
 = (((
__c⁄°
 *) \

885 (
__c⁄°
 *Ë(
s1
))[3] \

886 - 
__s2
[3]); \

889 
__ªsu…
; }))

	)

891 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
) \

892 (
	`__exãnsi⁄__
 ({ 
__c⁄°
 *
__s1
 = \

893 (
__c⁄°
 *Ë(__c⁄° *Ë(
s1
); \

894 
__ªsu…
 = \

895 
__s1
[0] - ((
__c⁄°
 *) \

896 (
__c⁄°
 *Ë(
s2
))[0]; \

897 i‡(
l2
 > 0 && 
__ªsu…
 == 0) \

899 
__ªsu…
 = (
__s1
[1] \

900 - ((
__c⁄°
 *) \

901 (
__c⁄°
 *Ë(
s2
))[1]); \

902 i‡(
l2
 > 1 && 
__ªsu…
 == 0) \

904 
__ªsu…
 = \

905 (
__s1
[2] - ((
__c⁄°
 *) \

906 (
__c⁄°
 *Ë(
s2
))[2]); \

907 i‡(
l2
 > 2 && 
__ªsu…
 == 0) \

908 
__ªsu…
 = \

909 (
__s1
[3] \

910 - ((
__c⁄°
 *) \

911 (
__c⁄°
 *Ë(
s2
))[3]); \

914 
__ªsu…
; }))

	)

919 #i‚de‡
_HAVE_STRING_ARCH_°∫cmp


920 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

921 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

922 && ((
	`__buûtö_c⁄°™t_p
 (
s1
) \

923 && 
	`°æí
 (
s1
Ë< ((
size_t
Ë(
n
))) \

924 || (
	`__buûtö_c⁄°™t_p
 (
s2
) \

925 && 
	`°æí
 (
s2
Ë< ((
size_t
Ë(
n
)))) \

926 ? 
	`°rcmp
 (
s1
, 
s2
Ë: 
	`°∫cmp
 (s1, s2, 
n
)))

	)

932 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rc•n
 || deföed 
_FORCE_INLINES


933 #i‚de‡
_HAVE_STRING_ARCH_°rc•n


934 #i‡
__GNUC_PREREQ
 (3, 2)

935 
	#°rc•n
(
s
, 
ªje˘
) \

936 
__exãnsi⁄__
 \

937 ({ 
__r0
, 
__r1
, 
__r2
; \

938 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

939 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

940 ? 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
) \

941 : ((
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], __r0 == '\0') \

942 ? 
	`°æí
 (
s
) \

943 : ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], __r1 == '\0') \

944 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

945 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

946 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

947 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

948 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

949 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)))))) \

950 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)); })

	)

952 
	#°rc•n
(
s
, 
ªje˘
) \

953 
__exãnsi⁄__
 \

954 ({ 
__r0
, 
__r1
, 
__r2
; \

955 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

956 ? ((
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], __r0 == '\0') \

957 ? 
	`°æí
 (
s
) \

958 : ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], __r1 == '\0') \

959 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

960 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

961 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

962 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

963 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

964 : 
	`°rc•n
 (
s
, 
ªje˘
))))) \

965 : 
	`°rc•n
 (
s
, 
ªje˘
)); })

	)

969 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (
__c⁄°
 *
__s
, 
__ªje˘
);

970 
__STRING_INLINE
 
size_t


971 
	$__°rc•n_c1
 (
__c⁄°
 *
__s
, 
__ªje˘
)

973 
size_t
 
__ªsu…
 = 0;

974 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘
)

975 ++
__ªsu…
;

976  
__ªsu…
;

977 
	}
}

979 
__STRING_INLINE
 
size_t
 
__°rc•n_c2
 (
__c⁄°
 *
__s
, 
__ªje˘1
,

980 
__ªje˘2
);

981 
__STRING_INLINE
 
size_t


982 
	$__°rc•n_c2
 (
__c⁄°
 *
__s
, 
__ªje˘1
, 
__ªje˘2
)

984 
size_t
 
__ªsu…
 = 0;

985 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


986 && 
__s
[
__ªsu…
] !
__ªje˘2
)

987 ++
__ªsu…
;

988  
__ªsu…
;

989 
	}
}

991 
__STRING_INLINE
 
size_t
 
__°rc•n_c3
 (
__c⁄°
 *
__s
, 
__ªje˘1
,

992 
__ªje˘2
, 
__ªje˘3
);

993 
__STRING_INLINE
 
size_t


994 
	$__°rc•n_c3
 (
__c⁄°
 *
__s
, 
__ªje˘1
, 
__ªje˘2
,

995 
__ªje˘3
)

997 
size_t
 
__ªsu…
 = 0;

998 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


999 && 
__s
[
__ªsu…
] !
__ªje˘2
 && __s[__ªsu…] !
__ªje˘3
)

1000 ++
__ªsu…
;

1001  
__ªsu…
;

1002 
	}
}

1008 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r•n
 || deföed 
_FORCE_INLINES


1009 #i‚de‡
_HAVE_STRING_ARCH_°r•n


1010 #i‡
__GNUC_PREREQ
 (3, 2)

1011 
	#°r•n
(
s
, 
ac˚±
) \

1012 
__exãnsi⁄__
 \

1013 ({ 
__a0
, 
__a1
, 
__a2
; \

1014 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1015 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1016 ? 
	`__buûtö_°r•n
 (
s
, 
ac˚±
) \

1017 : ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1018 ? ((Ë(
s
), 0) \

1019 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1020 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1021 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1022 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1023 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1024 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1025 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)))))) \

1026 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)); })

	)

1028 
	#°r•n
(
s
, 
ac˚±
) \

1029 
__exãnsi⁄__
 \

1030 ({ 
__a0
, 
__a1
, 
__a2
; \

1031 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1032 ? ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1033 ? ((Ë(
s
), 0) \

1034 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1035 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1036 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1037 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1038 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1039 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1040 : 
	`°r•n
 (
s
, 
ac˚±
))))) \

1041 : 
	`°r•n
 (
s
, 
ac˚±
)); })

	)

1045 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (
__c⁄°
 *
__s
, 
__ac˚±
);

1046 
__STRING_INLINE
 
size_t


1047 
	$__°r•n_c1
 (
__c⁄°
 *
__s
, 
__ac˚±
)

1049 
size_t
 
__ªsu…
 = 0;

1051 
__s
[
__ªsu…
] =
__ac˚±
)

1052 ++
__ªsu…
;

1053  
__ªsu…
;

1054 
	}
}

1056 
__STRING_INLINE
 
size_t
 
__°r•n_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1057 
__ac˚±2
);

1058 
__STRING_INLINE
 
size_t


1059 
	$__°r•n_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1061 
size_t
 
__ªsu…
 = 0;

1063 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2
)

1064 ++
__ªsu…
;

1065  
__ªsu…
;

1066 
	}
}

1068 
__STRING_INLINE
 
size_t
 
__°r•n_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1069 
__ac˚±2
, 
__ac˚±3
);

1070 
__STRING_INLINE
 
size_t


1071 
	$__°r•n_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1073 
size_t
 
__ªsu…
 = 0;

1075 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2


1076 || 
__s
[
__ªsu…
] =
__ac˚±3
)

1077 ++
__ªsu…
;

1078  
__ªsu…
;

1079 
	}
}

1084 #i‡!
deföed
 
_HAVE_STRING_ARCH_°Ωbrk
 || deföed 
_FORCE_INLINES


1085 #i‚de‡
_HAVE_STRING_ARCH_°Ωbrk


1086 #i‡
__GNUC_PREREQ
 (3, 2)

1087 
	#°Ωbrk
(
s
, 
ac˚±
) \

1088 
__exãnsi⁄__
 \

1089 ({ 
__a0
, 
__a1
, 
__a2
; \

1090 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1091 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1092 ? 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
) \

1093 : ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1094 ? ((Ë(
s
), (*Ë
NULL
) \

1095 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1096 ? 
	`__buûtö_°rchr
 (
s
, 
__a0
) \

1097 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1098 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1099 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1100 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1101 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)))))) \

1102 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1104 
	#°Ωbrk
(
s
, 
ac˚±
) \

1105 
__exãnsi⁄__
 \

1106 ({ 
__a0
, 
__a1
, 
__a2
; \

1107 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1108 ? ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1109 ? ((Ë(
s
), (*Ë
NULL
) \

1110 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1111 ? 
	`°rchr
 (
s
, 
__a0
) \

1112 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1113 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1114 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1115 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1116 : 
	`°Ωbrk
 (
s
, 
ac˚±
))))) \

1117 : 
	`°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1121 
__STRING_INLINE
 *
__°Ωbrk_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1122 
__ac˚±2
);

1123 
__STRING_INLINE
 *

1124 
	$__°Ωbrk_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1127 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2
)

1128 ++
__s
;

1129  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1130 
	}
}

1132 
__STRING_INLINE
 *
__°Ωbrk_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1133 
__ac˚±2
, 
__ac˚±3
);

1134 
__STRING_INLINE
 *

1135 
	$__°Ωbrk_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
,

1136 
__ac˚±3
)

1139 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2


1140 && *
__s
 !
__ac˚±3
)

1141 ++
__s
;

1142  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1143 
	}
}

1149 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r°r
 && !
__GNUC_PREREQ
 (2, 97)

1150 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1151 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
Ë&& 
	`__°rög2_1b±r_p
 (needle) \

1152 ? (((
__c⁄°
 *Ë(
√edÀ
))[0] == '\0' \

1153 ? (*Ë(
size_t
Ë(
hay°ack
) \

1154 : (((
__c⁄°
 *Ë(
√edÀ
))[1] == '\0' \

1155 ? 
	`°rchr
 (
hay°ack
, \

1156 ((
__c⁄°
 *Ë(
√edÀ
))[0]) \

1157 : 
	`°r°r
 (
hay°ack
, 
√edÀ
))) \

1158 : 
	`°r°r
 (
hay°ack
, 
√edÀ
)))

	)

1162 #i‡!
deföed
 
_HAVE_STRING_ARCH_°πok_r
 || deföed 
_FORCE_INLINES


1163 #i‚de‡
_HAVE_STRING_ARCH_°πok_r


1164 
	#__°πok_r
(
s
, 
£p
, 
√xç
) \

1165 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
£p
Ë&& 
	`__°rög2_1b±r_p
 (sep) \

1166 && ((
__c⁄°
 *Ë(
£p
))[0] != '\0' \

1167 && ((
__c⁄°
 *Ë(
£p
))[1] == '\0' \

1168 ? 
	`__°πok_r_1c
 (
s
, ((
__c⁄°
 *Ë(
£p
))[0], 
√xç
) \

1169 : 
	`__°πok_r
 (
s
, 
£p
, 
√xç
)))

	)

1172 
__STRING_INLINE
 *
__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
);

1173 
__STRING_INLINE
 *

1174 
	$__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
)

1176 *
__ªsu…
;

1177 i‡(
__s
 =
NULL
)

1178 
__s
 = *
__√xç
;

1179 *
__s
 =
__£p
)

1180 ++
__s
;

1181 
__ªsu…
 = 
NULL
;

1182 i‡(*
__s
 != '\0')

1184 
__ªsu…
 = 
__s
++;

1185 *
__s
 != '\0')

1186 i‡(*
__s
++ =
__£p
)

1188 
__s
[-1] = '\0';

1192 *
__√xç
 = 
__s
;

1193  
__ªsu…
;

1194 
	}
}

1195 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


1196 
	#°πok_r
(
s
, 
£p
, 
√xç
Ë
	`__°πok_r
 (s, sï,Çexç)

	)

1201 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r£p
 || deföed 
_FORCE_INLINES


1202 #i‚de‡
_HAVE_STRING_ARCH_°r£p


1204 *
__°r£p_g
 (**
__°rögp
, 
__c⁄°
 *
__dñim
);

1205 
	#__°r£p
(
s
, 
ªje˘
) \

1206 
__exãnsi⁄__
 \

1207 ({ 
__r0
, 
__r1
, 
__r2
; \

1208 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

1209 && (
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], \

1210 ((
__c⁄°
 *Ë(
ªje˘
))[0] != '\0') \

1211 ? ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], \

1212 ((
__c⁄°
 *Ë(
ªje˘
))[1] == '\0') \

1213 ? 
	`__°r£p_1c
 (
s
, 
__r0
) \

1214 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

1215 ? 
	`__°r£p_2c
 (
s
, 
__r0
, 
__r1
) \

1216 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

1217 ? 
	`__°r£p_3c
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

1218 : 
	`__°r£p_g
 (
s
, 
ªje˘
)))) \

1219 : 
	`__°r£p_g
 (
s
, 
ªje˘
)); })

	)

1222 
__STRING_INLINE
 *
__°r£p_1c
 (**
__s
, 
__ªje˘
);

1223 
__STRING_INLINE
 *

1224 
	$__°r£p_1c
 (**
__s
, 
__ªje˘
)

1226 *
__ªtvÆ
 = *
__s
;

1227 i‡(
__ªtvÆ
 !
NULL
 && (*
__s
 = 
	`°rchr
 (__ªtvÆ, 
__ªje˘
)) != NULL)

1228 *(*
__s
)++ = '\0';

1229  
__ªtvÆ
;

1230 
	}
}

1232 
__STRING_INLINE
 *
__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
);

1233 
__STRING_INLINE
 *

1234 
	$__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
)

1236 *
__ªtvÆ
 = *
__s
;

1237 i‡(
__ªtvÆ
 !
NULL
)

1239 *
__˝
 = 
__ªtvÆ
;

1242 i‡(*
__˝
 == '\0')

1244 
__˝
 = 
NULL
;

1247 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
)

1249 *
__˝
++ = '\0';

1252 ++
__˝
;

1254 *
__s
 = 
__˝
;

1256  
__ªtvÆ
;

1257 
	}
}

1259 
__STRING_INLINE
 *
__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
,

1260 
__ªje˘3
);

1261 
__STRING_INLINE
 *

1262 
	$__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
, 
__ªje˘3
)

1264 *
__ªtvÆ
 = *
__s
;

1265 i‡(
__ªtvÆ
 !
NULL
)

1267 *
__˝
 = 
__ªtvÆ
;

1270 i‡(*
__˝
 == '\0')

1272 
__˝
 = 
NULL
;

1275 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
 || *__˝ =
__ªje˘3
)

1277 *
__˝
++ = '\0';

1280 ++
__˝
;

1282 *
__s
 = 
__˝
;

1284  
__ªtvÆ
;

1285 
	}
}

1286 #ifde‡
__USE_BSD


1287 
	#°r£p
(
s
, 
ªje˘
Ë
	`__°r£p
 (s,Ñeje˘)

	)

1294 #ifde‡
__USE_MISC


1296 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rdup
 || !deföed 
_HAVE_STRING_ARCH_°∫dup


1297 
	#__√ed_mÆloc_™d_ˇŒoc


	)

1298 
	~<°dlib.h
>

1301 #i‚de‡
_HAVE_STRING_ARCH_°rdup


1303 *
	$__°rdup
 (
__c⁄°
 *
__°rög
Ë
__THROW
 
__©åibuã_mÆloc__
;

1304 
	#__°rdup
(
s
) \

1305 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1306 ? (((
__c⁄°
 *Ë(
s
))[0] == '\0' \

1307 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1308 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1309 *
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1310 i‡(
__ªtvÆ
 !
NULL
) \

1311 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, 
__Àn
); \

1312 
__ªtvÆ
; 
	}
})) \

1313 : 
	`__°rdup
 (
s
)))

	)

1315 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1316 
	#°rdup
(
s
Ë
	`__°rdup
 (s)

	)

1320 #i‚de‡
_HAVE_STRING_ARCH_°∫dup


1322 *
	$__°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

1323 
__THROW
 
__©åibuã_mÆloc__
;

1324 
	#__°∫dup
(
s
, 
n
) \

1325 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1326 ? (((
__c⁄°
 *Ë(
s
))[0] == '\0' \

1327 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1328 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1329 
size_t
 
__n
 = (
n
); \

1330 *
__ªtvÆ
; \

1331 i‡(
__n
 < 
__Àn
) \

1332 
__Àn
 = 
__n
 + 1; \

1333 
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1334 i‡(
__ªtvÆ
 !
NULL
) \

1336 
__ªtvÆ
[
__Àn
 - 1] = '\0'; \

1337 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, \

1338 
__Àn
 - 1); \

1340 
__ªtvÆ
; 
	}
})) \

1341 : 
	`__°∫dup
 (
s
, 
n
)))

	)

1343 #ifde‡
__USE_GNU


1344 
	#°∫dup
(
s
, 
n
Ë
	`__°∫dup
 (s,Ç)

	)

1350 #i‚de‡
_FORCE_INLINES


1351 #unde‡
__STRING_INLINE


	@/usr/include/bits/string3.h

19 #i‚de‡
_STRING_H


23 
__w¨nde˛
 (
__w¨n_mem£t_zîo_Àn
,

26 #i‚de‡
__˝lu•lus


30 #unde‡
mem˝y


31 #unde‡
memmove


32 #unde‡
mem£t


33 #unde‡
°rˇt


34 #unde‡
°r˝y


35 #unde‡
°∫ˇt


36 #unde‡
°∫˝y


37 #ifde‡
__USE_GNU


38 #unde‡
memp˝y


39 #unde‡
°p˝y


41 #ifde‡
__USE_BSD


42 #unde‡
bc›y


43 #unde‡
bzîo


48 
__exã∫_Æways_ölöe
 *

49 
__NTH
 (
	$mem˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

50 
size_t
 
__Àn
))

52  
	`__buûtö___mem˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

53 
	}
}

55 
__exã∫_Æways_ölöe
 *

56 
__NTH
 (
	$memmove
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__Àn
))

58  
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

59 
	}
}

61 #ifde‡
__USE_GNU


62 
__exã∫_Æways_ölöe
 *

63 
__NTH
 (
	$memp˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

64 
size_t
 
__Àn
))

66  
	`__buûtö___memp˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

67 
	}
}

76 
__exã∫_Æways_ölöe
 *

77 
__NTH
 (
	$mem£t
 (*
__de°
, 
__ch
, 
size_t
 
__Àn
))

79 i‡(
	`__buûtö_c⁄°™t_p
 (
__Àn
) && __len == 0

80 && (!
	`__buûtö_c⁄°™t_p
 (
__ch
) || __ch != 0))

82 
	`__w¨n_mem£t_zîo_Àn
 ();

83  
__de°
;

85  
	`__buûtö___mem£t_chk
 (
__de°
, 
__ch
, 
__Àn
, 
	`__bos0
 (__dest));

86 
	}
}

88 #ifde‡
__USE_BSD


89 
__exã∫_Æways_ölöe
 

90 
__NTH
 (
	$bc›y
 (
__c⁄°
 *
__§c
, *
__de°
, 
size_t
 
__Àn
))

92 (Ë
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

93 
	}
}

95 
__exã∫_Æways_ölöe
 

96 
__NTH
 (
	$bzîo
 (*
__de°
, 
size_t
 
__Àn
))

98 (Ë
	`__buûtö___mem£t_chk
 (
__de°
, '\0', 
__Àn
, 
	`__bos0
 (__dest));

99 
	}
}

102 
__exã∫_Æways_ölöe
 *

103 
__NTH
 (
	$°r˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

105  
	`__buûtö___°r˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

106 
	}
}

108 #ifde‡
__USE_GNU


109 
__exã∫_Æways_ölöe
 *

110 
__NTH
 (
	$°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

112  
	`__buûtö___°p˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

113 
	}
}

117 
__exã∫_Æways_ölöe
 *

118 
__NTH
 (
	$°∫˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

119 
size_t
 
__Àn
))

121  
	`__buûtö___°∫˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

122 
	}
}

125 *
	$__°≤˝y_chk
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
,

126 
size_t
 
__de°Àn
Ë
__THROW
;

127 *
	`__REDIRECT_NTH
 (
__°≤˝y_Æüs
, (*
__de°
,

128 
__c⁄°
 *
__§c
,

129 
size_t
 
__n
), 
°≤˝y
);

131 
__exã∫_Æways_ölöe
 *

132 
	`__NTH
 (
	$°≤˝y
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
))

134 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1

135 && (!
	`__buûtö_c⁄°™t_p
 (
__n
Ë|| __¿<
	`__bos
 (
__de°
)))

136  
	`__°≤˝y_chk
 (
__de°
, 
__§c
, 
__n
, 
	`__bos
 (__dest));

137  
	`__°≤˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

138 
	}
}

141 
__exã∫_Æways_ölöe
 *

142 
__NTH
 (
	$°rˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

144  
	`__buûtö___°rˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

145 
	}
}

148 
__exã∫_Æways_ölöe
 *

149 
__NTH
 (
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

150 
size_t
 
__Àn
))

152  
	`__buûtö___°∫ˇt_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

153 
	}
}

	@/usr/include/bits/sys_errlist.h

20 #i‚de‡
_STDIO_H


26 #ifde‡ 
__USE_BSD


27 
sys_√º
;

28 
__c⁄°
 *__c⁄° 
sys_îæi°
[];

30 #ifde‡ 
__USE_GNU


31 
_sys_√º
;

32 
__c⁄°
 *__c⁄° 
_sys_îæi°
[];

	@/usr/include/bits/types.h

24 #i‚def 
_BITS_TYPES_H


25 
	#_BITS_TYPES_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/w‹dsize.h
>

31 
	t__u_ch¨
;

32 
	t__u_sh‹t
;

33 
	t__u_öt
;

34 
	t__u_l⁄g
;

37 sig√d 
	t__öt8_t
;

38 
	t__uöt8_t
;

39 sig√d 
	t__öt16_t
;

40 
	t__uöt16_t
;

41 sig√d 
	t__öt32_t
;

42 
	t__uöt32_t
;

43 #i‡
__WORDSIZE
 == 64

44 sig√d 
	t__öt64_t
;

45 
	t__uöt64_t
;

46 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


47 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

48 
__exãnsi⁄__
 
	t__uöt64_t
;

52 #i‡
__WORDSIZE
 == 64

53 
	t__quad_t
;

54 
	t__u_quad_t
;

55 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


56 
__exãnsi⁄__
 
	t__quad_t
;

57 
__exãnsi⁄__
 
	t__u_quad_t
;

61 
	m__vÆ
[2];

62 } 
	t__quad_t
;

65 
__u_l⁄g
 
	m__vÆ
[2];

66 } 
	t__u_quad_t
;

99 
	#__S16_TYPE
 

	)

100 
	#__U16_TYPE
 

	)

101 
	#__S32_TYPE
 

	)

102 
	#__U32_TYPE
 

	)

103 
	#__SLONGWORD_TYPE
 

	)

104 
	#__ULONGWORD_TYPE
 

	)

105 #i‡
__WORDSIZE
 == 32

106 
	#__SQUAD_TYPE
 
__quad_t


	)

107 
	#__UQUAD_TYPE
 
__u_quad_t


	)

108 
	#__SWORD_TYPE
 

	)

109 
	#__UWORD_TYPE
 

	)

110 
	#__SLONG32_TYPE
 

	)

111 
	#__ULONG32_TYPE
 

	)

112 
	#__S64_TYPE
 
__quad_t


	)

113 
	#__U64_TYPE
 
__u_quad_t


	)

116 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

117 #ñi‡
__WORDSIZE
 == 64

118 
	t__SQUAD_TYPE
 

	)

119 
	t__UQUAD_TYPE
 

	)

120 
	t__SWORD_TYPE
 

	)

121 
	t__UWORD_TYPE
 

	)

122 
	t__SLONG32_TYPE
 

	)

123 
	t__ULONG32_TYPE
 

	)

124 
	t__S64_TYPE
 

	)

125 
	t__U64_TYPE
 

	)

127 
	t__STD_TYPE
 

	)

131 
	~<bôs/ty≥sizes.h
>

134 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

135 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

136 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

137 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

138 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

139 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

140 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

141 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

142 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

143 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

144 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

145 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

146 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

147 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

148 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

149 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

150 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

151 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

153 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

154 
__STD_TYPE
 
__SWBLK_T_TYPE
 
	g__swblk_t
;

155 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

158 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

161 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

164 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

169 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

170 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

173 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

174 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

177 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

178 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

180 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

184 
__off64_t
 
	t__loff_t
;

185 
__quad_t
 *
	t__qaddr_t
;

186 *
	t__ˇddr_t
;

189 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

192 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

195 #unde‡
__STD_TYPE


	@/usr/include/bits/waitflags.h

20 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


26 
	#WNOHANG
 1

	)

27 
	#WUNTRACED
 2

	)

30 
	#WSTOPPED
 2

	)

31 
	#WEXITED
 4

	)

32 
	#WCONTINUED
 8

	)

33 
	#WNOWAIT
 0x01000000

	)

35 
	#__WNOTHREAD
 0x20000000

	)

37 
	#__WALL
 0x40000000

	)

38 
	#__WCLONE
 0x80000000

	)

	@/usr/include/bits/waitstatus.h

20 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


29 
	#__WEXITSTATUS
(
°©us
Ë(((°©usË& 0xff00Ë>> 8)

	)

32 
	#__WTERMSIG
(
°©us
Ë((°©usË& 0x7f)

	)

35 
	#__WSTOPSIG
(
°©us
Ë
	`__WEXITSTATUS
(°©us)

	)

38 
	#__WIFEXITED
(
°©us
Ë(
	`__WTERMSIG
(°©usË=0)

	)

41 
	#__WIFSIGNALED
(
°©us
) \

42 (((sig√d Ë(((
°©us
Ë& 0x7fË+ 1Ë>> 1Ë> 0)

	)

45 
	#__WIFSTOPPED
(
°©us
Ë(((°©usË& 0xffË=0x7f)

	)

49 #ifde‡
WCONTINUED


50 
	#__WIFCONTINUED
(
°©us
Ë((°©usË=
__W_CONTINUED
)

	)

54 
	#__WCOREDUMP
(
°©us
Ë((°©usË& 
__WCOREFLAG
)

	)

57 
	#__W_EXITCODE
(
ªt
, 
sig
Ë(‘ëË<< 8 | (sig))

	)

58 
	#__W_STOPCODE
(
sig
Ë((sigË<< 8 | 0x7f)

	)

59 
	#__W_CONTINUED
 0xffff

	)

60 
	#__WCOREFLAG
 0x80

	)

63 #ifdef 
__USE_BSD


65 
	~<ídün.h
>

67 
	uwaô


69 
	mw_°©us
;

72 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


73 
	m__w_ãrmsig
:7;

74 
	m__w_c‹edump
:1;

75 
	m__w_ªtcode
:8;

78 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


80 
	m__w_ªtcode
:8;

81 
	m__w_c‹edump
:1;

82 
	m__w_ãrmsig
:7;

84 } 
	m__waô_ãrmö©ed
;

87 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


88 
	m__w_°›vÆ
:8;

89 
	m__w_°›sig
:8;

92 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


94 
	m__w_°›sig
:8;

95 
	m__w_°›vÆ
:8;

97 } 
	m__waô_°›≥d
;

100 
	#w_ãrmsig
 
__waô_ãrmö©ed
.
__w_ãrmsig


	)

101 
	#w_c‹edump
 
__waô_ãrmö©ed
.
__w_c‹edump


	)

102 
	#w_ªtcode
 
__waô_ãrmö©ed
.
__w_ªtcode


	)

103 
	#w_°›sig
 
__waô_°›≥d
.
__w_°›sig


	)

104 
	#w_°›vÆ
 
__waô_°›≥d
.
__w_°›vÆ


	)

	@/usr/include/bits/wchar.h

20 #i‚de‡
_BITS_WCHAR_H


21 
	#_BITS_WCHAR_H
 1

	)

23 
	#__WCHAR_MIN
 (-2147483647 - 1)

	)

24 
	#__WCHAR_MAX
 (2147483647)

	)

	@/usr/include/bits/wordsize.h

3 #i‡
deföed
 
__x86_64__


4 
	#__WORDSIZE
 64

	)

5 
	#__WORDSIZE_COMPAT32
 1

	)

7 
	#__WORDSIZE
 32

	)

	@/usr/include/endian.h

19 #i‚def 
_ENDIAN_H


20 
	#_ENDIAN_H
 1

	)

22 
	~<„©uªs.h
>

32 
	#__LITTLE_ENDIAN
 1234

	)

33 
	#__BIG_ENDIAN
 4321

	)

34 
	#__PDP_ENDIAN
 3412

	)

37 
	~<bôs/ídün.h
>

41 #i‚de‡
__FLOAT_WORD_ORDER


42 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

45 #ifdef 
__USE_BSD


46 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

47 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

48 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

49 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

52 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


53 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

54 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


55 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

59 #ifde‡
__USE_BSD


61 
	~<bôs/byãsw≠.h
>

63 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


64 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

65 
	#htﬁe16
(
x
Ë(x)

	)

66 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

67 
	#À16toh
(
x
Ë(x)

	)

69 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

70 
	#htﬁe32
(
x
Ë(x)

	)

71 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

72 
	#À32toh
(
x
Ë(x)

	)

74 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

75 
	#htﬁe64
(
x
Ë(x)

	)

76 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

77 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/features.h

19 #i‚def 
_FEATURES_H


20 
	#_FEATURES_H
 1

	)

96 #unde‡
__USE_ISOC99


97 #unde‡
__USE_ISOC95


98 #unde‡
__USE_POSIX


99 #unde‡
__USE_POSIX2


100 #unde‡
__USE_POSIX199309


101 #unde‡
__USE_POSIX199506


102 #unde‡
__USE_XOPEN


103 #unde‡
__USE_XOPEN_EXTENDED


104 #unde‡
__USE_UNIX98


105 #unde‡
__USE_XOPEN2K


106 #unde‡
__USE_XOPEN2KXSI


107 #unde‡
__USE_XOPEN2K8


108 #unde‡
__USE_XOPEN2K8XSI


109 #unde‡
__USE_LARGEFILE


110 #unde‡
__USE_LARGEFILE64


111 #unde‡
__USE_FILE_OFFSET64


112 #unde‡
__USE_BSD


113 #unde‡
__USE_SVID


114 #unde‡
__USE_MISC


115 #unde‡
__USE_ATFILE


116 #unde‡
__USE_GNU


117 #unde‡
__USE_REENTRANT


118 #unde‡
__USE_FORTIFY_LEVEL


119 #unde‡
__FAVOR_BSD


120 #unde‡
__KERNEL_STRICT_NAMES


124 #i‚de‡
_LOOSE_KERNEL_NAMES


125 
	#__KERNEL_STRICT_NAMES


	)

129 
	#__USE_ANSI
 1

	)

138 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


139 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

140 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

142 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

147 #i‡
deföed
 
_BSD_SOURCE
 && \

148 !(
deföed
 
	g_POSIX_SOURCE
 || deföed 
	g_POSIX_C_SOURCE
 || \

149 
deföed
 
	g_XOPEN_SOURCE
 || deföed 
	g_GNU_SOURCE
 || deföed 
	g_SVID_SOURCE
)

150 
	#__FAVOR_BSD
 1

	)

154 #ifde‡
_GNU_SOURCE


155 #unde‡
_ISOC95_SOURCE


156 
	#_ISOC95_SOURCE
 1

	)

157 #unde‡
_ISOC99_SOURCE


158 
	#_ISOC99_SOURCE
 1

	)

159 #unde‡
_POSIX_SOURCE


160 
	#_POSIX_SOURCE
 1

	)

161 #unde‡
_POSIX_C_SOURCE


162 
	#_POSIX_C_SOURCE
 200809L

	)

163 #unde‡
_XOPEN_SOURCE


164 
	#_XOPEN_SOURCE
 700

	)

165 #unde‡
_XOPEN_SOURCE_EXTENDED


166 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

167 #unde‡
_LARGEFILE64_SOURCE


168 
	#_LARGEFILE64_SOURCE
 1

	)

169 #unde‡
_BSD_SOURCE


170 
	#_BSD_SOURCE
 1

	)

171 #unde‡
_SVID_SOURCE


172 
	#_SVID_SOURCE
 1

	)

173 #unde‡
_ATFILE_SOURCE


174 
	#_ATFILE_SOURCE
 1

	)

179 #i‡(!
deföed
 
__STRICT_ANSI__
 && !deföed 
_ISOC99_SOURCE
 && \

180 !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 && \

181 !
deföed
 
	g_XOPEN_SOURCE
 && !deföed 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
)

182 
	#_BSD_SOURCE
 1

	)

183 
	#_SVID_SOURCE
 1

	)

190 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

191 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

192 
	#__USE_ISOC99
 1

	)

196 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

197 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

198 
	#__USE_ISOC95
 1

	)

203 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

204 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

205 
	#_POSIX_SOURCE
 1

	)

206 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

207 
	#_POSIX_C_SOURCE
 2

	)

208 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

209 
	#_POSIX_C_SOURCE
 199506L

	)

210 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

211 
	#_POSIX_C_SOURCE
 200112L

	)

213 
	#_POSIX_C_SOURCE
 200809L

	)

215 
	#__USE_POSIX_IMPLICITLY
 1

	)

218 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


219 
	#__USE_POSIX
 1

	)

222 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


223 
	#__USE_POSIX2
 1

	)

226 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

227 
	#__USE_POSIX199309
 1

	)

230 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

231 
	#__USE_POSIX199506
 1

	)

234 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

235 
	#__USE_XOPEN2K
 1

	)

236 #unde‡
__USE_ISOC95


237 
	#__USE_ISOC95
 1

	)

238 #unde‡
__USE_ISOC99


239 
	#__USE_ISOC99
 1

	)

242 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

243 
	#__USE_XOPEN2K8
 1

	)

244 #unde‡
_ATFILE_SOURCE


245 
	#_ATFILE_SOURCE
 1

	)

248 #ifdef 
_XOPEN_SOURCE


249 
	#__USE_XOPEN
 1

	)

250 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

251 
	#__USE_XOPEN_EXTENDED
 1

	)

252 
	#__USE_UNIX98
 1

	)

253 #unde‡
_LARGEFILE_SOURCE


254 
	#_LARGEFILE_SOURCE
 1

	)

255 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

256 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

257 
	#__USE_XOPEN2K8
 1

	)

258 
	#__USE_XOPEN2K8XSI
 1

	)

260 
	#__USE_XOPEN2K
 1

	)

261 
	#__USE_XOPEN2KXSI
 1

	)

262 #unde‡
__USE_ISOC95


263 
	#__USE_ISOC95
 1

	)

264 #unde‡
__USE_ISOC99


265 
	#__USE_ISOC99
 1

	)

268 #ifde‡
_XOPEN_SOURCE_EXTENDED


269 
	#__USE_XOPEN_EXTENDED
 1

	)

274 #ifde‡
_LARGEFILE_SOURCE


275 
	#__USE_LARGEFILE
 1

	)

278 #ifde‡
_LARGEFILE64_SOURCE


279 
	#__USE_LARGEFILE64
 1

	)

282 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

283 
	#__USE_FILE_OFFSET64
 1

	)

286 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


287 
	#__USE_MISC
 1

	)

290 #ifdef 
_BSD_SOURCE


291 
	#__USE_BSD
 1

	)

294 #ifdef 
_SVID_SOURCE


295 
	#__USE_SVID
 1

	)

298 #ifdef 
_ATFILE_SOURCE


299 
	#__USE_ATFILE
 1

	)

302 #ifdef 
_GNU_SOURCE


303 
	#__USE_GNU
 1

	)

306 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


307 
	#__USE_REENTRANT
 1

	)

310 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

311 && 
deföed
 
__OPTIMIZE__
 && __OPTIMIZE__ > 0

312 #i‡!
__GNUC_PREREQ
 (4, 1)

313 #ifde‡
__GNUC_RH_RELEASE__


314 #w¨nög 
_FORTIFY_SOURCE
 
suµ‹ãd
 
⁄ly
 
wôh
 
GCC
 4.1 
™d
 
œãr


316 
	#__USE_FORTIFY_LEVEL
 0

	)

317 #ñi‡
_FORTIFY_SOURCE
 > 1

318 
	#__USE_FORTIFY_LEVEL
 2

	)

320 
	#__USE_FORTIFY_LEVEL
 1

	)

323 
	#__USE_FORTIFY_LEVEL
 0

	)

327 
	#__STDC_IEC_559__
 1

	)

328 
	#__STDC_IEC_559_COMPLEX__
 1

	)

331 
	#__STDC_ISO_10646__
 200009L

	)

339 #unde‡
__GNU_LIBRARY__


340 
	#__GNU_LIBRARY__
 6

	)

344 
	#__GLIBC__
 2

	)

345 
	#__GLIBC_MINOR__
 12

	)

347 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

348 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

351 #i‡
deföed
 
__GNUC__
 \

352 || (
deföed
 
	g__PGI
 && deföed 
	g__i386__
 ) \

353 || (
deföed
 
	g__INTEL_COMPILER
 && (deföed 
	g__i386__
 || deföed 
	g__ü64__
)) \

354 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L)

355 
	#__GLIBC_HAVE_LONG_LONG
 1

	)

359 #i‚de‡
__ASSEMBLER__


360 #i‚de‡
_SYS_CDEFS_H


361 
	~<sys/cdefs.h
>

366 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


367 
	#__USE_LARGEFILE
 1

	)

368 
	#__USE_LARGEFILE64
 1

	)

374 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

375 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

376 && 
deföed
 
	g__exã∫_ölöe


377 
	#__USE_EXTERN_INLINES
 1

	)

385 
	~<gnu/°ubs.h
>

	@/usr/include/getopt.h

21 #i‚de‡
_GETOPT_H


23 #i‚de‡
__√ed_gë›t


24 
	#_GETOPT_H
 1

	)

34 #i‡!
deföed
 
__GNU_LIBRARY__


35 
	~<˘y≥.h
>

38 #i‚de‡
__THROW


39 #i‚de‡
__GNUC_PREREQ


40 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

42 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

43 
	#__THROW
 
	`throw
 ()

	)

45 
	#__THROW


	)

49 #ifdef 
__˝lu•lus


59 *
›èrg
;

73 
›töd
;

78 
›ãº
;

82 
›t›t
;

84 #i‚de‡
__√ed_gë›t


106 
	s›ti⁄


108 c⁄° *
	g«me
;

111 
	ghas_¨g
;

112 *
	gÊag
;

113 
	gvÆ
;

118 
	#no_¨gumít
 0

	)

119 
	#ªquúed_¨gumít
 1

	)

120 
	#›ti⁄Æ_¨gumít
 2

	)

148 #ifde‡
__GNU_LIBRARY__


152 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

153 
__THROW
;

155 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

156 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


160 #ifde‡
__REDIRECT


161 
__REDIRECT
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

162 c⁄° *
__sh‹t›ts
),

163 
__posix_gë›t
Ë
__THROW
;

165 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

166 c⁄° *
__sh‹t›ts
Ë
__THROW
;

167 
	#gë›t
 
__posix_gë›t


	)

171 
gë›t
 ();

174 #i‚de‡
__√ed_gë›t


175 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

176 c⁄° *
__sh‹t›ts
,

177 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

178 
__THROW
;

179 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

180 c⁄° *
__sh‹t›ts
,

181 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

182 
__THROW
;

186 #ifdef 
__˝lu•lus


191 #unde‡
__√ed_gë›t


	@/usr/include/libio.h

29 #i‚de‡
_IO_STDIO_H


30 
	#_IO_STDIO_H


	)

32 
	~<_G_c⁄fig.h
>

34 
	#_IO_pos_t
 
_G_Âos_t


	)

35 
	#_IO_Âos_t
 
_G_Âos_t


	)

36 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

37 
	#_IO_size_t
 
_G_size_t


	)

38 
	#_IO_ssize_t
 
_G_ssize_t


	)

39 
	#_IO_off_t
 
_G_off_t


	)

40 
	#_IO_off64_t
 
_G_off64_t


	)

41 
	#_IO_pid_t
 
_G_pid_t


	)

42 
	#_IO_uid_t
 
_G_uid_t


	)

43 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

44 
	#_IO_HAVE_SYS_WAIT
 
_G_HAVE_SYS_WAIT


	)

45 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

46 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

47 
	#_IO_va_li°
 
_G_va_li°


	)

48 
	#_IO_wöt_t
 
_G_wöt_t


	)

50 #ifde‡
_G_NEED_STDARG_H


52 
	#__√ed___va_li°


	)

53 
	~<°d¨g.h
>

54 #ifde‡
__GNUC_VA_LIST


55 #unde‡
_IO_va_li°


56 
	#_IO_va_li°
 
__gnuc_va_li°


	)

60 #i‚de‡
__P


61 #i‡
_G_HAVE_SYS_CDEFS


62 
	~<sys/cdefs.h
>

64 #ifde‡
__STDC__


65 
	#__P
(
p
Ë
	)
p

66 
	#__PMT
(
p
Ë
	)
p

68 
	#__P
(
p
Ë()

	)

69 
	#__PMT
(
p
Ë()

	)

75 #i‚de‡
_PARAMS


76 
	#_PARAMS
(
¥Ÿos
Ë
	`__P
’rŸos)

	)

79 #i‚de‡
__STDC__


81 c⁄°

	)

84 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

85 #i‚de‡
_G_HAVE_PRINTF_FP


86 
	#_IO_USE_DTOA
 1

	)

89 #i‚de‡
EOF


90 
	#EOF
 (-1)

	)

92 #i‚de‡
NULL


93 #i‡
deföed
 
__GNUG__
 && \

94 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

95 
	#NULL
 (
__nuŒ
)

	)

97 #i‡!
deföed
(
__˝lu•lus
)

98 
	#NULL
 ((*)0)

	)

100 
	#NULL
 (0)

	)

105 
	#_IOS_INPUT
 1

	)

106 
	#_IOS_OUTPUT
 2

	)

107 
	#_IOS_ATEND
 4

	)

108 
	#_IOS_APPEND
 8

	)

109 
	#_IOS_TRUNC
 16

	)

110 
	#_IOS_NOCREATE
 32

	)

111 
	#_IOS_NOREPLACE
 64

	)

112 
	#_IOS_BIN
 128

	)

120 
	#_IO_MAGIC
 0xFBAD0000

	)

121 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

122 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

123 
	#_IO_USER_BUF
 1

	)

124 
	#_IO_UNBUFFERED
 2

	)

125 
	#_IO_NO_READS
 4

	)

126 
	#_IO_NO_WRITES
 8

	)

127 
	#_IO_EOF_SEEN
 0x10

	)

128 
	#_IO_ERR_SEEN
 0x20

	)

129 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

130 
	#_IO_LINKED
 0x80

	)

131 
	#_IO_IN_BACKUP
 0x100

	)

132 
	#_IO_LINE_BUF
 0x200

	)

133 
	#_IO_TIED_PUT_GET
 0x400

	)

134 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

135 
	#_IO_IS_APPENDING
 0x1000

	)

136 
	#_IO_IS_FILEBUF
 0x2000

	)

137 
	#_IO_BAD_SEEN
 0x4000

	)

138 
	#_IO_USER_LOCK
 0x8000

	)

140 
	#_IO_FLAGS2_MMAP
 1

	)

141 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

142 #ifde‡
_LIBC


143 
	#_IO_FLAGS2_FORTIFY
 4

	)

145 
	#_IO_FLAGS2_USER_WBUF
 8

	)

146 #ifde‡
_LIBC


147 
	#_IO_FLAGS2_SCANF_STD
 16

	)

151 
	#_IO_SKIPWS
 01

	)

152 
	#_IO_LEFT
 02

	)

153 
	#_IO_RIGHT
 04

	)

154 
	#_IO_INTERNAL
 010

	)

155 
	#_IO_DEC
 020

	)

156 
	#_IO_OCT
 040

	)

157 
	#_IO_HEX
 0100

	)

158 
	#_IO_SHOWBASE
 0200

	)

159 
	#_IO_SHOWPOINT
 0400

	)

160 
	#_IO_UPPERCASE
 01000

	)

161 
	#_IO_SHOWPOS
 02000

	)

162 
	#_IO_SCIENTIFIC
 04000

	)

163 
	#_IO_FIXED
 010000

	)

164 
	#_IO_UNITBUF
 020000

	)

165 
	#_IO_STDIO
 040000

	)

166 
	#_IO_DONT_CLOSE
 0100000

	)

167 
	#_IO_BOOLALPHA
 0200000

	)

170 
_IO_jump_t
; 
	g_IO_FILE
;

173 #ifde‡
_IO_MTSAFE_IO


174 #i‡
deföed
 
__GLIBC__
 && __GLIBC__ >= 2

175 
	~<bôs/°dio-lock.h
>

180 
	t_IO_lock_t
;

186 
	s_IO_m¨kî
 {

187 
_IO_m¨kî
 *
	m_√xt
;

188 
_IO_FILE
 *
	m_sbuf
;

192 
	m_pos
;

194 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

195 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

196 
	mpublic
:

197 
°ªamm¨kî
(
°ªambuf
 *
sb
);

198 ~
°ªamm¨kî
();

199 
ßvög
(Ë{  
	m_•os
 == -2; }

200 
dñè
(
°ªamm¨kî
&);

201 
dñè
();

206 
	e__codecvt_ªsu…


208 
	m__codecvt_ok
,

209 
	m__codecvt_∑πül
,

210 
	m__codecvt_îr‹
,

211 
	m__codecvt_noc⁄v


214 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


217 
	s_IO_codecvt


219 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

220 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

221 
	m__mb°©e_t
 *,

222 c⁄° 
	mwch¨_t
 *,

223 c⁄° 
	mwch¨_t
 *,

224 c⁄° 
	mwch¨_t
 **, *,

226 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

227 
	m__mb°©e_t
 *, *,

229 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

230 
	m__mb°©e_t
 *,

232 c⁄° **, 
	mwch¨_t
 *,

233 
	mwch¨_t
 *, wchar_t **);

234 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

235 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

236 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

237 c⁄° *, c⁄° *, 
	m_IO_size_t
);

238 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

240 
_IO_ic⁄v_t
 
	m__cd_ö
;

241 
_IO_ic⁄v_t
 
	m__cd_out
;

245 
	s_IO_wide_d©a


247 
wch¨_t
 *
	m_IO_ªad_±r
;

248 
wch¨_t
 *
	m_IO_ªad_íd
;

249 
wch¨_t
 *
	m_IO_ªad_ba£
;

250 
wch¨_t
 *
	m_IO_wrôe_ba£
;

251 
wch¨_t
 *
	m_IO_wrôe_±r
;

252 
wch¨_t
 *
	m_IO_wrôe_íd
;

253 
wch¨_t
 *
	m_IO_buf_ba£
;

254 
wch¨_t
 *
	m_IO_buf_íd
;

256 
wch¨_t
 *
	m_IO_ßve_ba£
;

257 
wch¨_t
 *
	m_IO_backup_ba£
;

259 
wch¨_t
 *
	m_IO_ßve_íd
;

261 
__mb°©e_t
 
	m_IO_°©e
;

262 
__mb°©e_t
 
	m_IO_œ°_°©e
;

263 
_IO_codecvt
 
	m_codecvt
;

265 
wch¨_t
 
	m_sh‹tbuf
[1];

267 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

271 
	s_IO_FILE
 {

272 
	m_Êags
;

273 
	#_IO_fûe_Êags
 
_Êags


	)

277 * 
	m_IO_ªad_±r
;

278 * 
	m_IO_ªad_íd
;

279 * 
	m_IO_ªad_ba£
;

280 * 
	m_IO_wrôe_ba£
;

281 * 
	m_IO_wrôe_±r
;

282 * 
	m_IO_wrôe_íd
;

283 * 
	m_IO_buf_ba£
;

284 * 
	m_IO_buf_íd
;

286 *
	m_IO_ßve_ba£
;

287 *
	m_IO_backup_ba£
;

288 *
	m_IO_ßve_íd
;

290 
_IO_m¨kî
 *
	m_m¨kîs
;

292 
_IO_FILE
 *
	m_chaö
;

294 
	m_fûío
;

296 
	m_blksize
;

298 
	m_Êags2
;

300 
_IO_off_t
 
	m_ﬁd_off£t
;

302 
	#__HAVE_COLUMN


	)

304 
	m_cur_cﬁumn
;

305 sig√d 
	m_vèbÀ_off£t
;

306 
	m_sh‹tbuf
[1];

310 
_IO_lock_t
 *
	m_lock
;

311 #ifde‡
_IO_USE_OLD_IO_FILE


314 
	s_IO_FILE_com∂ëe


316 
_IO_FILE
 
	m_fûe
;

318 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

319 
_IO_off64_t
 
	m_off£t
;

320 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


322 
_IO_codecvt
 *
	m_codecvt
;

323 
_IO_wide_d©a
 *
	m_wide_d©a
;

324 
_IO_FILE
 *
	m_‰ìªs_li°
;

325 *
	m_‰ìªs_buf
;

326 
size_t
 
	m_‰ìªs_size
;

328 *
	m__∑d1
;

329 *
	m__∑d2
;

330 *
	m__∑d3
;

331 *
	m__∑d4
;

332 
size_t
 
	m__∑d5
;

334 
	m_mode
;

336 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

340 #i‚de‡
__˝lu•lus


341 
_IO_FILE
 
	t_IO_FILE
;

344 
	g_IO_FILE_∂us
;

346 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

347 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

348 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

349 #i‚de‡
_LIBC


350 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

351 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

352 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

354 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

355 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

356 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

364 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

372 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, 
	t__c⁄°
 *
	t__buf
,

373 
	tsize_t
 
	t__n
);

381 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

384 
	t__io_˛o£_‚
 (*
	t__cookõ
);

387 #ifde‡
_GNU_SOURCE


389 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

390 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

391 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

392 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

397 
__io_ªad_‚
 *
	mªad
;

398 
__io_wrôe_‚
 *
	mwrôe
;

399 
__io_£ek_‚
 *
	m£ek
;

400 
__io_˛o£_‚
 *
	m˛o£
;

401 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

402 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

404 
	g_IO_cookõ_fûe
;

407 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

408 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

412 #ifde‡
__˝lu•lus


416 
__undîÊow
 (
_IO_FILE
 *);

417 
__uÊow
 (
_IO_FILE
 *);

418 
__ovîÊow
 (
_IO_FILE
 *, );

419 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


420 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

421 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

422 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

425 #i‡ 
__GNUC__
 >= 3

426 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

428 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

431 
	#_IO_gëc_u∆ocked
(
_Â
) \

432 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

433 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

434 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

435 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

436 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

437 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

438 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

439 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

440 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

441 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

443 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


444 
	#_IO_gëwc_u∆ocked
(
_Â
) \

445 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

446 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

447 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

448 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

449 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

450 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

451 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

452 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

453 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

454 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

457 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

458 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

460 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

461 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

462 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

463 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

465 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

468 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

469 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

471 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

472 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

473 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

475 #ifde‡
_IO_MTSAFE_IO


476 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

477 
	#_IO_Êockfûe
(
_Â
) \

478 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

479 
	#_IO_fu∆ockfûe
(
_Â
) \

480 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

482 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

483 
	#_IO_Êockfûe
(
_Â
Ë

	)

484 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

485 
	#_IO_·rylockfûe
(
_Â
Ë

	)

486 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

487 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

490 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

491 
_IO_va_li°
, *
__ª°ri˘
);

492 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

493 
_IO_va_li°
);

494 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

495 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

497 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

498 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

500 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

502 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


503 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

504 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

505 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

506 #i‡
__GNUC__
 >= 2

509 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


510 
	~<shlib-com∑t.h
>

511 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

512 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

513 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

514 c⁄° 
_IO_°dö_u£d
;

515 
wók_exã∫
 (
_IO_°dö_u£d
);

518 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


519 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

523 
	#_IO_fwide
(
__Â
, 
__mode
) \

524 ({ 
__ªsu…
 = (
__mode
); \

525 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

527 i‡((
__Â
)->
_mode
 == 0) \

529 (
__Â
)->
_mode
 = -1; \

530 
__ªsu…
 = (
__Â
)->
_mode
; \

532 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

533 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

535 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

536 
__ªsu…
; })

	)

539 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

540 
_IO_va_li°
, *
__ª°ri˘
);

541 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

542 
_IO_va_li°
);

543 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

544 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

547 #ifde‡
__LDBL_COMPAT


548 
	~<bôs/libio-ldbl.h
>

551 #ifde‡
__˝lu•lus


	@/usr/include/sys/syscall.h

19 #i‚de‡
_SYSCALL_H


20 
	#_SYSCALL_H
 1

	)

25 
	~<asm/uni°d.h
>

27 #i‚de‡
_LIBC


32 
	~<bôs/sysˇŒ.h
>

	@/usr/include/sys/types.h

23 #i‚def 
_SYS_TYPES_H


24 
	#_SYS_TYPES_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


30 
	~<bôs/ty≥s.h
>

32 #ifdef 
__USE_BSD


33 #i‚de‡
__u_ch¨_deföed


34 
__u_ch¨
 
	tu_ch¨
;

35 
__u_sh‹t
 
	tu_sh‹t
;

36 
__u_öt
 
	tu_öt
;

37 
__u_l⁄g
 
	tu_l⁄g
;

38 
__quad_t
 
	tquad_t
;

39 
__u_quad_t
 
	tu_quad_t
;

40 
__fsid_t
 
	tfsid_t
;

41 
	#__u_ch¨_deföed


	)

45 
__loff_t
 
	tloff_t
;

47 #i‚de‡
__öo_t_deföed


48 #i‚de‡
__USE_FILE_OFFSET64


49 
__öo_t
 
	töo_t
;

51 
__öo64_t
 
	töo_t
;

53 
	#__öo_t_deföed


	)

55 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


56 
__öo64_t
 
	töo64_t
;

57 
	#__öo64_t_deföed


	)

60 #i‚de‡
__dev_t_deföed


61 
__dev_t
 
	tdev_t
;

62 
	#__dev_t_deföed


	)

65 #i‚de‡
__gid_t_deföed


66 
__gid_t
 
	tgid_t
;

67 
	#__gid_t_deföed


	)

70 #i‚de‡
__mode_t_deföed


71 
__mode_t
 
	tmode_t
;

72 
	#__mode_t_deföed


	)

75 #i‚de‡
__∆ök_t_deföed


76 
__∆ök_t
 
	t∆ök_t
;

77 
	#__∆ök_t_deföed


	)

80 #i‚de‡
__uid_t_deföed


81 
__uid_t
 
	tuid_t
;

82 
	#__uid_t_deföed


	)

85 #i‚de‡
__off_t_deföed


86 #i‚de‡
__USE_FILE_OFFSET64


87 
__off_t
 
	toff_t
;

89 
__off64_t
 
	toff_t
;

91 
	#__off_t_deföed


	)

93 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


94 
__off64_t
 
	toff64_t
;

95 
	#__off64_t_deföed


	)

98 #i‚de‡
__pid_t_deföed


99 
__pid_t
 
	tpid_t
;

100 
	#__pid_t_deföed


	)

103 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
) \

104 && !
deföed
 
__id_t_deföed


105 
__id_t
 
	tid_t
;

106 
	#__id_t_deföed


	)

109 #i‚de‡
__ssize_t_deföed


110 
__ssize_t
 
	tssize_t
;

111 
	#__ssize_t_deföed


	)

114 #ifdef 
__USE_BSD


115 #i‚de‡
__daddr_t_deföed


116 
__daddr_t
 
	tdaddr_t
;

117 
__ˇddr_t
 
	tˇddr_t
;

118 
	#__daddr_t_deföed


	)

122 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__key_t_deföed


123 
__key_t
 
	tkey_t
;

124 
	#__key_t_deföed


	)

127 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


128 
	#__√ed_˛ock_t


	)

130 
	#__√ed_time_t


	)

131 
	#__√ed_timî_t


	)

132 
	#__√ed_˛ockid_t


	)

133 
	~<time.h
>

135 #ifde‡
__USE_XOPEN


136 #i‚de‡
__u£c⁄ds_t_deföed


137 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

138 
	#__u£c⁄ds_t_deföed


	)

140 #i‚de‡
__su£c⁄ds_t_deföed


141 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

142 
	#__su£c⁄ds_t_deföed


	)

146 
	#__√ed_size_t


	)

147 
	~<°ddef.h
>

149 #ifde‡
__USE_MISC


151 
	tul⁄g
;

152 
	tush‹t
;

153 
	tuöt
;

158 #i‡!
__GNUC_PREREQ
 (2, 7)

161 #i‚de‡
__öt8_t_deföed


162 
	#__öt8_t_deföed


	)

163 
	töt8_t
;

164 
	töt16_t
;

165 
	töt32_t
;

166 #i‡
__WORDSIZE
 == 64

167 
	töt64_t
;

168 #ñi‡
__GLIBC_HAVE_LONG_LONG


169 
__exãnsi⁄__
 
	töt64_t
;

174 
	tu_öt8_t
;

175 
	tu_öt16_t
;

176 
	tu_öt32_t
;

177 #i‡
__WORDSIZE
 == 64

178 
	tu_öt64_t
;

179 #ñi‡
__GLIBC_HAVE_LONG_LONG


180 
__exãnsi⁄__
 
	tu_öt64_t
;

183 
	tªgi°î_t
;

188 
	#__ötN_t
(
N
, 
MODE
) \

189 ##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

190 
	t__u_ötN_t
(
	tN
, 
	tMODE
) \

191 
	tu_öt
##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

193 #i‚de‡
	t__öt8_t_deföed


194 
	t__öt8_t_deföed


	)

195 
	t__ötN_t
 (8, 
	t__QI__
);

196 
__ötN_t
 (16, 
__HI__
);

197 
__ötN_t
 (32, 
__SI__
);

198 
__ötN_t
 (64, 
__DI__
);

201 
__u_ötN_t
 (8, 
__QI__
);

202 
__u_ötN_t
 (16, 
__HI__
);

203 
__u_ötN_t
 (32, 
__SI__
);

204 
__u_ötN_t
 (64, 
__DI__
);

206 
	tªgi°î_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__w‹d__
)));

212 
	#__BIT_TYPES_DEFINED__
 1

	)

215 #ifdef 
__USE_BSD


217 
	~<ídün.h
>

220 
	~<sys/£À˘.h
>

223 
	~<sys/sysma¸os.h
>

227 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
) \

228 && !
deföed
 
__blksize_t_deföed


229 
__blksize_t
 
	tblksize_t
;

230 
	#__blksize_t_deföed


	)

234 #i‚de‡
__USE_FILE_OFFSET64


235 #i‚de‡
__blk˙t_t_deföed


236 
__blk˙t_t
 
	tblk˙t_t
;

237 
	#__blk˙t_t_deföed


	)

239 #i‚de‡
__fsblk˙t_t_deföed


240 
__fsblk˙t_t
 
	tfsblk˙t_t
;

241 
	#__fsblk˙t_t_deföed


	)

243 #i‚de‡
__fsfû˙t_t_deföed


244 
__fsfû˙t_t
 
	tfsfû˙t_t
;

245 
	#__fsfû˙t_t_deföed


	)

248 #i‚de‡
__blk˙t_t_deföed


249 
__blk˙t64_t
 
	tblk˙t_t
;

250 
	#__blk˙t_t_deföed


	)

252 #i‚de‡
__fsblk˙t_t_deföed


253 
__fsblk˙t64_t
 
	tfsblk˙t_t
;

254 
	#__fsblk˙t_t_deföed


	)

256 #i‚de‡
__fsfû˙t_t_deföed


257 
__fsfû˙t64_t
 
	tfsfû˙t_t
;

258 
	#__fsfû˙t_t_deföed


	)

262 #ifde‡
__USE_LARGEFILE64


263 
__blk˙t64_t
 
	tblk˙t64_t
;

264 
__fsblk˙t64_t
 
	tfsblk˙t64_t
;

265 
__fsfû˙t64_t
 
	tfsfû˙t64_t
;

270 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


271 
	~<bôs/±hªadty≥s.h
>

274 
	g__END_DECLS


	@/usr/include/xlocale.h

21 #i‚de‡
_XLOCALE_H


22 
	#_XLOCALE_H
 1

	)

28 
	s__loˇÀ_°ru˘


31 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

34 c⁄° *
	m__˘y≥_b
;

35 c⁄° *
	m__˘y≥_tﬁowî
;

36 c⁄° *
	m__˘y≥_touµî
;

39 c⁄° *
	m__«mes
[13];

40 } *
	t__loˇÀ_t
;

43 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

21 
	#_G_size_t
 
size_t


	)

24 
__off_t
 
	m__pos
;

25 
__mb°©e_t
 
	m__°©e
;

26 } 
	t_G_Âos_t
;

29 
__off64_t
 
	m__pos
;

30 
__mb°©e_t
 
	m__°©e
;

31 } 
	t_G_Âos64_t
;

32 
	#_G_ssize_t
 
__ssize_t


	)

33 
	#_G_off_t
 
__off_t


	)

34 
	#_G_off64_t
 
__off64_t


	)

35 
	#_G_pid_t
 
__pid_t


	)

36 
	#_G_uid_t
 
__uid_t


	)

37 
	#_G_wch¨_t
 
wch¨_t


	)

38 
	#_G_wöt_t
 
wöt_t


	)

39 
	#_G_°©64
 
°©64


	)

40 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


41 
	~<gc⁄v.h
>

44 
__gc⁄v_öfo
 
	m__cd
;

47 
__gc⁄v_öfo
 
	m__cd
;

48 
__gc⁄v_°ï_d©a
 
	m__d©a
;

49 } 
	m__comböed
;

50 } 
	t_G_ic⁄v_t
;

53 
	t_G_öt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

54 
	t_G_öt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

55 
	t_G_uöt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

56 
	t_G_uöt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

58 
	#_G_HAVE_BOOL
 1

	)

62 
	#_G_HAVE_ATEXIT
 1

	)

63 
	#_G_HAVE_SYS_CDEFS
 1

	)

64 
	#_G_HAVE_SYS_WAIT
 1

	)

65 
	#_G_NEED_STDARG_H
 1

	)

66 
	#_G_va_li°
 
__gnuc_va_li°


	)

68 
	#_G_HAVE_PRINTF_FP
 1

	)

69 
	#_G_HAVE_MMAP
 1

	)

70 
	#_G_HAVE_MREMAP
 1

	)

71 
	#_G_HAVE_LONG_DOUBLE_IO
 1

	)

72 
	#_G_HAVE_IO_FILE_OPEN
 1

	)

73 
	#_G_HAVE_IO_GETLINE_INFO
 1

	)

75 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

77 
	#_G_OPEN64
 
__›í64


	)

78 
	#_G_LSEEK64
 
__l£ek64


	)

79 
	#_G_MMAP64
 
__mm≠64


	)

80 
	#_G_FSTAT64
(
fd
,
buf
Ë
	`__fx°©64
 (
_STAT_VER
, fd, buf)

	)

83 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

85 
	#_G_BUFSIZ
 8192

	)

88 
	#_G_NAMES_HAVE_UNDERSCORE
 0

	)

89 
	#_G_VTABLE_LABEL_HAS_LENGTH
 1

	)

90 
	#_G_USING_THUNKS
 1

	)

91 
	#_G_VTABLE_LABEL_PREFIX
 "__vt_"

	)

92 
	#_G_VTABLE_LABEL_PREFIX_ID
 
__vt_


	)

95 #i‡
deföed
 
__˝lu•lus
 || deföed 
__STDC__


96 
	#_G_ARGS
(
ARGLIST
Ë
	)
ARGLIST

98 
	#_G_ARGS
(
ARGLIST
Ë()

	)

	@/usr/include/asm/unistd.h

1 #ifde‡
__i386__


2 
	~"uni°d_32.h
"

4 
	~"uni°d_64.h
"

	@/usr/include/bits/byteswap.h

21 #i‡!
deföed
 
_BYTESWAP_H
 && !deföed 
_NETINET_IN_H
 && !deföed 
_ENDIAN_H


25 #i‚de‡
_BITS_BYTESWAP_H


26 
	#_BITS_BYTESWAP_H
 1

	)

28 
	~<bôs/w‹dsize.h
>

31 
	#__bsw≠_c⁄°™t_16
(
x
) \

32 ((Ë((((
x
Ë>> 8Ë& 0xffË| (((xË& 0xffË<< 8)))

	)

34 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

35 
	#__bsw≠_16
(
x
) \

36 (
__exãnsi⁄__
 \

37 ({ 
__v
, 
__x
 = (Ë(
x
); \

38 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

39 
__v
 = 
	`__bsw≠_c⁄°™t_16
 (
__x
); \

41 
	`__asm__
 ("rorw $8, %w0" \

42 : "Ù" (
__v
) \

43 : "0" (
__x
) \

45 
__v
; }))

	)

48 
	#__bsw≠_16
(
x
) \

49 (
__exãnsi⁄__
 \

50 ({ 
__x
 = (Ë(
x
); \

51 
	`__bsw≠_c⁄°™t_16
 (
__x
); }))

	)

56 
	#__bsw≠_c⁄°™t_32
(
x
) \

57 ((((
x
) & 0xff000000) >> 24) | (((x) & 0x00ff0000) >> 8) | \

58 (((
x
Ë& 0x0000ff00Ë<< 8Ë| (((xË& 0x000000ffË<< 24))

	)

60 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

61 #i‡
__WORDSIZE
 =64 || (
deföed
 
__i486__
 || deföed 
__≥¡ium__
 \

62 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

63 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

64 || 
deföed
 
	g__k6__
 || deföed 
	g__noc⁄a__
 \

65 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__geode__
 \

66 || 
deföed
 
	g__amdÁm10__
)

69 
	#__bsw≠_32
(
x
) \

70 (
__exãnsi⁄__
 \

71 ({ 
__v
, 
__x
 = (
x
); \

72 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

73 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

75 
	`__asm__
 ("bsw≠ %0" : "Ù" (
__v
Ë: "0" (
__x
)); \

76 
__v
; }))

	)

78 
	#__bsw≠_32
(
x
) \

79 (
__exãnsi⁄__
 \

80 ({ 
__v
, 
__x
 = (
x
); \

81 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

82 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

84 
	`__asm__
 ("rorw $8, %w0;" \

87 : "Ù" (
__v
) \

88 : "0" (
__x
) \

90 
__v
; }))

	)

93 
	#__bsw≠_32
(
x
) \

94 (
__exãnsi⁄__
 \

95 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_32
 (__x); }))

	)

99 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

101 
	#__bsw≠_c⁄°™t_64
(
x
) \

102 ((((
x
) & 0xff00000000000000ull) >> 56) \

103 | (((
x
) & 0x00ff000000000000ull) >> 40) \

104 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

105 | (((
x
) & 0x000000ff00000000ull) >> 8) \

106 | (((
x
) & 0x00000000ff000000ull) << 8) \

107 | (((
x
) & 0x0000000000ff0000ull) << 24) \

108 | (((
x
) & 0x000000000000ff00ull) << 40) \

109 | (((
x
Ë& 0x00000000000000ffuŒË<< 56))

	)

111 #i‡
__WORDSIZE
 == 64

112 
	#__bsw≠_64
(
x
) \

113 (
__exãnsi⁄__
 \

114 ({ 
__v
, 
__x
 = (
x
); \

115 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

116 
__v
 = 
	`__bsw≠_c⁄°™t_64
 (
__x
); \

118 
	`__asm__
 ("bsw≠ %q0" : "Ù" (
__v
Ë: "0" (
__x
)); \

119 
__v
; }))

	)

121 
	#__bsw≠_64
(
x
) \

122 (
__exãnsi⁄__
 \

123 ({ uni⁄ { 
__exãnsi⁄__
 
__Œ
; \

124 
__l
[2]; } 
__w
, 
__r
; \

125 i‡(
	`__buûtö_c⁄°™t_p
 (
x
)) \

126 
__r
.
__Œ
 = 
	`__bsw≠_c⁄°™t_64
 (
x
); \

129 
__w
.
__Œ
 = (
x
); \

130 
__r
.
__l
[0] = 
	`__bsw≠_32
 (
__w
.__l[1]); \

131 
__r
.
__l
[1] = 
	`__bsw≠_32
 (
__w
.__l[0]); \

133 
__r
.
__Œ
; }))

	)

	@/usr/include/bits/endian.h

3 #i‚de‡
_ENDIAN_H


7 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/libio-ldbl.h

20 #i‚de‡
_IO_STDIO_H


24 
	$__LDBL_REDIR_DECL
 (
_IO_vfsˇnf
)

25 
	`__LDBL_REDIR_DECL
 (
_IO_vÂrötf
)

	@/usr/include/bits/pthreadtypes.h

20 #i‚de‡
_BITS_PTHREADTYPES_H


21 
	#_BITS_PTHREADTYPES_H
 1

	)

23 
	~<bôs/w‹dsize.h
>

25 #i‡
__WORDSIZE
 == 64

26 
	#__SIZEOF_PTHREAD_ATTR_T
 56

	)

27 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

28 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

29 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

30 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

31 
	#__SIZEOF_PTHREAD_RWLOCK_T
 56

	)

32 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

33 
	#__SIZEOF_PTHREAD_BARRIER_T
 32

	)

34 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

36 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

37 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

38 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

39 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

40 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

41 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

42 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

43 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

44 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

50 
	t±hªad_t
;

55 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

56 
	m__Æign
;

57 } 
	t±hªad_©å_t
;

60 #i‡
__WORDSIZE
 == 64

61 
	s__±hªad_öã∫Æ_li°


63 
__±hªad_öã∫Æ_li°
 *
	m__¥ev
;

64 
__±hªad_öã∫Æ_li°
 *
	m__√xt
;

65 } 
	t__±hªad_li°_t
;

67 
	s__±hªad_öã∫Æ_¶i°


69 
__±hªad_öã∫Æ_¶i°
 *
	m__√xt
;

70 } 
	t__±hªad_¶i°_t
;

78 
	s__±hªad_muãx_s


80 
	m__lock
;

81 
	m__cou¡
;

82 
	m__ow√r
;

83 #i‡
__WORDSIZE
 == 64

84 
	m__nu£rs
;

88 
	m__köd
;

89 #i‡
__WORDSIZE
 == 64

90 
	m__•ös
;

91 
__±hªad_li°_t
 
	m__li°
;

92 
	#__PTHREAD_MUTEX_HAVE_PREV
 1

	)

94 
	m__nu£rs
;

95 
__exãnsi⁄__
 union

97 
	m__•ös
;

98 
__±hªad_¶i°_t
 
	m__li°
;

101 } 
	m__d©a
;

102 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

103 
	m__Æign
;

104 } 
	t±hªad_muãx_t
;

108 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

109 
	m__Æign
;

110 } 
	t±hªad_muãx©å_t
;

119 
	m__lock
;

120 
	m__fuãx
;

121 
__exãnsi⁄__
 
	m__tŸÆ_£q
;

122 
__exãnsi⁄__
 
	m__wakeup_£q
;

123 
__exãnsi⁄__
 
	m__wokí_£q
;

124 *
	m__muãx
;

125 
	m__nwaôîs
;

126 
	m__brﬂdˇ°_£q
;

127 } 
	m__d©a
;

128 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

129 
__exãnsi⁄__
 
	m__Æign
;

130 } 
	t±hªad_c⁄d_t
;

134 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

135 
	m__Æign
;

136 } 
	t±hªad_c⁄d©å_t
;

140 
	t±hªad_key_t
;

144 
	t±hªad_⁄˚_t
;

147 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


152 #i‡
__WORDSIZE
 == 64

155 
	m__lock
;

156 
	m__ƒ_ªadîs
;

157 
	m__ªadîs_wakeup
;

158 
	m__wrôî_wakeup
;

159 
	m__ƒ_ªadîs_queued
;

160 
	m__ƒ_wrôîs_queued
;

161 
	m__wrôî
;

162 
	m__sh¨ed
;

163 
	m__∑d1
;

164 
	m__∑d2
;

167 
	m__Êags
;

168 } 
	m__d©a
;

172 
	m__lock
;

173 
	m__ƒ_ªadîs
;

174 
	m__ªadîs_wakeup
;

175 
	m__wrôî_wakeup
;

176 
	m__ƒ_ªadîs_queued
;

177 
	m__ƒ_wrôîs_queued
;

180 
	m__Êags
;

181 
	m__sh¨ed
;

182 
	m__∑d1
;

183 
	m__∑d2
;

184 
	m__wrôî
;

185 } 
	m__d©a
;

187 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

188 
	m__Æign
;

189 } 
	t±hªad_rwlock_t
;

193 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

194 
	m__Æign
;

195 } 
	t±hªad_rwlock©å_t
;

199 #ifde‡
__USE_XOPEN2K


201 vﬁ©ûê
	t±hªad_•ölock_t
;

208 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

209 
	m__Æign
;

210 } 
	t±hªad_b¨rõr_t
;

214 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

215 
	m__Æign
;

216 } 
	t±hªad_b¨rõøâr_t
;

220 #i‡
__WORDSIZE
 == 32

222 
	#__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
	`__ªg∑rm__
 (1)))

	)

	@/usr/include/bits/stdio-lock.h

20 #i‚de‡
_BITS_STDIO_LOCK_H


21 
	#_BITS_STDIO_LOCK_H
 1

	)

23 
	~<bôs/libc-lock.h
>

25 
	$__libc_lock_deföe_ªcursive
 (, 
_IO_lock_t
)

28 #ifde‡
	t_LIBC_LOCK_RECURSIVE_INITIALIZER


29 
	t_IO_lock_öôülizî
 
	t_LIBC_LOCK_RECURSIVE_INITIALIZER


	)

30 #ñi‡
	t_IO_MTSAFE_IO


31 #îr‹ 
	tlibio
 
	t√eds
 
	tªcursive
 
	tmuãxes
 
	t_IO_MTSAFE_IO


34 
	t_IO_lock_öô
(
	t_«me
Ë
	t__libc_lock_öô_ªcursive
 (_«me)

	)

35 
	t_IO_lock_föi
(
	t_«me
Ë
	t__libc_lock_föi_ªcursive
 (_«me)

	)

36 
	t_IO_lock_lock
(
	t_«me
Ë
	t__libc_lock_lock_ªcursive
 (_«me)

	)

37 
	t_IO_lock_åylock
(
	t_«me
Ë
	t__libc_lock_åylock_ªcursive
 (_«me)

	)

38 
	t_IO_lock_u∆ock
(
	t_«me
Ë
	t__libc_lock_u∆ock_ªcursive
 (_«me)

	)

41 
	t_IO_˛ónup_ªgi⁄_°¨t
(
	t_f˘
, 
	t_Â
) \

42 
	t__libc_˛ónup_ªgi⁄_°¨t
 (((
	t_Â
)->
	t_Êags
 & 
	t_IO_USER_LOCK
Ë=0, 
	t_f˘
, _Â)

	)

43 
	t_IO_˛ónup_ªgi⁄_°¨t_nﬂrg
(
	t_f˘
) \

44 
	t__libc_˛ónup_ªgi⁄_°¨t
 (1, 
	t_f˘
, 
	tNULL
)

	)

45 
	t_IO_˛ónup_ªgi⁄_íd
(
	t_doô
) \

46 
	t__libc_˛ónup_ªgi⁄_íd
 (
	t_doô
)

	)

48 #i‡
	tdeföed
 
	t_LIBC
 && !deföed 
	tNOT_IN_libc


49 
	t_IO_acquúe_lock
(
	t_Â
) \

50 
	t_IO_˛ónup_ªgi⁄_°¨t
 (((*Ë(*)Ë
	t_IO_fu∆ockfûe
, (
	t_Â
)); \

51 
	`_IO_Êockfûe
 (
_Â
)

	)

53 
	#_IO_ªÀa£_lock
(
_Â
) \

54 
	`_IO_fu∆ockfûe
 (
_Â
); \

55 
	`_IO_˛ónup_ªgi⁄_íd
 (0)

	)

	@/usr/include/bits/syscall.h

3 #i‚de‡
_SYSCALL_H


7 
	~<bôs/w‹dsize.h
>

9 
	#SYS__sys˘l
 
__NR__sys˘l


	)

10 
	#SYS_ac˚ss
 
__NR_ac˚ss


	)

11 
	#SYS_ac˘
 
__NR_ac˘


	)

12 
	#SYS_add_key
 
__NR_add_key


	)

13 
	#SYS_adjtimex
 
__NR_adjtimex


	)

14 
	#SYS_afs_sysˇŒ
 
__NR_afs_sysˇŒ


	)

15 
	#SYS_Æ¨m
 
__NR_Æ¨m


	)

16 
	#SYS_brk
 
__NR_brk


	)

17 
	#SYS_ˇpgë
 
__NR_ˇpgë


	)

18 
	#SYS_ˇp£t
 
__NR_ˇp£t


	)

19 
	#SYS_chdú
 
__NR_chdú


	)

20 
	#SYS_chmod
 
__NR_chmod


	)

21 
	#SYS_chown
 
__NR_chown


	)

22 
	#SYS_chroŸ
 
__NR_chroŸ


	)

23 
	#SYS_˛ock_gëªs
 
__NR_˛ock_gëªs


	)

24 
	#SYS_˛ock_gëtime
 
__NR_˛ock_gëtime


	)

25 
	#SYS_˛ock_«no¶ìp
 
__NR_˛ock_«no¶ìp


	)

26 
	#SYS_˛ock_£âime
 
__NR_˛ock_£âime


	)

27 
	#SYS_˛⁄e
 
__NR_˛⁄e


	)

28 
	#SYS_˛o£
 
__NR_˛o£


	)

29 
	#SYS_¸ót
 
__NR_¸ót


	)

30 
	#SYS_¸óã_moduÀ
 
__NR_¸óã_moduÀ


	)

31 
	#SYS_dñëe_moduÀ
 
__NR_dñëe_moduÀ


	)

32 
	#SYS_dup
 
__NR_dup


	)

33 
	#SYS_dup2
 
__NR_dup2


	)

34 
	#SYS_dup3
 
__NR_dup3


	)

35 
	#SYS_ïﬁl_¸óã
 
__NR_ïﬁl_¸óã


	)

36 
	#SYS_ïﬁl_¸óã1
 
__NR_ïﬁl_¸óã1


	)

37 
	#SYS_ïﬁl_˘l
 
__NR_ïﬁl_˘l


	)

38 
	#SYS_ïﬁl_pwaô
 
__NR_ïﬁl_pwaô


	)

39 
	#SYS_ïﬁl_waô
 
__NR_ïﬁl_waô


	)

40 
	#SYS_evítfd
 
__NR_evítfd


	)

41 
	#SYS_evítfd2
 
__NR_evítfd2


	)

42 
	#SYS_execve
 
__NR_execve


	)

43 
	#SYS_exô
 
__NR_exô


	)

44 
	#SYS_exô_group
 
__NR_exô_group


	)

45 
	#SYS_Ác˚sßt
 
__NR_Ác˚sßt


	)

46 
	#SYS_Ádvi£64
 
__NR_Ádvi£64


	)

47 
	#SYS_ÁŒoˇã
 
__NR_ÁŒoˇã


	)

48 
	#SYS_fchdú
 
__NR_fchdú


	)

49 
	#SYS_fchmod
 
__NR_fchmod


	)

50 
	#SYS_fchmod©
 
__NR_fchmod©


	)

51 
	#SYS_fchown
 
__NR_fchown


	)

52 
	#SYS_fchow«t
 
__NR_fchow«t


	)

53 
	#SYS_f˙é
 
__NR_f˙é


	)

54 
	#SYS_fd©async
 
__NR_fd©async


	)

55 
	#SYS_fgëx©å
 
__NR_fgëx©å


	)

56 
	#SYS_Êi°x©å
 
__NR_Êi°x©å


	)

57 
	#SYS_Êock
 
__NR_Êock


	)

58 
	#SYS_f‹k
 
__NR_f‹k


	)

59 
	#SYS_‰emovex©å
 
__NR_‰emovex©å


	)

60 
	#SYS_f£tx©å
 
__NR_f£tx©å


	)

61 
	#SYS_f°©
 
__NR_f°©


	)

62 
	#SYS_f°©fs
 
__NR_f°©fs


	)

63 
	#SYS_fsync
 
__NR_fsync


	)

64 
	#SYS_·runˇã
 
__NR_·runˇã


	)

65 
	#SYS_fuãx
 
__NR_fuãx


	)

66 
	#SYS_futimeßt
 
__NR_futimeßt


	)

67 
	#SYS_gë_kî√l_syms
 
__NR_gë_kî√l_syms


	)

68 
	#SYS_gë_mempﬁicy
 
__NR_gë_mempﬁicy


	)

69 
	#SYS_gë_robu°_li°
 
__NR_gë_robu°_li°


	)

70 
	#SYS_gë_thªad_¨ó
 
__NR_gë_thªad_¨ó


	)

71 
	#SYS_gëcwd
 
__NR_gëcwd


	)

72 
	#SYS_gëdíts
 
__NR_gëdíts


	)

73 
	#SYS_gëdíts64
 
__NR_gëdíts64


	)

74 
	#SYS_gëegid
 
__NR_gëegid


	)

75 
	#SYS_gëeuid
 
__NR_gëeuid


	)

76 
	#SYS_gëgid
 
__NR_gëgid


	)

77 
	#SYS_gëgroups
 
__NR_gëgroups


	)

78 
	#SYS_gëôimî
 
__NR_gëôimî


	)

79 
	#SYS_gëpgid
 
__NR_gëpgid


	)

80 
	#SYS_gëpgΩ
 
__NR_gëpgΩ


	)

81 
	#SYS_gëpid
 
__NR_gëpid


	)

82 
	#SYS_gëpmsg
 
__NR_gëpmsg


	)

83 
	#SYS_gëµid
 
__NR_gëµid


	)

84 
	#SYS_gë¥i‹ôy
 
__NR_gë¥i‹ôy


	)

85 
	#SYS_gëªsgid
 
__NR_gëªsgid


	)

86 
	#SYS_gëªsuid
 
__NR_gëªsuid


	)

87 
	#SYS_gëæimô
 
__NR_gëæimô


	)

88 
	#SYS_gërußge
 
__NR_gërußge


	)

89 
	#SYS_gësid
 
__NR_gësid


	)

90 
	#SYS_gëtid
 
__NR_gëtid


	)

91 
	#SYS_gëtimeofday
 
__NR_gëtimeofday


	)

92 
	#SYS_gëuid
 
__NR_gëuid


	)

93 
	#SYS_gëx©å
 
__NR_gëx©å


	)

94 
	#SYS_öô_moduÀ
 
__NR_öô_moduÀ


	)

95 
	#SYS_öŸify_add_w©ch
 
__NR_öŸify_add_w©ch


	)

96 
	#SYS_öŸify_öô
 
__NR_öŸify_öô


	)

97 
	#SYS_öŸify_öô1
 
__NR_öŸify_öô1


	)

98 
	#SYS_öŸify_rm_w©ch
 
__NR_öŸify_rm_w©ch


	)

99 
	#SYS_io_ˇn˚l
 
__NR_io_ˇn˚l


	)

100 
	#SYS_io_de°roy
 
__NR_io_de°roy


	)

101 
	#SYS_io_gëevíts
 
__NR_io_gëevíts


	)

102 
	#SYS_io_£tup
 
__NR_io_£tup


	)

103 
	#SYS_io_submô
 
__NR_io_submô


	)

104 
	#SYS_io˘l
 
__NR_io˘l


	)

105 
	#SYS_i›îm
 
__NR_i›îm


	)

106 
	#SYS_i›l
 
__NR_i›l


	)

107 
	#SYS_i›rio_gë
 
__NR_i›rio_gë


	)

108 
	#SYS_i›rio_£t
 
__NR_i›rio_£t


	)

109 
	#SYS_kexec_lﬂd
 
__NR_kexec_lﬂd


	)

110 
	#SYS_key˘l
 
__NR_key˘l


	)

111 
	#SYS_kûl
 
__NR_kûl


	)

112 
	#SYS_lchown
 
__NR_lchown


	)

113 
	#SYS_lgëx©å
 
__NR_lgëx©å


	)

114 
	#SYS_lök
 
__NR_lök


	)

115 
	#SYS_lök©
 
__NR_lök©


	)

116 
	#SYS_li°x©å
 
__NR_li°x©å


	)

117 
	#SYS_Œi°x©å
 
__NR_Œi°x©å


	)

118 
	#SYS_lookup_dcookõ
 
__NR_lookup_dcookõ


	)

119 
	#SYS_Ãemovex©å
 
__NR_Ãemovex©å


	)

120 
	#SYS_l£ek
 
__NR_l£ek


	)

121 
	#SYS_l£tx©å
 
__NR_l£tx©å


	)

122 
	#SYS_l°©
 
__NR_l°©


	)

123 
	#SYS_madvi£
 
__NR_madvi£


	)

124 
	#SYS_mböd
 
__NR_mböd


	)

125 
	#SYS_migøã_∑ges
 
__NR_migøã_∑ges


	)

126 
	#SYS_möc‹e
 
__NR_möc‹e


	)

127 
	#SYS_mkdú
 
__NR_mkdú


	)

128 
	#SYS_mkdú©
 
__NR_mkdú©


	)

129 
	#SYS_mknod
 
__NR_mknod


	)

130 
	#SYS_mknod©
 
__NR_mknod©


	)

131 
	#SYS_mlock
 
__NR_mlock


	)

132 
	#SYS_mlockÆl
 
__NR_mlockÆl


	)

133 
	#SYS_mm≠
 
__NR_mm≠


	)

134 
	#SYS_modify_ldt
 
__NR_modify_ldt


	)

135 
	#SYS_mou¡
 
__NR_mou¡


	)

136 
	#SYS_move_∑ges
 
__NR_move_∑ges


	)

137 
	#SYS_m¥Ÿe˘
 
__NR_m¥Ÿe˘


	)

138 
	#SYS_mq_gë£èâr
 
__NR_mq_gë£èâr


	)

139 
	#SYS_mq_nŸify
 
__NR_mq_nŸify


	)

140 
	#SYS_mq_›í
 
__NR_mq_›í


	)

141 
	#SYS_mq_timedª˚ive
 
__NR_mq_timedª˚ive


	)

142 
	#SYS_mq_timed£nd
 
__NR_mq_timed£nd


	)

143 
	#SYS_mq_u∆ök
 
__NR_mq_u∆ök


	)

144 
	#SYS_mªm≠
 
__NR_mªm≠


	)

145 
	#SYS_msync
 
__NR_msync


	)

146 
	#SYS_mu∆ock
 
__NR_mu∆ock


	)

147 
	#SYS_mu∆ockÆl
 
__NR_mu∆ockÆl


	)

148 
	#SYS_munm≠
 
__NR_munm≠


	)

149 
	#SYS_«no¶ìp
 
__NR_«no¶ìp


	)

150 
	#SYS_nfs£rv˘l
 
__NR_nfs£rv˘l


	)

151 
	#SYS_›í
 
__NR_›í


	)

152 
	#SYS_›í©
 
__NR_›í©


	)

153 
	#SYS_∑u£
 
__NR_∑u£


	)

154 
	#SYS_≥rf_evít_›í
 
__NR_≥rf_evít_›í


	)

155 
	#SYS_≥rs⁄Æôy
 
__NR_≥rs⁄Æôy


	)

156 
	#SYS_pùe
 
__NR_pùe


	)

157 
	#SYS_pùe2
 
__NR_pùe2


	)

158 
	#SYS_pivŸ_roŸ
 
__NR_pivŸ_roŸ


	)

159 
	#SYS_pﬁl
 
__NR_pﬁl


	)

160 
	#SYS_µﬁl
 
__NR_µﬁl


	)

161 
	#SYS_¥˘l
 
__NR_¥˘l


	)

162 
	#SYS_¥ód64
 
__NR_¥ód64


	)

163 
	#SYS_¥ódv
 
__NR_¥ódv


	)

164 
	#SYS_¥o˚ss_vm_ªadv
 
__NR_¥o˚ss_vm_ªadv


	)

165 
	#SYS_¥o˚ss_vm_wrôev
 
__NR_¥o˚ss_vm_wrôev


	)

166 
	#SYS_p£À˘6
 
__NR_p£À˘6


	)

167 
	#SYS_±ø˚
 
__NR_±ø˚


	)

168 
	#SYS_puçmsg
 
__NR_puçmsg


	)

169 
	#SYS_pwrôe64
 
__NR_pwrôe64


	)

170 
	#SYS_pwrôev
 
__NR_pwrôev


	)

171 
	#SYS_quîy_moduÀ
 
__NR_quîy_moduÀ


	)

172 
	#SYS_quŸa˘l
 
__NR_quŸa˘l


	)

173 
	#SYS_ªad
 
__NR_ªad


	)

174 
	#SYS_ªadahód
 
__NR_ªadahód


	)

175 
	#SYS_ªadlök
 
__NR_ªadlök


	)

176 
	#SYS_ªadlök©
 
__NR_ªadlök©


	)

177 
	#SYS_ªadv
 
__NR_ªadv


	)

178 
	#SYS_ªboŸ
 
__NR_ªboŸ


	)

179 
	#SYS_ªcvmmsg
 
__NR_ªcvmmsg


	)

180 
	#SYS_ªm≠_fûe_∑ges
 
__NR_ªm≠_fûe_∑ges


	)

181 
	#SYS_ªmovex©å
 
__NR_ªmovex©å


	)

182 
	#SYS_ª«me
 
__NR_ª«me


	)

183 
	#SYS_ª«mót
 
__NR_ª«mót


	)

184 
	#SYS_ªque°_key
 
__NR_ªque°_key


	)

185 
	#SYS_ª°¨t_sysˇŒ
 
__NR_ª°¨t_sysˇŒ


	)

186 
	#SYS_rmdú
 
__NR_rmdú


	)

187 
	#SYS_π_siga˘i⁄
 
__NR_π_siga˘i⁄


	)

188 
	#SYS_π_sig≥ndög
 
__NR_π_sig≥ndög


	)

189 
	#SYS_π_sig¥ocmask
 
__NR_π_sig¥ocmask


	)

190 
	#SYS_π_sigqueueöfo
 
__NR_π_sigqueueöfo


	)

191 
	#SYS_π_sigªtu∫
 
__NR_π_sigªtu∫


	)

192 
	#SYS_π_sigsu•íd
 
__NR_π_sigsu•íd


	)

193 
	#SYS_π_sigtimedwaô
 
__NR_π_sigtimedwaô


	)

194 
	#SYS_π_tgsigqueueöfo
 
__NR_π_tgsigqueueöfo


	)

195 
	#SYS_sched_gë_¥i‹ôy_max
 
__NR_sched_gë_¥i‹ôy_max


	)

196 
	#SYS_sched_gë_¥i‹ôy_mö
 
__NR_sched_gë_¥i‹ôy_mö


	)

197 
	#SYS_sched_gëafföôy
 
__NR_sched_gëafföôy


	)

198 
	#SYS_sched_gë∑øm
 
__NR_sched_gë∑øm


	)

199 
	#SYS_sched_gëscheduÀr
 
__NR_sched_gëscheduÀr


	)

200 
	#SYS_sched_º_gë_öãrvÆ
 
__NR_sched_º_gë_öãrvÆ


	)

201 
	#SYS_sched_£èfföôy
 
__NR_sched_£èfföôy


	)

202 
	#SYS_sched_£ç¨am
 
__NR_sched_£ç¨am


	)

203 
	#SYS_sched_£tscheduÀr
 
__NR_sched_£tscheduÀr


	)

204 
	#SYS_sched_yõld
 
__NR_sched_yõld


	)

205 
	#SYS_£À˘
 
__NR_£À˘


	)

206 
	#SYS_£ndfûe
 
__NR_£ndfûe


	)

207 
	#SYS_£ndmmsg
 
__NR_£ndmmsg


	)

208 
	#SYS_£t_mempﬁicy
 
__NR_£t_mempﬁicy


	)

209 
	#SYS_£t_robu°_li°
 
__NR_£t_robu°_li°


	)

210 
	#SYS_£t_thªad_¨ó
 
__NR_£t_thªad_¨ó


	)

211 
	#SYS_£t_tid_addªss
 
__NR_£t_tid_addªss


	)

212 
	#SYS_£tdomaö«me
 
__NR_£tdomaö«me


	)

213 
	#SYS_£tfsgid
 
__NR_£tfsgid


	)

214 
	#SYS_£tfsuid
 
__NR_£tfsuid


	)

215 
	#SYS_£tgid
 
__NR_£tgid


	)

216 
	#SYS_£tgroups
 
__NR_£tgroups


	)

217 
	#SYS_£tho°«me
 
__NR_£tho°«me


	)

218 
	#SYS_£tôimî
 
__NR_£tôimî


	)

219 
	#SYS_£çgid
 
__NR_£çgid


	)

220 
	#SYS_£çri‹ôy
 
__NR_£çri‹ôy


	)

221 
	#SYS_£åegid
 
__NR_£åegid


	)

222 
	#SYS_£åesgid
 
__NR_£åesgid


	)

223 
	#SYS_£åesuid
 
__NR_£åesuid


	)

224 
	#SYS_£åeuid
 
__NR_£åeuid


	)

225 
	#SYS_£ålimô
 
__NR_£ålimô


	)

226 
	#SYS_£tsid
 
__NR_£tsid


	)

227 
	#SYS_£âimeofday
 
__NR_£âimeofday


	)

228 
	#SYS_£tuid
 
__NR_£tuid


	)

229 
	#SYS_£tx©å
 
__NR_£tx©å


	)

230 
	#SYS_sigÆt°ack
 
__NR_sigÆt°ack


	)

231 
	#SYS_sig«lfd
 
__NR_sig«lfd


	)

232 
	#SYS_sig«lfd4
 
__NR_sig«lfd4


	)

233 
	#SYS_•li˚
 
__NR_•li˚


	)

234 
	#SYS_°©
 
__NR_°©


	)

235 
	#SYS_°©fs
 
__NR_°©fs


	)

236 
	#SYS_sw≠off
 
__NR_sw≠off


	)

237 
	#SYS_sw≠⁄
 
__NR_sw≠⁄


	)

238 
	#SYS_symlök
 
__NR_symlök


	)

239 
	#SYS_symlök©
 
__NR_symlök©


	)

240 
	#SYS_sync
 
__NR_sync


	)

241 
	#SYS_sync_fûe_ønge
 
__NR_sync_fûe_ønge


	)

242 
	#SYS_syncfs
 
__NR_syncfs


	)

243 
	#SYS_sysfs
 
__NR_sysfs


	)

244 
	#SYS_sysöfo
 
__NR_sysöfo


	)

245 
	#SYS_sy¶og
 
__NR_sy¶og


	)

246 
	#SYS_ãe
 
__NR_ãe


	)

247 
	#SYS_tgkûl
 
__NR_tgkûl


	)

248 
	#SYS_time
 
__NR_time


	)

249 
	#SYS_timî_¸óã
 
__NR_timî_¸óã


	)

250 
	#SYS_timî_dñëe
 
__NR_timî_dñëe


	)

251 
	#SYS_timî_gëovîrun
 
__NR_timî_gëovîrun


	)

252 
	#SYS_timî_gëtime
 
__NR_timî_gëtime


	)

253 
	#SYS_timî_£âime
 
__NR_timî_£âime


	)

254 
	#SYS_timîfd_¸óã
 
__NR_timîfd_¸óã


	)

255 
	#SYS_timîfd_gëtime
 
__NR_timîfd_gëtime


	)

256 
	#SYS_timîfd_£âime
 
__NR_timîfd_£âime


	)

257 
	#SYS_times
 
__NR_times


	)

258 
	#SYS_tkûl
 
__NR_tkûl


	)

259 
	#SYS_åunˇã
 
__NR_åunˇã


	)

260 
	#SYS_umask
 
__NR_umask


	)

261 
	#SYS_umou¡2
 
__NR_umou¡2


	)

262 
	#SYS_u«me
 
__NR_u«me


	)

263 
	#SYS_u∆ök
 
__NR_u∆ök


	)

264 
	#SYS_u∆ök©
 
__NR_u∆ök©


	)

265 
	#SYS_unsh¨e
 
__NR_unsh¨e


	)

266 
	#SYS_u£lib
 
__NR_u£lib


	)

267 
	#SYS_u°©
 
__NR_u°©


	)

268 
	#SYS_utime
 
__NR_utime


	)

269 
	#SYS_utimíßt
 
__NR_utimíßt


	)

270 
	#SYS_utimes
 
__NR_utimes


	)

271 
	#SYS_vf‹k
 
__NR_vf‹k


	)

272 
	#SYS_vh™gup
 
__NR_vh™gup


	)

273 
	#SYS_vm•li˚
 
__NR_vm•li˚


	)

274 
	#SYS_v£rvî
 
__NR_v£rvî


	)

275 
	#SYS_waô4
 
__NR_waô4


	)

276 
	#SYS_waôid
 
__NR_waôid


	)

277 
	#SYS_wrôe
 
__NR_wrôe


	)

278 
	#SYS_wrôev
 
__NR_wrôev


	)

279 #i‡
__WORDSIZE
 == 64

280 
	#SYS_ac˚±
 
__NR_ac˚±


	)

281 
	#SYS_ac˚±4
 
__NR_ac˚±4


	)

282 
	#SYS_¨ch_¥˘l
 
__NR_¨ch_¥˘l


	)

283 
	#SYS_böd
 
__NR_böd


	)

284 
	#SYS_˛ock_adjtime
 
__NR_˛ock_adjtime


	)

285 
	#SYS_c⁄√˘
 
__NR_c⁄√˘


	)

286 
	#SYS_ïﬁl_˘l_ﬁd
 
__NR_ïﬁl_˘l_ﬁd


	)

287 
	#SYS_ïﬁl_waô_ﬁd
 
__NR_ïﬁl_waô_ﬁd


	)

288 
	#SYS_ÁnŸify_öô
 
__NR_ÁnŸify_öô


	)

289 
	#SYS_ÁnŸify_m¨k
 
__NR_ÁnŸify_m¨k


	)

290 
	#SYS_gë_˝u
 
__NR_gë_˝u


	)

291 
	#SYS_gë≥î«me
 
__NR_gë≥î«me


	)

292 
	#SYS_gësock«me
 
__NR_gësock«me


	)

293 
	#SYS_gësock›t
 
__NR_gësock›t


	)

294 
	#SYS_li°í
 
__NR_li°í


	)

295 
	#SYS_msg˘l
 
__NR_msg˘l


	)

296 
	#SYS_msggë
 
__NR_msggë


	)

297 
	#SYS_msgrcv
 
__NR_msgrcv


	)

298 
	#SYS_msg¢d
 
__NR_msg¢d


	)

299 
	#SYS_«me_to_h™dÀ_©
 
__NR_«me_to_h™dÀ_©


	)

300 
	#SYS_√wf°©©
 
__NR_√wf°©©


	)

301 
	#SYS_›í_by_h™dÀ_©
 
__NR_›í_by_h™dÀ_©


	)

302 
	#SYS_¥limô64
 
__NR_¥limô64


	)

303 
	#SYS_ªcv‰om
 
__NR_ªcv‰om


	)

304 
	#SYS_ªcvmsg
 
__NR_ªcvmsg


	)

305 
	#SYS_£curôy
 
__NR_£curôy


	)

306 
	#SYS_£m˘l
 
__NR_£m˘l


	)

307 
	#SYS_£mgë
 
__NR_£mgë


	)

308 
	#SYS_£m›
 
__NR_£m›


	)

309 
	#SYS_£mtimed›
 
__NR_£mtimed›


	)

310 
	#SYS_£ndmsg
 
__NR_£ndmsg


	)

311 
	#SYS_£ndto
 
__NR_£ndto


	)

312 
	#SYS_£t_ns
 
__NR_£t_ns


	)

313 
	#SYS_£tsock›t
 
__NR_£tsock›t


	)

314 
	#SYS_shm©
 
__NR_shm©


	)

315 
	#SYS_shm˘l
 
__NR_shm˘l


	)

316 
	#SYS_shmdt
 
__NR_shmdt


	)

317 
	#SYS_shmgë
 
__NR_shmgë


	)

318 
	#SYS_shutdown
 
__NR_shutdown


	)

319 
	#SYS_sockë
 
__NR_sockë


	)

320 
	#SYS_sockë∑ú
 
__NR_sockë∑ú


	)

321 
	#SYS_tuxˇŒ
 
__NR_tuxˇŒ


	)

323 
	#SYS__Œ£ek
 
__NR__Œ£ek


	)

324 
	#SYS__√w£À˘
 
__NR__√w£À˘


	)

325 
	#SYS_bdÊush
 
__NR_bdÊush


	)

326 
	#SYS_bªak
 
__NR_bªak


	)

327 
	#SYS_chown32
 
__NR_chown32


	)

328 
	#SYS_Ádvi£64_64
 
__NR_Ádvi£64_64


	)

329 
	#SYS_fchown32
 
__NR_fchown32


	)

330 
	#SYS_f˙é64
 
__NR_f˙é64


	)

331 
	#SYS_f°©64
 
__NR_f°©64


	)

332 
	#SYS_f°©©64
 
__NR_f°©©64


	)

333 
	#SYS_f°©fs64
 
__NR_f°©fs64


	)

334 
	#SYS_·ime
 
__NR_·ime


	)

335 
	#SYS_·runˇã64
 
__NR_·runˇã64


	)

336 
	#SYS_gë˝u
 
__NR_gë˝u


	)

337 
	#SYS_gëegid32
 
__NR_gëegid32


	)

338 
	#SYS_gëeuid32
 
__NR_gëeuid32


	)

339 
	#SYS_gëgid32
 
__NR_gëgid32


	)

340 
	#SYS_gëgroups32
 
__NR_gëgroups32


	)

341 
	#SYS_gëªsgid32
 
__NR_gëªsgid32


	)

342 
	#SYS_gëªsuid32
 
__NR_gëªsuid32


	)

343 
	#SYS_gëuid32
 
__NR_gëuid32


	)

344 
	#SYS_gây
 
__NR_gây


	)

345 
	#SYS_idÀ
 
__NR_idÀ


	)

346 
	#SYS_ùc
 
__NR_ùc


	)

347 
	#SYS_lchown32
 
__NR_lchown32


	)

348 
	#SYS_lock
 
__NR_lock


	)

349 
	#SYS_l°©64
 
__NR_l°©64


	)

350 
	#SYS_madvi£1
 
__NR_madvi£1


	)

351 
	#SYS_mm≠2
 
__NR_mm≠2


	)

352 
	#SYS_mpx
 
__NR_mpx


	)

353 
	#SYS_ni˚
 
__NR_ni˚


	)

354 
	#SYS_ﬁdf°©
 
__NR_ﬁdf°©


	)

355 
	#SYS_ﬁdl°©
 
__NR_ﬁdl°©


	)

356 
	#SYS_ﬁdﬁdu«me
 
__NR_ﬁdﬁdu«me


	)

357 
	#SYS_ﬁd°©
 
__NR_ﬁd°©


	)

358 
	#SYS_ﬁdu«me
 
__NR_ﬁdu«me


	)

359 
	#SYS_¥of
 
__NR_¥of


	)

360 
	#SYS_¥ofû
 
__NR_¥ofû


	)

361 
	#SYS_ªaddú
 
__NR_ªaddú


	)

362 
	#SYS_£ndfûe64
 
__NR_£ndfûe64


	)

363 
	#SYS_£tfsgid32
 
__NR_£tfsgid32


	)

364 
	#SYS_£tfsuid32
 
__NR_£tfsuid32


	)

365 
	#SYS_£tgid32
 
__NR_£tgid32


	)

366 
	#SYS_£tgroups32
 
__NR_£tgroups32


	)

367 
	#SYS_£åegid32
 
__NR_£åegid32


	)

368 
	#SYS_£åesgid32
 
__NR_£åesgid32


	)

369 
	#SYS_£åesuid32
 
__NR_£åesuid32


	)

370 
	#SYS_£åeuid32
 
__NR_£åeuid32


	)

371 
	#SYS_£tuid32
 
__NR_£tuid32


	)

372 
	#SYS_sgëmask
 
__NR_sgëmask


	)

373 
	#SYS_siga˘i⁄
 
__NR_siga˘i⁄


	)

374 
	#SYS_sig«l
 
__NR_sig«l


	)

375 
	#SYS_sig≥ndög
 
__NR_sig≥ndög


	)

376 
	#SYS_sig¥ocmask
 
__NR_sig¥ocmask


	)

377 
	#SYS_sigªtu∫
 
__NR_sigªtu∫


	)

378 
	#SYS_sigsu•íd
 
__NR_sigsu•íd


	)

379 
	#SYS_sockëˇŒ
 
__NR_sockëˇŒ


	)

380 
	#SYS_s£tmask
 
__NR_s£tmask


	)

381 
	#SYS_°©64
 
__NR_°©64


	)

382 
	#SYS_°©fs64
 
__NR_°©fs64


	)

383 
	#SYS_°ime
 
__NR_°ime


	)

384 
	#SYS_°ty
 
__NR_°ty


	)

385 
	#SYS_åunˇã64
 
__NR_åunˇã64


	)

386 
	#SYS_ugëæimô
 
__NR_ugëæimô


	)

387 
	#SYS_ulimô
 
__NR_ulimô


	)

388 
	#SYS_umou¡
 
__NR_umou¡


	)

389 
	#SYS_vm86
 
__NR_vm86


	)

390 
	#SYS_vm86ﬁd
 
__NR_vm86ﬁd


	)

391 
	#SYS_waôpid
 
__NR_waôpid


	)

	@/usr/include/bits/typesizes.h

20 #i‚de‡
_BITS_TYPES_H


24 #i‚def 
_BITS_TYPESIZES_H


25 
	#_BITS_TYPESIZES_H
 1

	)

30 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

31 
	#__UID_T_TYPE
 
__U32_TYPE


	)

32 
	#__GID_T_TYPE
 
__U32_TYPE


	)

33 
	#__INO_T_TYPE
 
__ULONGWORD_TYPE


	)

34 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

35 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

36 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

37 
	#__OFF_T_TYPE
 
__SLONGWORD_TYPE


	)

38 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

39 
	#__PID_T_TYPE
 
__S32_TYPE


	)

40 
	#__RLIM_T_TYPE
 
__ULONGWORD_TYPE


	)

41 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

42 
	#__BLKCNT_T_TYPE
 
__SLONGWORD_TYPE


	)

43 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

44 
	#__FSBLKCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

45 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

46 
	#__FSFILCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

47 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

48 
	#__ID_T_TYPE
 
__U32_TYPE


	)

49 
	#__CLOCK_T_TYPE
 
__SLONGWORD_TYPE


	)

50 
	#__TIME_T_TYPE
 
__SLONGWORD_TYPE


	)

51 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

52 
	#__SUSECONDS_T_TYPE
 
__SLONGWORD_TYPE


	)

53 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

54 
	#__SWBLK_T_TYPE
 
__SLONGWORD_TYPE


	)

55 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

56 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

57 
	#__TIMER_T_TYPE
 *

	)

58 
	#__BLKSIZE_T_TYPE
 
__SLONGWORD_TYPE


	)

59 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

60 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

63 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/gnu/stubs.h

4 
	~<bôs/w‹dsize.h
>

6 #i‡
__WORDSIZE
 == 32

7 
	~<gnu/°ubs-32.h
>

8 #ñi‡
__WORDSIZE
 == 64

9 
	~<gnu/°ubs-64.h
>

	@/usr/include/sys/cdefs.h

20 #i‚def 
_SYS_CDEFS_H


21 
	#_SYS_CDEFS_H
 1

	)

24 #i‚de‡
_FEATURES_H


25 
	~<„©uªs.h
>

31 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__


36 #unde‡
__P


37 #unde‡
__PMT


39 #ifde‡
__GNUC__


46 #i‡!
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (3, 3)

47 
	#__THROW
 
	`__©åibuã__
 ((
__nŸhrow__
))

	)

48 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
)Ë
	)
f˘

50 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

51 
	#__THROW
 
	`throw
 ()

	)

52 
	#__NTH
(
f˘
Ëf˘ 
	`throw
 ()

	)

54 
	#__THROW


	)

55 
	#__NTH
(
f˘
Ë
	)
f˘

61 
	#__ölöe


	)

63 
	#__THROW


	)

64 
	#__NTH
(
f˘
Ë
	)
f˘

66 
	#__c⁄°
 c⁄°

	)

67 
	#__sig√d
 sig√d

	)

68 
	#__vﬁ©ûe
 vﬁ©ûe

	)

74 
	#__P
(
¨gs
Ë
	)
¨gs

75 
	#__PMT
(
¨gs
Ë
	)
¨gs

80 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

81 
	#__STRING
(
x
Ë#x

	)

84 
	#__±r_t
 *

	)

85 
	#__l⁄g_doubÀ_t
 

	)

89 #ifdef 
__˝lu•lus


90 
	#__BEGIN_DECLS
 "C" {

	)

91 
	#__END_DECLS
 }

	)

93 
	#__BEGIN_DECLS


	)

94 
	#__END_DECLS


	)

103 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES


104 
	#__BEGIN_NAMESPACE_STD
 
«me•a˚
 
°d
 {

	)

105 
	#__END_NAMESPACE_STD
 }

	)

106 
	#__USING_NAMESPACE_STD
(
«me
Ë
usög
 
°d
::«me;

	)

107 
	#__BEGIN_NAMESPACE_C99
 
«me•a˚
 
__c99
 {

	)

108 
	#__END_NAMESPACE_C99
 }

	)

109 
	#__USING_NAMESPACE_C99
(
«me
Ë
usög
 
__c99
::«me;

	)

114 
	#__BEGIN_NAMESPACE_STD


	)

115 
	#__END_NAMESPACE_STD


	)

116 
	#__USING_NAMESPACE_STD
(
«me
)

	)

117 
	#__BEGIN_NAMESPACE_C99


	)

118 
	#__END_NAMESPACE_C99


	)

119 
	#__USING_NAMESPACE_C99
(
«me
)

	)

124 #i‚de‡
__BOUNDED_POINTERS__


125 
	#__bounded


	)

126 
	#__unbounded


	)

127 
	#__±rvÆue


	)

132 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

133 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

135 #i‡
__GNUC_PREREQ
 (4,3) \

136 || (
deföed
 
	g__GNUC_RH_RELEASE__
 && 
	g__GNUC__
 == 4 \

137 && 
__GNUC_MINOR__
 =1 && 
__GNUC_PATCHLEVEL__
 == 2 \

138 && 
__GNUC_RH_RELEASE__
 >= 31)

139 
	#__w¨nde˛
(
«me
, 
msg
) \

140 
	`«me
 (Ë
	`__©åibuã__
((
	`__w¨nög__
 (
msg
)))

	)

141 
	#__w¨«âr
(
msg
Ë
	`__©åibuã__
((
	`__w¨nög__
 (msg)))

	)

142 
	#__îr‹de˛
(
«me
, 
msg
) \

143 
	`«me
 (Ë
	`__©åibuã__
((
	`__îr‹__
 (
msg
)))

	)

145 
	#__w¨nde˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

146 
	#__w¨«âr
(
msg
)

	)

147 
	#__îr‹de˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

151 #i‡
__GNUC_PREREQ
 (2,97)

153 
	#__Êex¨r
 []

	)

155 #ifde‡
__GNUC__


156 
	#__Êex¨r
 [0]

	)

158 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

159 
	#__Êex¨r
 []

	)

162 
	#__Êex¨r
 [1]

	)

178 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

180 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

181 #ifde‡
__˝lu•lus


182 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

183 
«me
 
¥Ÿo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

185 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

186 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

188 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

189 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
˙ame

202 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

203 
	#__©åibuã__
(
xyz
Ë

	)

209 #i‡
__GNUC_PREREQ
 (2,96)

210 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

212 
	#__©åibuã_mÆloc__


	)

218 #i‡
__GNUC_PREREQ
 (2,96)

219 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

221 
	#__©åibuã_puª__


	)

227 #i‡
__GNUC_PREREQ
 (3,1)

228 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

229 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

231 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

232 
	#__©åibuã_noölöe__


	)

236 #i‡
__GNUC_PREREQ
 (3,2)

237 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

239 
	#__©åibuã_dïªˇãd__


	)

248 #i‡
__GNUC_PREREQ
 (2,8)

249 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

251 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

258 #i‡
__GNUC_PREREQ
 (2,97)

259 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

260 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

262 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

267 #i‡
__GNUC_PREREQ
 (3,3)

268 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

270 
	#__n⁄nuŒ
(
∑øms
)

	)

275 #i‡
__GNUC_PREREQ
 (3,4)

276 
	#__©åibuã_w¨n_unu£d_ªsu…__
 \

277 
	`__©åibuã__
 ((
__w¨n_unu£d_ªsu…__
))

	)

278 #i‡
__USE_FORTIFY_LEVEL
 > 0

279 
	#__wur
 
__©åibuã_w¨n_unu£d_ªsu…__


	)

282 
	#__©åibuã_w¨n_unu£d_ªsu…__


	)

284 #i‚de‡
__wur


285 
	#__wur


	)

289 #i‡
__GNUC_PREREQ
 (3,2)

290 
	#__Æways_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__Æways_ölöe__
))

	)

292 
	#__Æways_ölöe
 
__ölöe


	)

297 #i‡!
deföed
 
__˝lu•lus
 || 
__GNUC_PREREQ
 (4,3) \

298 || (
deföed
 
__GNUC_RH_RELEASE__
 && 
__GNUC__
 == 4 \

299 && 
__GNUC_MINOR__
 =1 && 
__GNUC_PATCHLEVEL__
 == 2 \

300 && 
__GNUC_RH_RELEASE__
 >= 31)

301 #i‡
deföed
 
__GNUC_STDC_INLINE__
 || deföed 
__˝lu•lus


302 
	#__exã∫_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

303 #i‡
__GNUC_PREREQ
 (4,3) \

304 || (
deföed
 
__GNUC_RH_RELEASE__
 && 
__GNUC__
 == 4 \

305 && 
__GNUC_MINOR__
 =1 && 
__GNUC_PATCHLEVEL__
 == 2 \

306 && 
__GNUC_RH_RELEASE__
 >= 31)

307 
	#__exã∫_Æways_ölöe
 \

308 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
, 
__¨tificül__
))

	)

310 
	#__exã∫_Æways_ölöe
 \

311 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

314 
	#__exã∫_ölöe
 
__ölöe


	)

315 #i‡
__GNUC_PREREQ
 (4,3)

316 
	#__exã∫_Æways_ölöe
 \

317 
__Æways_ölöe
 
	`__©åibuã__
 ((
__¨tificül__
))

	)

319 
	#__exã∫_Æways_ölöe
 
__Æways_ölöe


	)

326 #i‡
__GNUC_PREREQ
 (4,3) \

327 || (
deföed
 
__GNUC_RH_RELEASE__
 && 
__GNUC__
 == 4 \

328 && 
__GNUC_MINOR__
 =1 && 
__GNUC_PATCHLEVEL__
 == 2 \

329 && 
__GNUC_RH_RELEASE__
 >= 31)

330 
	#__va_¨g_∑ck
(Ë
	`__buûtö_va_¨g_∑ck
 ()

	)

331 
	#__va_¨g_∑ck_Àn
(Ë
	`__buûtö_va_¨g_∑ck_Àn
 ()

	)

338 #i‡!
__GNUC_PREREQ
 (2,8)

339 
	#__exãnsi⁄__


	)

343 #i‡!
__GNUC_PREREQ
 (2,92)

344 
	#__ª°ri˘


	)

350 #i‡
__GNUC_PREREQ
 (3,1Ë&& !
deföed
 
__GNUG__


351 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

353 #ifde‡
__GNUC__


354 
	#__ª°ri˘_¨r


	)

356 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

357 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

360 
	#__ª°ri˘_¨r


	)

365 
	~<bôs/w‹dsize.h
>

367 #i‡
deföed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && deföed 
__NO_LONG_DOUBLE_MATH


368 
	#__LDBL_COMPAT
 1

	)

369 #ifde‡
__REDIRECT


370 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

371 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
) \

372 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

373 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT_NTH
 («me,ÖrŸo,álüs)

	)

374 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
) \

375 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

376 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

377 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

378 
	#__LDBL_REDIR_DECL
(
«me
) \

379 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl_" #«me));

	)

380 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

381 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

382 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

383 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

386 #i‡!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT


387 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê
	)
¥Ÿo

388 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë«mê
	)
¥Ÿo

389 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
__THROW


	)

390 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë«mê¥Ÿÿ
__THROW


	)

391 
	#__LDBL_REDIR_DECL
(
«me
)

	)

392 #ifde‡
__REDIRECT


393 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

394 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

395 
	`__REDIRECT_NTH
 (
«me
, 
¥Ÿo
, 
Æüs
)

	)

	@/usr/include/sys/select.h

22 #i‚de‡
_SYS_SELECT_H


23 
	#_SYS_SELECT_H
 1

	)

25 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

31 
	~<bôs/£À˘.h
>

34 
	~<bôs/sig£t.h
>

36 #i‚de‡
__sig£t_t_deföed


37 
	#__sig£t_t_deföed


	)

38 
__sig£t_t
 
	tsig£t_t
;

42 
	#__√ed_time_t


	)

43 
	#__√ed_time•ec


	)

44 
	~<time.h
>

45 
	#__√ed_timevÆ


	)

46 
	~<bôs/time.h
>

48 #i‚de‡
__su£c⁄ds_t_deföed


49 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

50 
	#__su£c⁄ds_t_deföed


	)

55 
	t__fd_mask
;

58 #unde‡
__NFDBITS


59 #unde‡
__FDELT


60 #unde‡
__FDMASK


62 
	#__NFDBITS
 (8 * (Ë (
__fd_mask
))

	)

63 
	#__FDELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

64 
	#__FDMASK
(
d
Ë((
__fd_mask
Ë1 << ((dË% 
__NFDBITS
))

	)

71 #ifde‡
__USE_XOPEN


72 
__fd_mask
 
	mfds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

73 
	#__FDS_BITS
(
£t
Ë((£t)->
fds_bôs
)

	)

75 
__fd_mask
 
	m__fds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

76 
	#__FDS_BITS
(
£t
Ë((£t)->
__fds_bôs
)

	)

78 } 
	tfd_£t
;

81 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

83 #ifde‡
__USE_MISC


85 
__fd_mask
 
	tfd_mask
;

88 
	#NFDBITS
 
__NFDBITS


	)

93 
	#FD_SET
(
fd
, 
fd£ç
Ë
	`__FD_SET
 (fd, fd£ç)

	)

94 
	#FD_CLR
(
fd
, 
fd£ç
Ë
	`__FD_CLR
 (fd, fd£ç)

	)

95 
	#FD_ISSET
(
fd
, 
fd£ç
Ë
	`__FD_ISSET
 (fd, fd£ç)

	)

96 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
 (fd£ç)

	)

99 
__BEGIN_DECLS


109 
£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

110 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

111 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

112 
timevÆ
 *
__ª°ri˘
 
__timeout
);

114 #ifde‡
__USE_XOPEN2K


121 
p£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

122 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

123 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

124 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
,

125 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__sigmask
);

128 
	g__END_DECLS


	@/usr/include/sys/sysmacros.h

21 #i‚de‡
_SYS_SYSMACROS_H


22 
	#_SYS_SYSMACROS_H
 1

	)

24 
	~<„©uªs.h
>

29 #ifde‡
__GLIBC_HAVE_LONG_LONG


30 
__exãnsi⁄__


31 
	$gnu_dev_maj‹
 (
__dev
)

32 
__THROW
;

33 
__exãnsi⁄__


34 
	$gnu_dev_mö‹
 (
__dev
)

35 
__THROW
;

36 
__exãnsi⁄__


37 
	$gnu_dev_makedev
 (
__maj‹
,

38 
__mö‹
)

39 
__THROW
;

41 #i‡
deföed
 
__GNUC__
 && __GNUC__ >2 && deföed 
__USE_EXTERN_INLINES


42 
__exãnsi⁄__
 
__exã∫_ölöe
 

43 
	`__NTH
 (
	$gnu_dev_maj‹
 (
__dev
))

45  ((
__dev
 >> 8) & 0xfff) | (() (__dev >> 32) & ~0xfff);

46 
	}
}

48 
__exãnsi⁄__
 
__exã∫_ölöe
 

49 
__NTH
 (
	$gnu_dev_mö‹
 (
__dev
))

51  (
__dev
 & 0xff) | (() (__dev >> 12) & ~0xff);

52 
	}
}

54 
__exãnsi⁄__
 
__exã∫_ölöe
 

55 
__NTH
 (
	$gnu_dev_makedev
 (
__maj‹
, 
__mö‹
))

57  ((
__mö‹
 & 0xffË| ((
__maj‹
 & 0xfff) << 8)

58 | (((Ë(
__mö‹
 & ~0xff)) << 12)

59 | (((Ë(
__maj‹
 & ~0xfff)) << 32));

60 
	}
}

65 
	#maj‹
(
dev
Ë
	`gnu_dev_maj‹
 (dev)

	)

66 
	#mö‹
(
dev
Ë
	`gnu_dev_mö‹
 (dev)

	)

67 
	#makedev
(
maj
, 
mö
Ë
	`gnu_dev_makedev
 (maj, mö)

	)

	@/usr/include/time.h

23 #i‚def 
_TIME_H


25 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

26 ! 
deföed
 
	g__√ed_time•ec
)

27 
	#_TIME_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 #ifdef 
_TIME_H


36 
	#__√ed_size_t


	)

37 
	#__√ed_NULL


	)

38 
	~<°ddef.h
>

42 
	~<bôs/time.h
>

45 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


46 #i‚de‡
CLK_TCK


47 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

53 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

54 
	#__˛ock_t_deföed
 1

	)

56 
	~<bôs/ty≥s.h
>

58 
__BEGIN_NAMESPACE_STD


60 
__˛ock_t
 
	t˛ock_t
;

61 
	g__END_NAMESPACE_STD


62 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


63 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

67 #unde‡
__√ed_˛ock_t


69 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

70 
	#__time_t_deföed
 1

	)

72 
	~<bôs/ty≥s.h
>

74 
__BEGIN_NAMESPACE_STD


76 
__time_t
 
	ttime_t
;

77 
__END_NAMESPACE_STD


78 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


79 
	$__USING_NAMESPACE_STD
(
time_t
)

83 #unde‡
__√ed_time_t


85 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

86 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

87 
	#__˛ockid_t_deföed
 1

	)

89 
	~<bôs/ty≥s.h
>

92 
__˛ockid_t
 
	t˛ockid_t
;

95 #unde‡
__˛ockid_time_t


97 #i‡!
deföed
 
__timî_t_deföed
 && \

98 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

99 
	#__timî_t_deföed
 1

	)

101 
	~<bôs/ty≥s.h
>

104 
__timî_t
 
	ttimî_t
;

107 #unde‡
__√ed_timî_t


110 #i‡!
deföed
 
__time•ec_deföed
 && \

111 ((
deföed
 
_TIME_H
 && \

112 (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
)) || \

113 
deföed
 
__√ed_time•ec
)

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_BSD


146 
tm_gmtoff
;

147 
__c⁄°
 *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 
__c⁄°
 *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 
__BEGIN_NAMESPACE_STD


183 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

186 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

189 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

190 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

193 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

199 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

200 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

201 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

202 
__END_NAMESPACE_STD


204 #ifde‡
__USE_XOPEN


207 *
	$°Ωtime
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

208 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

209 
__THROW
;

212 #ifde‡
__USE_XOPEN2K8


215 
	~<xloˇÀ.h
>

217 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

218 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

219 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

220 
__loˇÀ_t
 
__loc
Ë
__THROW
;

223 #ifde‡
__USE_GNU


224 *
	$°Ωtime_l
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

225 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

230 
__BEGIN_NAMESPACE_STD


233 
tm
 *
	$gmtime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

237 
tm
 *
	$loˇ…ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

238 
__END_NAMESPACE_STD


240 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


243 
tm
 *
	$gmtime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

244 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

248 
tm
 *
	$loˇ…ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

249 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

252 
__BEGIN_NAMESPACE_STD


255 *
	$as˘ime
 (
__c⁄°
 
tm
 *
__ç
Ë
__THROW
;

258 *
	$˘ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

259 
__END_NAMESPACE_STD


261 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


266 *
	$as˘ime_r
 (
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

267 *
__ª°ri˘
 
__buf
Ë
__THROW
;

270 *
	$˘ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

271 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
__tz«me
[2];

277 
__daylight
;

278 
__timez⁄e
;

281 #ifdef 
__USE_POSIX


283 *
tz«me
[2];

287 
	$tz£t
 (Ë
__THROW
;

290 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


291 
daylight
;

292 
timez⁄e
;

295 #ifde‡
__USE_SVID


298 
	$°ime
 (
__c⁄°
 
time_t
 *
__whí
Ë
__THROW
;

304 
	#__i¶óp
(
yór
) \

305 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

308 #ifde‡
__USE_MISC


313 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

316 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

319 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

323 #ifde‡
__USE_POSIX199309


328 
	`«no¶ìp
 (
__c⁄°
 
time•ec
 *
__ªque°ed_time
,

329 
time•ec
 *
__ªmaöög
);

333 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

336 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

339 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, 
__c⁄°
 
time•ec
 *
__ç
)

340 
__THROW
;

342 #ifde‡
__USE_XOPEN2K


347 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

348 
__c⁄°
 
time•ec
 *
__ªq
,

349 
time•ec
 *
__ªm
);

352 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

357 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

358 
sigevít
 *
__ª°ri˘
 
__evp
,

359 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

362 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

365 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

366 
__c⁄°
 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

367 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

370 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

371 
__THROW
;

374 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

378 #ifde‡
__USE_XOPEN_EXTENDED


390 
gëd©e_îr
;

399 
tm
 *
	`gëd©e
 (
__c⁄°
 *
__°rög
);

402 #ifde‡
__USE_GNU


413 
	`gëd©e_r
 (
__c⁄°
 *
__ª°ri˘
 
__°rög
,

414 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

417 
__END_DECLS


	@/usr/include/bits/libc-lock.h

21 #i‚de‡
_BITS_LIBC_LOCK_H


22 
	#_BITS_LIBC_LOCK_H
 1

	)

24 
	~<±hªad.h
>

27 #ifde‡
_IO_MTSAFE_IO


28 
±hªad_muãx_t
 
	t__libc_lock_t
;

29 °ru˘ { 
±hªad_muãx_t
 
	mmuãx
; } 
	t__libc_lock_ªcursive_t
;

30 #ifde‡
__USE_UNIX98


31 
±hªad_rwlock_t
 
	t__libc_rwlock_t
;

33 
__libc_rwlock_›aque__
 
	t__libc_rwlock_t
;

35 
__libc_lock_ªcursive_t
 
	t__πld_lock_ªcursive_t
;

37 
__libc_lock_›aque__
 
	t__libc_lock_t
;

38 
__libc_lock_ªcursive_›aque__
 
	t__libc_lock_ªcursive_t
;

39 
__libc_rwlock_›aque__
 
	t__libc_rwlock_t
;

43 
±hªad_key_t
 
	t__libc_key_t
;

52 
	#__libc_lock_deföe
(
CLASS
,
NAME
) \

53 
CLASS
 
__libc_lock_t
 
NAME
;

	)

54 
	#__libc_rwlock_deföe
(
CLASS
,
NAME
) \

55 
CLASS
 
__libc_rwlock_t
 
NAME
;

	)

56 
	#__libc_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

57 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
;

	)

58 
	#__πld_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

59 
CLASS
 
__πld_lock_ªcursive_t
 
NAME
;

	)

70 #i‡
__LT_SPINLOCK_INIT
 == 0

71 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

72 
CLASS
 
__libc_lock_t
 
NAME
;

	)

74 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

75 
CLASS
 
__libc_lock_t
 
NAME
 = 
PTHREAD_MUTEX_INITIALIZER
;

	)

78 
	#__libc_rwlock_deföe_öôülized
(
CLASS
,
NAME
) \

79 
CLASS
 
__libc_rwlock_t
 
NAME
 = 
PTHREAD_RWLOCK_INITIALIZER
;

	)

83 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

84 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
 = 
_LIBC_LOCK_RECURSIVE_INITIALIZER
;

	)

85 
	#_LIBC_LOCK_RECURSIVE_INITIALIZER
 \

86 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

88 
	#__πld_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

89 
CLASS
 
__πld_lock_ªcursive_t
 
NAME
 = 
_RTLD_LOCK_RECURSIVE_INITIALIZER
;

	)

90 
	#_RTLD_LOCK_RECURSIVE_INITIALIZER
 \

91 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

93 #i‡
deföed
 
__PIC__


94 
	#__libc_maybe_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

95 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of
 (
FUNC
Ë*
_‚
 = (FUNC); \

96 
_‚
 !
NULL
 ? (*_‚Ë
ARGS
 : 
ELSE
; }))

	)

98 
	#__libc_maybe_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

99 (
FUNC
 !
NULL
 ? FUNC 
ARGS
 : 
ELSE
)

	)

101 
	#__libc_maybe_ˇŒ2
(
FUNC
, 
ARGS
, 
ELSE
Ë
	`__libc_maybe_ˇŒ
 (
__
##FUNC, ARGS, ELSE)

	)

105 
	#__libc_lock_öô
(
NAME
) \

106 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_öô
, (&(
NAME
), 
NULL
), 0))

	)

107 
	#__libc_rwlock_öô
(
NAME
) \

108 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_öô
, (&(
NAME
), 
NULL
), 0));

	)

111 
	#__libc_lock_öô_ªcursive
(
NAME
) \

113 i‡(
__±hªad_muãx_öô
 !
NULL
) \

115 
±hªad_muãx©å_t
 
__©å
; \

116 
	`__±hªad_muãx©å_öô
 (&
__©å
); \

117 
	`__±hªad_muãx©å_£ây≥
 (&
__©å
, 
PTHREAD_MUTEX_RECURSIVE_NP
); \

118 
	`__±hªad_muãx_öô
 (&(
NAME
).
muãx
, &
__©å
); \

119 
	`__±hªad_muãx©å_de°roy
 (&
__©å
); \

121 } 0);

	)

122 
	#__πld_lock_öô_ªcursive
(
NAME
) \

123 
	`__libc_lock_öô_ªcursive
 (
NAME
)

	)

128 
	#__libc_lock_föi
(
NAME
) \

129 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_de°roy
, (&(
NAME
)), 0));

	)

130 
	#__libc_rwlock_föi
(
NAME
) \

131 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_de°roy
, (&(
NAME
)), 0));

	)

134 
	#__libc_lock_föi_ªcursive
(
NAME
Ë
	`__libc_lock_föi
 ((NAME).
muãx
)

	)

135 
	#__πld_lock_föi_ªcursive
(
NAME
Ë
	`__libc_lock_föi_ªcursive
 (NAME)

	)

138 
	#__libc_lock_lock
(
NAME
) \

139 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_lock
, (&(
NAME
)), 0));

	)

140 
	#__libc_rwlock_rdlock
(
NAME
) \

141 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_rdlock
, (&(
NAME
)), 0));

	)

142 
	#__libc_rwlock_wæock
(
NAME
) \

143 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_wæock
, (&(
NAME
)), 0));

	)

146 
	#__libc_lock_lock_ªcursive
(
NAME
Ë
	`__libc_lock_lock
 ((NAME).
muãx
)

	)

149 
	#__libc_lock_åylock
(
NAME
) \

150 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_åylock
, (&(
NAME
)), 0))

	)

151 
	#__libc_rwlock_åyrdlock
(
NAME
) \

152 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_åyrdlock
, (&(
NAME
)), 0))

	)

153 
	#__libc_rwlock_åywæock
(
NAME
) \

154 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_åywæock
, (&(
NAME
)), 0))

	)

157 
	#__libc_lock_åylock_ªcursive
(
NAME
Ë
	`__libc_lock_åylock
 ((NAME).
muãx
)

	)

158 
	#__πld_lock_åylock_ªcursive
(
NAME
) \

159 
	`__libc_lock_åylock_ªcursive
 (
NAME
)

	)

162 
	#__libc_lock_u∆ock
(
NAME
) \

163 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_u∆ock
, (&(
NAME
)), 0));

	)

164 
	#__libc_rwlock_u∆ock
(
NAME
) \

165 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_u∆ock
, (&(
NAME
)), 0));

	)

168 
	#__libc_lock_u∆ock_ªcursive
(
NAME
Ë
	`__libc_lock_u∆ock
 ((NAME).
muãx
)

	)

170 
	#__πld_lock_lock_ªcursive
(
NAME
Ë
	`__libc_lock_lock_ªcursive
 (NAME)

	)

171 
	#__πld_lock_u∆ock_ªcursive
(
NAME
Ë
	`__libc_lock_u∆ock_ªcursive
 (NAME)

	)

174 #i‡
PTHREAD_ONCE_INIT
 == 0

177 
	#__libc_⁄˚_deföe
(
CLASS
, 
NAME
) \

178 
CLASS
 
±hªad_⁄˚_t
 
NAME


	)

180 
	#__libc_⁄˚_deföe
(
CLASS
, 
NAME
) \

181 
CLASS
 
±hªad_⁄˚_t
 
NAME
 = 
PTHREAD_ONCE_INIT


	)

185 
	#__libc_⁄˚
(
ONCE_CONTROL
, 
INIT_FUNCTION
) \

187 i‡(
__±hªad_⁄˚
 !
NULL
) \

188 
	`__±hªad_⁄˚
 (&(
ONCE_CONTROL
), (
INIT_FUNCTION
)); \

189 i‡((
ONCE_CONTROL
Ë=
PTHREAD_ONCE_INIT
) { \

190 
	`INIT_FUNCTION
 (); \

191 (
ONCE_CONTROL
) = 2; \

193 } 0)

	)

197 
	#__libc_˛ónup_ªgi⁄_°¨t
(
DOIT
, 
FCT
, 
ARG
) \

198 { 
_±hªad_˛ónup_buf„r
 
_buf„r
; \

199 
_avaû
 = (
DOIT
Ë&& 
_±hªad_˛ónup_push_de„r
 !
NULL
; \

200 i‡(
_avaû
) { \

201 
	`_±hªad_˛ónup_push_de„r
 (&
_buf„r
, (
FCT
), (
ARG
)); \

202 }

	)

205 
	#__libc_˛ónup_ªgi⁄_íd
(
DOIT
) \

206 i‡(
_avaû
) { \

207 
	`_±hªad_˛ónup_p›_ª°‹e
 (&
_buf„r
, (
DOIT
)); \

209 }

	)

212 
	#__libc_˛ónup_íd
(
DOIT
) \

213 i‡(
_avaû
) { \

214 
	`_±hªad_˛ónup_p›_ª°‹e
 (&
_buf„r
, (
DOIT
)); \

215 }

	)

217 
	#__libc_˛ónup_push
(
f˘
, 
¨g
) \

218 { 
_±hªad_˛ónup_buf„r
 
_buf„r
; \

219 
	`__libc_maybe_ˇŒ
 (
_±hªad_˛ónup_push
, (&
_buf„r
, (
f˘
), (
¨g
)), 0)

	)

221 
	#__libc_˛ónup_p›
(
execuã
) \

222 
	`__libc_maybe_ˇŒ
 (
_±hªad_˛ónup_p›
, (&
_buf„r
, 
execuã
), 0); \

223 }

	)

226 
	#__libc_key_¸óã
(
KEY
, 
DESTRUCTOR
) \

227 (
	`__libc_maybe_ˇŒ
 (
__±hªad_key_¸óã
, (
KEY
, 
DESTRUCTOR
), 1))

	)

230 
	#__libc_gë•ecific
(
KEY
) \

231 (
	`__libc_maybe_ˇŒ
 (
__±hªad_gë•ecific
, (
KEY
), 
NULL
))

	)

234 
	#__libc_£t•ecific
(
KEY
, 
VALUE
) \

235 (
	`__libc_maybe_ˇŒ
 (
__±hªad_£t•ecific
, (
KEY
, 
VALUE
), 0))

	)

239 
	#__libc_©f‹k
(
PREPARE
, 
PARENT
, 
CHILD
) \

240 (
	`__libc_maybe_ˇŒ
 (
__±hªad_©f‹k
, (
PREPARE
, 
PARENT
, 
CHILD
), 0))

	)

242 
__BEGIN_DECLS


244 
_±hªad_˛ónup_push_de„r
 (
_±hªad_˛ónup_buf„r
 *
__buf„r
,

245 (*
__routöe
) (*),

246 *
__¨g
Ë
__THROW
;

248 
	$_±hªad_˛ónup_p›_ª°‹e
 (
_±hªad_˛ónup_buf„r
 *
__buf„r
,

249 
__execuã
Ë
__THROW
;

255 
	`__±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

256 
__c⁄°
 
±hªad_muãx©å_t
 *
__muãx_©å
);

258 
	`__±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
);

260 
	`__±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
);

262 
	`__±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
);

264 
	`__±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
);

266 
	`__±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
);

268 
	`__±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
);

270 
	`__±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
,

271 
__köd
);

273 #ifde‡
__USE_UNIX98


274 
	`__±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__rwlock
,

275 
__c⁄°
 
±hªad_rwlock©å_t
 *
__©å
);

277 
	`__±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
);

279 
	`__±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
);

281 
	`__±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
);

283 
	`__±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
);

285 
	`__±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
);

287 
	`__±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
);

290 
	`__±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

291 (*
__de°r_fun˘i⁄
) (*));

293 
	`__±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

294 
__c⁄°
 *
__poöãr
);

296 *
	`__±hªad_gë•ecific
 (
±hªad_key_t
 
__key
);

298 
	`__±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

299 (*
__öô_routöe
) ());

301 
	`__±hªad_©f‹k
 ((*
__¥ï¨e
) (),

302 (*
__∑ª¡
) (),

303 (*
__chûd
) ());

305 
__END_DECLS


309 #i‚de‡
__NO_WEAK_PTHREAD_ALIASES


310 #¥agm®
wók
 
__±hªad_muãx_öô


311 #¥agm®
wók
 
__±hªad_muãx_de°roy


312 #¥agm®
wók
 
__±hªad_muãx_lock


313 #¥agm®
wók
 
__±hªad_muãx_åylock


314 #¥agm®
wók
 
__±hªad_muãx_u∆ock


315 #¥agm®
wók
 
__±hªad_muãx©å_öô


316 #¥agm®
wók
 
__±hªad_muãx©å_de°roy


317 #¥agm®
wók
 
__±hªad_muãx©å_£ây≥


318 #¥agm®
wók
 
__±hªad_rwlock_de°roy


319 #¥agm®
wók
 
__±hªad_rwlock_rdlock


320 #¥agm®
wók
 
__±hªad_rwlock_åyrdlock


321 #¥agm®
wók
 
__±hªad_rwlock_wæock


322 #¥agm®
wók
 
__±hªad_rwlock_åywæock


323 #¥agm®
wók
 
__±hªad_rwlock_u∆ock


324 #¥agm®
wók
 
__±hªad_key_¸óã


325 #¥agm®
wók
 
__±hªad_£t•ecific


326 #¥agm®
wók
 
__±hªad_gë•ecific


327 #¥agm®
wók
 
__±hªad_⁄˚


328 #¥agm®
wók
 
__±hªad_öôülize


329 #¥agm®
wók
 
__±hªad_©f‹k


330 #¥agm®
wók
 
_±hªad_˛ónup_push_de„r


331 #¥agm®
wók
 
_±hªad_˛ónup_p›_ª°‹e


332 #¥agm®
wók
 
_±hªad_˛ónup_push


333 #¥agm®
wók
 
_±hªad_˛ónup_p›


338 
	#__libc_muãx_u∆ock
 
__±hªad_muãx_u∆ock


	)

	@/usr/include/bits/select.h

19 #i‚de‡
_SYS_SELECT_H


23 
	~<bôs/w‹dsize.h
>

26 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

28 #i‡
__WORDSIZE
 == 64

29 
	#__FD_ZERO_STOS
 "°osq"

	)

31 
	#__FD_ZERO_STOS
 "°o¶"

	)

34 
	#__FD_ZERO
(
fd•
) \

36 
__d0
, 
__d1
; \

37 
__asm__
 
	`__vﬁ©ûe__
 ("˛d;Ñï; " 
__FD_ZERO_STOS
 \

38 : "=c" (
__d0
), "=D" (
__d1
) \

39 : "a" (0), "0" ( (
fd_£t
) \

40 /  (
__fd_mask
)), \

41 "1" (&
	`__FDS_BITS
 (
fd•
)[0]) \

43 } 0)

	)

49 
	#__FD_ZERO
(
£t
) \

51 
__i
; \

52 
fd_£t
 *
__¨r
 = (
£t
); \

53 
__i
 = 0; __ò<  (
fd_£t
Ë/  (
__fd_mask
); ++__i) \

54 
	`__FDS_BITS
 (
__¨r
)[
__i
] = 0; \

55 } 0)

	)

59 
	#__FD_SET
(
d
, 
£t
Ë(
	`__FDS_BITS
 (£t)[
	`__FDELT
 (d)] |
	`__FDMASK
 (d))

	)

60 
	#__FD_CLR
(
d
, 
£t
Ë(
	`__FDS_BITS
 (£t)[
	`__FDELT
 (d)] &~
	`__FDMASK
 (d))

	)

61 
	#__FD_ISSET
(
d
, 
£t
) \

62 ((
	`__FDS_BITS
 (
£t
)[
	`__FDELT
 (
d
)] & 
	`__FDMASK
 (d)Ë!0)

	)

	@/usr/include/bits/sigset.h

21 #i‚def 
_SIGSET_H_ty≥s


22 
	#_SIGSET_H_ty≥s
 1

	)

24 
	t__sig_©omic_t
;

28 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

31 
	m__vÆ
[
_SIGSET_NWORDS
];

32 } 
	t__sig£t_t
;

43 #i‡!
deföed
 
_SIGSET_H_‚s
 && deföed 
_SIGNAL_H


44 
	#_SIGSET_H_‚s
 1

	)

46 #i‚de‡
_EXTERN_INLINE


47 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

51 
	#__sigmask
(
sig
) \

52 (((Ë1Ë<< (((
sig
Ë- 1Ë% (8 *  ())))

	)

55 
	#__sigw‹d
(
sig
Ë(((sigË- 1Ë/ (8 *  ()))

	)

57 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

58 
	#__sigem±y£t
(
£t
) \

59 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

60 
sig£t_t
 *
__£t
 = (
£t
); \

61 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = 0; \

62 0; }))

	)

63 
	#__sigfûl£t
(
£t
) \

64 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

65 
sig£t_t
 *
__£t
 = (
£t
); \

66 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = ~0UL; \

67 0; }))

	)

69 #ifde‡
__USE_GNU


73 
	#__sigi£m±y£t
(
£t
) \

74 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

75 c⁄° 
sig£t_t
 *
__£t
 = (
£t
); \

76 
__ªt
 = 
__£t
->
__vÆ
[--
__˙t
]; \

77 !
__ªt
 && --
__˙t
 >= 0) \

78 
__ªt
 = 
__£t
->
__vÆ
[
__˙t
]; \

79 
__ªt
 =0; }))

	)

80 
	#__sig™d£t
(
de°
, 
À·
, 
right
) \

81 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

82 
sig£t_t
 *
__de°
 = (
de°
); \

83 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

84 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

85 --
__˙t
 >= 0) \

86 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

87 & 
__right
->
__vÆ
[
__˙t
]); \

88 0; }))

	)

89 
	#__sig‹£t
(
de°
, 
À·
, 
right
) \

90 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

91 
sig£t_t
 *
__de°
 = (
de°
); \

92 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

93 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

94 --
__˙t
 >= 0) \

95 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

96 | 
__right
->
__vÆ
[
__˙t
]); \

97 0; }))

	)

104 
__sigismembî
 (
__c⁄°
 
__sig£t_t
 *, );

105 
__sigadd£t
 (
__sig£t_t
 *, );

106 
__sigdñ£t
 (
__sig£t_t
 *, );

108 #ifde‡
__USE_EXTERN_INLINES


109 
	#__SIGSETFN
(
NAME
, 
BODY
, 
CONST
) \

110 
_EXTERN_INLINE
 \

111 
	`NAME
 (
CONST
 
__sig£t_t
 *
__£t
, 
__sig
) \

113 
__mask
 = 
	`__sigmask
 (
__sig
); \

114 
__w‹d
 = 
	`__sigw‹d
 (
__sig
); \

115  
BODY
; \

116 }

	)

118 
__SIGSETFN
 (
__sigismembî
, (
__£t
->
__vÆ
[
__w‹d
] & 
__mask
Ë? 1 : 0, 
__c⁄°
)

119 
__SIGSETFN
 (
__sigadd£t
, ((
__£t
->
__vÆ
[
__w‹d
] |
__mask
), 0), )

120 
__SIGSETFN
 (
__sigdñ£t
, ((
__£t
->
__vÆ
[
__w‹d
] &~
__mask
), 0), )

122 #unde‡
__SIGSETFN


	@/usr/include/bits/time.h

24 #i‚de‡
__√ed_timevÆ


25 #i‚de‡
_BITS_TIME_H


26 
	#_BITS_TIME_H
 1

	)

34 
	#CLOCKS_PER_SEC
 1000000l

	)

36 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


39 
	~<bôs/ty≥s.h
>

40 
__sysc⁄f
 ();

41 
	#CLK_TCK
 ((
__˛ock_t
Ë
	`__sysc⁄f
 (2)Ë

	)

44 #ifde‡
__USE_POSIX199309


46 
	#CLOCK_REALTIME
 0

	)

48 
	#CLOCK_MONOTONIC
 1

	)

50 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

52 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

54 
	#CLOCK_MONOTONIC_RAW
 4

	)

56 
	#CLOCK_REALTIME_COARSE
 5

	)

58 
	#CLOCK_MONOTONIC_COARSE
 6

	)

61 
	#TIMER_ABSTIME
 1

	)

67 #ifde‡
__√ed_timevÆ


68 #unde‡
__√ed_timevÆ


69 #i‚de‡
_STRUCT_TIMEVAL


70 
	#_STRUCT_TIMEVAL
 1

	)

71 
	~<bôs/ty≥s.h
>

75 
	stimevÆ


77 
__time_t
 
	mtv_£c
;

78 
__su£c⁄ds_t
 
	mtv_u£c
;

	@/usr/include/gconv.h

23 #i‚de‡
_GCONV_H


24 
	#_GCONV_H
 1

	)

26 
	~<„©uªs.h
>

27 
	#__√ed_mb°©e_t


	)

28 
	#__√ed_wöt_t


	)

29 
	~<wch¨.h
>

30 
	#__√ed_size_t


	)

31 
	#__√ed_wch¨_t


	)

32 
	~<°ddef.h
>

35 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

40 
	m__GCONV_OK
 = 0,

41 
	m__GCONV_NOCONV
,

42 
	m__GCONV_NODB
,

43 
	m__GCONV_NOMEM
,

45 
	m__GCONV_EMPTY_INPUT
,

46 
	m__GCONV_FULL_OUTPUT
,

47 
	m__GCONV_ILLEGAL_INPUT
,

48 
	m__GCONV_INCOMPLETE_INPUT
,

50 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

51 
	m__GCONV_INTERNAL_ERROR


58 
	m__GCONV_IS_LAST
 = 0x0001,

59 
	m__GCONV_IGNORE_ERRORS
 = 0x0002

64 
	g__gc⁄v_°ï
;

65 
	g__gc⁄v_°ï_d©a
;

66 
	g__gc⁄v_lﬂded_obje˘
;

67 
	g__gc⁄v_å™s_d©a
;

71 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

72 
	t__c⁄°
 **, __const *,

73 **, 
	tsize_t
 *, , );

76 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

79 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

80 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

84 (*
	t__gc⁄v_å™s_f˘
Ë(
	t__gc⁄v_°ï
 *,

85 
	t__gc⁄v_°ï_d©a
 *, *,

86 
	t__c⁄°
 *,

87 
	t__c⁄°
 **,

88 
	t__c⁄°
 *, **,

89 
	tsize_t
 *);

92 (*
	t__gc⁄v_å™s_c⁄ãxt_f˘
Ë(*, 
	t__c⁄°
 *,

93 
	t__c⁄°
 *,

97 (*
	t__gc⁄v_å™s_quîy_f˘
Ë(
	t__c⁄°
 *, __const ***,

98 
	tsize_t
 *);

101 (*
	t__gc⁄v_å™s_öô_f˘
) (**, const *);

102 (*
	t__gc⁄v_å™s_íd_f˘
) (*);

104 
	s__gc⁄v_å™s_d©a


107 
__gc⁄v_å™s_f˘
 
__å™s_f˘
;

108 
__gc⁄v_å™s_c⁄ãxt_f˘
 
__å™s_c⁄ãxt_f˘
;

109 
__gc⁄v_å™s_íd_f˘
 
__å™s_íd_f˘
;

110 *
__d©a
;

111 
__gc⁄v_å™s_d©a
 *
__√xt
;

116 
	s__gc⁄v_°ï


118 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

119 
__c⁄°
 *
__mod«me
;

121 
__cou¡î
;

123 *
__‰om_«me
;

124 *
__to_«me
;

126 
__gc⁄v_f˘
 
__f˘
;

127 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

128 
__gc⁄v_öô_f˘
 
__öô_f˘
;

129 
__gc⁄v_íd_f˘
 
__íd_f˘
;

133 
__mö_√eded_‰om
;

134 
__max_√eded_‰om
;

135 
__mö_√eded_to
;

136 
__max_√eded_to
;

139 
__°©eful
;

141 *
__d©a
;

146 
	s__gc⁄v_°ï_d©a


148 *
__outbuf
;

149 *
__outbu„nd
;

153 
__Êags
;

157 
__övoˇti⁄_cou¡î
;

161 
__öã∫Æ_u£
;

163 
__mb°©e_t
 *
__°©ï
;

164 
__mb°©e_t
 
__°©e
;

168 
__gc⁄v_å™s_d©a
 *
__å™s
;

173 
	s__gc⁄v_öfo


175 
size_t
 
__n°ïs
;

176 
__gc⁄v_°ï
 *
__°ïs
;

177 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

178 } *
	t__gc⁄v_t
;

	@/usr/include/gnu/stubs-32.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub___kî√l_co¶


	)

11 
	#__°ub___kî√l_söl


	)

12 
	#__°ub___kî√l_è∆


	)

13 
	#__°ub_chÊags


	)

14 
	#__°ub_Áâach


	)

15 
	#__°ub_fchÊags


	)

16 
	#__°ub_fdëach


	)

17 
	#__°ub_gây


	)

18 
	#__°ub_lchmod


	)

19 
	#__°ub_ªvoke


	)

20 
	#__°ub_£éogö


	)

21 
	#__°ub_sigªtu∫


	)

22 
	#__°ub_s°k


	)

23 
	#__°ub_°ty


	)

	@/usr/include/gnu/stubs-64.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub_bdÊush


	)

11 
	#__°ub_chÊags


	)

12 
	#__°ub_Áâach


	)

13 
	#__°ub_fchÊags


	)

14 
	#__°ub_fdëach


	)

15 
	#__°ub_gëmsg


	)

16 
	#__°ub_gây


	)

17 
	#__°ub_lchmod


	)

18 
	#__°ub_putmsg


	)

19 
	#__°ub_ªvoke


	)

20 
	#__°ub_£éogö


	)

21 
	#__°ub_sigªtu∫


	)

22 
	#__°ub_s°k


	)

23 
	#__°ub_°ty


	)

	@/usr/include/wchar.h

24 #i‚de‡
_WCHAR_H


26 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


27 
	#_WCHAR_H
 1

	)

28 
	~<„©uªs.h
>

31 #ifde‡
_WCHAR_H


33 
	#__√ed___FILE


	)

34 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


35 
	#__√ed_FILE


	)

37 
	~<°dio.h
>

39 
	#__√ed___va_li°


	)

40 
	~<°d¨g.h
>

42 
	~<bôs/wch¨.h
>

45 
	#__√ed_size_t


	)

46 
	#__√ed_wch¨_t


	)

47 
	#__√ed_NULL


	)

49 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


50 #unde‡
__√ed_wöt_t


51 
	#__√ed_wöt_t


	)

52 
	~<°ddef.h
>

56 #i‚de‡
_WINT_T


61 
	#_WINT_T


	)

62 
	twöt_t
;

66 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

67 && 
deföed
 
__WINT_TYPE__


68 
__BEGIN_NAMESPACE_STD


69 
__WINT_TYPE__
 
	twöt_t
;

70 
	g__END_NAMESPACE_STD


75 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

76 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

80 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
__mb°©e_t_deföed


81 
	#__mb°©e_t_deföed
 1

	)

85 
	m__cou¡
;

88 #ifde‡
__WINT_TYPE__


89 
__WINT_TYPE__
 
	m__wch
;

91 
wöt_t
 
	m__wch
;

93 
	m__wchb
[4];

94 } 
	m__vÆue
;

95 } 
	t__mb°©e_t
;

97 #unde‡
__√ed_mb°©e_t


102 #ifde‡
_WCHAR_H


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 #ifde‡
__USE_GNU


109 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

112 #i‚de‡
WCHAR_MIN


114 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

115 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

118 #i‚de‡
WEOF


119 
	#WEOF
 (0xffffffffu)

	)

124 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


125 
	~<w˘y≥.h
>

129 
__BEGIN_DECLS


131 
__BEGIN_NAMESPACE_STD


134 
tm
;

135 
__END_NAMESPACE_STD


139 
	$__USING_NAMESPACE_STD
(
tm
)

142 
__BEGIN_NAMESPACE_STD


144 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

145 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

147 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

149 
__THROW
;

152 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

153 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

155 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

156 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

157 
__THROW
;

160 
	$wcscmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
)

161 
__THROW
 
__©åibuã_puª__
;

163 
	$wc¢cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

164 
__THROW
 
__©åibuã_puª__
;

165 
__END_NAMESPACE_STD


167 #ifde‡
__USE_XOPEN2K8


169 
	$wcsˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

172 
	$wc¢ˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

173 
size_t
 
__n
Ë
__THROW
;

177 
	~<xloˇÀ.h
>

179 
	$wcsˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

180 
__loˇÀ_t
 
__loc
Ë
__THROW
;

182 
	$wc¢ˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

183 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

186 
__BEGIN_NAMESPACE_STD


189 
	$wcscﬁl
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

193 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

194 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

195 
__END_NAMESPACE_STD


197 #ifde‡
__USE_XOPEN2K8


203 
	$wcscﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

204 
__loˇÀ_t
 
__loc
Ë
__THROW
;

209 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

210 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

213 
wch¨_t
 *
	$wcsdup
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

216 
__BEGIN_NAMESPACE_STD


218 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


219 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

220 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

221 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

222 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

224 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

225 
__THROW
 
__©åibuã_puª__
;

228 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


229 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

230 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

231 "C++" 
__c⁄°
 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

232 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

234 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

235 
__THROW
 
__©åibuã_puª__
;

237 
__END_NAMESPACE_STD


239 #ifde‡
__USE_GNU


242 
wch¨_t
 *
	$wcsch∫ul
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__wc
)

243 
__THROW
 
__©åibuã_puª__
;

246 
__BEGIN_NAMESPACE_STD


249 
size_t
 
	$wcsc•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ªje˘
)

250 
__THROW
 
__©åibuã_puª__
;

253 
size_t
 
	$wcs•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

254 
__THROW
 
__©åibuã_puª__
;

256 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


257 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, 
__c⁄°
 wch¨_à*
__ac˚±
)

258 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

259 "C++" 
__c⁄°
 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
,

260 
__c⁄°
 
wch¨_t
 *
__ac˚±
)

261 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

263 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

264 
__THROW
 
__©åibuã_puª__
;

267 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


268 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, 
__c⁄°
 wch¨_à*
__√edÀ
)

269 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

270 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
,

271 
__c⁄°
 
wch¨_t
 *
__√edÀ
)

272 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

274 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

275 
__THROW
 
__©åibuã_puª__
;

279 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

280 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

281 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

284 
size_t
 
	$wc¶í
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

285 
__END_NAMESPACE_STD


287 #ifde‡
__USE_XOPEN


289 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


290 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, 
__c⁄°
 wch¨_à*
__√edÀ
)

291 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

292 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
,

293 
__c⁄°
 
wch¨_t
 *
__√edÀ
)

294 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

296 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

297 
__THROW
 
__©åibuã_puª__
;

301 #ifde‡
__USE_XOPEN2K8


303 
size_t
 
	$wc¢Àn
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

304 
__THROW
 
__©åibuã_puª__
;

308 
__BEGIN_NAMESPACE_STD


310 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


311 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

312 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

313 "C++" 
__c⁄°
 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
,

314 
size_t
 
__n
)

315 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

317 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

318 
__THROW
 
__©åibuã_puª__
;

322 
	$wmemcmp
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s1
,

323 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

324 
__THROW
 
__©åibuã_puª__
;

327 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

328 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

332 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
, 
size_t
 
__n
)

333 
__THROW
;

336 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

337 
__END_NAMESPACE_STD


339 #ifde‡
__USE_GNU


342 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

343 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

344 
__THROW
;

348 
__BEGIN_NAMESPACE_STD


351 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

355 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

359 
	$mbsöô
 (
__c⁄°
 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

363 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

364 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

365 
mb°©e_t
 *
__p
Ë
__THROW
;

368 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

369 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

372 
size_t
 
	$__mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

373 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

374 
size_t
 
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

375 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

376 
__END_NAMESPACE_STD


378 #ifde‡
__USE_EXTERN_INLINES


384 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

385 
__exã∫_ölöe
 
wöt_t


386 
	`__NTH
 (
	$btowc
 (
__c
))

387 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

388 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

390 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

391 
__exã∫_ölöe
 

392 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

393 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

394 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

396 
__exã∫_ölöe
 
size_t


397 
__NTH
 (
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

398 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

399 {  (
__ps
 !
NULL


400 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

403 
__BEGIN_NAMESPACE_STD


406 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

407 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

408 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

412 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

413 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

414 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

415 
__END_NAMESPACE_STD


418 #ifdef 
__USE_XOPEN2K8


421 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

422 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

423 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

427 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

428 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

429 
size_t
 
__nwc
, size_à
__Àn
,

430 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

435 #ifde‡
__USE_XOPEN


437 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

441 
	$wcswidth
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

445 
__BEGIN_NAMESPACE_STD


448 
	$wc°od
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

449 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

450 
__END_NAMESPACE_STD


452 #ifde‡
__USE_ISOC99


453 
__BEGIN_NAMESPACE_C99


455 
	$wc°of
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

456 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

457 
	$wc°ﬁd
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

458 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

459 
__END_NAMESPACE_C99


463 
__BEGIN_NAMESPACE_STD


466 
	$wc°ﬁ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

467 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

471 
	$wc°oul
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

472 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

473 
__THROW
;

474 
__END_NAMESPACE_STD


476 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GNUC__
 && deföed 
__USE_GNU
)

477 
__BEGIN_NAMESPACE_C99


480 
__exãnsi⁄__


481 
	$wc°ﬁl
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

482 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

483 
__THROW
;

487 
__exãnsi⁄__


488 
	$wc°ouŒ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

489 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

490 
__ba£
Ë
__THROW
;

491 
__END_NAMESPACE_C99


494 #i‡
deföed
 
__GNUC__
 && deföed 
__USE_GNU


497 
__exãnsi⁄__


498 
	$wc°oq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

499 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

500 
__THROW
;

504 
__exãnsi⁄__


505 
	$wc°ouq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

506 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

507 
__ba£
Ë
__THROW
;

510 #ifde‡
__USE_GNU


524 
	~<xloˇÀ.h
>

528 
	$wc°ﬁ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

529 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

530 
__loˇÀ_t
 
__loc
Ë
__THROW
;

532 
	$wc°oul_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

533 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

534 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

536 
__exãnsi⁄__


537 
	$wc°ﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

538 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

539 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

541 
__exãnsi⁄__


542 
	$wc°ouŒ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

543 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

544 
__ba£
, 
__loˇÀ_t
 
__loc
)

545 
__THROW
;

547 
	$wc°od_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

548 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

549 
__THROW
;

551 
	$wc°of_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

552 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

553 
__THROW
;

555 
	$wc°ﬁd_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

556 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

557 
__loˇÀ_t
 
__loc
Ë
__THROW
;

562 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

563 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

567 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

568 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

569 
__THROW
;

575 #ifdef 
__USE_XOPEN2K8


578 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

581 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


582 
__BEGIN_NAMESPACE_STD


585 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

592 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

593 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

599 
	`w¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

602 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

603 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

604 
__THROW
 ;

610 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

611 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

612 
__gnuc_va_li°
 
__¨g
)

618 
	`vw¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

619 
__gnuc_va_li°
 
__¨g
)

623 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

624 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

625 
__gnuc_va_li°
 
__¨g
)

626 
__THROW
 ;

633 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

634 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

640 
	`wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

643 
	$swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

644 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

645 
__THROW
 ;

647 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

648 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

649 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

650 #ifde‡
__REDIRECT


654 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

655 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

656 
__isoc99_fwsˇnf
)

658 
	`__REDIRECT
 (
wsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

659 
__isoc99_wsˇnf
)

661 
	`__REDIRECT
 (
swsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

662 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

663 
__isoc99_swsˇnf
)

664 
__THROW
 ;

666 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

667 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

668 
	`__isoc99_wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

669 
	$__isoc99_swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

670 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

671 
__THROW
;

672 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

673 
	#wsˇnf
 
__isoc99_wsˇnf


	)

674 
	#swsˇnf
 
__isoc99_swsˇnf


	)

678 
__END_NAMESPACE_STD


681 #ifde‡
__USE_ISOC99


682 
__BEGIN_NAMESPACE_C99


687 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

688 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

689 
__gnuc_va_li°
 
__¨g
)

695 
	`vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

696 
__gnuc_va_li°
 
__¨g
)

699 
	$vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

700 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

701 
__gnuc_va_li°
 
__¨g
)

702 
__THROW
 ;

704 #i‡!
deföed
 
__USE_GNU
 \

705 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

706 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

707 #ifde‡
__REDIRECT


708 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

709 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

710 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

712 
	`__REDIRECT
 (
vwsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

713 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

715 
	`__REDIRECT
 (
vswsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

716 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

717 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

718 
__THROW
 ;

720 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

721 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

722 
__gnuc_va_li°
 
__¨g
);

723 
	`__isoc99_vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

724 
__gnuc_va_li°
 
__¨g
);

725 
	$__isoc99_vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

726 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

727 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

728 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

729 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

730 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

734 
__END_NAMESPACE_C99


738 
__BEGIN_NAMESPACE_STD


743 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

744 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

750 
wöt_t
 
	`gëwch¨
 ();

757 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

758 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

764 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

772 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

773 
__FILE
 *
__ª°ri˘
 
__°ªam
);

779 
	`Âutws
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

780 
__FILE
 *
__ª°ri˘
 
__°ªam
);

787 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

788 
__END_NAMESPACE_STD


791 #ifde‡
__USE_GNU


799 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

800 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

808 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

816 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

825 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

826 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

835 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

836 
__FILE
 *
__ª°ri˘
 
__°ªam
);

844 
	`Âutws_u∆ocked
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

845 
__FILE
 *
__ª°ri˘
 
__°ªam
);

849 
__BEGIN_NAMESPACE_C99


853 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

854 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

855 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

856 
__END_NAMESPACE_C99


858 #ifde‡
__USE_GNU


859 
	~<xloˇÀ.h
>

863 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

864 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

865 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

866 
__loˇÀ_t
 
__loc
Ë
__THROW
;

875 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


876 
	#__√ed_iswxxx


	)

877 
	~<w˘y≥.h
>

881 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


882 
	~<bôs/wch¨2.h
>

885 #ifde‡
__LDBL_COMPAT


886 
	~<bôs/wch¨-ldbl.h
>

889 
__END_DECLS


897 #unde‡
__√ed_mb°©e_t


898 #unde‡
__√ed_wöt_t


	@/usr/include/bits/wchar-ldbl.h

20 #i‚de‡
_WCHAR_H


24 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


25 
__BEGIN_NAMESPACE_C99


26 
__LDBL_REDIR_DECL
 (
fw¥ötf
);

27 
__LDBL_REDIR_DECL
 (
w¥ötf
);

28 
__LDBL_REDIR_DECL
 (
sw¥ötf
);

29 
__LDBL_REDIR_DECL
 (
vfw¥ötf
);

30 
__LDBL_REDIR_DECL
 (
vw¥ötf
);

31 
__LDBL_REDIR_DECL
 (
vsw¥ötf
);

32 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

33 && !
deföed
 
	g__REDIRECT
 \

34 && (
deföed
 
	g__STRICT_ANSI__
 || deföed 
	g__USE_XOPEN2K
)

35 
	$__LDBL_REDIR1_DECL
 (
fwsˇnf
, 
__∆dbl___isoc99_fwsˇnf
)

36 
	$__LDBL_REDIR1_DECL
 (
wsˇnf
, 
__∆dbl___isoc99_wsˇnf
)

37 
	$__LDBL_REDIR1_DECL
 (
swsˇnf
, 
__∆dbl___isoc99_swsˇnf
)

39 
	`__LDBL_REDIR_DECL
 (
fwsˇnf
);

40 
	`__LDBL_REDIR_DECL
 (
wsˇnf
);

41 
	`__LDBL_REDIR_DECL
 (
swsˇnf
);

43 
__END_NAMESPACE_C99


46 #ifde‡
__USE_ISOC99


47 
__BEGIN_NAMESPACE_C99


48 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd
, 
wc°od
);

49 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

50 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

51 
	$__LDBL_REDIR1_DECL
 (
vfwsˇnf
, 
__∆dbl___isoc99_vfwsˇnf
)

52 
	$__LDBL_REDIR1_DECL
 (
vwsˇnf
, 
__∆dbl___isoc99_vwsˇnf
)

53 
	$__LDBL_REDIR1_DECL
 (
vswsˇnf
, 
__∆dbl___isoc99_vswsˇnf
)

55 
	`__LDBL_REDIR_DECL
 (
vfwsˇnf
);

56 
	`__LDBL_REDIR_DECL
 (
vwsˇnf
);

57 
	`__LDBL_REDIR_DECL
 (
vswsˇnf
);

59 
__END_NAMESPACE_C99


62 #ifde‡
__USE_GNU


63 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd_l
, 
wc°od_l
);

66 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


67 
	$__LDBL_REDIR_DECL
 (
__sw¥ötf_chk
)

68 
	$__LDBL_REDIR_DECL
 (
__vsw¥ötf_chk
)

69 #i‡
__USE_FORTIFY_LEVEL
 > 1

70 
	$__LDBL_REDIR_DECL
 (
__fw¥ötf_chk
)

71 
	$__LDBL_REDIR_DECL
 (
__w¥ötf_chk
)

72 
	$__LDBL_REDIR_DECL
 (
__vfw¥ötf_chk
)

73 
	$__LDBL_REDIR_DECL
 (
__vw¥ötf_chk
)

	@/usr/include/bits/wchar2.h

20 #i‚de‡
_WCHAR_H


25 
wch¨_t
 *
	$__wmem˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

26 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

27 
size_t
 
__ns1
Ë
__THROW
;

28 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_Æüs
,

29 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

30 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
),

31 
wmem˝y
);

32 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_chk_w¨n
,

33 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

34 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

35 
size_t
 
__ns1
), 
__wmem˝y_chk
)

36 
	`__w¨«âr
 ("wmemcpy called withÜength biggerÅhan size of destination "

39 
__exã∫_Æways_ölöe
 
wch¨_t
 *

40 
	`__NTH
 (
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__s2
,

41 
size_t
 
__n
))

43 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

45 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

46  
	`__wmem˝y_chk
 (
__s1
, 
__s2
, 
__n
,

47 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

49 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

50  
	`__wmem˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

51 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

53  
	`__wmem˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

54 
	}
}

57 
wch¨_t
 *
	$__wmemmove_chk
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

58 
size_t
 
__n
, size_à
__ns1
Ë
__THROW
;

59 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_Æüs
, (wch¨_à*
__s1
,

60 
__c⁄°
 
wch¨_t
 *
__s2
,

61 
size_t
 
__n
), 
wmemmove
);

62 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_chk_w¨n
,

63 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

64 
size_t
 
__n
, size_à
__ns1
), 
__wmemmove_chk
)

65 
	`__w¨«âr
 ("wmemmove called withÜength biggerÅhan size of destination "

68 
__exã∫_Æways_ölöe
 
wch¨_t
 *

69 
	`__NTH
 (
	$wmemmove
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
, 
size_t
 
__n
))

71 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

73 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

74  
	`__wmemmove_chk
 (
__s1
, 
__s2
, 
__n
,

75 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

77 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

78  
	`__wmemmove_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

79 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

81  
	`__wmemmove_Æüs
 (
__s1
, 
__s2
, 
__n
);

82 
	}
}

85 #ifde‡
__USE_GNU


86 
wch¨_t
 *
	$__wmemp˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

87 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

88 
size_t
 
__ns1
Ë
__THROW
;

89 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_Æüs
,

90 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

91 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
,

92 
size_t
 
__n
), 
wmemp˝y
);

93 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_chk_w¨n
,

94 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

95 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

96 
size_t
 
__ns1
), 
__wmemp˝y_chk
)

97 
	`__w¨«âr
 ("wmempcpy called withÜength biggerÅhan size of destination "

100 
__exã∫_Æways_ölöe
 
wch¨_t
 *

101 
	`__NTH
 (
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__s2
,

102 
size_t
 
__n
))

104 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

106 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

107  
	`__wmemp˝y_chk
 (
__s1
, 
__s2
, 
__n
,

108 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

110 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

111  
	`__wmemp˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

112 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

114  
	`__wmemp˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

115 
	}
}

119 
wch¨_t
 *
	$__wmem£t_chk
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

120 
size_t
 
__ns
Ë
__THROW
;

121 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_Æüs
, (wch¨_à*
__s
, wch¨_à
__c
,

122 
size_t
 
__n
), 
wmem£t
);

123 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_chk_w¨n
,

124 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

125 
size_t
 
__ns
), 
__wmem£t_chk
)

126 
	`__w¨«âr
 ("wmemset called withÜength biggerÅhan size of destination "

129 
__exã∫_Æways_ölöe
 
wch¨_t
 *

130 
	`__NTH
 (
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
))

132 i‡(
	`__bos0
 (
__s
Ë!(
size_t
) -1)

134 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

135  
	`__wmem£t_chk
 (
__s
, 
__c
, 
__n
, 
	`__bos0
 (__sË/  (
wch¨_t
));

137 i‡(
__n
 > 
	`__bos0
 (
__s
Ë/  (
wch¨_t
))

138  
	`__wmem£t_chk_w¨n
 (
__s
, 
__c
, 
__n
,

139 
	`__bos0
 (
__s
Ë/  (
wch¨_t
));

141  
	`__wmem£t_Æüs
 (
__s
, 
__c
, 
__n
);

142 
	}
}

145 
wch¨_t
 *
	$__wcs˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

146 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

147 
size_t
 
__n
Ë
__THROW
;

148 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcs˝y_Æüs
,

149 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

150 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcs˝y
);

152 
__exã∫_Æways_ölöe
 
wch¨_t
 *

153 
	`__NTH
 (
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__§c
))

155 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

156  
	`__wcs˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

157  
	`__wcs˝y_Æüs
 (
__de°
, 
__§c
);

158 
	}
}

161 
wch¨_t
 *
	$__w˝˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

162 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

163 
size_t
 
__de°Àn
Ë
__THROW
;

164 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝˝y_Æüs
,

165 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

166 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
w˝˝y
);

168 
__exã∫_Æways_ölöe
 
wch¨_t
 *

169 
	`__NTH
 (
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__§c
))

171 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

172  
	`__w˝˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

173  
	`__w˝˝y_Æüs
 (
__de°
, 
__§c
);

174 
	}
}

177 
wch¨_t
 *
	$__wc¢˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

178 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

179 
size_t
 
__de°Àn
Ë
__THROW
;

180 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_Æüs
,

181 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

182 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

183 
size_t
 
__n
), 
wc¢˝y
);

184 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_chk_w¨n
,

185 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

186 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

187 
size_t
 
__n
, size_à
__de°Àn
), 
__wc¢˝y_chk
)

188 
	`__w¨«âr
 ("wcsncpy called withÜength biggerÅhan size of destination "

191 
__exã∫_Æways_ölöe
 
wch¨_t
 *

192 
	`__NTH
 (
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__§c
,

193 
size_t
 
__n
))

195 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

197 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

198  
	`__wc¢˝y_chk
 (
__de°
, 
__§c
, 
__n
,

199 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

200 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

201  
	`__wc¢˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

202 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

204  
	`__wc¢˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

205 
	}
}

208 
wch¨_t
 *
	$__w˝n˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

209 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

210 
size_t
 
__de°Àn
Ë
__THROW
;

211 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_Æüs
,

212 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

213 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

214 
size_t
 
__n
), 
w˝n˝y
);

215 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_chk_w¨n
,

216 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

217 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

218 
size_t
 
__n
, size_à
__de°Àn
), 
__w˝n˝y_chk
)

219 
	`__w¨«âr
 ("wcpncpy called withÜength biggerÅhan size of destination "

222 
__exã∫_Æways_ölöe
 
wch¨_t
 *

223 
	`__NTH
 (
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__§c
,

224 
size_t
 
__n
))

226 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

228 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

229  
	`__w˝n˝y_chk
 (
__de°
, 
__§c
, 
__n
,

230 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

231 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

232  
	`__w˝n˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

233 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

235  
	`__w˝n˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

236 
	}
}

239 
wch¨_t
 *
	$__wcsˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

240 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

241 
size_t
 
__de°Àn
Ë
__THROW
;

242 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcsˇt_Æüs
,

243 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

244 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcsˇt
);

246 
__exã∫_Æways_ölöe
 
wch¨_t
 *

247 
	`__NTH
 (
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__§c
))

249 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

250  
	`__wcsˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

251  
	`__wcsˇt_Æüs
 (
__de°
, 
__§c
);

252 
	}
}

255 
wch¨_t
 *
	$__wc¢ˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

256 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

257 
size_t
 
__n
, size_à
__de°Àn
Ë
__THROW
;

258 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢ˇt_Æüs
,

259 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

260 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

261 
size_t
 
__n
), 
wc¢ˇt
);

263 
__exã∫_Æways_ölöe
 
wch¨_t
 *

264 
	`__NTH
 (
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__§c
,

265 
size_t
 
__n
))

267 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

268  
	`__wc¢ˇt_chk
 (
__de°
, 
__§c
, 
__n
,

269 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

270  
	`__wc¢ˇt_Æüs
 (
__de°
, 
__§c
, 
__n
);

271 
	}
}

274 
	$__sw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

275 
__Êag
, 
size_t
 
__s_Àn
,

276 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

277 
__THROW
 ;

279 
	`__REDIRECT_NTH_LDBL
 (
__sw¥ötf_Æüs
,

280 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

281 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...),

282 
sw¥ötf
);

284 #ifde‡
__va_¨g_∑ck


285 
__exã∫_Æways_ölöe
 

286 
	`__NTH
 (
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

287 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...))

289 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

290  
	`__sw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

291 
	`__bos
 (
__s
Ë/  (
wch¨_t
),

292 
__fmt
, 
	`__va_¨g_∑ck
 ());

293  
	`__sw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
	`__va_¨g_∑ck
 ());

294 
	}
}

295 #ñi‡!
deföed
 
__˝lu•lus


297 
	#sw¥ötf
(
s
, 
n
, ...) \

298 (
	`__bos
 (
s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1 \

299 ? 
	`__sw¥ötf_chk
 (
s
, 
n
, 
__USE_FORTIFY_LEVEL
 - 1, \

300 
	`__bos
 (
s
Ë/  (
wch¨_t
), 
__VA_ARGS__
) \

301 : 
	`sw¥ötf
 (
s
, 
n
, 
__VA_ARGS__
))

	)

304 
	$__vsw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

305 
__Êag
, 
size_t
 
__s_Àn
,

306 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

307 
__gnuc_va_li°
 
__¨g
)

308 
__THROW
 ;

310 
	`__REDIRECT_NTH_LDBL
 (
__vsw¥ötf_Æüs
,

311 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

312 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
,

313 
__gnuc_va_li°
 
__≠
), 
vsw¥ötf
);

315 
__exã∫_Æways_ölöe
 

316 
	`__NTH
 (
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

317 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
))

319 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

320  
	`__vsw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

321 
	`__bos
 (
__s
Ë/  (
wch¨_t
), 
__fmt
, 
__≠
);

322  
	`__vsw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
__≠
);

323 
	}
}

326 #i‡
__USE_FORTIFY_LEVEL
 > 1

328 
__fw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

329 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

330 
__w¥ötf_chk
 (
__Êag
, 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

332 
__vfw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

333 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

334 
__gnuc_va_li°
 
__≠
);

335 
__vw¥ötf_chk
 (
__Êag
, 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

336 
__gnuc_va_li°
 
__≠
);

338 #ifde‡
__va_¨g_∑ck


339 
__exã∫_Æways_ölöe
 

340 
	$w¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...)

342  
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

343 
	}
}

345 
__exã∫_Æways_ölöe
 

346 
	$fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__c⁄°
 
wch¨_t
 *__ª°ri˘ 
__fmt
, ...)

348  
	`__fw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

349 
	`__va_¨g_∑ck
 ());

350 
	}
}

351 #ñi‡!
deföed
 
__˝lu•lus


352 
	#w¥ötf
(...) \

353 
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

354 
	#fw¥ötf
(
°ªam
, ...) \

355 
	`__fw¥ötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

358 
__exã∫_Æways_ölöe
 

359 
	$vw¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

361  
	`__vw¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

362 
	}
}

364 
__exã∫_Æways_ölöe
 

365 
	$vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

366 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

368  
	`__vfw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

369 
	}
}

373 
wch¨_t
 *
	$__fgëws_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

374 
__FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

375 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_Æüs
,

376 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

377 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws
Ë
__wur
;

378 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_chk_w¨n
,

379 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

380 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgëws_chk
)

381 
__wur
 
	`__w¨«âr
 ("fgetws called with bigger sizeÅhanÜength "

384 
__exã∫_Æways_ölöe
 
__wur
 
wch¨_t
 *

385 
	$fgëws
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

387 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

389 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

390  
	`__fgëws_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

391 
__n
, 
__°ªam
);

393 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

394  
	`__fgëws_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

395 
__n
, 
__°ªam
);

397  
	`__fgëws_Æüs
 (
__s
, 
__n
, 
__°ªam
);

398 
	}
}

400 #ifde‡
__USE_GNU


401 
wch¨_t
 *
	$__fgëws_u∆ocked_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
,

402 
__n
, 
__FILE
 *
__ª°ri˘
 
__°ªam
)

403 
__wur
;

404 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_Æüs
,

405 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

406 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws_u∆ocked
)

407 
__wur
;

408 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_chk_w¨n
,

409 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

410 
__FILE
 *
__ª°ri˘
 
__°ªam
),

411 
__fgëws_u∆ocked_chk
)

412 
__wur
 
	`__w¨«âr
 ("fgetws_unlocked called with bigger sizeÅhanÜength "

415 
__exã∫_Æways_ölöe
 
__wur
 
wch¨_t
 *

416 
	$fgëws_u∆ocked
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

418 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

420 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

421  
	`__fgëws_u∆ocked_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

422 
__n
, 
__°ªam
);

424 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

425  
	`__fgëws_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

426 
__n
, 
__°ªam
);

428  
	`__fgëws_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

429 
	}
}

433 
size_t
 
	$__w¸tomb_chk
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

434 
mb°©e_t
 *
__ª°ri˘
 
__p
,

435 
size_t
 
__buÊí
Ë
__THROW
 
__wur
;

436 
size_t
 
	`__REDIRECT_NTH
 (
__w¸tomb_Æüs
,

437 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

438 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
w¸tomb
Ë
__wur
;

440 
__exã∫_Æways_ölöe
 
__wur
 
size_t


441 
	`__NTH
 (
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

442 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

447 
	#__WCHAR_MB_LEN_MAX
 16

	)

448 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__WCHAR_MB_LEN_MAX


451 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__WCHAR_MB_LEN_MAX
 > __bos (__s))

452  
	`__w¸tomb_chk
 (
__s
, 
__wch¨
, 
__ps
, 
	`__bos
 (__s));

453  
	`__w¸tomb_Æüs
 (
__s
, 
__wch¨
, 
__ps
);

454 
	}
}

457 
size_t
 
	$__mb§towcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

458 
__c⁄°
 **
__ª°ri˘
 
__§c
,

459 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

460 
size_t
 
__d°Àn
Ë
__THROW
;

461 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_Æüs
,

462 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

463 
__c⁄°
 **
__ª°ri˘
 
__§c
,

464 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

465 
mb§towcs
);

466 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_chk_w¨n
,

467 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

468 
__c⁄°
 **
__ª°ri˘
 
__§c
,

469 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

470 
size_t
 
__d°Àn
), 
__mb§towcs_chk
)

471 
	`__w¨«âr
 ("mbsrtowcs called with dst buffer smallerÅhanÜen "

474 
__exã∫_Æways_ölöe
 
size_t


475 
	`__NTH
 (
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 **__ª°ri˘ 
__§c
,

476 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

478 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

480 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

481  
	`__mb§towcs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

482 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

484 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

485  
	`__mb§towcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

486 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

488  
	`__mb§towcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

489 
	}
}

492 
size_t
 
	$__wc§tombs_chk
 (*
__ª°ri˘
 
__d°
,

493 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

494 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

495 
size_t
 
__d°Àn
Ë
__THROW
;

496 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_Æüs
,

497 (*
__ª°ri˘
 
__d°
,

498 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

499 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

500 
wc§tombs
);

501 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_chk_w¨n
,

502 (*
__ª°ri˘
 
__d°
,

503 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

504 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

505 
size_t
 
__d°Àn
), 
__wc§tombs_chk
)

506 
	`__w¨«âr
 ("wcsrtombs called with dst buffer smallerÅhanÜen");

508 
__exã∫_Æways_ölöe
 
size_t


509 
	`__NTH
 (
	$wc§tombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 **__ª°ri˘ 
__§c
,

510 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

512 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

514 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

515  
	`__wc§tombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

517 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

518  
	`__wc§tombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

520  
	`__wc§tombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

521 
	}
}

524 #ifde‡
__USE_GNU


525 
size_t
 
	$__mb¢πowcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

526 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

527 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

528 
size_t
 
__d°Àn
Ë
__THROW
;

529 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_Æüs
,

530 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

531 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

532 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

533 
mb¢πowcs
);

534 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_chk_w¨n
,

535 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

536 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

537 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

538 
size_t
 
__d°Àn
), 
__mb¢πowcs_chk
)

539 
	`__w¨«âr
 ("mbsnrtowcs called with dst buffer smallerÅhanÜen "

542 
__exã∫_Æways_ölöe
 
size_t


543 
	`__NTH
 (
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 **__ª°ri˘ 
__§c
,

544 
size_t
 
__nmc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

546 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

548 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

549  
	`__mb¢πowcs_chk
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

550 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

552 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

553  
	`__mb¢πowcs_chk_w¨n
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

554 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

556  
	`__mb¢πowcs_Æüs
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
);

557 
	}
}

560 
size_t
 
	$__wc¢πombs_chk
 (*
__ª°ri˘
 
__d°
,

561 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

562 
size_t
 
__nwc
, size_à
__Àn
,

563 
mb°©e_t
 *
__ª°ri˘
 
__ps
, 
size_t
 
__d°Àn
)

564 
__THROW
;

565 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_Æüs
,

566 (*
__ª°ri˘
 
__d°
,

567 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

568 
size_t
 
__nwc
, size_à
__Àn
,

569 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
wc¢πombs
);

570 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_chk_w¨n
,

571 (*
__ª°ri˘
 
__d°
,

572 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

573 
size_t
 
__nwc
, size_à
__Àn
,

574 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

575 
size_t
 
__d°Àn
), 
__wc¢πombs_chk
)

576 
	`__w¨«âr
 ("wcsnrtombs called with dst buffer smallerÅhanÜen");

578 
__exã∫_Æways_ölöe
 
size_t


579 
	`__NTH
 (
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 **__ª°ri˘ 
__§c
,

580 
size_t
 
__nwc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

582 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

584 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

585  
	`__wc¢πombs_chk
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

586 
	`__bos
 (
__d°
));

588 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

589  
	`__wc¢πombs_chk_w¨n
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

590 
	`__bos
 (
__d°
));

592  
	`__wc¢πombs_Æüs
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
);

593 
	}
}

	@/usr/include/pthread.h

20 #i‚de‡
_PTHREAD_H


21 
	#_PTHREAD_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<ídün.h
>

25 
	~<sched.h
>

26 
	~<time.h
>

28 
	~<bôs/±hªadty≥s.h
>

29 
	~<bôs/£tjmp.h
>

30 
	~<bôs/w‹dsize.h
>

36 
	mPTHREAD_CREATE_JOINABLE
,

37 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

38 
	mPTHREAD_CREATE_DETACHED


39 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

46 
	mPTHREAD_MUTEX_TIMED_NP
,

47 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

48 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

49 
	mPTHREAD_MUTEX_ADAPTIVE_NP


50 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


52 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

53 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

54 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

55 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


57 #ifde‡
__USE_GNU


59 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


64 #ifde‡
__USE_XOPEN2K


68 
	mPTHREAD_MUTEX_STALLED
,

69 
	mPTHREAD_MUTEX_STALLED_NP
 = 
PTHREAD_MUTEX_STALLED
,

70 
	mPTHREAD_MUTEX_ROBUST
,

71 
	mPTHREAD_MUTEX_ROBUST_NP
 = 
PTHREAD_MUTEX_ROBUST


76 #ifde‡
__USE_UNIX98


80 
	mPTHREAD_PRIO_NONE
,

81 
	mPTHREAD_PRIO_INHERIT
,

82 
	mPTHREAD_PRIO_PROTECT


88 #i‡
__WORDSIZE
 == 64

89 
	#PTHREAD_MUTEX_INITIALIZER
 \

90 { { 0, 0, 0, 0, 0, 0, { 0, 0 } } }

	)

91 #ifde‡
__USE_GNU


92 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

93 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0, 0 } } }

	)

94 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

95 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0, 0 } } }

	)

96 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

97 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0, 0 } } }

	)

100 
	#PTHREAD_MUTEX_INITIALIZER
 \

101 { { 0, 0, 0, 0, 0, { 0 } } }

	)

102 #ifde‡
__USE_GNU


103 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

104 { { 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0 } } }

	)

105 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

106 { { 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0 } } }

	)

107 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

108 { { 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0 } } }

	)

114 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


117 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

118 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

119 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

120 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


124 
	#PTHREAD_RWLOCK_INITIALIZER
 \

125 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }

	)

126 #ifde‡
__USE_GNU


127 #i‡
__WORDSIZE
 == 64

128 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

130 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
 } }

	)

132 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


133 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

134 { { 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
, \

135 0, 0, 0, 0 } }

	)

137 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

138 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,\

139 0 } }

	)

149 
	mPTHREAD_INHERIT_SCHED
,

150 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

151 
	mPTHREAD_EXPLICIT_SCHED


152 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

159 
	mPTHREAD_SCOPE_SYSTEM
,

160 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

161 
	mPTHREAD_SCOPE_PROCESS


162 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

169 
	mPTHREAD_PROCESS_PRIVATE
,

170 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

171 
	mPTHREAD_PROCESS_SHARED


172 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

178 
	#PTHREAD_COND_INITIALIZER
 { { 0, 0, 0, 0, 0, (*Ë0, 0, 0 } }

	)

182 
	s_±hªad_˛ónup_buf„r


184 (*
	m__routöe
) (*);

185 *
	m__¨g
;

186 
	m__ˇn˚…y≥
;

187 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

193 
	mPTHREAD_CANCEL_ENABLE
,

194 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

195 
	mPTHREAD_CANCEL_DISABLE


196 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

200 
	mPTHREAD_CANCEL_DEFERRED
,

201 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

202 
	mPTHREAD_CANCEL_ASYNCHRONOUS


203 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

205 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

209 
	#PTHREAD_ONCE_INIT
 0

	)

212 #ifde‡
__USE_XOPEN2K


216 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

220 
__BEGIN_DECLS


225 
±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

226 
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

227 *(*
__°¨t_routöe
) (*),

228 *
__ª°ri˘
 
__¨g
Ë
__THROW
 
__n⁄nuŒ
 ((1, 3));

234 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

242 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

244 #ifde‡
__USE_GNU


247 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

255 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

256 
__c⁄°
 
time•ec
 *
__ab°ime
);

263 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

267 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

270 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
Ë
__THROW
;

278 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

281 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
)

282 
__THROW
 
	`__n⁄nuŒ
 ((1));

285 
	$±hªad_©å_gëdëach°©e
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

286 *
__dëach°©e
)

287 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

290 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

291 
__dëach°©e
)

292 
__THROW
 
	`__n⁄nuŒ
 ((1));

296 
	$±hªad_©å_gëgu¨dsize
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

297 
size_t
 *
__gu¨dsize
)

298 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

301 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

302 
size_t
 
__gu¨dsize
)

303 
__THROW
 
	`__n⁄nuŒ
 ((1));

307 
	$±hªad_©å_gësched∑øm
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


308 
__©å
,

309 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

310 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

313 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

314 
__c⁄°
 
sched_∑øm
 *
__ª°ri˘


315 
__∑øm
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

318 
	$±hªad_©å_gëschedpﬁicy
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


319 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

320 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

323 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

324 
__THROW
 
	`__n⁄nuŒ
 ((1));

327 
	$±hªad_©å_gëöhîôsched
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


328 
__©å
, *
__ª°ri˘
 
__öhîô
)

329 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

332 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

333 
__öhîô
)

334 
__THROW
 
	`__n⁄nuŒ
 ((1));

338 
	$±hªad_©å_gësc›e
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

339 *
__ª°ri˘
 
__sc›e
)

340 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

343 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

344 
__THROW
 
	`__n⁄nuŒ
 ((1));

347 
	$±hªad_©å_gë°ackaddr
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


348 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

349 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__©åibuã_dïªˇãd__
;

355 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

356 *
__°ackaddr
)

357 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

360 
	$±hªad_©å_gë°acksize
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


361 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

362 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

367 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

368 
size_t
 
__°acksize
)

369 
__THROW
 
	`__n⁄nuŒ
 ((1));

371 #ifde‡
__USE_XOPEN2K


373 
	$±hªad_©å_gë°ack
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

374 **
__ª°ri˘
 
__°ackaddr
,

375 
size_t
 *
__ª°ri˘
 
__°acksize
)

376 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

381 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

382 
size_t
 
__°acksize
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

385 #ifde‡
__USE_GNU


388 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

389 
size_t
 
__˝u£tsize
,

390 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
)

391 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

395 
	$±hªad_©å_gëafföôy_≈
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

396 
size_t
 
__˝u£tsize
,

397 
˝u_£t_t
 *
__˝u£t
)

398 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

404 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
)

405 
__THROW
 
	`__n⁄nuŒ
 ((2));

413 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

414 
__c⁄°
 
sched_∑øm
 *
__∑øm
)

415 
__THROW
 
	`__n⁄nuŒ
 ((3));

418 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

419 *
__ª°ri˘
 
__pﬁicy
,

420 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

421 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

424 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

425 
__THROW
;

428 #ifde‡
__USE_GNU


430 
	$±hªad_gë«me_≈
 (
±hªad_t
 
__èrgë_thªad
, *
__buf
,

431 
size_t
 
__buÊí
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

435 
	$±hªad_£äame_≈
 (
±hªad_t
 
__èrgë_thªad
, 
__c⁄°
 *
__«me
)

436 
__THROW
 
	`__n⁄nuŒ
 ((2));

440 #ifde‡
__USE_UNIX98


442 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

445 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

448 #ifde‡
__USE_GNU


453 
	$±hªad_yõld
 (Ë
__THROW
;

458 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

459 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
)

460 
__THROW
 
	`__n⁄nuŒ
 ((3));

463 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

464 
˝u_£t_t
 *
__˝u£t
)

465 
__THROW
 
	`__n⁄nuŒ
 ((3));

478 
	`±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

479 (*
__öô_routöe
Ë()Ë
	`__n⁄nuŒ
 ((1, 2));

490 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

494 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

497 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

502 
	`±hªad_ã°ˇn˚l
 ();

511 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

512 
__mask_was_ßved
;

513 } 
__ˇn˚l_jmp_buf
[1];

514 *
__∑d
[4];

515 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

518 #i‚de‡
__˛ónup_f˘_©åibuã


519 
	#__˛ónup_f˘_©åibuã


	)

524 
	s__±hªad_˛ónup_‰ame


526 (*
__ˇn˚l_routöe
) (*);

527 *
__ˇn˚l_¨g
;

528 
__do_ô
;

529 
__ˇn˚l_ty≥
;

532 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


533 #ifde‡
__˝lu•lus


535 ˛as†
	c__±hªad_˛ónup_˛ass


537 (*
__ˇn˚l_routöe
) (*);

538 *
__ˇn˚l_¨g
;

539 
__do_ô
;

540 
__ˇn˚l_ty≥
;

542 
public
:

543 
	`__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

544 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	$__do_ô
 (1) { }

545 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

546 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

547 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

548 &
__ˇn˚l_ty≥
); 
	}
}

549 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

559 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

561 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

565 
	#±hªad_˛ónup_p›
(
execuã
) \

566 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

567 } 0)

	)

569 #ifde‡
__USE_GNU


573 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

575 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

576 
__˛‰ame
.
	`__de„r
 ()

	)

581 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

582 
__˛‰ame
.
	`__ª°‹e
 (); \

583 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

584 } 0)

	)

591 
__exã∫_ölöe
 

592 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

594 i‡(
__‰ame
->
__do_ô
)

595 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

596 
	}
}

605 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

607 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

608 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

609 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

610 .
__do_ô
 = 1 };

	)

614 
	#±hªad_˛ónup_p›
(
execuã
) \

615 
__˛‰ame
.
__do_ô
 = (
execuã
); \

616 } 0)

	)

618 #ifde‡
__USE_GNU


622 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

624 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

625 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

626 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

627 .
__do_ô
 = 1 }; \

628 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

629 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

634 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

635 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

636 
__˛‰ame
.
__do_ô
 = (
execuã
); \

637 } 0)

	)

648 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

650 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

651 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

652 *
__ˇn˚l_¨g
 = (
¨g
); \

653 
nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

654 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

655 i‡(
	`__buûtö_ex≥˘
 (
nŸ_fú°_ˇŒ
, 0)) \

657 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

658 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

662 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

663 dÿ{

	)

664 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

665 
__˛ónup_f˘_©åibuã
;

669 
	#±hªad_˛ónup_p›
(
execuã
) \

672 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

673 i‡(
execuã
) \

674 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

675 } 0)

	)

676 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

677 
__˛ónup_f˘_©åibuã
;

679 #ifde‡
__USE_GNU


683 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

685 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

686 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

687 *
__ˇn˚l_¨g
 = (
¨g
); \

688 
nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

689 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

690 i‡(
	`__buûtö_ex≥˘
 (
nŸ_fú°_ˇŒ
, 0)) \

692 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

693 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

697 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

698 dÿ{

	)

699 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

700 
__˛ónup_f˘_©åibuã
;

705 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

708 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

709 i‡(
execuã
) \

710 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

711 
	}
} 0)

	)

712 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

713 
__˛ónup_f˘_©åibuã
;

717 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

718 
__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

719 #i‚de‡
SHARED


720 
	`__©åibuã__
 ((
__wók__
))

726 
__jmp_buf_èg
;

727 
	$__sig£tjmp
 (
__jmp_buf_èg
 *
__ív
, 
__ßvemask
Ë
__THROW
;

733 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

734 
__c⁄°
 
±hªad_muãx©å_t
 *
__muãx©å
)

735 
__THROW
 
	`__n⁄nuŒ
 ((1));

738 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
)

739 
__THROW
 
	`__n⁄nuŒ
 ((1));

742 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
)

743 
__THROW
 
	`__n⁄nuŒ
 ((1));

746 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
)

747 
__THROW
 
	`__n⁄nuŒ
 ((1));

749 #ifde‡
__USE_XOPEN2K


751 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

752 
__c⁄°
 
time•ec
 *
__ª°ri˘


753 
__ab°ime
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

757 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
)

758 
__THROW
 
	`__n⁄nuŒ
 ((1));

762 
	$±hªad_muãx_gë¥io˚ûög
 (
__c⁄°
 
±hªad_muãx_t
 *

763 
__ª°ri˘
 
__muãx
,

764 *
__ª°ri˘
 
__¥io˚ûög
)

765 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

769 
	$±hªad_muãx_£çrio˚ûög
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

770 
__¥io˚ûög
,

771 *
__ª°ri˘
 
__ﬁd_˚ûög
)

772 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

775 #ifde‡
__USE_XOPEN2K8


777 
	$±hªad_muãx_c⁄si°ít
 (
±hªad_muãx_t
 *
__muãx
)

778 
__THROW
 
	`__n⁄nuŒ
 ((1));

779 #ifde‡
__USE_GNU


780 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

781 
__THROW
 
	`__n⁄nuŒ
 ((1));

790 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
)

791 
__THROW
 
	`__n⁄nuŒ
 ((1));

794 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
)

795 
__THROW
 
	`__n⁄nuŒ
 ((1));

798 
	$±hªad_muãx©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_muãx©å_t
 *

799 
__ª°ri˘
 
__©å
,

800 *
__ª°ri˘
 
__psh¨ed
)

801 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

804 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

805 
__psh¨ed
)

806 
__THROW
 
	`__n⁄nuŒ
 ((1));

808 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


810 
	$±hªad_muãx©å_gëty≥
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__ª°ri˘


811 
__©å
, *
__ª°ri˘
 
__köd
)

812 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

817 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

818 
__THROW
 
	`__n⁄nuŒ
 ((1));

822 
	$±hªad_muãx©å_gë¥Ÿocﬁ
 (
__c⁄°
 
±hªad_muãx©å_t
 *

823 
__ª°ri˘
 
__©å
,

824 *
__ª°ri˘
 
__¥Ÿocﬁ
)

825 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

829 
	$±hªad_muãx©å_£çrŸocﬁ
 (
±hªad_muãx©å_t
 *
__©å
,

830 
__¥Ÿocﬁ
)

831 
__THROW
 
	`__n⁄nuŒ
 ((1));

834 
	$±hªad_muãx©å_gë¥io˚ûög
 (
__c⁄°
 
±hªad_muãx©å_t
 *

835 
__ª°ri˘
 
__©å
,

836 *
__ª°ri˘
 
__¥io˚ûög
)

837 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

840 
	$±hªad_muãx©å_£çrio˚ûög
 (
±hªad_muãx©å_t
 *
__©å
,

841 
__¥io˚ûög
)

842 
__THROW
 
	`__n⁄nuŒ
 ((1));

844 #ifde‡
__USE_XOPEN2K


846 
	$±hªad_muãx©å_gërobu°
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__©å
,

847 *
__robu°√ss
)

848 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

849 #ifde‡
__USE_GNU


850 
	$±hªad_muãx©å_gërobu°_≈
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__©å
,

851 *
__robu°√ss
)

852 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

856 
	$±hªad_muãx©å_£åobu°
 (
±hªad_muãx©å_t
 *
__©å
,

857 
__robu°√ss
)

858 
__THROW
 
	`__n⁄nuŒ
 ((1));

859 #ifde‡
__USE_GNU


860 
	$±hªad_muãx©å_£åobu°_≈
 (
±hªad_muãx©å_t
 *
__©å
,

861 
__robu°√ss
)

862 
__THROW
 
	`__n⁄nuŒ
 ((1));

867 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


872 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

873 
__c⁄°
 
±hªad_rwlock©å_t
 *
__ª°ri˘


874 
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

877 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
)

878 
__THROW
 
	`__n⁄nuŒ
 ((1));

881 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

882 
__THROW
 
	`__n⁄nuŒ
 ((1));

885 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

886 
__THROW
 
	`__n⁄nuŒ
 ((1));

888 #ifde‡
__USE_XOPEN2K


890 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

891 
__c⁄°
 
time•ec
 *
__ª°ri˘


892 
__ab°ime
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

896 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
)

897 
__THROW
 
	`__n⁄nuŒ
 ((1));

900 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
)

901 
__THROW
 
	`__n⁄nuŒ
 ((1));

903 #ifde‡
__USE_XOPEN2K


905 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

906 
__c⁄°
 
time•ec
 *
__ª°ri˘


907 
__ab°ime
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

911 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
)

912 
__THROW
 
	`__n⁄nuŒ
 ((1));

918 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
)

919 
__THROW
 
	`__n⁄nuŒ
 ((1));

922 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
)

923 
__THROW
 
	`__n⁄nuŒ
 ((1));

926 
	$±hªad_rwlock©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_rwlock©å_t
 *

927 
__ª°ri˘
 
__©å
,

928 *
__ª°ri˘
 
__psh¨ed
)

929 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

932 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

933 
__psh¨ed
)

934 
__THROW
 
	`__n⁄nuŒ
 ((1));

937 
	$±hªad_rwlock©å_gëköd_≈
 (
__c⁄°
 
±hªad_rwlock©å_t
 *

938 
__ª°ri˘
 
__©å
,

939 *
__ª°ri˘
 
__¥ef
)

940 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

943 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

944 
__¥ef
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

952 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

953 
__c⁄°
 
±hªad_c⁄d©å_t
 *
__ª°ri˘


954 
__c⁄d_©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

957 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
)

958 
__THROW
 
	`__n⁄nuŒ
 ((1));

961 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
)

962 
__THROW
 
	`__n⁄nuŒ
 ((1));

965 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
)

966 
__THROW
 
	`__n⁄nuŒ
 ((1));

973 
	$±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

974 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
)

975 
	`__n⁄nuŒ
 ((1, 2));

984 
	$±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

985 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

986 
__c⁄°
 
time•ec
 *
__ª°ri˘


987 
__ab°ime
Ë
	`__n⁄nuŒ
 ((1, 2, 3));

992 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
)

993 
__THROW
 
	`__n⁄nuŒ
 ((1));

996 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
)

997 
__THROW
 
	`__n⁄nuŒ
 ((1));

1000 
	$±hªad_c⁄d©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_c⁄d©å_t
 *

1001 
__ª°ri˘
 
__©å
,

1002 *
__ª°ri˘
 
__psh¨ed
)

1003 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1006 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

1007 
__psh¨ed
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1009 #ifde‡
__USE_XOPEN2K


1011 
	$±hªad_c⁄d©å_gë˛ock
 (
__c⁄°
 
±hªad_c⁄d©å_t
 *

1012 
__ª°ri˘
 
__©å
,

1013 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

1014 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1017 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

1018 
__˛ockid_t
 
__˛ock_id
)

1019 
__THROW
 
	`__n⁄nuŒ
 ((1));

1023 #ifde‡
__USE_XOPEN2K


1028 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

1029 
__THROW
 
	`__n⁄nuŒ
 ((1));

1032 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
)

1033 
__THROW
 
	`__n⁄nuŒ
 ((1));

1036 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
)

1037 
__THROW
 
	`__n⁄nuŒ
 ((1));

1040 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
)

1041 
__THROW
 
	`__n⁄nuŒ
 ((1));

1044 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
)

1045 
__THROW
 
	`__n⁄nuŒ
 ((1));

1052 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

1053 
__c⁄°
 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


1054 
__©å
, 
__cou¡
)

1055 
__THROW
 
	`__n⁄nuŒ
 ((1));

1058 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1059 
__THROW
 
	`__n⁄nuŒ
 ((1));

1062 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1063 
__THROW
 
	`__n⁄nuŒ
 ((1));

1067 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1068 
__THROW
 
	`__n⁄nuŒ
 ((1));

1071 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1072 
__THROW
 
	`__n⁄nuŒ
 ((1));

1075 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (
__c⁄°
 
±hªad_b¨rõøâr_t
 *

1076 
__ª°ri˘
 
__©å
,

1077 *
__ª°ri˘
 
__psh¨ed
)

1078 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1081 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

1082 
__psh¨ed
)

1083 
__THROW
 
	`__n⁄nuŒ
 ((1));

1095 
	`±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

1096 (*
__de°r_fun˘i⁄
) (*))

1097 
__THROW
 
	`__n⁄nuŒ
 ((1));

1100 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1103 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1106 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

1107 
__c⁄°
 *
__poöãr
Ë
__THROW
 ;

1110 #ifde‡
__USE_XOPEN2K


1112 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

1113 
__˛ockid_t
 *
__˛ock_id
)

1114 
__THROW
 
	`__n⁄nuŒ
 ((2));

1129 
	`±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1130 (*
__∑ª¡
) (),

1131 (*
__chûd
Ë()Ë
__THROW
;

1134 #ifde‡
__USE_EXTERN_INLINES


1136 
__exã∫_ölöe
 

1137 
	`__NTH
 (
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
))

1139  
__thªad1
 =
__thªad2
;

1140 
	}
}

1143 
	g__END_DECLS


	@/usr/include/wctype.h

24 #i‚de‡
_WCTYPE_H


26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 #i‚de‡
__√ed_iswxxx


30 
	#_WCTYPE_H
 1

	)

33 
	#__√ed_wöt_t


	)

34 
	~<wch¨.h
>

38 #i‚de‡
WEOF


39 
	#WEOF
 (0xffffffffu)

	)

42 #unde‡
__√ed_iswxxx


47 #i‚de‡
__iswxxx_deföed


48 
	#__iswxxx_deföed
 1

	)

50 
__BEGIN_NAMESPACE_C99


53 
	tw˘y≥_t
;

54 
	g__END_NAMESPACE_C99


56 #i‚de‡
_ISwbô


61 
	~<ídün.h
>

62 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


63 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

65 
	#_ISwbô
(
bô
) \

66 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

67 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

68 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

69 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

74 
	m__ISwuµî
 = 0,

75 
	m__ISwlowî
 = 1,

76 
	m__ISwÆpha
 = 2,

77 
	m__ISwdigô
 = 3,

78 
	m__ISwxdigô
 = 4,

79 
	m__ISw•a˚
 = 5,

80 
	m__ISw¥öt
 = 6,

81 
	m__ISwgøph
 = 7,

82 
	m__ISwbœnk
 = 8,

83 
	m__ISw˙ål
 = 9,

84 
	m__ISwpun˘
 = 10,

85 
	m__ISwÆnum
 = 11,

87 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

88 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

89 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

90 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

91 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

92 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

93 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

94 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

95 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

96 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

97 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

98 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

103 
__BEGIN_DECLS


105 
__BEGIN_NAMESPACE_C99


112 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

118 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

121 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

125 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

129 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

134 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

137 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

142 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

147 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

152 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

157 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

162 #ifde‡
__USE_ISOC99


163 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

172 
w˘y≥_t
 
	$w˘y≥
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

176 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

177 
__END_NAMESPACE_C99


184 
__BEGIN_NAMESPACE_C99


187 
__c⁄°
 
	t__öt32_t
 *
	tw˘øns_t
;

188 
__END_NAMESPACE_C99


189 #ifde‡
__USE_GNU


190 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

193 
__BEGIN_NAMESPACE_C99


195 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

199 
__END_NAMESPACE_C99


201 
__END_DECLS


208 #ifde‡
_WCTYPE_H


214 
__BEGIN_DECLS


216 
__BEGIN_NAMESPACE_C99


219 
w˘øns_t
 
	$w˘øns
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

222 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

223 
__END_NAMESPACE_C99


225 #ifde‡
__USE_XOPEN2K8


227 
	~<xloˇÀ.h
>

231 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

237 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

240 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

244 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

248 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

253 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

256 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

261 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

266 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

271 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

276 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

281 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

285 
w˘y≥_t
 
	$w˘y≥_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

286 
__THROW
;

290 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

291 
__THROW
;

299 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

302 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

306 
w˘øns_t
 
	$w˘øns_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

307 
__THROW
;

310 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

311 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

315 
__END_DECLS


	@/usr/include/bits/setjmp.h

20 #i‚de‡
_BITS_SETJMP_H


21 
	#_BITS_SETJMP_H
 1

	)

23 #i‡!
deföed
 
_SETJMP_H
 && !deföed 
_PTHREAD_H


27 
	~<bôs/w‹dsize.h
>

29 #i‚de‡
_ASM


31 #i‡
__WORDSIZE
 == 64

32 
	t__jmp_buf
[8];

34 
	t__jmp_buf
[6];

	@/usr/include/sched.h

21 #i‚def 
_SCHED_H


22 
	#_SCHED_H
 1

	)

24 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 
	#__√ed_size_t


	)

30 
	~<°ddef.h
>

32 
	#__√ed_time_t


	)

33 
	#__√ed_time•ec


	)

34 
	~<time.h
>

36 #i‚de‡
__pid_t_deföed


37 
__pid_t
 
	tpid_t
;

38 
	#__pid_t_deföed


	)

43 
	~<bôs/sched.h
>

45 
	#sched_¥i‹ôy
 
__sched_¥i‹ôy


	)

48 
__BEGIN_DECLS


51 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, 
__c⁄°
 
sched_∑øm
 *
__∑øm
)

52 
__THROW
;

55 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

58 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

59 
__c⁄°
 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

62 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

65 
	$sched_yõld
 (Ë
__THROW
;

68 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

71 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

74 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

77 #ifde‡
__USE_GNU


79 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

80 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

81 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

82 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

83 
˝u£ç
)

	)

84 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

85 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

87 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

88 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

89 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

90 
˝u£ç
)

	)

91 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

92 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

94 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

95 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

96 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

97 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

99 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

100 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

101 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

102 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

103 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

104 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

105 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

106 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

107 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

108 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

109 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

110 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

112 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

113 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

114 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

118 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

119 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

122 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

123 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

126 
__END_DECLS


	@/usr/include/bits/sched.h

22 #i‚de‡
__√ed_sched∑øm


24 #i‚de‡
_SCHED_H


30 
	#SCHED_OTHER
 0

	)

31 
	#SCHED_FIFO
 1

	)

32 
	#SCHED_RR
 2

	)

33 #ifde‡
__USE_GNU


34 
	#SCHED_BATCH
 3

	)

35 
	#SCHED_IDLE
 5

	)

37 
	#SCHED_RESET_ON_FORK
 0x40000000

	)

40 #ifde‡
__USE_MISC


42 
	#CSIGNAL
 0x000000f‡

	)

43 
	#CLONE_VM
 0x00000100

	)

44 
	#CLONE_FS
 0x00000200

	)

45 
	#CLONE_FILES
 0x00000400

	)

46 
	#CLONE_SIGHAND
 0x00000800

	)

47 
	#CLONE_PTRACE
 0x00002000

	)

48 
	#CLONE_VFORK
 0x00004000

	)

50 
	#CLONE_PARENT
 0x00008000

	)

52 
	#CLONE_THREAD
 0x00010000

	)

53 
	#CLONE_NEWNS
 0x00020000

	)

54 
	#CLONE_SYSVSEM
 0x00040000

	)

55 
	#CLONE_SETTLS
 0x00080000

	)

56 
	#CLONE_PARENT_SETTID
 0x00100000

	)

58 
	#CLONE_CHILD_CLEARTID
 0x00200000

	)

60 
	#CLONE_DETACHED
 0x00400000

	)

61 
	#CLONE_UNTRACED
 0x00800000

	)

63 
	#CLONE_CHILD_SETTID
 0x01000000

	)

65 
	#CLONE_NEWUTS
 0x04000000

	)

66 
	#CLONE_NEWIPC
 0x08000000

	)

67 
	#CLONE_NEWUSER
 0x10000000

	)

68 
	#CLONE_NEWPID
 0x20000000

	)

69 
	#CLONE_NEWNET
 0x40000000

	)

70 
	#CLONE_IO
 0x80000000

	)

74 
	ssched_∑øm


76 
	m__sched_¥i‹ôy
;

79 
	g__BEGIN_DECLS


81 #ifde‡
__USE_MISC


83 
˛⁄e
 ((*
__‚
Ë(*
__¨g
), *
__chûd_°ack
,

84 
__Êags
, *
__¨g
, ...Ë
__THROW
;

87 
	$unsh¨e
 (
__Êags
Ë
__THROW
;

90 
	$sched_gë˝u
 (Ë
__THROW
;

93 
__END_DECLS


97 #i‡!
deföed
 
__deföed_sched∑øm
 \

98 && (
deföed
 
__√ed_sched∑øm
 || deföed 
_SCHED_H
)

99 
	#__deföed_sched∑øm
 1

	)

101 
	s__sched_∑øm


103 
__sched_¥i‹ôy
;

105 #unde‡
__√ed_sched∑øm


109 #i‡
deföed
 
_SCHED_H
 && !deföed 
__˝u_£t_t_deföed


110 
	#__˝u_£t_t_deföed


	)

112 
	#__CPU_SETSIZE
 1024

	)

113 
	#__NCPUBITS
 (8 *  (
__˝u_mask
))

	)

116 
	t__˝u_mask
;

119 
	#__CPUELT
(
˝u
Ë((˝uË/ 
__NCPUBITS
)

	)

120 
	#__CPUMASK
(
˝u
Ë((
__˝u_mask
Ë1 << ((˝uË% 
__NCPUBITS
))

	)

125 
__˝u_mask
 
__bôs
[
__CPU_SETSIZE
 / 
__NCPUBITS
];

126 } 
	t˝u_£t_t
;

129 #i‡
	`__GNUC_PREREQ
 (2, 91)

130 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

131 dÿ
	`__buûtö_mem£t
 (
˝u£ç
, '\0', 
£tsize
); 0)

	)

133 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

135 
size_t
 
__i
; \

136 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

137 
__˝u_mask
 *
__bôs
 = (
˝u£ç
)->__bits; \

138 
__i
 = 0; __ò< 
__imax
; ++__i) \

139 
__bôs
[
__i
] = 0; \

140 
	}
} 0)

	)

142 
	#__CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

143 (
__exãnsi⁄__
 \

144 ({ 
size_t
 
__˝u
 = (
˝u
); \

145 
__˝u
 < 8 * (
£tsize
) \

146 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

147 |
	`__CPUMASK
 (
__˝u
)) \

148 : 0; }))

	)

149 
	#__CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

150 (
__exãnsi⁄__
 \

151 ({ 
size_t
 
__˝u
 = (
˝u
); \

152 
__˝u
 < 8 * (
£tsize
) \

153 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

154 &~
	`__CPUMASK
 (
__˝u
)) \

155 : 0; }))

	)

156 
	#__CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

157 (
__exãnsi⁄__
 \

158 ({ 
size_t
 
__˝u
 = (
˝u
); \

159 
__˝u
 < 8 * (
£tsize
) \

160 ? ((((
__c⁄°
 
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

161 & 
	`__CPUMASK
 (
__˝u
))) != 0 \

162 : 0; }))

	)

164 
	#__CPU_COUNT_S
(
£tsize
, 
˝u£ç
) \

165 
	`__sched_˝ucou¡
 (
£tsize
, 
˝u£ç
)

	)

167 #i‡
__GNUC_PREREQ
 (2, 91)

168 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

169 (
	`__buûtö_memcmp
 (
˝u£ç1
, 
˝u£ç2
, 
£tsize
Ë=0)

	)

171 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

172 (
__exãnsi⁄__
 \

173 ({ 
__c⁄°
 
__˝u_mask
 *
__¨r1
 = (
˝u£ç1
)->
__bôs
; \

174 
__c⁄°
 
__˝u_mask
 *
__¨r2
 = (
˝u£ç2
)->
__bôs
; \

175 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

176 
size_t
 
__i
; \

177 
__i
 = 0; __ò< 
__imax
; ++__i) \

178 i‡(
__bôs
[
__i
] != __bits[__i]) \

180 
__i
 =
__imax
; }))

	)

183 
	#__CPU_OP_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, 
›
) \

184 (
__exãnsi⁄__
 \

185 ({ 
˝u_£t_t
 *
__de°
 = (
de°£t
); \

186 
__c⁄°
 
__˝u_mask
 *
__¨r1
 = (
§c£t1
)->
__bôs
; \

187 
__c⁄°
 
__˝u_mask
 *
__¨r2
 = (
§c£t2
)->
__bôs
; \

188 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

189 
size_t
 
__i
; \

190 
__i
 = 0; __ò< 
__imax
; ++__i) \

191 ((
__˝u_mask
 *Ë
__de°
->
__bôs
)[
__i
] = 
__¨r1
[__i] 
›
 
__¨r2
[__i]; \

192 
__de°
; }))

	)

194 
	#__CPU_ALLOC_SIZE
(
cou¡
) \

195 ((((
cou¡
Ë+ 
__NCPUBITS
 - 1Ë/ __NCPUBITSË*  (
__˝u_mask
))

	)

196 
	#__CPU_ALLOC
(
cou¡
Ë
	`__sched_˝uÆloc
 (cou¡)

	)

197 
	#__CPU_FREE
(
˝u£t
Ë
	`__sched_˝u‰ì
 (˝u£t)

	)

199 
__BEGIN_DECLS


201 
	$__sched_˝ucou¡
 (
size_t
 
__£tsize
, c⁄° 
˝u_£t_t
 *
__£ç
)

202 
__THROW
;

203 
˝u_£t_t
 *
	$__sched_˝uÆloc
 (
size_t
 
__cou¡
Ë
__THROW
 
__wur
;

204 
	$__sched_˝u‰ì
 (
˝u_£t_t
 *
__£t
Ë
__THROW
;

206 
__END_DECLS


	@
1
.
1
/usr/include
215
5374
410kern/boot/multiboot.h
410kern/boot/util.h
410kern/boot/util_cmdline.c
410kern/boot/util_lmm.c
410kern/inc/asm_style.h
410kern/inc/assert.h
410kern/inc/exec2obj.h
410kern/inc/kvmphys.h
410kern/inc/malloc.h
410kern/inc/stdarg.h
410kern/inc/stddef.h
410kern/inc/stdint.h
410kern/inc/types.h
410user/crt0.c
410user/exec2obj.c
410user/inc/410_tests.h
410user/inc/asm_style.h
410user/inc/assert.h
410user/inc/cond.h
410user/inc/malloc.h
410user/inc/mutex.h
410user/inc/rand.h
410user/inc/rwlock.h
410user/inc/sem.h
410user/inc/stdarg.h
410user/inc/stddef.h
410user/inc/stdint.h
410user/inc/thread.h
410user/inc/types.h
410user/libRNG/mt19937int.c
410user/libmalloc/malloc.c
410user/libmalloc/memlib.c
410user/libmalloc/memlib.h
410user/libmalloc/mm_malloc.c
410user/libmalloc/mm_malloc.h
410user/libsimics/simics.h
410user/libsimics/simics_c.c
410user/libstdio/doprnt.c
410user/libstdio/doprnt.h
410user/libstdio/doscan.c
410user/libstdio/doscan.h
410user/libstdio/hexdump.c
410user/libstdio/printf.c
410user/libstdio/putchar.c
410user/libstdio/puts.c
410user/libstdio/sprintf.c
410user/libstdio/sscanf.c
410user/libstdio/stdio.h
410user/libstdlib/abs.c
410user/libstdlib/atol.c
410user/libstdlib/ctype.c
410user/libstdlib/ctype.h
410user/libstdlib/exit.c
410user/libstdlib/qsort.c
410user/libstdlib/rand.c
410user/libstdlib/stdlib.h
410user/libstdlib/strtol.c
410user/libstdlib/strtoul.c
410user/libstring/memcmp.c
410user/libstring/memset.c
410user/libstring/rindex.c
410user/libstring/strcat.c
410user/libstring/strchr.c
410user/libstring/strcmp.c
410user/libstring/strcpy.c
410user/libstring/strcspn.c
410user/libstring/strdup.c
410user/libstring/string.h
410user/libstring/strlen.c
410user/libstring/strncat.c
410user/libstring/strncmp.c
410user/libstring/strncpy.c
410user/libstring/strpbrk.c
410user/libstring/strrchr.c
410user/libstring/strspn.c
410user/libstring/strstr.c
410user/libstring/strtok.c
410user/libtest/report.c
410user/libtest/report.h
410user/libtest/test.c
410user/libtest/test.h
410user/libthrgrp/thrgrp.c
410user/libthrgrp/thrgrp.h
410user/libx86/gccisms.c
410user/progs/actual_wait.c
410user/progs/agility_drill.c
410user/progs/beady_test.c
410user/progs/bistromath.c
410user/progs/cat.c
410user/progs/cvar_test.c
410user/progs/cyclone.c
410user/progs/excellent.c
410user/progs/getpid_test1.c
410user/progs/halt_test.c
410user/progs/idle.c
410user/progs/init.c
410user/progs/join_specific_test.c
410user/progs/juggle.c
410user/progs/largetest.c
410user/progs/mandelbrot.c
410user/progs/misbehave.c
410user/progs/misbehave_wrap.c
410user/progs/multitest.c
410user/progs/nibbles.c
410user/progs/paraguay.c
410user/progs/racer.c
410user/progs/rwlock_downgrade_read_test.c
410user/progs/shell.c
410user/progs/stack_test1.c
410user/progs/startle.c
410user/progs/switzerland.c
410user/progs/thr_exit_join.c
410user/progs/wild_test1.c
spec/common_kern.h
spec/compiler.h
spec/contracts.h
spec/limits.h
spec/syscall.h
spec/syscall_int.h
spec/ureg.h
user/autostack.c
user/inc/common.h
user/inc/cond_type.h
user/inc/mutex_type.h
user/inc/rwlock_type.h
user/inc/sem_type.h
user/inc/skip_list_common.h
user/inc/thread_common.h
user/inc/util.h
user/libsyscall/syscall.c
user/libthread/cond.c
user/libthread/malloc.c
user/libthread/mutex.c
user/libthread/mutex_internals.h
user/libthread/panic.c
user/libthread/rwlock.c
user/libthread/sem.c
user/libthread/skip_list.c
user/libthread/skip_list_int.h
user/libthread/thr_internals.h
user/libthread/thread.c
user/progs/cond_test.c
user/progs/excellence_temp.c
user/progs/mutex_test.c
user/progs/paraguay_temp.c
user/progs/sem_test.c
user/progs/skip_list_test.c
user/progs/sleep_test.c
user/progs/test1.c
user/progs/test2.c
user/progs/test_exit.c
user/progs/thread_join_test.c
user/progs/thread_yield_test.c
vq_challenge/variable_queue.h
vq_challenge/vqtest.c
/usr/include/assert.h
/usr/include/ctype.h
/usr/include/malloc.h
/usr/include/stdint.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/syscall.h
/usr/include/alloca.h
/usr/include/bits/stdio-ldbl.h
/usr/include/bits/stdio.h
/usr/include/bits/stdio2.h
/usr/include/bits/stdio_lim.h
/usr/include/bits/stdlib-ldbl.h
/usr/include/bits/stdlib.h
/usr/include/bits/string.h
/usr/include/bits/string2.h
/usr/include/bits/string3.h
/usr/include/bits/sys_errlist.h
/usr/include/bits/types.h
/usr/include/bits/waitflags.h
/usr/include/bits/waitstatus.h
/usr/include/bits/wchar.h
/usr/include/bits/wordsize.h
/usr/include/endian.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/libio.h
/usr/include/sys/syscall.h
/usr/include/sys/types.h
/usr/include/xlocale.h
/usr/include/_G_config.h
/usr/include/asm/unistd.h
/usr/include/bits/byteswap.h
/usr/include/bits/endian.h
/usr/include/bits/libio-ldbl.h
/usr/include/bits/pthreadtypes.h
/usr/include/bits/stdio-lock.h
/usr/include/bits/syscall.h
/usr/include/bits/typesizes.h
/usr/include/gnu/stubs.h
/usr/include/sys/cdefs.h
/usr/include/sys/select.h
/usr/include/sys/sysmacros.h
/usr/include/time.h
/usr/include/bits/libc-lock.h
/usr/include/bits/select.h
/usr/include/bits/sigset.h
/usr/include/bits/time.h
/usr/include/gconv.h
/usr/include/gnu/stubs-32.h
/usr/include/gnu/stubs-64.h
/usr/include/wchar.h
/usr/include/bits/wchar-ldbl.h
/usr/include/bits/wchar2.h
/usr/include/pthread.h
/usr/include/wctype.h
/usr/include/bits/setjmp.h
/usr/include/sched.h
/usr/include/bits/sched.h
